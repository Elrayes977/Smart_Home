
Final_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000768a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002b2  00800060  0000768a  0000771e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000057  00800312  00800312  000079d0  2**0
                  ALLOC
  3 .stab         00008c10  00000000  00000000  000079d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002f27  00000000  00000000  000105e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  00013507  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000258  00000000  00000000  00013707  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000028f3  00000000  00000000  0001395f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000168f  00000000  00000000  00016252  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000014df  00000000  00000000  000178e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000220  00000000  00000000  00018dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000357  00000000  00000000  00018fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000cfc  00000000  00000000  00019337  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001a033  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 45 11 	jmp	0x228a	; 0x228a <__vector_1>
       8:	0c 94 78 11 	jmp	0x22f0	; 0x22f0 <__vector_2>
       c:	0c 94 ab 11 	jmp	0x2356	; 0x2356 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 ca 0e 	jmp	0x1d94	; 0x1d94 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 fe 0e 	jmp	0x1dfc	; 0x1dfc <__vector_9>
      28:	0c 94 ed 0a 	jmp	0x15da	; 0x15da <__vector_10>
      2c:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 21 0d 	jmp	0x1a42	; 0x1a42 <__vector_13>
      38:	0c 94 54 0d 	jmp	0x1aa8	; 0x1aa8 <__vector_14>
      3c:	0c 94 87 0d 	jmp	0x1b0e	; 0x1b0e <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e8       	ldi	r30, 0x8A	; 138
      68:	f6 e7       	ldi	r31, 0x76	; 118
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 31       	cpi	r26, 0x12	; 18
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a2 e1       	ldi	r26, 0x12	; 18
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 36       	cpi	r26, 0x69	; 105
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d6 33 	call	0x67ac	; 0x67ac <main>
      8a:	0c 94 43 3b 	jmp	0x7686	; 0x7686 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 9d 02 	call	0x53a	; 0x53a <__subsf3>
      be:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <__floatundisf>:
      ea:	a2 e0       	ldi	r26, 0x02	; 2
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 90 3a 	jmp	0x7520	; 0x7520 <__prologue_saves__>
      f6:	12 2f       	mov	r17, r18
      f8:	b3 2e       	mov	r11, r19
      fa:	a4 2e       	mov	r10, r20
      fc:	95 2e       	mov	r9, r21
      fe:	86 2e       	mov	r8, r22
     100:	37 2e       	mov	r3, r23
     102:	28 2e       	mov	r2, r24
     104:	9a 83       	std	Y+2, r25	; 0x02
     106:	c2 2e       	mov	r12, r18
     108:	d3 2e       	mov	r13, r19
     10a:	e4 2e       	mov	r14, r20
     10c:	f5 2e       	mov	r15, r21
     10e:	a7 01       	movw	r20, r14
     110:	96 01       	movw	r18, r12
     112:	60 e0       	ldi	r22, 0x00	; 0
     114:	70 e0       	ldi	r23, 0x00	; 0
     116:	80 e0       	ldi	r24, 0x00	; 0
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	21 17       	cp	r18, r17
     11c:	a1 f4       	brne	.+40     	; 0x146 <__floatundisf+0x5c>
     11e:	3b 15       	cp	r19, r11
     120:	91 f4       	brne	.+36     	; 0x146 <__floatundisf+0x5c>
     122:	4a 15       	cp	r20, r10
     124:	81 f4       	brne	.+32     	; 0x146 <__floatundisf+0x5c>
     126:	59 15       	cp	r21, r9
     128:	71 f4       	brne	.+28     	; 0x146 <__floatundisf+0x5c>
     12a:	68 15       	cp	r22, r8
     12c:	61 f4       	brne	.+24     	; 0x146 <__floatundisf+0x5c>
     12e:	73 15       	cp	r23, r3
     130:	51 f4       	brne	.+20     	; 0x146 <__floatundisf+0x5c>
     132:	82 15       	cp	r24, r2
     134:	41 f4       	brne	.+16     	; 0x146 <__floatundisf+0x5c>
     136:	aa 81       	ldd	r26, Y+2	; 0x02
     138:	9a 17       	cp	r25, r26
     13a:	29 f4       	brne	.+10     	; 0x146 <__floatundisf+0x5c>
     13c:	c7 01       	movw	r24, r14
     13e:	b6 01       	movw	r22, r12
     140:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatunsisf>
     144:	aa c0       	rjmp	.+340    	; 0x29a <__floatundisf+0x1b0>
     146:	21 2f       	mov	r18, r17
     148:	3b 2d       	mov	r19, r11
     14a:	4a 2d       	mov	r20, r10
     14c:	59 2d       	mov	r21, r9
     14e:	68 2d       	mov	r22, r8
     150:	73 2d       	mov	r23, r3
     152:	82 2d       	mov	r24, r2
     154:	9a 81       	ldd	r25, Y+2	; 0x02
     156:	00 e2       	ldi	r16, 0x20	; 32
     158:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__lshrdi3>
     15c:	c9 01       	movw	r24, r18
     15e:	da 01       	movw	r26, r20
     160:	80 30       	cpi	r24, 0x00	; 0
     162:	e0 e0       	ldi	r30, 0x00	; 0
     164:	9e 07       	cpc	r25, r30
     166:	e1 e0       	ldi	r30, 0x01	; 1
     168:	ae 07       	cpc	r26, r30
     16a:	e0 e0       	ldi	r30, 0x00	; 0
     16c:	be 07       	cpc	r27, r30
     16e:	80 f4       	brcc	.+32     	; 0x190 <__floatundisf+0xa6>
     170:	8f 3f       	cpi	r24, 0xFF	; 255
     172:	91 05       	cpc	r25, r1
     174:	a1 05       	cpc	r26, r1
     176:	b1 05       	cpc	r27, r1
     178:	31 f0       	breq	.+12     	; 0x186 <__floatundisf+0x9c>
     17a:	28 f0       	brcs	.+10     	; 0x186 <__floatundisf+0x9c>
     17c:	28 e0       	ldi	r18, 0x08	; 8
     17e:	30 e0       	ldi	r19, 0x00	; 0
     180:	40 e0       	ldi	r20, 0x00	; 0
     182:	50 e0       	ldi	r21, 0x00	; 0
     184:	16 c0       	rjmp	.+44     	; 0x1b2 <__floatundisf+0xc8>
     186:	20 e0       	ldi	r18, 0x00	; 0
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	40 e0       	ldi	r20, 0x00	; 0
     18c:	50 e0       	ldi	r21, 0x00	; 0
     18e:	11 c0       	rjmp	.+34     	; 0x1b2 <__floatundisf+0xc8>
     190:	80 30       	cpi	r24, 0x00	; 0
     192:	f0 e0       	ldi	r31, 0x00	; 0
     194:	9f 07       	cpc	r25, r31
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	af 07       	cpc	r26, r31
     19a:	f1 e0       	ldi	r31, 0x01	; 1
     19c:	bf 07       	cpc	r27, r31
     19e:	28 f0       	brcs	.+10     	; 0x1aa <__floatundisf+0xc0>
     1a0:	28 e1       	ldi	r18, 0x18	; 24
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	40 e0       	ldi	r20, 0x00	; 0
     1a6:	50 e0       	ldi	r21, 0x00	; 0
     1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <__floatundisf+0xc8>
     1aa:	20 e1       	ldi	r18, 0x10	; 16
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	40 e0       	ldi	r20, 0x00	; 0
     1b0:	50 e0       	ldi	r21, 0x00	; 0
     1b2:	02 2e       	mov	r0, r18
     1b4:	04 c0       	rjmp	.+8      	; 0x1be <__floatundisf+0xd4>
     1b6:	b6 95       	lsr	r27
     1b8:	a7 95       	ror	r26
     1ba:	97 95       	ror	r25
     1bc:	87 95       	ror	r24
     1be:	0a 94       	dec	r0
     1c0:	d2 f7       	brpl	.-12     	; 0x1b6 <__floatundisf+0xcc>
     1c2:	fc 01       	movw	r30, r24
     1c4:	e6 51       	subi	r30, 0x16	; 22
     1c6:	fe 4f       	sbci	r31, 0xFE	; 254
     1c8:	80 81       	ld	r24, Z
     1ca:	29 01       	movw	r4, r18
     1cc:	3a 01       	movw	r6, r20
     1ce:	48 0e       	add	r4, r24
     1d0:	51 1c       	adc	r5, r1
     1d2:	61 1c       	adc	r6, r1
     1d4:	71 1c       	adc	r7, r1
     1d6:	49 82       	std	Y+1, r4	; 0x01
     1d8:	21 2f       	mov	r18, r17
     1da:	3b 2d       	mov	r19, r11
     1dc:	4a 2d       	mov	r20, r10
     1de:	59 2d       	mov	r21, r9
     1e0:	68 2d       	mov	r22, r8
     1e2:	73 2d       	mov	r23, r3
     1e4:	82 2d       	mov	r24, r2
     1e6:	9a 81       	ldd	r25, Y+2	; 0x02
     1e8:	04 2d       	mov	r16, r4
     1ea:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__lshrdi3>
     1ee:	c9 01       	movw	r24, r18
     1f0:	da 01       	movw	r26, r20
     1f2:	4c 01       	movw	r8, r24
     1f4:	5d 01       	movw	r10, r26
     1f6:	80 e2       	ldi	r24, 0x20	; 32
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	84 19       	sub	r24, r4
     1fc:	95 09       	sbc	r25, r5
     1fe:	04 c0       	rjmp	.+8      	; 0x208 <__floatundisf+0x11e>
     200:	cc 0c       	add	r12, r12
     202:	dd 1c       	adc	r13, r13
     204:	ee 1c       	adc	r14, r14
     206:	ff 1c       	adc	r15, r15
     208:	8a 95       	dec	r24
     20a:	d2 f7       	brpl	.-12     	; 0x200 <__floatundisf+0x116>
     20c:	c1 14       	cp	r12, r1
     20e:	d1 04       	cpc	r13, r1
     210:	e1 04       	cpc	r14, r1
     212:	f1 04       	cpc	r15, r1
     214:	41 f0       	breq	.+16     	; 0x226 <__floatundisf+0x13c>
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	a0 e0       	ldi	r26, 0x00	; 0
     21c:	b0 e0       	ldi	r27, 0x00	; 0
     21e:	88 2a       	or	r8, r24
     220:	99 2a       	or	r9, r25
     222:	aa 2a       	or	r10, r26
     224:	bb 2a       	or	r11, r27
     226:	90 e2       	ldi	r25, 0x20	; 32
     228:	49 16       	cp	r4, r25
     22a:	51 04       	cpc	r5, r1
     22c:	61 04       	cpc	r6, r1
     22e:	71 04       	cpc	r7, r1
     230:	59 f4       	brne	.+22     	; 0x248 <__floatundisf+0x15e>
     232:	0f 2e       	mov	r0, r31
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	ef 2e       	mov	r14, r31
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	ff 2e       	mov	r15, r31
     23c:	f0 e8       	ldi	r31, 0x80	; 128
     23e:	0f 2f       	mov	r16, r31
     240:	ff e4       	ldi	r31, 0x4F	; 79
     242:	1f 2f       	mov	r17, r31
     244:	f0 2d       	mov	r31, r0
     246:	21 c0       	rjmp	.+66     	; 0x28a <__floatundisf+0x1a0>
     248:	af e1       	ldi	r26, 0x1F	; 31
     24a:	4a 16       	cp	r4, r26
     24c:	51 04       	cpc	r5, r1
     24e:	61 04       	cpc	r6, r1
     250:	71 04       	cpc	r7, r1
     252:	59 f4       	brne	.+22     	; 0x26a <__floatundisf+0x180>
     254:	0f 2e       	mov	r0, r31
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	ef 2e       	mov	r14, r31
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	ff 2e       	mov	r15, r31
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	0f 2f       	mov	r16, r31
     262:	ff e4       	ldi	r31, 0x4F	; 79
     264:	1f 2f       	mov	r17, r31
     266:	f0 2d       	mov	r31, r0
     268:	10 c0       	rjmp	.+32     	; 0x28a <__floatundisf+0x1a0>
     26a:	61 e0       	ldi	r22, 0x01	; 1
     26c:	70 e0       	ldi	r23, 0x00	; 0
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	09 80       	ldd	r0, Y+1	; 0x01
     274:	04 c0       	rjmp	.+8      	; 0x27e <__floatundisf+0x194>
     276:	66 0f       	add	r22, r22
     278:	77 1f       	adc	r23, r23
     27a:	88 1f       	adc	r24, r24
     27c:	99 1f       	adc	r25, r25
     27e:	0a 94       	dec	r0
     280:	d2 f7       	brpl	.-12     	; 0x276 <__floatundisf+0x18c>
     282:	0e 94 31 05 	call	0xa62	; 0xa62 <__floatsisf>
     286:	7b 01       	movw	r14, r22
     288:	8c 01       	movw	r16, r24
     28a:	c5 01       	movw	r24, r10
     28c:	b4 01       	movw	r22, r8
     28e:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatunsisf>
     292:	a8 01       	movw	r20, r16
     294:	97 01       	movw	r18, r14
     296:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
     29a:	22 96       	adiw	r28, 0x02	; 2
     29c:	e2 e1       	ldi	r30, 0x12	; 18
     29e:	0c 94 ac 3a 	jmp	0x7558	; 0x7558 <__epilogue_restores__>

000002a2 <_fpadd_parts>:
     2a2:	a0 e0       	ldi	r26, 0x00	; 0
     2a4:	b0 e0       	ldi	r27, 0x00	; 0
     2a6:	e7 e5       	ldi	r30, 0x57	; 87
     2a8:	f1 e0       	ldi	r31, 0x01	; 1
     2aa:	0c 94 90 3a 	jmp	0x7520	; 0x7520 <__prologue_saves__>
     2ae:	dc 01       	movw	r26, r24
     2b0:	2b 01       	movw	r4, r22
     2b2:	fa 01       	movw	r30, r20
     2b4:	9c 91       	ld	r25, X
     2b6:	92 30       	cpi	r25, 0x02	; 2
     2b8:	08 f4       	brcc	.+2      	; 0x2bc <_fpadd_parts+0x1a>
     2ba:	39 c1       	rjmp	.+626    	; 0x52e <_fpadd_parts+0x28c>
     2bc:	eb 01       	movw	r28, r22
     2be:	88 81       	ld	r24, Y
     2c0:	82 30       	cpi	r24, 0x02	; 2
     2c2:	08 f4       	brcc	.+2      	; 0x2c6 <_fpadd_parts+0x24>
     2c4:	33 c1       	rjmp	.+614    	; 0x52c <_fpadd_parts+0x28a>
     2c6:	94 30       	cpi	r25, 0x04	; 4
     2c8:	69 f4       	brne	.+26     	; 0x2e4 <_fpadd_parts+0x42>
     2ca:	84 30       	cpi	r24, 0x04	; 4
     2cc:	09 f0       	breq	.+2      	; 0x2d0 <_fpadd_parts+0x2e>
     2ce:	2f c1       	rjmp	.+606    	; 0x52e <_fpadd_parts+0x28c>
     2d0:	11 96       	adiw	r26, 0x01	; 1
     2d2:	9c 91       	ld	r25, X
     2d4:	11 97       	sbiw	r26, 0x01	; 1
     2d6:	89 81       	ldd	r24, Y+1	; 0x01
     2d8:	98 17       	cp	r25, r24
     2da:	09 f4       	brne	.+2      	; 0x2de <_fpadd_parts+0x3c>
     2dc:	28 c1       	rjmp	.+592    	; 0x52e <_fpadd_parts+0x28c>
     2de:	a2 ee       	ldi	r26, 0xE2	; 226
     2e0:	b1 e0       	ldi	r27, 0x01	; 1
     2e2:	25 c1       	rjmp	.+586    	; 0x52e <_fpadd_parts+0x28c>
     2e4:	84 30       	cpi	r24, 0x04	; 4
     2e6:	09 f4       	brne	.+2      	; 0x2ea <_fpadd_parts+0x48>
     2e8:	21 c1       	rjmp	.+578    	; 0x52c <_fpadd_parts+0x28a>
     2ea:	82 30       	cpi	r24, 0x02	; 2
     2ec:	a9 f4       	brne	.+42     	; 0x318 <_fpadd_parts+0x76>
     2ee:	92 30       	cpi	r25, 0x02	; 2
     2f0:	09 f0       	breq	.+2      	; 0x2f4 <_fpadd_parts+0x52>
     2f2:	1d c1       	rjmp	.+570    	; 0x52e <_fpadd_parts+0x28c>
     2f4:	9a 01       	movw	r18, r20
     2f6:	ad 01       	movw	r20, r26
     2f8:	88 e0       	ldi	r24, 0x08	; 8
     2fa:	ea 01       	movw	r28, r20
     2fc:	09 90       	ld	r0, Y+
     2fe:	ae 01       	movw	r20, r28
     300:	e9 01       	movw	r28, r18
     302:	09 92       	st	Y+, r0
     304:	9e 01       	movw	r18, r28
     306:	81 50       	subi	r24, 0x01	; 1
     308:	c1 f7       	brne	.-16     	; 0x2fa <_fpadd_parts+0x58>
     30a:	e2 01       	movw	r28, r4
     30c:	89 81       	ldd	r24, Y+1	; 0x01
     30e:	11 96       	adiw	r26, 0x01	; 1
     310:	9c 91       	ld	r25, X
     312:	89 23       	and	r24, r25
     314:	81 83       	std	Z+1, r24	; 0x01
     316:	08 c1       	rjmp	.+528    	; 0x528 <_fpadd_parts+0x286>
     318:	92 30       	cpi	r25, 0x02	; 2
     31a:	09 f4       	brne	.+2      	; 0x31e <_fpadd_parts+0x7c>
     31c:	07 c1       	rjmp	.+526    	; 0x52c <_fpadd_parts+0x28a>
     31e:	12 96       	adiw	r26, 0x02	; 2
     320:	2d 90       	ld	r2, X+
     322:	3c 90       	ld	r3, X
     324:	13 97       	sbiw	r26, 0x03	; 3
     326:	eb 01       	movw	r28, r22
     328:	8a 81       	ldd	r24, Y+2	; 0x02
     32a:	9b 81       	ldd	r25, Y+3	; 0x03
     32c:	14 96       	adiw	r26, 0x04	; 4
     32e:	ad 90       	ld	r10, X+
     330:	bd 90       	ld	r11, X+
     332:	cd 90       	ld	r12, X+
     334:	dc 90       	ld	r13, X
     336:	17 97       	sbiw	r26, 0x07	; 7
     338:	ec 80       	ldd	r14, Y+4	; 0x04
     33a:	fd 80       	ldd	r15, Y+5	; 0x05
     33c:	0e 81       	ldd	r16, Y+6	; 0x06
     33e:	1f 81       	ldd	r17, Y+7	; 0x07
     340:	91 01       	movw	r18, r2
     342:	28 1b       	sub	r18, r24
     344:	39 0b       	sbc	r19, r25
     346:	b9 01       	movw	r22, r18
     348:	37 ff       	sbrs	r19, 7
     34a:	04 c0       	rjmp	.+8      	; 0x354 <_fpadd_parts+0xb2>
     34c:	66 27       	eor	r22, r22
     34e:	77 27       	eor	r23, r23
     350:	62 1b       	sub	r22, r18
     352:	73 0b       	sbc	r23, r19
     354:	60 32       	cpi	r22, 0x20	; 32
     356:	71 05       	cpc	r23, r1
     358:	0c f0       	brlt	.+2      	; 0x35c <_fpadd_parts+0xba>
     35a:	61 c0       	rjmp	.+194    	; 0x41e <_fpadd_parts+0x17c>
     35c:	12 16       	cp	r1, r18
     35e:	13 06       	cpc	r1, r19
     360:	6c f5       	brge	.+90     	; 0x3bc <_fpadd_parts+0x11a>
     362:	37 01       	movw	r6, r14
     364:	48 01       	movw	r8, r16
     366:	06 2e       	mov	r0, r22
     368:	04 c0       	rjmp	.+8      	; 0x372 <_fpadd_parts+0xd0>
     36a:	96 94       	lsr	r9
     36c:	87 94       	ror	r8
     36e:	77 94       	ror	r7
     370:	67 94       	ror	r6
     372:	0a 94       	dec	r0
     374:	d2 f7       	brpl	.-12     	; 0x36a <_fpadd_parts+0xc8>
     376:	21 e0       	ldi	r18, 0x01	; 1
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	40 e0       	ldi	r20, 0x00	; 0
     37c:	50 e0       	ldi	r21, 0x00	; 0
     37e:	04 c0       	rjmp	.+8      	; 0x388 <_fpadd_parts+0xe6>
     380:	22 0f       	add	r18, r18
     382:	33 1f       	adc	r19, r19
     384:	44 1f       	adc	r20, r20
     386:	55 1f       	adc	r21, r21
     388:	6a 95       	dec	r22
     38a:	d2 f7       	brpl	.-12     	; 0x380 <_fpadd_parts+0xde>
     38c:	21 50       	subi	r18, 0x01	; 1
     38e:	30 40       	sbci	r19, 0x00	; 0
     390:	40 40       	sbci	r20, 0x00	; 0
     392:	50 40       	sbci	r21, 0x00	; 0
     394:	2e 21       	and	r18, r14
     396:	3f 21       	and	r19, r15
     398:	40 23       	and	r20, r16
     39a:	51 23       	and	r21, r17
     39c:	21 15       	cp	r18, r1
     39e:	31 05       	cpc	r19, r1
     3a0:	41 05       	cpc	r20, r1
     3a2:	51 05       	cpc	r21, r1
     3a4:	21 f0       	breq	.+8      	; 0x3ae <_fpadd_parts+0x10c>
     3a6:	21 e0       	ldi	r18, 0x01	; 1
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	40 e0       	ldi	r20, 0x00	; 0
     3ac:	50 e0       	ldi	r21, 0x00	; 0
     3ae:	79 01       	movw	r14, r18
     3b0:	8a 01       	movw	r16, r20
     3b2:	e6 28       	or	r14, r6
     3b4:	f7 28       	or	r15, r7
     3b6:	08 29       	or	r16, r8
     3b8:	19 29       	or	r17, r9
     3ba:	3c c0       	rjmp	.+120    	; 0x434 <_fpadd_parts+0x192>
     3bc:	23 2b       	or	r18, r19
     3be:	d1 f1       	breq	.+116    	; 0x434 <_fpadd_parts+0x192>
     3c0:	26 0e       	add	r2, r22
     3c2:	37 1e       	adc	r3, r23
     3c4:	35 01       	movw	r6, r10
     3c6:	46 01       	movw	r8, r12
     3c8:	06 2e       	mov	r0, r22
     3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <_fpadd_parts+0x132>
     3cc:	96 94       	lsr	r9
     3ce:	87 94       	ror	r8
     3d0:	77 94       	ror	r7
     3d2:	67 94       	ror	r6
     3d4:	0a 94       	dec	r0
     3d6:	d2 f7       	brpl	.-12     	; 0x3cc <_fpadd_parts+0x12a>
     3d8:	21 e0       	ldi	r18, 0x01	; 1
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	40 e0       	ldi	r20, 0x00	; 0
     3de:	50 e0       	ldi	r21, 0x00	; 0
     3e0:	04 c0       	rjmp	.+8      	; 0x3ea <_fpadd_parts+0x148>
     3e2:	22 0f       	add	r18, r18
     3e4:	33 1f       	adc	r19, r19
     3e6:	44 1f       	adc	r20, r20
     3e8:	55 1f       	adc	r21, r21
     3ea:	6a 95       	dec	r22
     3ec:	d2 f7       	brpl	.-12     	; 0x3e2 <_fpadd_parts+0x140>
     3ee:	21 50       	subi	r18, 0x01	; 1
     3f0:	30 40       	sbci	r19, 0x00	; 0
     3f2:	40 40       	sbci	r20, 0x00	; 0
     3f4:	50 40       	sbci	r21, 0x00	; 0
     3f6:	2a 21       	and	r18, r10
     3f8:	3b 21       	and	r19, r11
     3fa:	4c 21       	and	r20, r12
     3fc:	5d 21       	and	r21, r13
     3fe:	21 15       	cp	r18, r1
     400:	31 05       	cpc	r19, r1
     402:	41 05       	cpc	r20, r1
     404:	51 05       	cpc	r21, r1
     406:	21 f0       	breq	.+8      	; 0x410 <_fpadd_parts+0x16e>
     408:	21 e0       	ldi	r18, 0x01	; 1
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	40 e0       	ldi	r20, 0x00	; 0
     40e:	50 e0       	ldi	r21, 0x00	; 0
     410:	59 01       	movw	r10, r18
     412:	6a 01       	movw	r12, r20
     414:	a6 28       	or	r10, r6
     416:	b7 28       	or	r11, r7
     418:	c8 28       	or	r12, r8
     41a:	d9 28       	or	r13, r9
     41c:	0b c0       	rjmp	.+22     	; 0x434 <_fpadd_parts+0x192>
     41e:	82 15       	cp	r24, r2
     420:	93 05       	cpc	r25, r3
     422:	2c f0       	brlt	.+10     	; 0x42e <_fpadd_parts+0x18c>
     424:	1c 01       	movw	r2, r24
     426:	aa 24       	eor	r10, r10
     428:	bb 24       	eor	r11, r11
     42a:	65 01       	movw	r12, r10
     42c:	03 c0       	rjmp	.+6      	; 0x434 <_fpadd_parts+0x192>
     42e:	ee 24       	eor	r14, r14
     430:	ff 24       	eor	r15, r15
     432:	87 01       	movw	r16, r14
     434:	11 96       	adiw	r26, 0x01	; 1
     436:	9c 91       	ld	r25, X
     438:	d2 01       	movw	r26, r4
     43a:	11 96       	adiw	r26, 0x01	; 1
     43c:	8c 91       	ld	r24, X
     43e:	98 17       	cp	r25, r24
     440:	09 f4       	brne	.+2      	; 0x444 <_fpadd_parts+0x1a2>
     442:	45 c0       	rjmp	.+138    	; 0x4ce <_fpadd_parts+0x22c>
     444:	99 23       	and	r25, r25
     446:	39 f0       	breq	.+14     	; 0x456 <_fpadd_parts+0x1b4>
     448:	a8 01       	movw	r20, r16
     44a:	97 01       	movw	r18, r14
     44c:	2a 19       	sub	r18, r10
     44e:	3b 09       	sbc	r19, r11
     450:	4c 09       	sbc	r20, r12
     452:	5d 09       	sbc	r21, r13
     454:	06 c0       	rjmp	.+12     	; 0x462 <_fpadd_parts+0x1c0>
     456:	a6 01       	movw	r20, r12
     458:	95 01       	movw	r18, r10
     45a:	2e 19       	sub	r18, r14
     45c:	3f 09       	sbc	r19, r15
     45e:	40 0b       	sbc	r20, r16
     460:	51 0b       	sbc	r21, r17
     462:	57 fd       	sbrc	r21, 7
     464:	08 c0       	rjmp	.+16     	; 0x476 <_fpadd_parts+0x1d4>
     466:	11 82       	std	Z+1, r1	; 0x01
     468:	33 82       	std	Z+3, r3	; 0x03
     46a:	22 82       	std	Z+2, r2	; 0x02
     46c:	24 83       	std	Z+4, r18	; 0x04
     46e:	35 83       	std	Z+5, r19	; 0x05
     470:	46 83       	std	Z+6, r20	; 0x06
     472:	57 83       	std	Z+7, r21	; 0x07
     474:	1d c0       	rjmp	.+58     	; 0x4b0 <_fpadd_parts+0x20e>
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	81 83       	std	Z+1, r24	; 0x01
     47a:	33 82       	std	Z+3, r3	; 0x03
     47c:	22 82       	std	Z+2, r2	; 0x02
     47e:	88 27       	eor	r24, r24
     480:	99 27       	eor	r25, r25
     482:	dc 01       	movw	r26, r24
     484:	82 1b       	sub	r24, r18
     486:	93 0b       	sbc	r25, r19
     488:	a4 0b       	sbc	r26, r20
     48a:	b5 0b       	sbc	r27, r21
     48c:	84 83       	std	Z+4, r24	; 0x04
     48e:	95 83       	std	Z+5, r25	; 0x05
     490:	a6 83       	std	Z+6, r26	; 0x06
     492:	b7 83       	std	Z+7, r27	; 0x07
     494:	0d c0       	rjmp	.+26     	; 0x4b0 <_fpadd_parts+0x20e>
     496:	22 0f       	add	r18, r18
     498:	33 1f       	adc	r19, r19
     49a:	44 1f       	adc	r20, r20
     49c:	55 1f       	adc	r21, r21
     49e:	24 83       	std	Z+4, r18	; 0x04
     4a0:	35 83       	std	Z+5, r19	; 0x05
     4a2:	46 83       	std	Z+6, r20	; 0x06
     4a4:	57 83       	std	Z+7, r21	; 0x07
     4a6:	82 81       	ldd	r24, Z+2	; 0x02
     4a8:	93 81       	ldd	r25, Z+3	; 0x03
     4aa:	01 97       	sbiw	r24, 0x01	; 1
     4ac:	93 83       	std	Z+3, r25	; 0x03
     4ae:	82 83       	std	Z+2, r24	; 0x02
     4b0:	24 81       	ldd	r18, Z+4	; 0x04
     4b2:	35 81       	ldd	r19, Z+5	; 0x05
     4b4:	46 81       	ldd	r20, Z+6	; 0x06
     4b6:	57 81       	ldd	r21, Z+7	; 0x07
     4b8:	da 01       	movw	r26, r20
     4ba:	c9 01       	movw	r24, r18
     4bc:	01 97       	sbiw	r24, 0x01	; 1
     4be:	a1 09       	sbc	r26, r1
     4c0:	b1 09       	sbc	r27, r1
     4c2:	8f 5f       	subi	r24, 0xFF	; 255
     4c4:	9f 4f       	sbci	r25, 0xFF	; 255
     4c6:	af 4f       	sbci	r26, 0xFF	; 255
     4c8:	bf 43       	sbci	r27, 0x3F	; 63
     4ca:	28 f3       	brcs	.-54     	; 0x496 <_fpadd_parts+0x1f4>
     4cc:	0b c0       	rjmp	.+22     	; 0x4e4 <_fpadd_parts+0x242>
     4ce:	91 83       	std	Z+1, r25	; 0x01
     4d0:	33 82       	std	Z+3, r3	; 0x03
     4d2:	22 82       	std	Z+2, r2	; 0x02
     4d4:	ea 0c       	add	r14, r10
     4d6:	fb 1c       	adc	r15, r11
     4d8:	0c 1d       	adc	r16, r12
     4da:	1d 1d       	adc	r17, r13
     4dc:	e4 82       	std	Z+4, r14	; 0x04
     4de:	f5 82       	std	Z+5, r15	; 0x05
     4e0:	06 83       	std	Z+6, r16	; 0x06
     4e2:	17 83       	std	Z+7, r17	; 0x07
     4e4:	83 e0       	ldi	r24, 0x03	; 3
     4e6:	80 83       	st	Z, r24
     4e8:	24 81       	ldd	r18, Z+4	; 0x04
     4ea:	35 81       	ldd	r19, Z+5	; 0x05
     4ec:	46 81       	ldd	r20, Z+6	; 0x06
     4ee:	57 81       	ldd	r21, Z+7	; 0x07
     4f0:	57 ff       	sbrs	r21, 7
     4f2:	1a c0       	rjmp	.+52     	; 0x528 <_fpadd_parts+0x286>
     4f4:	c9 01       	movw	r24, r18
     4f6:	aa 27       	eor	r26, r26
     4f8:	97 fd       	sbrc	r25, 7
     4fa:	a0 95       	com	r26
     4fc:	ba 2f       	mov	r27, r26
     4fe:	81 70       	andi	r24, 0x01	; 1
     500:	90 70       	andi	r25, 0x00	; 0
     502:	a0 70       	andi	r26, 0x00	; 0
     504:	b0 70       	andi	r27, 0x00	; 0
     506:	56 95       	lsr	r21
     508:	47 95       	ror	r20
     50a:	37 95       	ror	r19
     50c:	27 95       	ror	r18
     50e:	82 2b       	or	r24, r18
     510:	93 2b       	or	r25, r19
     512:	a4 2b       	or	r26, r20
     514:	b5 2b       	or	r27, r21
     516:	84 83       	std	Z+4, r24	; 0x04
     518:	95 83       	std	Z+5, r25	; 0x05
     51a:	a6 83       	std	Z+6, r26	; 0x06
     51c:	b7 83       	std	Z+7, r27	; 0x07
     51e:	82 81       	ldd	r24, Z+2	; 0x02
     520:	93 81       	ldd	r25, Z+3	; 0x03
     522:	01 96       	adiw	r24, 0x01	; 1
     524:	93 83       	std	Z+3, r25	; 0x03
     526:	82 83       	std	Z+2, r24	; 0x02
     528:	df 01       	movw	r26, r30
     52a:	01 c0       	rjmp	.+2      	; 0x52e <_fpadd_parts+0x28c>
     52c:	d2 01       	movw	r26, r4
     52e:	cd 01       	movw	r24, r26
     530:	cd b7       	in	r28, 0x3d	; 61
     532:	de b7       	in	r29, 0x3e	; 62
     534:	e2 e1       	ldi	r30, 0x12	; 18
     536:	0c 94 ac 3a 	jmp	0x7558	; 0x7558 <__epilogue_restores__>

0000053a <__subsf3>:
     53a:	a0 e2       	ldi	r26, 0x20	; 32
     53c:	b0 e0       	ldi	r27, 0x00	; 0
     53e:	e3 ea       	ldi	r30, 0xA3	; 163
     540:	f2 e0       	ldi	r31, 0x02	; 2
     542:	0c 94 9c 3a 	jmp	0x7538	; 0x7538 <__prologue_saves__+0x18>
     546:	69 83       	std	Y+1, r22	; 0x01
     548:	7a 83       	std	Y+2, r23	; 0x02
     54a:	8b 83       	std	Y+3, r24	; 0x03
     54c:	9c 83       	std	Y+4, r25	; 0x04
     54e:	2d 83       	std	Y+5, r18	; 0x05
     550:	3e 83       	std	Y+6, r19	; 0x06
     552:	4f 83       	std	Y+7, r20	; 0x07
     554:	58 87       	std	Y+8, r21	; 0x08
     556:	e9 e0       	ldi	r30, 0x09	; 9
     558:	ee 2e       	mov	r14, r30
     55a:	f1 2c       	mov	r15, r1
     55c:	ec 0e       	add	r14, r28
     55e:	fd 1e       	adc	r15, r29
     560:	ce 01       	movw	r24, r28
     562:	01 96       	adiw	r24, 0x01	; 1
     564:	b7 01       	movw	r22, r14
     566:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     56a:	8e 01       	movw	r16, r28
     56c:	0f 5e       	subi	r16, 0xEF	; 239
     56e:	1f 4f       	sbci	r17, 0xFF	; 255
     570:	ce 01       	movw	r24, r28
     572:	05 96       	adiw	r24, 0x05	; 5
     574:	b8 01       	movw	r22, r16
     576:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     57a:	8a 89       	ldd	r24, Y+18	; 0x12
     57c:	91 e0       	ldi	r25, 0x01	; 1
     57e:	89 27       	eor	r24, r25
     580:	8a 8b       	std	Y+18, r24	; 0x12
     582:	c7 01       	movw	r24, r14
     584:	b8 01       	movw	r22, r16
     586:	ae 01       	movw	r20, r28
     588:	47 5e       	subi	r20, 0xE7	; 231
     58a:	5f 4f       	sbci	r21, 0xFF	; 255
     58c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <_fpadd_parts>
     590:	0e 94 2a 07 	call	0xe54	; 0xe54 <__pack_f>
     594:	a0 96       	adiw	r28, 0x20	; 32
     596:	e6 e0       	ldi	r30, 0x06	; 6
     598:	0c 94 b8 3a 	jmp	0x7570	; 0x7570 <__epilogue_restores__+0x18>

0000059c <__addsf3>:
     59c:	a0 e2       	ldi	r26, 0x20	; 32
     59e:	b0 e0       	ldi	r27, 0x00	; 0
     5a0:	e4 ed       	ldi	r30, 0xD4	; 212
     5a2:	f2 e0       	ldi	r31, 0x02	; 2
     5a4:	0c 94 9c 3a 	jmp	0x7538	; 0x7538 <__prologue_saves__+0x18>
     5a8:	69 83       	std	Y+1, r22	; 0x01
     5aa:	7a 83       	std	Y+2, r23	; 0x02
     5ac:	8b 83       	std	Y+3, r24	; 0x03
     5ae:	9c 83       	std	Y+4, r25	; 0x04
     5b0:	2d 83       	std	Y+5, r18	; 0x05
     5b2:	3e 83       	std	Y+6, r19	; 0x06
     5b4:	4f 83       	std	Y+7, r20	; 0x07
     5b6:	58 87       	std	Y+8, r21	; 0x08
     5b8:	f9 e0       	ldi	r31, 0x09	; 9
     5ba:	ef 2e       	mov	r14, r31
     5bc:	f1 2c       	mov	r15, r1
     5be:	ec 0e       	add	r14, r28
     5c0:	fd 1e       	adc	r15, r29
     5c2:	ce 01       	movw	r24, r28
     5c4:	01 96       	adiw	r24, 0x01	; 1
     5c6:	b7 01       	movw	r22, r14
     5c8:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     5cc:	8e 01       	movw	r16, r28
     5ce:	0f 5e       	subi	r16, 0xEF	; 239
     5d0:	1f 4f       	sbci	r17, 0xFF	; 255
     5d2:	ce 01       	movw	r24, r28
     5d4:	05 96       	adiw	r24, 0x05	; 5
     5d6:	b8 01       	movw	r22, r16
     5d8:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     5dc:	c7 01       	movw	r24, r14
     5de:	b8 01       	movw	r22, r16
     5e0:	ae 01       	movw	r20, r28
     5e2:	47 5e       	subi	r20, 0xE7	; 231
     5e4:	5f 4f       	sbci	r21, 0xFF	; 255
     5e6:	0e 94 51 01 	call	0x2a2	; 0x2a2 <_fpadd_parts>
     5ea:	0e 94 2a 07 	call	0xe54	; 0xe54 <__pack_f>
     5ee:	a0 96       	adiw	r28, 0x20	; 32
     5f0:	e6 e0       	ldi	r30, 0x06	; 6
     5f2:	0c 94 b8 3a 	jmp	0x7570	; 0x7570 <__epilogue_restores__+0x18>

000005f6 <__mulsf3>:
     5f6:	a0 e2       	ldi	r26, 0x20	; 32
     5f8:	b0 e0       	ldi	r27, 0x00	; 0
     5fa:	e1 e0       	ldi	r30, 0x01	; 1
     5fc:	f3 e0       	ldi	r31, 0x03	; 3
     5fe:	0c 94 90 3a 	jmp	0x7520	; 0x7520 <__prologue_saves__>
     602:	69 83       	std	Y+1, r22	; 0x01
     604:	7a 83       	std	Y+2, r23	; 0x02
     606:	8b 83       	std	Y+3, r24	; 0x03
     608:	9c 83       	std	Y+4, r25	; 0x04
     60a:	2d 83       	std	Y+5, r18	; 0x05
     60c:	3e 83       	std	Y+6, r19	; 0x06
     60e:	4f 83       	std	Y+7, r20	; 0x07
     610:	58 87       	std	Y+8, r21	; 0x08
     612:	ce 01       	movw	r24, r28
     614:	01 96       	adiw	r24, 0x01	; 1
     616:	be 01       	movw	r22, r28
     618:	67 5f       	subi	r22, 0xF7	; 247
     61a:	7f 4f       	sbci	r23, 0xFF	; 255
     61c:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     620:	ce 01       	movw	r24, r28
     622:	05 96       	adiw	r24, 0x05	; 5
     624:	be 01       	movw	r22, r28
     626:	6f 5e       	subi	r22, 0xEF	; 239
     628:	7f 4f       	sbci	r23, 0xFF	; 255
     62a:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     62e:	99 85       	ldd	r25, Y+9	; 0x09
     630:	92 30       	cpi	r25, 0x02	; 2
     632:	88 f0       	brcs	.+34     	; 0x656 <__mulsf3+0x60>
     634:	89 89       	ldd	r24, Y+17	; 0x11
     636:	82 30       	cpi	r24, 0x02	; 2
     638:	c8 f0       	brcs	.+50     	; 0x66c <__mulsf3+0x76>
     63a:	94 30       	cpi	r25, 0x04	; 4
     63c:	19 f4       	brne	.+6      	; 0x644 <__mulsf3+0x4e>
     63e:	82 30       	cpi	r24, 0x02	; 2
     640:	51 f4       	brne	.+20     	; 0x656 <__mulsf3+0x60>
     642:	04 c0       	rjmp	.+8      	; 0x64c <__mulsf3+0x56>
     644:	84 30       	cpi	r24, 0x04	; 4
     646:	29 f4       	brne	.+10     	; 0x652 <__mulsf3+0x5c>
     648:	92 30       	cpi	r25, 0x02	; 2
     64a:	81 f4       	brne	.+32     	; 0x66c <__mulsf3+0x76>
     64c:	82 ee       	ldi	r24, 0xE2	; 226
     64e:	91 e0       	ldi	r25, 0x01	; 1
     650:	c6 c0       	rjmp	.+396    	; 0x7de <__mulsf3+0x1e8>
     652:	92 30       	cpi	r25, 0x02	; 2
     654:	49 f4       	brne	.+18     	; 0x668 <__mulsf3+0x72>
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	9a 85       	ldd	r25, Y+10	; 0x0a
     65a:	8a 89       	ldd	r24, Y+18	; 0x12
     65c:	98 13       	cpse	r25, r24
     65e:	21 e0       	ldi	r18, 0x01	; 1
     660:	2a 87       	std	Y+10, r18	; 0x0a
     662:	ce 01       	movw	r24, r28
     664:	09 96       	adiw	r24, 0x09	; 9
     666:	bb c0       	rjmp	.+374    	; 0x7de <__mulsf3+0x1e8>
     668:	82 30       	cpi	r24, 0x02	; 2
     66a:	49 f4       	brne	.+18     	; 0x67e <__mulsf3+0x88>
     66c:	20 e0       	ldi	r18, 0x00	; 0
     66e:	9a 85       	ldd	r25, Y+10	; 0x0a
     670:	8a 89       	ldd	r24, Y+18	; 0x12
     672:	98 13       	cpse	r25, r24
     674:	21 e0       	ldi	r18, 0x01	; 1
     676:	2a 8b       	std	Y+18, r18	; 0x12
     678:	ce 01       	movw	r24, r28
     67a:	41 96       	adiw	r24, 0x11	; 17
     67c:	b0 c0       	rjmp	.+352    	; 0x7de <__mulsf3+0x1e8>
     67e:	2d 84       	ldd	r2, Y+13	; 0x0d
     680:	3e 84       	ldd	r3, Y+14	; 0x0e
     682:	4f 84       	ldd	r4, Y+15	; 0x0f
     684:	58 88       	ldd	r5, Y+16	; 0x10
     686:	6d 88       	ldd	r6, Y+21	; 0x15
     688:	7e 88       	ldd	r7, Y+22	; 0x16
     68a:	8f 88       	ldd	r8, Y+23	; 0x17
     68c:	98 8c       	ldd	r9, Y+24	; 0x18
     68e:	ee 24       	eor	r14, r14
     690:	ff 24       	eor	r15, r15
     692:	87 01       	movw	r16, r14
     694:	aa 24       	eor	r10, r10
     696:	bb 24       	eor	r11, r11
     698:	65 01       	movw	r12, r10
     69a:	40 e0       	ldi	r20, 0x00	; 0
     69c:	50 e0       	ldi	r21, 0x00	; 0
     69e:	60 e0       	ldi	r22, 0x00	; 0
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	e0 e0       	ldi	r30, 0x00	; 0
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	c1 01       	movw	r24, r2
     6a8:	81 70       	andi	r24, 0x01	; 1
     6aa:	90 70       	andi	r25, 0x00	; 0
     6ac:	89 2b       	or	r24, r25
     6ae:	e9 f0       	breq	.+58     	; 0x6ea <__mulsf3+0xf4>
     6b0:	e6 0c       	add	r14, r6
     6b2:	f7 1c       	adc	r15, r7
     6b4:	08 1d       	adc	r16, r8
     6b6:	19 1d       	adc	r17, r9
     6b8:	9a 01       	movw	r18, r20
     6ba:	ab 01       	movw	r20, r22
     6bc:	2a 0d       	add	r18, r10
     6be:	3b 1d       	adc	r19, r11
     6c0:	4c 1d       	adc	r20, r12
     6c2:	5d 1d       	adc	r21, r13
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	a0 e0       	ldi	r26, 0x00	; 0
     6ca:	b0 e0       	ldi	r27, 0x00	; 0
     6cc:	e6 14       	cp	r14, r6
     6ce:	f7 04       	cpc	r15, r7
     6d0:	08 05       	cpc	r16, r8
     6d2:	19 05       	cpc	r17, r9
     6d4:	20 f4       	brcc	.+8      	; 0x6de <__mulsf3+0xe8>
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	a0 e0       	ldi	r26, 0x00	; 0
     6dc:	b0 e0       	ldi	r27, 0x00	; 0
     6de:	ba 01       	movw	r22, r20
     6e0:	a9 01       	movw	r20, r18
     6e2:	48 0f       	add	r20, r24
     6e4:	59 1f       	adc	r21, r25
     6e6:	6a 1f       	adc	r22, r26
     6e8:	7b 1f       	adc	r23, r27
     6ea:	aa 0c       	add	r10, r10
     6ec:	bb 1c       	adc	r11, r11
     6ee:	cc 1c       	adc	r12, r12
     6f0:	dd 1c       	adc	r13, r13
     6f2:	97 fe       	sbrs	r9, 7
     6f4:	08 c0       	rjmp	.+16     	; 0x706 <__mulsf3+0x110>
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	a0 e0       	ldi	r26, 0x00	; 0
     6fc:	b0 e0       	ldi	r27, 0x00	; 0
     6fe:	a8 2a       	or	r10, r24
     700:	b9 2a       	or	r11, r25
     702:	ca 2a       	or	r12, r26
     704:	db 2a       	or	r13, r27
     706:	31 96       	adiw	r30, 0x01	; 1
     708:	e0 32       	cpi	r30, 0x20	; 32
     70a:	f1 05       	cpc	r31, r1
     70c:	49 f0       	breq	.+18     	; 0x720 <__mulsf3+0x12a>
     70e:	66 0c       	add	r6, r6
     710:	77 1c       	adc	r7, r7
     712:	88 1c       	adc	r8, r8
     714:	99 1c       	adc	r9, r9
     716:	56 94       	lsr	r5
     718:	47 94       	ror	r4
     71a:	37 94       	ror	r3
     71c:	27 94       	ror	r2
     71e:	c3 cf       	rjmp	.-122    	; 0x6a6 <__mulsf3+0xb0>
     720:	fa 85       	ldd	r31, Y+10	; 0x0a
     722:	ea 89       	ldd	r30, Y+18	; 0x12
     724:	2b 89       	ldd	r18, Y+19	; 0x13
     726:	3c 89       	ldd	r19, Y+20	; 0x14
     728:	8b 85       	ldd	r24, Y+11	; 0x0b
     72a:	9c 85       	ldd	r25, Y+12	; 0x0c
     72c:	28 0f       	add	r18, r24
     72e:	39 1f       	adc	r19, r25
     730:	2e 5f       	subi	r18, 0xFE	; 254
     732:	3f 4f       	sbci	r19, 0xFF	; 255
     734:	17 c0       	rjmp	.+46     	; 0x764 <__mulsf3+0x16e>
     736:	ca 01       	movw	r24, r20
     738:	81 70       	andi	r24, 0x01	; 1
     73a:	90 70       	andi	r25, 0x00	; 0
     73c:	89 2b       	or	r24, r25
     73e:	61 f0       	breq	.+24     	; 0x758 <__mulsf3+0x162>
     740:	16 95       	lsr	r17
     742:	07 95       	ror	r16
     744:	f7 94       	ror	r15
     746:	e7 94       	ror	r14
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	a0 e0       	ldi	r26, 0x00	; 0
     74e:	b0 e8       	ldi	r27, 0x80	; 128
     750:	e8 2a       	or	r14, r24
     752:	f9 2a       	or	r15, r25
     754:	0a 2b       	or	r16, r26
     756:	1b 2b       	or	r17, r27
     758:	76 95       	lsr	r23
     75a:	67 95       	ror	r22
     75c:	57 95       	ror	r21
     75e:	47 95       	ror	r20
     760:	2f 5f       	subi	r18, 0xFF	; 255
     762:	3f 4f       	sbci	r19, 0xFF	; 255
     764:	77 fd       	sbrc	r23, 7
     766:	e7 cf       	rjmp	.-50     	; 0x736 <__mulsf3+0x140>
     768:	0c c0       	rjmp	.+24     	; 0x782 <__mulsf3+0x18c>
     76a:	44 0f       	add	r20, r20
     76c:	55 1f       	adc	r21, r21
     76e:	66 1f       	adc	r22, r22
     770:	77 1f       	adc	r23, r23
     772:	17 fd       	sbrc	r17, 7
     774:	41 60       	ori	r20, 0x01	; 1
     776:	ee 0c       	add	r14, r14
     778:	ff 1c       	adc	r15, r15
     77a:	00 1f       	adc	r16, r16
     77c:	11 1f       	adc	r17, r17
     77e:	21 50       	subi	r18, 0x01	; 1
     780:	30 40       	sbci	r19, 0x00	; 0
     782:	40 30       	cpi	r20, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	59 07       	cpc	r21, r25
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	69 07       	cpc	r22, r25
     78c:	90 e4       	ldi	r25, 0x40	; 64
     78e:	79 07       	cpc	r23, r25
     790:	60 f3       	brcs	.-40     	; 0x76a <__mulsf3+0x174>
     792:	2b 8f       	std	Y+27, r18	; 0x1b
     794:	3c 8f       	std	Y+28, r19	; 0x1c
     796:	db 01       	movw	r26, r22
     798:	ca 01       	movw	r24, r20
     79a:	8f 77       	andi	r24, 0x7F	; 127
     79c:	90 70       	andi	r25, 0x00	; 0
     79e:	a0 70       	andi	r26, 0x00	; 0
     7a0:	b0 70       	andi	r27, 0x00	; 0
     7a2:	80 34       	cpi	r24, 0x40	; 64
     7a4:	91 05       	cpc	r25, r1
     7a6:	a1 05       	cpc	r26, r1
     7a8:	b1 05       	cpc	r27, r1
     7aa:	61 f4       	brne	.+24     	; 0x7c4 <__mulsf3+0x1ce>
     7ac:	47 fd       	sbrc	r20, 7
     7ae:	0a c0       	rjmp	.+20     	; 0x7c4 <__mulsf3+0x1ce>
     7b0:	e1 14       	cp	r14, r1
     7b2:	f1 04       	cpc	r15, r1
     7b4:	01 05       	cpc	r16, r1
     7b6:	11 05       	cpc	r17, r1
     7b8:	29 f0       	breq	.+10     	; 0x7c4 <__mulsf3+0x1ce>
     7ba:	40 5c       	subi	r20, 0xC0	; 192
     7bc:	5f 4f       	sbci	r21, 0xFF	; 255
     7be:	6f 4f       	sbci	r22, 0xFF	; 255
     7c0:	7f 4f       	sbci	r23, 0xFF	; 255
     7c2:	40 78       	andi	r20, 0x80	; 128
     7c4:	1a 8e       	std	Y+26, r1	; 0x1a
     7c6:	fe 17       	cp	r31, r30
     7c8:	11 f0       	breq	.+4      	; 0x7ce <__mulsf3+0x1d8>
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	8a 8f       	std	Y+26, r24	; 0x1a
     7ce:	4d 8f       	std	Y+29, r20	; 0x1d
     7d0:	5e 8f       	std	Y+30, r21	; 0x1e
     7d2:	6f 8f       	std	Y+31, r22	; 0x1f
     7d4:	78 a3       	std	Y+32, r23	; 0x20
     7d6:	83 e0       	ldi	r24, 0x03	; 3
     7d8:	89 8f       	std	Y+25, r24	; 0x19
     7da:	ce 01       	movw	r24, r28
     7dc:	49 96       	adiw	r24, 0x19	; 25
     7de:	0e 94 2a 07 	call	0xe54	; 0xe54 <__pack_f>
     7e2:	a0 96       	adiw	r28, 0x20	; 32
     7e4:	e2 e1       	ldi	r30, 0x12	; 18
     7e6:	0c 94 ac 3a 	jmp	0x7558	; 0x7558 <__epilogue_restores__>

000007ea <__divsf3>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 98 3a 	jmp	0x7530	; 0x7530 <__prologue_saves__+0x10>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	b9 e0       	ldi	r27, 0x09	; 9
     808:	eb 2e       	mov	r14, r27
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     82a:	29 85       	ldd	r18, Y+9	; 0x09
     82c:	22 30       	cpi	r18, 0x02	; 2
     82e:	08 f4       	brcc	.+2      	; 0x832 <__divsf3+0x48>
     830:	7e c0       	rjmp	.+252    	; 0x92e <__stack+0xcf>
     832:	39 89       	ldd	r19, Y+17	; 0x11
     834:	32 30       	cpi	r19, 0x02	; 2
     836:	10 f4       	brcc	.+4      	; 0x83c <__divsf3+0x52>
     838:	b8 01       	movw	r22, r16
     83a:	7c c0       	rjmp	.+248    	; 0x934 <__stack+0xd5>
     83c:	8a 85       	ldd	r24, Y+10	; 0x0a
     83e:	9a 89       	ldd	r25, Y+18	; 0x12
     840:	89 27       	eor	r24, r25
     842:	8a 87       	std	Y+10, r24	; 0x0a
     844:	24 30       	cpi	r18, 0x04	; 4
     846:	11 f0       	breq	.+4      	; 0x84c <__divsf3+0x62>
     848:	22 30       	cpi	r18, 0x02	; 2
     84a:	31 f4       	brne	.+12     	; 0x858 <__divsf3+0x6e>
     84c:	23 17       	cp	r18, r19
     84e:	09 f0       	breq	.+2      	; 0x852 <__divsf3+0x68>
     850:	6e c0       	rjmp	.+220    	; 0x92e <__stack+0xcf>
     852:	62 ee       	ldi	r22, 0xE2	; 226
     854:	71 e0       	ldi	r23, 0x01	; 1
     856:	6e c0       	rjmp	.+220    	; 0x934 <__stack+0xd5>
     858:	34 30       	cpi	r19, 0x04	; 4
     85a:	39 f4       	brne	.+14     	; 0x86a <__stack+0xb>
     85c:	1d 86       	std	Y+13, r1	; 0x0d
     85e:	1e 86       	std	Y+14, r1	; 0x0e
     860:	1f 86       	std	Y+15, r1	; 0x0f
     862:	18 8a       	std	Y+16, r1	; 0x10
     864:	1c 86       	std	Y+12, r1	; 0x0c
     866:	1b 86       	std	Y+11, r1	; 0x0b
     868:	04 c0       	rjmp	.+8      	; 0x872 <__stack+0x13>
     86a:	32 30       	cpi	r19, 0x02	; 2
     86c:	21 f4       	brne	.+8      	; 0x876 <__stack+0x17>
     86e:	84 e0       	ldi	r24, 0x04	; 4
     870:	89 87       	std	Y+9, r24	; 0x09
     872:	b7 01       	movw	r22, r14
     874:	5f c0       	rjmp	.+190    	; 0x934 <__stack+0xd5>
     876:	2b 85       	ldd	r18, Y+11	; 0x0b
     878:	3c 85       	ldd	r19, Y+12	; 0x0c
     87a:	8b 89       	ldd	r24, Y+19	; 0x13
     87c:	9c 89       	ldd	r25, Y+20	; 0x14
     87e:	28 1b       	sub	r18, r24
     880:	39 0b       	sbc	r19, r25
     882:	3c 87       	std	Y+12, r19	; 0x0c
     884:	2b 87       	std	Y+11, r18	; 0x0b
     886:	ed 84       	ldd	r14, Y+13	; 0x0d
     888:	fe 84       	ldd	r15, Y+14	; 0x0e
     88a:	0f 85       	ldd	r16, Y+15	; 0x0f
     88c:	18 89       	ldd	r17, Y+16	; 0x10
     88e:	ad 88       	ldd	r10, Y+21	; 0x15
     890:	be 88       	ldd	r11, Y+22	; 0x16
     892:	cf 88       	ldd	r12, Y+23	; 0x17
     894:	d8 8c       	ldd	r13, Y+24	; 0x18
     896:	ea 14       	cp	r14, r10
     898:	fb 04       	cpc	r15, r11
     89a:	0c 05       	cpc	r16, r12
     89c:	1d 05       	cpc	r17, r13
     89e:	40 f4       	brcc	.+16     	; 0x8b0 <__stack+0x51>
     8a0:	ee 0c       	add	r14, r14
     8a2:	ff 1c       	adc	r15, r15
     8a4:	00 1f       	adc	r16, r16
     8a6:	11 1f       	adc	r17, r17
     8a8:	21 50       	subi	r18, 0x01	; 1
     8aa:	30 40       	sbci	r19, 0x00	; 0
     8ac:	3c 87       	std	Y+12, r19	; 0x0c
     8ae:	2b 87       	std	Y+11, r18	; 0x0b
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	40 e0       	ldi	r20, 0x00	; 0
     8b6:	50 e0       	ldi	r21, 0x00	; 0
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	a0 e0       	ldi	r26, 0x00	; 0
     8be:	b0 e4       	ldi	r27, 0x40	; 64
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	ea 14       	cp	r14, r10
     8c6:	fb 04       	cpc	r15, r11
     8c8:	0c 05       	cpc	r16, r12
     8ca:	1d 05       	cpc	r17, r13
     8cc:	40 f0       	brcs	.+16     	; 0x8de <__stack+0x7f>
     8ce:	28 2b       	or	r18, r24
     8d0:	39 2b       	or	r19, r25
     8d2:	4a 2b       	or	r20, r26
     8d4:	5b 2b       	or	r21, r27
     8d6:	ea 18       	sub	r14, r10
     8d8:	fb 08       	sbc	r15, r11
     8da:	0c 09       	sbc	r16, r12
     8dc:	1d 09       	sbc	r17, r13
     8de:	b6 95       	lsr	r27
     8e0:	a7 95       	ror	r26
     8e2:	97 95       	ror	r25
     8e4:	87 95       	ror	r24
     8e6:	ee 0c       	add	r14, r14
     8e8:	ff 1c       	adc	r15, r15
     8ea:	00 1f       	adc	r16, r16
     8ec:	11 1f       	adc	r17, r17
     8ee:	6f 5f       	subi	r22, 0xFF	; 255
     8f0:	7f 4f       	sbci	r23, 0xFF	; 255
     8f2:	6f 31       	cpi	r22, 0x1F	; 31
     8f4:	71 05       	cpc	r23, r1
     8f6:	31 f7       	brne	.-52     	; 0x8c4 <__stack+0x65>
     8f8:	da 01       	movw	r26, r20
     8fa:	c9 01       	movw	r24, r18
     8fc:	8f 77       	andi	r24, 0x7F	; 127
     8fe:	90 70       	andi	r25, 0x00	; 0
     900:	a0 70       	andi	r26, 0x00	; 0
     902:	b0 70       	andi	r27, 0x00	; 0
     904:	80 34       	cpi	r24, 0x40	; 64
     906:	91 05       	cpc	r25, r1
     908:	a1 05       	cpc	r26, r1
     90a:	b1 05       	cpc	r27, r1
     90c:	61 f4       	brne	.+24     	; 0x926 <__stack+0xc7>
     90e:	27 fd       	sbrc	r18, 7
     910:	0a c0       	rjmp	.+20     	; 0x926 <__stack+0xc7>
     912:	e1 14       	cp	r14, r1
     914:	f1 04       	cpc	r15, r1
     916:	01 05       	cpc	r16, r1
     918:	11 05       	cpc	r17, r1
     91a:	29 f0       	breq	.+10     	; 0x926 <__stack+0xc7>
     91c:	20 5c       	subi	r18, 0xC0	; 192
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	4f 4f       	sbci	r20, 0xFF	; 255
     922:	5f 4f       	sbci	r21, 0xFF	; 255
     924:	20 78       	andi	r18, 0x80	; 128
     926:	2d 87       	std	Y+13, r18	; 0x0d
     928:	3e 87       	std	Y+14, r19	; 0x0e
     92a:	4f 87       	std	Y+15, r20	; 0x0f
     92c:	58 8b       	std	Y+16, r21	; 0x10
     92e:	be 01       	movw	r22, r28
     930:	67 5f       	subi	r22, 0xF7	; 247
     932:	7f 4f       	sbci	r23, 0xFF	; 255
     934:	cb 01       	movw	r24, r22
     936:	0e 94 2a 07 	call	0xe54	; 0xe54 <__pack_f>
     93a:	68 96       	adiw	r28, 0x18	; 24
     93c:	ea e0       	ldi	r30, 0x0A	; 10
     93e:	0c 94 b4 3a 	jmp	0x7568	; 0x7568 <__epilogue_restores__+0x10>

00000942 <__gtsf2>:
     942:	a8 e1       	ldi	r26, 0x18	; 24
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 9c 3a 	jmp	0x7538	; 0x7538 <__prologue_saves__+0x18>
     94e:	69 83       	std	Y+1, r22	; 0x01
     950:	7a 83       	std	Y+2, r23	; 0x02
     952:	8b 83       	std	Y+3, r24	; 0x03
     954:	9c 83       	std	Y+4, r25	; 0x04
     956:	2d 83       	std	Y+5, r18	; 0x05
     958:	3e 83       	std	Y+6, r19	; 0x06
     95a:	4f 83       	std	Y+7, r20	; 0x07
     95c:	58 87       	std	Y+8, r21	; 0x08
     95e:	89 e0       	ldi	r24, 0x09	; 9
     960:	e8 2e       	mov	r14, r24
     962:	f1 2c       	mov	r15, r1
     964:	ec 0e       	add	r14, r28
     966:	fd 1e       	adc	r15, r29
     968:	ce 01       	movw	r24, r28
     96a:	01 96       	adiw	r24, 0x01	; 1
     96c:	b7 01       	movw	r22, r14
     96e:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     972:	8e 01       	movw	r16, r28
     974:	0f 5e       	subi	r16, 0xEF	; 239
     976:	1f 4f       	sbci	r17, 0xFF	; 255
     978:	ce 01       	movw	r24, r28
     97a:	05 96       	adiw	r24, 0x05	; 5
     97c:	b8 01       	movw	r22, r16
     97e:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     982:	89 85       	ldd	r24, Y+9	; 0x09
     984:	82 30       	cpi	r24, 0x02	; 2
     986:	40 f0       	brcs	.+16     	; 0x998 <__gtsf2+0x56>
     988:	89 89       	ldd	r24, Y+17	; 0x11
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	28 f0       	brcs	.+10     	; 0x998 <__gtsf2+0x56>
     98e:	c7 01       	movw	r24, r14
     990:	b8 01       	movw	r22, r16
     992:	0e 94 77 08 	call	0x10ee	; 0x10ee <__fpcmp_parts_f>
     996:	01 c0       	rjmp	.+2      	; 0x99a <__gtsf2+0x58>
     998:	8f ef       	ldi	r24, 0xFF	; 255
     99a:	68 96       	adiw	r28, 0x18	; 24
     99c:	e6 e0       	ldi	r30, 0x06	; 6
     99e:	0c 94 b8 3a 	jmp	0x7570	; 0x7570 <__epilogue_restores__+0x18>

000009a2 <__gesf2>:
     9a2:	a8 e1       	ldi	r26, 0x18	; 24
     9a4:	b0 e0       	ldi	r27, 0x00	; 0
     9a6:	e7 ed       	ldi	r30, 0xD7	; 215
     9a8:	f4 e0       	ldi	r31, 0x04	; 4
     9aa:	0c 94 9c 3a 	jmp	0x7538	; 0x7538 <__prologue_saves__+0x18>
     9ae:	69 83       	std	Y+1, r22	; 0x01
     9b0:	7a 83       	std	Y+2, r23	; 0x02
     9b2:	8b 83       	std	Y+3, r24	; 0x03
     9b4:	9c 83       	std	Y+4, r25	; 0x04
     9b6:	2d 83       	std	Y+5, r18	; 0x05
     9b8:	3e 83       	std	Y+6, r19	; 0x06
     9ba:	4f 83       	std	Y+7, r20	; 0x07
     9bc:	58 87       	std	Y+8, r21	; 0x08
     9be:	89 e0       	ldi	r24, 0x09	; 9
     9c0:	e8 2e       	mov	r14, r24
     9c2:	f1 2c       	mov	r15, r1
     9c4:	ec 0e       	add	r14, r28
     9c6:	fd 1e       	adc	r15, r29
     9c8:	ce 01       	movw	r24, r28
     9ca:	01 96       	adiw	r24, 0x01	; 1
     9cc:	b7 01       	movw	r22, r14
     9ce:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     9d2:	8e 01       	movw	r16, r28
     9d4:	0f 5e       	subi	r16, 0xEF	; 239
     9d6:	1f 4f       	sbci	r17, 0xFF	; 255
     9d8:	ce 01       	movw	r24, r28
     9da:	05 96       	adiw	r24, 0x05	; 5
     9dc:	b8 01       	movw	r22, r16
     9de:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     9e2:	89 85       	ldd	r24, Y+9	; 0x09
     9e4:	82 30       	cpi	r24, 0x02	; 2
     9e6:	40 f0       	brcs	.+16     	; 0x9f8 <__gesf2+0x56>
     9e8:	89 89       	ldd	r24, Y+17	; 0x11
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	28 f0       	brcs	.+10     	; 0x9f8 <__gesf2+0x56>
     9ee:	c7 01       	movw	r24, r14
     9f0:	b8 01       	movw	r22, r16
     9f2:	0e 94 77 08 	call	0x10ee	; 0x10ee <__fpcmp_parts_f>
     9f6:	01 c0       	rjmp	.+2      	; 0x9fa <__gesf2+0x58>
     9f8:	8f ef       	ldi	r24, 0xFF	; 255
     9fa:	68 96       	adiw	r28, 0x18	; 24
     9fc:	e6 e0       	ldi	r30, 0x06	; 6
     9fe:	0c 94 b8 3a 	jmp	0x7570	; 0x7570 <__epilogue_restores__+0x18>

00000a02 <__ltsf2>:
     a02:	a8 e1       	ldi	r26, 0x18	; 24
     a04:	b0 e0       	ldi	r27, 0x00	; 0
     a06:	e7 e0       	ldi	r30, 0x07	; 7
     a08:	f5 e0       	ldi	r31, 0x05	; 5
     a0a:	0c 94 9c 3a 	jmp	0x7538	; 0x7538 <__prologue_saves__+0x18>
     a0e:	69 83       	std	Y+1, r22	; 0x01
     a10:	7a 83       	std	Y+2, r23	; 0x02
     a12:	8b 83       	std	Y+3, r24	; 0x03
     a14:	9c 83       	std	Y+4, r25	; 0x04
     a16:	2d 83       	std	Y+5, r18	; 0x05
     a18:	3e 83       	std	Y+6, r19	; 0x06
     a1a:	4f 83       	std	Y+7, r20	; 0x07
     a1c:	58 87       	std	Y+8, r21	; 0x08
     a1e:	89 e0       	ldi	r24, 0x09	; 9
     a20:	e8 2e       	mov	r14, r24
     a22:	f1 2c       	mov	r15, r1
     a24:	ec 0e       	add	r14, r28
     a26:	fd 1e       	adc	r15, r29
     a28:	ce 01       	movw	r24, r28
     a2a:	01 96       	adiw	r24, 0x01	; 1
     a2c:	b7 01       	movw	r22, r14
     a2e:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     a32:	8e 01       	movw	r16, r28
     a34:	0f 5e       	subi	r16, 0xEF	; 239
     a36:	1f 4f       	sbci	r17, 0xFF	; 255
     a38:	ce 01       	movw	r24, r28
     a3a:	05 96       	adiw	r24, 0x05	; 5
     a3c:	b8 01       	movw	r22, r16
     a3e:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     a42:	89 85       	ldd	r24, Y+9	; 0x09
     a44:	82 30       	cpi	r24, 0x02	; 2
     a46:	40 f0       	brcs	.+16     	; 0xa58 <__ltsf2+0x56>
     a48:	89 89       	ldd	r24, Y+17	; 0x11
     a4a:	82 30       	cpi	r24, 0x02	; 2
     a4c:	28 f0       	brcs	.+10     	; 0xa58 <__ltsf2+0x56>
     a4e:	c7 01       	movw	r24, r14
     a50:	b8 01       	movw	r22, r16
     a52:	0e 94 77 08 	call	0x10ee	; 0x10ee <__fpcmp_parts_f>
     a56:	01 c0       	rjmp	.+2      	; 0xa5a <__ltsf2+0x58>
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	68 96       	adiw	r28, 0x18	; 24
     a5c:	e6 e0       	ldi	r30, 0x06	; 6
     a5e:	0c 94 b8 3a 	jmp	0x7570	; 0x7570 <__epilogue_restores__+0x18>

00000a62 <__floatsisf>:
     a62:	a8 e0       	ldi	r26, 0x08	; 8
     a64:	b0 e0       	ldi	r27, 0x00	; 0
     a66:	e7 e3       	ldi	r30, 0x37	; 55
     a68:	f5 e0       	ldi	r31, 0x05	; 5
     a6a:	0c 94 99 3a 	jmp	0x7532	; 0x7532 <__prologue_saves__+0x12>
     a6e:	9b 01       	movw	r18, r22
     a70:	ac 01       	movw	r20, r24
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	89 83       	std	Y+1, r24	; 0x01
     a76:	da 01       	movw	r26, r20
     a78:	c9 01       	movw	r24, r18
     a7a:	88 27       	eor	r24, r24
     a7c:	b7 fd       	sbrc	r27, 7
     a7e:	83 95       	inc	r24
     a80:	99 27       	eor	r25, r25
     a82:	aa 27       	eor	r26, r26
     a84:	bb 27       	eor	r27, r27
     a86:	b8 2e       	mov	r11, r24
     a88:	21 15       	cp	r18, r1
     a8a:	31 05       	cpc	r19, r1
     a8c:	41 05       	cpc	r20, r1
     a8e:	51 05       	cpc	r21, r1
     a90:	19 f4       	brne	.+6      	; 0xa98 <__floatsisf+0x36>
     a92:	82 e0       	ldi	r24, 0x02	; 2
     a94:	89 83       	std	Y+1, r24	; 0x01
     a96:	3a c0       	rjmp	.+116    	; 0xb0c <__floatsisf+0xaa>
     a98:	88 23       	and	r24, r24
     a9a:	a9 f0       	breq	.+42     	; 0xac6 <__floatsisf+0x64>
     a9c:	20 30       	cpi	r18, 0x00	; 0
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	38 07       	cpc	r19, r24
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	48 07       	cpc	r20, r24
     aa6:	80 e8       	ldi	r24, 0x80	; 128
     aa8:	58 07       	cpc	r21, r24
     aaa:	29 f4       	brne	.+10     	; 0xab6 <__floatsisf+0x54>
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	9f ec       	ldi	r25, 0xCF	; 207
     ab4:	30 c0       	rjmp	.+96     	; 0xb16 <__floatsisf+0xb4>
     ab6:	ee 24       	eor	r14, r14
     ab8:	ff 24       	eor	r15, r15
     aba:	87 01       	movw	r16, r14
     abc:	e2 1a       	sub	r14, r18
     abe:	f3 0a       	sbc	r15, r19
     ac0:	04 0b       	sbc	r16, r20
     ac2:	15 0b       	sbc	r17, r21
     ac4:	02 c0       	rjmp	.+4      	; 0xaca <__floatsisf+0x68>
     ac6:	79 01       	movw	r14, r18
     ac8:	8a 01       	movw	r16, r20
     aca:	8e e1       	ldi	r24, 0x1E	; 30
     acc:	c8 2e       	mov	r12, r24
     ace:	d1 2c       	mov	r13, r1
     ad0:	dc 82       	std	Y+4, r13	; 0x04
     ad2:	cb 82       	std	Y+3, r12	; 0x03
     ad4:	ed 82       	std	Y+5, r14	; 0x05
     ad6:	fe 82       	std	Y+6, r15	; 0x06
     ad8:	0f 83       	std	Y+7, r16	; 0x07
     ada:	18 87       	std	Y+8, r17	; 0x08
     adc:	c8 01       	movw	r24, r16
     ade:	b7 01       	movw	r22, r14
     ae0:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__clzsi2>
     ae4:	01 97       	sbiw	r24, 0x01	; 1
     ae6:	18 16       	cp	r1, r24
     ae8:	19 06       	cpc	r1, r25
     aea:	84 f4       	brge	.+32     	; 0xb0c <__floatsisf+0xaa>
     aec:	08 2e       	mov	r0, r24
     aee:	04 c0       	rjmp	.+8      	; 0xaf8 <__floatsisf+0x96>
     af0:	ee 0c       	add	r14, r14
     af2:	ff 1c       	adc	r15, r15
     af4:	00 1f       	adc	r16, r16
     af6:	11 1f       	adc	r17, r17
     af8:	0a 94       	dec	r0
     afa:	d2 f7       	brpl	.-12     	; 0xaf0 <__floatsisf+0x8e>
     afc:	ed 82       	std	Y+5, r14	; 0x05
     afe:	fe 82       	std	Y+6, r15	; 0x06
     b00:	0f 83       	std	Y+7, r16	; 0x07
     b02:	18 87       	std	Y+8, r17	; 0x08
     b04:	c8 1a       	sub	r12, r24
     b06:	d9 0a       	sbc	r13, r25
     b08:	dc 82       	std	Y+4, r13	; 0x04
     b0a:	cb 82       	std	Y+3, r12	; 0x03
     b0c:	ba 82       	std	Y+2, r11	; 0x02
     b0e:	ce 01       	movw	r24, r28
     b10:	01 96       	adiw	r24, 0x01	; 1
     b12:	0e 94 2a 07 	call	0xe54	; 0xe54 <__pack_f>
     b16:	28 96       	adiw	r28, 0x08	; 8
     b18:	e9 e0       	ldi	r30, 0x09	; 9
     b1a:	0c 94 b5 3a 	jmp	0x756a	; 0x756a <__epilogue_restores__+0x12>

00000b1e <__fixsfsi>:
     b1e:	ac e0       	ldi	r26, 0x0C	; 12
     b20:	b0 e0       	ldi	r27, 0x00	; 0
     b22:	e5 e9       	ldi	r30, 0x95	; 149
     b24:	f5 e0       	ldi	r31, 0x05	; 5
     b26:	0c 94 a0 3a 	jmp	0x7540	; 0x7540 <__prologue_saves__+0x20>
     b2a:	69 83       	std	Y+1, r22	; 0x01
     b2c:	7a 83       	std	Y+2, r23	; 0x02
     b2e:	8b 83       	std	Y+3, r24	; 0x03
     b30:	9c 83       	std	Y+4, r25	; 0x04
     b32:	ce 01       	movw	r24, r28
     b34:	01 96       	adiw	r24, 0x01	; 1
     b36:	be 01       	movw	r22, r28
     b38:	6b 5f       	subi	r22, 0xFB	; 251
     b3a:	7f 4f       	sbci	r23, 0xFF	; 255
     b3c:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     b40:	8d 81       	ldd	r24, Y+5	; 0x05
     b42:	82 30       	cpi	r24, 0x02	; 2
     b44:	61 f1       	breq	.+88     	; 0xb9e <__fixsfsi+0x80>
     b46:	82 30       	cpi	r24, 0x02	; 2
     b48:	50 f1       	brcs	.+84     	; 0xb9e <__fixsfsi+0x80>
     b4a:	84 30       	cpi	r24, 0x04	; 4
     b4c:	21 f4       	brne	.+8      	; 0xb56 <__fixsfsi+0x38>
     b4e:	8e 81       	ldd	r24, Y+6	; 0x06
     b50:	88 23       	and	r24, r24
     b52:	51 f1       	breq	.+84     	; 0xba8 <__fixsfsi+0x8a>
     b54:	2e c0       	rjmp	.+92     	; 0xbb2 <__fixsfsi+0x94>
     b56:	2f 81       	ldd	r18, Y+7	; 0x07
     b58:	38 85       	ldd	r19, Y+8	; 0x08
     b5a:	37 fd       	sbrc	r19, 7
     b5c:	20 c0       	rjmp	.+64     	; 0xb9e <__fixsfsi+0x80>
     b5e:	6e 81       	ldd	r22, Y+6	; 0x06
     b60:	2f 31       	cpi	r18, 0x1F	; 31
     b62:	31 05       	cpc	r19, r1
     b64:	1c f0       	brlt	.+6      	; 0xb6c <__fixsfsi+0x4e>
     b66:	66 23       	and	r22, r22
     b68:	f9 f0       	breq	.+62     	; 0xba8 <__fixsfsi+0x8a>
     b6a:	23 c0       	rjmp	.+70     	; 0xbb2 <__fixsfsi+0x94>
     b6c:	8e e1       	ldi	r24, 0x1E	; 30
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	82 1b       	sub	r24, r18
     b72:	93 0b       	sbc	r25, r19
     b74:	29 85       	ldd	r18, Y+9	; 0x09
     b76:	3a 85       	ldd	r19, Y+10	; 0x0a
     b78:	4b 85       	ldd	r20, Y+11	; 0x0b
     b7a:	5c 85       	ldd	r21, Y+12	; 0x0c
     b7c:	04 c0       	rjmp	.+8      	; 0xb86 <__fixsfsi+0x68>
     b7e:	56 95       	lsr	r21
     b80:	47 95       	ror	r20
     b82:	37 95       	ror	r19
     b84:	27 95       	ror	r18
     b86:	8a 95       	dec	r24
     b88:	d2 f7       	brpl	.-12     	; 0xb7e <__fixsfsi+0x60>
     b8a:	66 23       	and	r22, r22
     b8c:	b1 f0       	breq	.+44     	; 0xbba <__fixsfsi+0x9c>
     b8e:	50 95       	com	r21
     b90:	40 95       	com	r20
     b92:	30 95       	com	r19
     b94:	21 95       	neg	r18
     b96:	3f 4f       	sbci	r19, 0xFF	; 255
     b98:	4f 4f       	sbci	r20, 0xFF	; 255
     b9a:	5f 4f       	sbci	r21, 0xFF	; 255
     b9c:	0e c0       	rjmp	.+28     	; 0xbba <__fixsfsi+0x9c>
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	40 e0       	ldi	r20, 0x00	; 0
     ba4:	50 e0       	ldi	r21, 0x00	; 0
     ba6:	09 c0       	rjmp	.+18     	; 0xbba <__fixsfsi+0x9c>
     ba8:	2f ef       	ldi	r18, 0xFF	; 255
     baa:	3f ef       	ldi	r19, 0xFF	; 255
     bac:	4f ef       	ldi	r20, 0xFF	; 255
     bae:	5f e7       	ldi	r21, 0x7F	; 127
     bb0:	04 c0       	rjmp	.+8      	; 0xbba <__fixsfsi+0x9c>
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	40 e0       	ldi	r20, 0x00	; 0
     bb8:	50 e8       	ldi	r21, 0x80	; 128
     bba:	b9 01       	movw	r22, r18
     bbc:	ca 01       	movw	r24, r20
     bbe:	2c 96       	adiw	r28, 0x0c	; 12
     bc0:	e2 e0       	ldi	r30, 0x02	; 2
     bc2:	0c 94 bc 3a 	jmp	0x7578	; 0x7578 <__epilogue_restores__+0x20>

00000bc6 <__floatunsisf>:
     bc6:	a8 e0       	ldi	r26, 0x08	; 8
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	e9 ee       	ldi	r30, 0xE9	; 233
     bcc:	f5 e0       	ldi	r31, 0x05	; 5
     bce:	0c 94 98 3a 	jmp	0x7530	; 0x7530 <__prologue_saves__+0x10>
     bd2:	7b 01       	movw	r14, r22
     bd4:	8c 01       	movw	r16, r24
     bd6:	61 15       	cp	r22, r1
     bd8:	71 05       	cpc	r23, r1
     bda:	81 05       	cpc	r24, r1
     bdc:	91 05       	cpc	r25, r1
     bde:	19 f4       	brne	.+6      	; 0xbe6 <__floatunsisf+0x20>
     be0:	82 e0       	ldi	r24, 0x02	; 2
     be2:	89 83       	std	Y+1, r24	; 0x01
     be4:	60 c0       	rjmp	.+192    	; 0xca6 <__floatunsisf+0xe0>
     be6:	83 e0       	ldi	r24, 0x03	; 3
     be8:	89 83       	std	Y+1, r24	; 0x01
     bea:	8e e1       	ldi	r24, 0x1E	; 30
     bec:	c8 2e       	mov	r12, r24
     bee:	d1 2c       	mov	r13, r1
     bf0:	dc 82       	std	Y+4, r13	; 0x04
     bf2:	cb 82       	std	Y+3, r12	; 0x03
     bf4:	ed 82       	std	Y+5, r14	; 0x05
     bf6:	fe 82       	std	Y+6, r15	; 0x06
     bf8:	0f 83       	std	Y+7, r16	; 0x07
     bfa:	18 87       	std	Y+8, r17	; 0x08
     bfc:	c8 01       	movw	r24, r16
     bfe:	b7 01       	movw	r22, r14
     c00:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__clzsi2>
     c04:	fc 01       	movw	r30, r24
     c06:	31 97       	sbiw	r30, 0x01	; 1
     c08:	f7 ff       	sbrs	r31, 7
     c0a:	3b c0       	rjmp	.+118    	; 0xc82 <__floatunsisf+0xbc>
     c0c:	22 27       	eor	r18, r18
     c0e:	33 27       	eor	r19, r19
     c10:	2e 1b       	sub	r18, r30
     c12:	3f 0b       	sbc	r19, r31
     c14:	57 01       	movw	r10, r14
     c16:	68 01       	movw	r12, r16
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__floatunsisf+0x5e>
     c1c:	d6 94       	lsr	r13
     c1e:	c7 94       	ror	r12
     c20:	b7 94       	ror	r11
     c22:	a7 94       	ror	r10
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__floatunsisf+0x56>
     c28:	40 e0       	ldi	r20, 0x00	; 0
     c2a:	50 e0       	ldi	r21, 0x00	; 0
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	a0 e0       	ldi	r26, 0x00	; 0
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	04 c0       	rjmp	.+8      	; 0xc42 <__floatunsisf+0x7c>
     c3a:	88 0f       	add	r24, r24
     c3c:	99 1f       	adc	r25, r25
     c3e:	aa 1f       	adc	r26, r26
     c40:	bb 1f       	adc	r27, r27
     c42:	2a 95       	dec	r18
     c44:	d2 f7       	brpl	.-12     	; 0xc3a <__floatunsisf+0x74>
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	a1 09       	sbc	r26, r1
     c4a:	b1 09       	sbc	r27, r1
     c4c:	8e 21       	and	r24, r14
     c4e:	9f 21       	and	r25, r15
     c50:	a0 23       	and	r26, r16
     c52:	b1 23       	and	r27, r17
     c54:	00 97       	sbiw	r24, 0x00	; 0
     c56:	a1 05       	cpc	r26, r1
     c58:	b1 05       	cpc	r27, r1
     c5a:	21 f0       	breq	.+8      	; 0xc64 <__floatunsisf+0x9e>
     c5c:	41 e0       	ldi	r20, 0x01	; 1
     c5e:	50 e0       	ldi	r21, 0x00	; 0
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	4a 29       	or	r20, r10
     c66:	5b 29       	or	r21, r11
     c68:	6c 29       	or	r22, r12
     c6a:	7d 29       	or	r23, r13
     c6c:	4d 83       	std	Y+5, r20	; 0x05
     c6e:	5e 83       	std	Y+6, r21	; 0x06
     c70:	6f 83       	std	Y+7, r22	; 0x07
     c72:	78 87       	std	Y+8, r23	; 0x08
     c74:	8e e1       	ldi	r24, 0x1E	; 30
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	8e 1b       	sub	r24, r30
     c7a:	9f 0b       	sbc	r25, r31
     c7c:	9c 83       	std	Y+4, r25	; 0x04
     c7e:	8b 83       	std	Y+3, r24	; 0x03
     c80:	12 c0       	rjmp	.+36     	; 0xca6 <__floatunsisf+0xe0>
     c82:	30 97       	sbiw	r30, 0x00	; 0
     c84:	81 f0       	breq	.+32     	; 0xca6 <__floatunsisf+0xe0>
     c86:	0e 2e       	mov	r0, r30
     c88:	04 c0       	rjmp	.+8      	; 0xc92 <__floatunsisf+0xcc>
     c8a:	ee 0c       	add	r14, r14
     c8c:	ff 1c       	adc	r15, r15
     c8e:	00 1f       	adc	r16, r16
     c90:	11 1f       	adc	r17, r17
     c92:	0a 94       	dec	r0
     c94:	d2 f7       	brpl	.-12     	; 0xc8a <__floatunsisf+0xc4>
     c96:	ed 82       	std	Y+5, r14	; 0x05
     c98:	fe 82       	std	Y+6, r15	; 0x06
     c9a:	0f 83       	std	Y+7, r16	; 0x07
     c9c:	18 87       	std	Y+8, r17	; 0x08
     c9e:	ce 1a       	sub	r12, r30
     ca0:	df 0a       	sbc	r13, r31
     ca2:	dc 82       	std	Y+4, r13	; 0x04
     ca4:	cb 82       	std	Y+3, r12	; 0x03
     ca6:	1a 82       	std	Y+2, r1	; 0x02
     ca8:	ce 01       	movw	r24, r28
     caa:	01 96       	adiw	r24, 0x01	; 1
     cac:	0e 94 2a 07 	call	0xe54	; 0xe54 <__pack_f>
     cb0:	28 96       	adiw	r28, 0x08	; 8
     cb2:	ea e0       	ldi	r30, 0x0A	; 10
     cb4:	0c 94 b4 3a 	jmp	0x7568	; 0x7568 <__epilogue_restores__+0x10>

00000cb8 <__lshrdi3>:
     cb8:	ef 92       	push	r14
     cba:	ff 92       	push	r15
     cbc:	0f 93       	push	r16
     cbe:	df 93       	push	r29
     cc0:	cf 93       	push	r28
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	60 97       	sbiw	r28, 0x10	; 16
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	f8 94       	cli
     ccc:	de bf       	out	0x3e, r29	; 62
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	cd bf       	out	0x3d, r28	; 61
     cd2:	a8 2f       	mov	r26, r24
     cd4:	00 23       	and	r16, r16
     cd6:	09 f4       	brne	.+2      	; 0xcda <__lshrdi3+0x22>
     cd8:	61 c0       	rjmp	.+194    	; 0xd9c <__lshrdi3+0xe4>
     cda:	7e 01       	movw	r14, r28
     cdc:	08 94       	sec
     cde:	e1 1c       	adc	r14, r1
     ce0:	f1 1c       	adc	r15, r1
     ce2:	88 e0       	ldi	r24, 0x08	; 8
     ce4:	f7 01       	movw	r30, r14
     ce6:	11 92       	st	Z+, r1
     ce8:	8a 95       	dec	r24
     cea:	e9 f7       	brne	.-6      	; 0xce6 <__lshrdi3+0x2e>
     cec:	29 83       	std	Y+1, r18	; 0x01
     cee:	3a 83       	std	Y+2, r19	; 0x02
     cf0:	4b 83       	std	Y+3, r20	; 0x03
     cf2:	5c 83       	std	Y+4, r21	; 0x04
     cf4:	6d 83       	std	Y+5, r22	; 0x05
     cf6:	7e 83       	std	Y+6, r23	; 0x06
     cf8:	af 83       	std	Y+7, r26	; 0x07
     cfa:	98 87       	std	Y+8, r25	; 0x08
     cfc:	80 e2       	ldi	r24, 0x20	; 32
     cfe:	80 1b       	sub	r24, r16
     d00:	e8 2f       	mov	r30, r24
     d02:	ff 27       	eor	r31, r31
     d04:	e7 fd       	sbrc	r30, 7
     d06:	f0 95       	com	r31
     d08:	4d 81       	ldd	r20, Y+5	; 0x05
     d0a:	5e 81       	ldd	r21, Y+6	; 0x06
     d0c:	6f 81       	ldd	r22, Y+7	; 0x07
     d0e:	78 85       	ldd	r23, Y+8	; 0x08
     d10:	18 16       	cp	r1, r24
     d12:	84 f0       	brlt	.+32     	; 0xd34 <__lshrdi3+0x7c>
     d14:	1d 86       	std	Y+13, r1	; 0x0d
     d16:	1e 86       	std	Y+14, r1	; 0x0e
     d18:	1f 86       	std	Y+15, r1	; 0x0f
     d1a:	18 8a       	std	Y+16, r1	; 0x10
     d1c:	88 27       	eor	r24, r24
     d1e:	99 27       	eor	r25, r25
     d20:	8e 1b       	sub	r24, r30
     d22:	9f 0b       	sbc	r25, r31
     d24:	04 c0       	rjmp	.+8      	; 0xd2e <__lshrdi3+0x76>
     d26:	76 95       	lsr	r23
     d28:	67 95       	ror	r22
     d2a:	57 95       	ror	r21
     d2c:	47 95       	ror	r20
     d2e:	8a 95       	dec	r24
     d30:	d2 f7       	brpl	.-12     	; 0xd26 <__lshrdi3+0x6e>
     d32:	28 c0       	rjmp	.+80     	; 0xd84 <__lshrdi3+0xcc>
     d34:	20 2f       	mov	r18, r16
     d36:	33 27       	eor	r19, r19
     d38:	27 fd       	sbrc	r18, 7
     d3a:	30 95       	com	r19
     d3c:	db 01       	movw	r26, r22
     d3e:	ca 01       	movw	r24, r20
     d40:	02 2e       	mov	r0, r18
     d42:	04 c0       	rjmp	.+8      	; 0xd4c <__lshrdi3+0x94>
     d44:	b6 95       	lsr	r27
     d46:	a7 95       	ror	r26
     d48:	97 95       	ror	r25
     d4a:	87 95       	ror	r24
     d4c:	0a 94       	dec	r0
     d4e:	d2 f7       	brpl	.-12     	; 0xd44 <__lshrdi3+0x8c>
     d50:	8d 87       	std	Y+13, r24	; 0x0d
     d52:	9e 87       	std	Y+14, r25	; 0x0e
     d54:	af 87       	std	Y+15, r26	; 0x0f
     d56:	b8 8b       	std	Y+16, r27	; 0x10
     d58:	04 c0       	rjmp	.+8      	; 0xd62 <__lshrdi3+0xaa>
     d5a:	44 0f       	add	r20, r20
     d5c:	55 1f       	adc	r21, r21
     d5e:	66 1f       	adc	r22, r22
     d60:	77 1f       	adc	r23, r23
     d62:	ea 95       	dec	r30
     d64:	d2 f7       	brpl	.-12     	; 0xd5a <__lshrdi3+0xa2>
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	9a 81       	ldd	r25, Y+2	; 0x02
     d6a:	ab 81       	ldd	r26, Y+3	; 0x03
     d6c:	bc 81       	ldd	r27, Y+4	; 0x04
     d6e:	04 c0       	rjmp	.+8      	; 0xd78 <__lshrdi3+0xc0>
     d70:	b6 95       	lsr	r27
     d72:	a7 95       	ror	r26
     d74:	97 95       	ror	r25
     d76:	87 95       	ror	r24
     d78:	2a 95       	dec	r18
     d7a:	d2 f7       	brpl	.-12     	; 0xd70 <__lshrdi3+0xb8>
     d7c:	48 2b       	or	r20, r24
     d7e:	59 2b       	or	r21, r25
     d80:	6a 2b       	or	r22, r26
     d82:	7b 2b       	or	r23, r27
     d84:	49 87       	std	Y+9, r20	; 0x09
     d86:	5a 87       	std	Y+10, r21	; 0x0a
     d88:	6b 87       	std	Y+11, r22	; 0x0b
     d8a:	7c 87       	std	Y+12, r23	; 0x0c
     d8c:	29 85       	ldd	r18, Y+9	; 0x09
     d8e:	3a 85       	ldd	r19, Y+10	; 0x0a
     d90:	4b 85       	ldd	r20, Y+11	; 0x0b
     d92:	5c 85       	ldd	r21, Y+12	; 0x0c
     d94:	6d 85       	ldd	r22, Y+13	; 0x0d
     d96:	7e 85       	ldd	r23, Y+14	; 0x0e
     d98:	af 85       	ldd	r26, Y+15	; 0x0f
     d9a:	98 89       	ldd	r25, Y+16	; 0x10
     d9c:	8a 2f       	mov	r24, r26
     d9e:	60 96       	adiw	r28, 0x10	; 16
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	cf 91       	pop	r28
     dac:	df 91       	pop	r29
     dae:	0f 91       	pop	r16
     db0:	ff 90       	pop	r15
     db2:	ef 90       	pop	r14
     db4:	08 95       	ret

00000db6 <__clzsi2>:
     db6:	ef 92       	push	r14
     db8:	ff 92       	push	r15
     dba:	0f 93       	push	r16
     dbc:	1f 93       	push	r17
     dbe:	7b 01       	movw	r14, r22
     dc0:	8c 01       	movw	r16, r24
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	e8 16       	cp	r14, r24
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	f8 06       	cpc	r15, r24
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	08 07       	cpc	r16, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	18 07       	cpc	r17, r24
     dd2:	88 f4       	brcc	.+34     	; 0xdf6 <__clzsi2+0x40>
     dd4:	8f ef       	ldi	r24, 0xFF	; 255
     dd6:	e8 16       	cp	r14, r24
     dd8:	f1 04       	cpc	r15, r1
     dda:	01 05       	cpc	r16, r1
     ddc:	11 05       	cpc	r17, r1
     dde:	31 f0       	breq	.+12     	; 0xdec <__clzsi2+0x36>
     de0:	28 f0       	brcs	.+10     	; 0xdec <__clzsi2+0x36>
     de2:	88 e0       	ldi	r24, 0x08	; 8
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	a0 e0       	ldi	r26, 0x00	; 0
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	17 c0       	rjmp	.+46     	; 0xe1a <__clzsi2+0x64>
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	a0 e0       	ldi	r26, 0x00	; 0
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	12 c0       	rjmp	.+36     	; 0xe1a <__clzsi2+0x64>
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	e8 16       	cp	r14, r24
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	f8 06       	cpc	r15, r24
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	08 07       	cpc	r16, r24
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	18 07       	cpc	r17, r24
     e06:	28 f0       	brcs	.+10     	; 0xe12 <__clzsi2+0x5c>
     e08:	88 e1       	ldi	r24, 0x18	; 24
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	a0 e0       	ldi	r26, 0x00	; 0
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	04 c0       	rjmp	.+8      	; 0xe1a <__clzsi2+0x64>
     e12:	80 e1       	ldi	r24, 0x10	; 16
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	a0 e0       	ldi	r26, 0x00	; 0
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	20 e2       	ldi	r18, 0x20	; 32
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	40 e0       	ldi	r20, 0x00	; 0
     e20:	50 e0       	ldi	r21, 0x00	; 0
     e22:	28 1b       	sub	r18, r24
     e24:	39 0b       	sbc	r19, r25
     e26:	4a 0b       	sbc	r20, r26
     e28:	5b 0b       	sbc	r21, r27
     e2a:	04 c0       	rjmp	.+8      	; 0xe34 <__clzsi2+0x7e>
     e2c:	16 95       	lsr	r17
     e2e:	07 95       	ror	r16
     e30:	f7 94       	ror	r15
     e32:	e7 94       	ror	r14
     e34:	8a 95       	dec	r24
     e36:	d2 f7       	brpl	.-12     	; 0xe2c <__clzsi2+0x76>
     e38:	f7 01       	movw	r30, r14
     e3a:	e6 51       	subi	r30, 0x16	; 22
     e3c:	fe 4f       	sbci	r31, 0xFE	; 254
     e3e:	80 81       	ld	r24, Z
     e40:	28 1b       	sub	r18, r24
     e42:	31 09       	sbc	r19, r1
     e44:	41 09       	sbc	r20, r1
     e46:	51 09       	sbc	r21, r1
     e48:	c9 01       	movw	r24, r18
     e4a:	1f 91       	pop	r17
     e4c:	0f 91       	pop	r16
     e4e:	ff 90       	pop	r15
     e50:	ef 90       	pop	r14
     e52:	08 95       	ret

00000e54 <__pack_f>:
     e54:	df 92       	push	r13
     e56:	ef 92       	push	r14
     e58:	ff 92       	push	r15
     e5a:	0f 93       	push	r16
     e5c:	1f 93       	push	r17
     e5e:	fc 01       	movw	r30, r24
     e60:	e4 80       	ldd	r14, Z+4	; 0x04
     e62:	f5 80       	ldd	r15, Z+5	; 0x05
     e64:	06 81       	ldd	r16, Z+6	; 0x06
     e66:	17 81       	ldd	r17, Z+7	; 0x07
     e68:	d1 80       	ldd	r13, Z+1	; 0x01
     e6a:	80 81       	ld	r24, Z
     e6c:	82 30       	cpi	r24, 0x02	; 2
     e6e:	48 f4       	brcc	.+18     	; 0xe82 <__pack_f+0x2e>
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	a0 e1       	ldi	r26, 0x10	; 16
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e8 2a       	or	r14, r24
     e7a:	f9 2a       	or	r15, r25
     e7c:	0a 2b       	or	r16, r26
     e7e:	1b 2b       	or	r17, r27
     e80:	a5 c0       	rjmp	.+330    	; 0xfcc <__pack_f+0x178>
     e82:	84 30       	cpi	r24, 0x04	; 4
     e84:	09 f4       	brne	.+2      	; 0xe88 <__pack_f+0x34>
     e86:	9f c0       	rjmp	.+318    	; 0xfc6 <__pack_f+0x172>
     e88:	82 30       	cpi	r24, 0x02	; 2
     e8a:	21 f4       	brne	.+8      	; 0xe94 <__pack_f+0x40>
     e8c:	ee 24       	eor	r14, r14
     e8e:	ff 24       	eor	r15, r15
     e90:	87 01       	movw	r16, r14
     e92:	05 c0       	rjmp	.+10     	; 0xe9e <__pack_f+0x4a>
     e94:	e1 14       	cp	r14, r1
     e96:	f1 04       	cpc	r15, r1
     e98:	01 05       	cpc	r16, r1
     e9a:	11 05       	cpc	r17, r1
     e9c:	19 f4       	brne	.+6      	; 0xea4 <__pack_f+0x50>
     e9e:	e0 e0       	ldi	r30, 0x00	; 0
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	96 c0       	rjmp	.+300    	; 0xfd0 <__pack_f+0x17c>
     ea4:	62 81       	ldd	r22, Z+2	; 0x02
     ea6:	73 81       	ldd	r23, Z+3	; 0x03
     ea8:	9f ef       	ldi	r25, 0xFF	; 255
     eaa:	62 38       	cpi	r22, 0x82	; 130
     eac:	79 07       	cpc	r23, r25
     eae:	0c f0       	brlt	.+2      	; 0xeb2 <__pack_f+0x5e>
     eb0:	5b c0       	rjmp	.+182    	; 0xf68 <__pack_f+0x114>
     eb2:	22 e8       	ldi	r18, 0x82	; 130
     eb4:	3f ef       	ldi	r19, 0xFF	; 255
     eb6:	26 1b       	sub	r18, r22
     eb8:	37 0b       	sbc	r19, r23
     eba:	2a 31       	cpi	r18, 0x1A	; 26
     ebc:	31 05       	cpc	r19, r1
     ebe:	2c f0       	brlt	.+10     	; 0xeca <__pack_f+0x76>
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	40 e0       	ldi	r20, 0x00	; 0
     ec6:	50 e0       	ldi	r21, 0x00	; 0
     ec8:	2a c0       	rjmp	.+84     	; 0xf1e <__pack_f+0xca>
     eca:	b8 01       	movw	r22, r16
     ecc:	a7 01       	movw	r20, r14
     ece:	02 2e       	mov	r0, r18
     ed0:	04 c0       	rjmp	.+8      	; 0xeda <__pack_f+0x86>
     ed2:	76 95       	lsr	r23
     ed4:	67 95       	ror	r22
     ed6:	57 95       	ror	r21
     ed8:	47 95       	ror	r20
     eda:	0a 94       	dec	r0
     edc:	d2 f7       	brpl	.-12     	; 0xed2 <__pack_f+0x7e>
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	a0 e0       	ldi	r26, 0x00	; 0
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	04 c0       	rjmp	.+8      	; 0xef0 <__pack_f+0x9c>
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	aa 1f       	adc	r26, r26
     eee:	bb 1f       	adc	r27, r27
     ef0:	2a 95       	dec	r18
     ef2:	d2 f7       	brpl	.-12     	; 0xee8 <__pack_f+0x94>
     ef4:	01 97       	sbiw	r24, 0x01	; 1
     ef6:	a1 09       	sbc	r26, r1
     ef8:	b1 09       	sbc	r27, r1
     efa:	8e 21       	and	r24, r14
     efc:	9f 21       	and	r25, r15
     efe:	a0 23       	and	r26, r16
     f00:	b1 23       	and	r27, r17
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	a1 05       	cpc	r26, r1
     f06:	b1 05       	cpc	r27, r1
     f08:	21 f0       	breq	.+8      	; 0xf12 <__pack_f+0xbe>
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	a0 e0       	ldi	r26, 0x00	; 0
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	9a 01       	movw	r18, r20
     f14:	ab 01       	movw	r20, r22
     f16:	28 2b       	or	r18, r24
     f18:	39 2b       	or	r19, r25
     f1a:	4a 2b       	or	r20, r26
     f1c:	5b 2b       	or	r21, r27
     f1e:	da 01       	movw	r26, r20
     f20:	c9 01       	movw	r24, r18
     f22:	8f 77       	andi	r24, 0x7F	; 127
     f24:	90 70       	andi	r25, 0x00	; 0
     f26:	a0 70       	andi	r26, 0x00	; 0
     f28:	b0 70       	andi	r27, 0x00	; 0
     f2a:	80 34       	cpi	r24, 0x40	; 64
     f2c:	91 05       	cpc	r25, r1
     f2e:	a1 05       	cpc	r26, r1
     f30:	b1 05       	cpc	r27, r1
     f32:	39 f4       	brne	.+14     	; 0xf42 <__pack_f+0xee>
     f34:	27 ff       	sbrs	r18, 7
     f36:	09 c0       	rjmp	.+18     	; 0xf4a <__pack_f+0xf6>
     f38:	20 5c       	subi	r18, 0xC0	; 192
     f3a:	3f 4f       	sbci	r19, 0xFF	; 255
     f3c:	4f 4f       	sbci	r20, 0xFF	; 255
     f3e:	5f 4f       	sbci	r21, 0xFF	; 255
     f40:	04 c0       	rjmp	.+8      	; 0xf4a <__pack_f+0xf6>
     f42:	21 5c       	subi	r18, 0xC1	; 193
     f44:	3f 4f       	sbci	r19, 0xFF	; 255
     f46:	4f 4f       	sbci	r20, 0xFF	; 255
     f48:	5f 4f       	sbci	r21, 0xFF	; 255
     f4a:	e0 e0       	ldi	r30, 0x00	; 0
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	20 30       	cpi	r18, 0x00	; 0
     f50:	a0 e0       	ldi	r26, 0x00	; 0
     f52:	3a 07       	cpc	r19, r26
     f54:	a0 e0       	ldi	r26, 0x00	; 0
     f56:	4a 07       	cpc	r20, r26
     f58:	a0 e4       	ldi	r26, 0x40	; 64
     f5a:	5a 07       	cpc	r21, r26
     f5c:	10 f0       	brcs	.+4      	; 0xf62 <__pack_f+0x10e>
     f5e:	e1 e0       	ldi	r30, 0x01	; 1
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	79 01       	movw	r14, r18
     f64:	8a 01       	movw	r16, r20
     f66:	27 c0       	rjmp	.+78     	; 0xfb6 <__pack_f+0x162>
     f68:	60 38       	cpi	r22, 0x80	; 128
     f6a:	71 05       	cpc	r23, r1
     f6c:	64 f5       	brge	.+88     	; 0xfc6 <__pack_f+0x172>
     f6e:	fb 01       	movw	r30, r22
     f70:	e1 58       	subi	r30, 0x81	; 129
     f72:	ff 4f       	sbci	r31, 0xFF	; 255
     f74:	d8 01       	movw	r26, r16
     f76:	c7 01       	movw	r24, r14
     f78:	8f 77       	andi	r24, 0x7F	; 127
     f7a:	90 70       	andi	r25, 0x00	; 0
     f7c:	a0 70       	andi	r26, 0x00	; 0
     f7e:	b0 70       	andi	r27, 0x00	; 0
     f80:	80 34       	cpi	r24, 0x40	; 64
     f82:	91 05       	cpc	r25, r1
     f84:	a1 05       	cpc	r26, r1
     f86:	b1 05       	cpc	r27, r1
     f88:	39 f4       	brne	.+14     	; 0xf98 <__pack_f+0x144>
     f8a:	e7 fe       	sbrs	r14, 7
     f8c:	0d c0       	rjmp	.+26     	; 0xfa8 <__pack_f+0x154>
     f8e:	80 e4       	ldi	r24, 0x40	; 64
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	a0 e0       	ldi	r26, 0x00	; 0
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	04 c0       	rjmp	.+8      	; 0xfa0 <__pack_f+0x14c>
     f98:	8f e3       	ldi	r24, 0x3F	; 63
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	a0 e0       	ldi	r26, 0x00	; 0
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e8 0e       	add	r14, r24
     fa2:	f9 1e       	adc	r15, r25
     fa4:	0a 1f       	adc	r16, r26
     fa6:	1b 1f       	adc	r17, r27
     fa8:	17 ff       	sbrs	r17, 7
     faa:	05 c0       	rjmp	.+10     	; 0xfb6 <__pack_f+0x162>
     fac:	16 95       	lsr	r17
     fae:	07 95       	ror	r16
     fb0:	f7 94       	ror	r15
     fb2:	e7 94       	ror	r14
     fb4:	31 96       	adiw	r30, 0x01	; 1
     fb6:	87 e0       	ldi	r24, 0x07	; 7
     fb8:	16 95       	lsr	r17
     fba:	07 95       	ror	r16
     fbc:	f7 94       	ror	r15
     fbe:	e7 94       	ror	r14
     fc0:	8a 95       	dec	r24
     fc2:	d1 f7       	brne	.-12     	; 0xfb8 <__pack_f+0x164>
     fc4:	05 c0       	rjmp	.+10     	; 0xfd0 <__pack_f+0x17c>
     fc6:	ee 24       	eor	r14, r14
     fc8:	ff 24       	eor	r15, r15
     fca:	87 01       	movw	r16, r14
     fcc:	ef ef       	ldi	r30, 0xFF	; 255
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	6e 2f       	mov	r22, r30
     fd2:	67 95       	ror	r22
     fd4:	66 27       	eor	r22, r22
     fd6:	67 95       	ror	r22
     fd8:	90 2f       	mov	r25, r16
     fda:	9f 77       	andi	r25, 0x7F	; 127
     fdc:	d7 94       	ror	r13
     fde:	dd 24       	eor	r13, r13
     fe0:	d7 94       	ror	r13
     fe2:	8e 2f       	mov	r24, r30
     fe4:	86 95       	lsr	r24
     fe6:	49 2f       	mov	r20, r25
     fe8:	46 2b       	or	r20, r22
     fea:	58 2f       	mov	r21, r24
     fec:	5d 29       	or	r21, r13
     fee:	b7 01       	movw	r22, r14
     ff0:	ca 01       	movw	r24, r20
     ff2:	1f 91       	pop	r17
     ff4:	0f 91       	pop	r16
     ff6:	ff 90       	pop	r15
     ff8:	ef 90       	pop	r14
     ffa:	df 90       	pop	r13
     ffc:	08 95       	ret

00000ffe <__unpack_f>:
     ffe:	fc 01       	movw	r30, r24
    1000:	db 01       	movw	r26, r22
    1002:	40 81       	ld	r20, Z
    1004:	51 81       	ldd	r21, Z+1	; 0x01
    1006:	22 81       	ldd	r18, Z+2	; 0x02
    1008:	62 2f       	mov	r22, r18
    100a:	6f 77       	andi	r22, 0x7F	; 127
    100c:	70 e0       	ldi	r23, 0x00	; 0
    100e:	22 1f       	adc	r18, r18
    1010:	22 27       	eor	r18, r18
    1012:	22 1f       	adc	r18, r18
    1014:	93 81       	ldd	r25, Z+3	; 0x03
    1016:	89 2f       	mov	r24, r25
    1018:	88 0f       	add	r24, r24
    101a:	82 2b       	or	r24, r18
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	99 1f       	adc	r25, r25
    1022:	99 27       	eor	r25, r25
    1024:	99 1f       	adc	r25, r25
    1026:	11 96       	adiw	r26, 0x01	; 1
    1028:	9c 93       	st	X, r25
    102a:	11 97       	sbiw	r26, 0x01	; 1
    102c:	21 15       	cp	r18, r1
    102e:	31 05       	cpc	r19, r1
    1030:	a9 f5       	brne	.+106    	; 0x109c <__unpack_f+0x9e>
    1032:	41 15       	cp	r20, r1
    1034:	51 05       	cpc	r21, r1
    1036:	61 05       	cpc	r22, r1
    1038:	71 05       	cpc	r23, r1
    103a:	11 f4       	brne	.+4      	; 0x1040 <__unpack_f+0x42>
    103c:	82 e0       	ldi	r24, 0x02	; 2
    103e:	37 c0       	rjmp	.+110    	; 0x10ae <__unpack_f+0xb0>
    1040:	82 e8       	ldi	r24, 0x82	; 130
    1042:	9f ef       	ldi	r25, 0xFF	; 255
    1044:	13 96       	adiw	r26, 0x03	; 3
    1046:	9c 93       	st	X, r25
    1048:	8e 93       	st	-X, r24
    104a:	12 97       	sbiw	r26, 0x02	; 2
    104c:	9a 01       	movw	r18, r20
    104e:	ab 01       	movw	r20, r22
    1050:	67 e0       	ldi	r22, 0x07	; 7
    1052:	22 0f       	add	r18, r18
    1054:	33 1f       	adc	r19, r19
    1056:	44 1f       	adc	r20, r20
    1058:	55 1f       	adc	r21, r21
    105a:	6a 95       	dec	r22
    105c:	d1 f7       	brne	.-12     	; 0x1052 <__unpack_f+0x54>
    105e:	83 e0       	ldi	r24, 0x03	; 3
    1060:	8c 93       	st	X, r24
    1062:	0d c0       	rjmp	.+26     	; 0x107e <__unpack_f+0x80>
    1064:	22 0f       	add	r18, r18
    1066:	33 1f       	adc	r19, r19
    1068:	44 1f       	adc	r20, r20
    106a:	55 1f       	adc	r21, r21
    106c:	12 96       	adiw	r26, 0x02	; 2
    106e:	8d 91       	ld	r24, X+
    1070:	9c 91       	ld	r25, X
    1072:	13 97       	sbiw	r26, 0x03	; 3
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	13 96       	adiw	r26, 0x03	; 3
    1078:	9c 93       	st	X, r25
    107a:	8e 93       	st	-X, r24
    107c:	12 97       	sbiw	r26, 0x02	; 2
    107e:	20 30       	cpi	r18, 0x00	; 0
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	38 07       	cpc	r19, r24
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	48 07       	cpc	r20, r24
    1088:	80 e4       	ldi	r24, 0x40	; 64
    108a:	58 07       	cpc	r21, r24
    108c:	58 f3       	brcs	.-42     	; 0x1064 <__unpack_f+0x66>
    108e:	14 96       	adiw	r26, 0x04	; 4
    1090:	2d 93       	st	X+, r18
    1092:	3d 93       	st	X+, r19
    1094:	4d 93       	st	X+, r20
    1096:	5c 93       	st	X, r21
    1098:	17 97       	sbiw	r26, 0x07	; 7
    109a:	08 95       	ret
    109c:	2f 3f       	cpi	r18, 0xFF	; 255
    109e:	31 05       	cpc	r19, r1
    10a0:	79 f4       	brne	.+30     	; 0x10c0 <__unpack_f+0xc2>
    10a2:	41 15       	cp	r20, r1
    10a4:	51 05       	cpc	r21, r1
    10a6:	61 05       	cpc	r22, r1
    10a8:	71 05       	cpc	r23, r1
    10aa:	19 f4       	brne	.+6      	; 0x10b2 <__unpack_f+0xb4>
    10ac:	84 e0       	ldi	r24, 0x04	; 4
    10ae:	8c 93       	st	X, r24
    10b0:	08 95       	ret
    10b2:	64 ff       	sbrs	r22, 4
    10b4:	03 c0       	rjmp	.+6      	; 0x10bc <__unpack_f+0xbe>
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	8c 93       	st	X, r24
    10ba:	12 c0       	rjmp	.+36     	; 0x10e0 <__unpack_f+0xe2>
    10bc:	1c 92       	st	X, r1
    10be:	10 c0       	rjmp	.+32     	; 0x10e0 <__unpack_f+0xe2>
    10c0:	2f 57       	subi	r18, 0x7F	; 127
    10c2:	30 40       	sbci	r19, 0x00	; 0
    10c4:	13 96       	adiw	r26, 0x03	; 3
    10c6:	3c 93       	st	X, r19
    10c8:	2e 93       	st	-X, r18
    10ca:	12 97       	sbiw	r26, 0x02	; 2
    10cc:	83 e0       	ldi	r24, 0x03	; 3
    10ce:	8c 93       	st	X, r24
    10d0:	87 e0       	ldi	r24, 0x07	; 7
    10d2:	44 0f       	add	r20, r20
    10d4:	55 1f       	adc	r21, r21
    10d6:	66 1f       	adc	r22, r22
    10d8:	77 1f       	adc	r23, r23
    10da:	8a 95       	dec	r24
    10dc:	d1 f7       	brne	.-12     	; 0x10d2 <__unpack_f+0xd4>
    10de:	70 64       	ori	r23, 0x40	; 64
    10e0:	14 96       	adiw	r26, 0x04	; 4
    10e2:	4d 93       	st	X+, r20
    10e4:	5d 93       	st	X+, r21
    10e6:	6d 93       	st	X+, r22
    10e8:	7c 93       	st	X, r23
    10ea:	17 97       	sbiw	r26, 0x07	; 7
    10ec:	08 95       	ret

000010ee <__fpcmp_parts_f>:
    10ee:	1f 93       	push	r17
    10f0:	dc 01       	movw	r26, r24
    10f2:	fb 01       	movw	r30, r22
    10f4:	9c 91       	ld	r25, X
    10f6:	92 30       	cpi	r25, 0x02	; 2
    10f8:	08 f4       	brcc	.+2      	; 0x10fc <__fpcmp_parts_f+0xe>
    10fa:	47 c0       	rjmp	.+142    	; 0x118a <__fpcmp_parts_f+0x9c>
    10fc:	80 81       	ld	r24, Z
    10fe:	82 30       	cpi	r24, 0x02	; 2
    1100:	08 f4       	brcc	.+2      	; 0x1104 <__fpcmp_parts_f+0x16>
    1102:	43 c0       	rjmp	.+134    	; 0x118a <__fpcmp_parts_f+0x9c>
    1104:	94 30       	cpi	r25, 0x04	; 4
    1106:	51 f4       	brne	.+20     	; 0x111c <__fpcmp_parts_f+0x2e>
    1108:	11 96       	adiw	r26, 0x01	; 1
    110a:	1c 91       	ld	r17, X
    110c:	84 30       	cpi	r24, 0x04	; 4
    110e:	99 f5       	brne	.+102    	; 0x1176 <__fpcmp_parts_f+0x88>
    1110:	81 81       	ldd	r24, Z+1	; 0x01
    1112:	68 2f       	mov	r22, r24
    1114:	70 e0       	ldi	r23, 0x00	; 0
    1116:	61 1b       	sub	r22, r17
    1118:	71 09       	sbc	r23, r1
    111a:	3f c0       	rjmp	.+126    	; 0x119a <__fpcmp_parts_f+0xac>
    111c:	84 30       	cpi	r24, 0x04	; 4
    111e:	21 f0       	breq	.+8      	; 0x1128 <__fpcmp_parts_f+0x3a>
    1120:	92 30       	cpi	r25, 0x02	; 2
    1122:	31 f4       	brne	.+12     	; 0x1130 <__fpcmp_parts_f+0x42>
    1124:	82 30       	cpi	r24, 0x02	; 2
    1126:	b9 f1       	breq	.+110    	; 0x1196 <__fpcmp_parts_f+0xa8>
    1128:	81 81       	ldd	r24, Z+1	; 0x01
    112a:	88 23       	and	r24, r24
    112c:	89 f1       	breq	.+98     	; 0x1190 <__fpcmp_parts_f+0xa2>
    112e:	2d c0       	rjmp	.+90     	; 0x118a <__fpcmp_parts_f+0x9c>
    1130:	11 96       	adiw	r26, 0x01	; 1
    1132:	1c 91       	ld	r17, X
    1134:	11 97       	sbiw	r26, 0x01	; 1
    1136:	82 30       	cpi	r24, 0x02	; 2
    1138:	f1 f0       	breq	.+60     	; 0x1176 <__fpcmp_parts_f+0x88>
    113a:	81 81       	ldd	r24, Z+1	; 0x01
    113c:	18 17       	cp	r17, r24
    113e:	d9 f4       	brne	.+54     	; 0x1176 <__fpcmp_parts_f+0x88>
    1140:	12 96       	adiw	r26, 0x02	; 2
    1142:	2d 91       	ld	r18, X+
    1144:	3c 91       	ld	r19, X
    1146:	13 97       	sbiw	r26, 0x03	; 3
    1148:	82 81       	ldd	r24, Z+2	; 0x02
    114a:	93 81       	ldd	r25, Z+3	; 0x03
    114c:	82 17       	cp	r24, r18
    114e:	93 07       	cpc	r25, r19
    1150:	94 f0       	brlt	.+36     	; 0x1176 <__fpcmp_parts_f+0x88>
    1152:	28 17       	cp	r18, r24
    1154:	39 07       	cpc	r19, r25
    1156:	bc f0       	brlt	.+46     	; 0x1186 <__fpcmp_parts_f+0x98>
    1158:	14 96       	adiw	r26, 0x04	; 4
    115a:	8d 91       	ld	r24, X+
    115c:	9d 91       	ld	r25, X+
    115e:	0d 90       	ld	r0, X+
    1160:	bc 91       	ld	r27, X
    1162:	a0 2d       	mov	r26, r0
    1164:	24 81       	ldd	r18, Z+4	; 0x04
    1166:	35 81       	ldd	r19, Z+5	; 0x05
    1168:	46 81       	ldd	r20, Z+6	; 0x06
    116a:	57 81       	ldd	r21, Z+7	; 0x07
    116c:	28 17       	cp	r18, r24
    116e:	39 07       	cpc	r19, r25
    1170:	4a 07       	cpc	r20, r26
    1172:	5b 07       	cpc	r21, r27
    1174:	18 f4       	brcc	.+6      	; 0x117c <__fpcmp_parts_f+0x8e>
    1176:	11 23       	and	r17, r17
    1178:	41 f0       	breq	.+16     	; 0x118a <__fpcmp_parts_f+0x9c>
    117a:	0a c0       	rjmp	.+20     	; 0x1190 <__fpcmp_parts_f+0xa2>
    117c:	82 17       	cp	r24, r18
    117e:	93 07       	cpc	r25, r19
    1180:	a4 07       	cpc	r26, r20
    1182:	b5 07       	cpc	r27, r21
    1184:	40 f4       	brcc	.+16     	; 0x1196 <__fpcmp_parts_f+0xa8>
    1186:	11 23       	and	r17, r17
    1188:	19 f0       	breq	.+6      	; 0x1190 <__fpcmp_parts_f+0xa2>
    118a:	61 e0       	ldi	r22, 0x01	; 1
    118c:	70 e0       	ldi	r23, 0x00	; 0
    118e:	05 c0       	rjmp	.+10     	; 0x119a <__fpcmp_parts_f+0xac>
    1190:	6f ef       	ldi	r22, 0xFF	; 255
    1192:	7f ef       	ldi	r23, 0xFF	; 255
    1194:	02 c0       	rjmp	.+4      	; 0x119a <__fpcmp_parts_f+0xac>
    1196:	60 e0       	ldi	r22, 0x00	; 0
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	cb 01       	movw	r24, r22
    119c:	1f 91       	pop	r17
    119e:	08 95       	ret

000011a0 <MTIMER0_enInit>:
static void (*CallBackArr[2])(void)={NULL,NULL};
static u32 g_u32NumberOfOverflows =0;
static u8  g_u8NumberOfRemainingcounts=0;
static u32 g_u32NumOfCmpMatches=0;
ErrorState_t MTIMER0_enInit(void)
{
    11a0:	df 93       	push	r29
    11a2:	cf 93       	push	r28
    11a4:	0f 92       	push	r0
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
#if(MTIMER0_MODE==MTIMER0_MODE_CTC||MTIMER0_MODE==MTIMER0_MODE_NORMAL||MTIMER0_MODE==MTIMER0_MODE_FAST_PWM||MTIMER0_MODE==MTIMER0_MODE_PHASE_CORRECT_PWM)
	//timer mode
	//step1 :clear bits by applying Mask
		TCCR0_REG &= MTIMER0_MODE_MASK;
    11aa:	a3 e5       	ldi	r26, 0x53	; 83
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e3 e5       	ldi	r30, 0x53	; 83
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	87 7b       	andi	r24, 0xB7	; 183
    11b6:	8c 93       	st	X, r24
	//step 2 :set insert vlaue
		TCCR0_REG |=MTIMER0_MODE;
    11b8:	a3 e5       	ldi	r26, 0x53	; 83
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e3 e5       	ldi	r30, 0x53	; 83
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	88 64       	ori	r24, 0x48	; 72
    11c4:	8c 93       	st	X, r24
#endif


		//condig oc0 wave generatin mode
		//clear with mask
		TCCR0_REG &=MTIMER_OC0_MASK;
    11c6:	a3 e5       	ldi	r26, 0x53	; 83
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e3 e5       	ldi	r30, 0x53	; 83
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	8f 7c       	andi	r24, 0xCF	; 207
    11d2:	8c 93       	st	X, r24
		//set
		TCCR0_REG |=(MTIMER0_OC0_MODE<<MTIMER0_OC0_SH);
    11d4:	a3 e5       	ldi	r26, 0x53	; 83
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e3 e5       	ldi	r30, 0x53	; 83
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	80 62       	ori	r24, 0x20	; 32
    11e0:	8c 93       	st	X, r24


}
    11e2:	0f 90       	pop	r0
    11e4:	cf 91       	pop	r28
    11e6:	df 91       	pop	r29
    11e8:	08 95       	ret

000011ea <MTIMER0_enStart>:
ErrorState_t MTIMER0_enStart(void)
{
    11ea:	df 93       	push	r29
    11ec:	cf 93       	push	r28
    11ee:	0f 92       	push	r0
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
#if(MTIMER0_CLK>=MTIMER_NO_CLK && MTIMER0_CLK<=MTIMER_EXTCLK_RAIS_EDGE)

	//step1 :clear bits by applying Mask
	TCCR0_REG &= MTIMER0_CS_MASK;
    11f4:	a3 e5       	ldi	r26, 0x53	; 83
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e3 e5       	ldi	r30, 0x53	; 83
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	88 7f       	andi	r24, 0xF8	; 248
    1200:	8c 93       	st	X, r24
//step 2 :set clock value
	TCCR0_REG |=MTIMER0_CLK;
    1202:	a3 e5       	ldi	r26, 0x53	; 83
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e3 e5       	ldi	r30, 0x53	; 83
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	85 60       	ori	r24, 0x05	; 5
    120e:	8c 93       	st	X, r24
#else
	#error("wrong time clock")
#endif


}
    1210:	0f 90       	pop	r0
    1212:	cf 91       	pop	r28
    1214:	df 91       	pop	r29
    1216:	08 95       	ret

00001218 <MTIMER0_enStop>:
ErrorState_t MTIMER0_enStop(void)
{
    1218:	df 93       	push	r29
    121a:	cf 93       	push	r28
    121c:	0f 92       	push	r0
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
//clear
	TCCR0_REG&=MTIMER0_CS_MASK;
    1222:	a3 e5       	ldi	r26, 0x53	; 83
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e3 e5       	ldi	r30, 0x53	; 83
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	88 7f       	andi	r24, 0xF8	; 248
    122e:	8c 93       	st	X, r24
	//set value
	TCCR0_REG |= MTIMER_NO_CLK;
    1230:	a3 e5       	ldi	r26, 0x53	; 83
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	e3 e5       	ldi	r30, 0x53	; 83
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	8c 93       	st	X, r24

}
    123c:	0f 90       	pop	r0
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <MTIMER0_enSetCallBack>:
ErrorState_t MTIMER0_enSetCallBack(u8 copy_u8IntID,void (*ptrfn)(void))
{
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	27 97       	sbiw	r28, 0x07	; 7
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	8a 83       	std	Y+2, r24	; 0x02
    125a:	7c 83       	std	Y+4, r23	; 0x04
    125c:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState_t Local_enState= SUCCES;
    125e:	82 e0       	ldi	r24, 0x02	; 2
    1260:	89 83       	std	Y+1, r24	; 0x01
	if(ptrfn==NULL)
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	9c 81       	ldd	r25, Y+4	; 0x04
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	11 f4       	brne	.+4      	; 0x126e <MTIMER0_enSetCallBack+0x2a>
	{
Local_enState=NULL_PTR_ERR;
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	89 83       	std	Y+1, r24	; 0x01
	}
		switch(copy_u8IntID)
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	3e 83       	std	Y+6, r19	; 0x06
    1276:	2d 83       	std	Y+5, r18	; 0x05
    1278:	8d 81       	ldd	r24, Y+5	; 0x05
    127a:	9e 81       	ldd	r25, Y+6	; 0x06
    127c:	00 97       	sbiw	r24, 0x00	; 0
    127e:	31 f0       	breq	.+12     	; 0x128c <MTIMER0_enSetCallBack+0x48>
    1280:	2d 81       	ldd	r18, Y+5	; 0x05
    1282:	3e 81       	ldd	r19, Y+6	; 0x06
    1284:	21 30       	cpi	r18, 0x01	; 1
    1286:	31 05       	cpc	r19, r1
    1288:	41 f0       	breq	.+16     	; 0x129a <MTIMER0_enSetCallBack+0x56>
    128a:	0e c0       	rjmp	.+28     	; 0x12a8 <MTIMER0_enSetCallBack+0x64>
			{
			case MTIMER0_OVF_INT_ID:
				CallBackArr[0]=ptrfn;
    128c:	8b 81       	ldd	r24, Y+3	; 0x03
    128e:	9c 81       	ldd	r25, Y+4	; 0x04
    1290:	90 93 13 03 	sts	0x0313, r25
    1294:	80 93 12 03 	sts	0x0312, r24
    1298:	08 c0       	rjmp	.+16     	; 0x12aa <MTIMER0_enSetCallBack+0x66>
				break;
			case MTIMER0_COM_INT_ID:
				CallBackArr[1]=ptrfn;
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	9c 81       	ldd	r25, Y+4	; 0x04
    129e:	90 93 15 03 	sts	0x0315, r25
    12a2:	80 93 14 03 	sts	0x0314, r24
    12a6:	01 c0       	rjmp	.+2      	; 0x12aa <MTIMER0_enSetCallBack+0x66>
				break;
			default:
				Local_enState= OUT_OF_RANGE;
    12a8:	19 82       	std	Y+1, r1	; 0x01
				break;
			}

		//CallBackArr[copy_u8IntID]=ptrfn;
}
    12aa:	27 96       	adiw	r28, 0x07	; 7
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	cd bf       	out	0x3d, r28	; 61
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	08 95       	ret

000012bc <MTIMER0_enSetTime>:
ErrorState_t MTIMER0_enSetTime(u32 copy_u32delayMS)
{
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
    12c4:	a6 97       	sbiw	r28, 0x26	; 38
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	f8 94       	cli
    12ca:	de bf       	out	0x3e, r29	; 62
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cd bf       	out	0x3d, r28	; 61
    12d0:	6d 8f       	std	Y+29, r22	; 0x1d
    12d2:	7e 8f       	std	Y+30, r23	; 0x1e
    12d4:	8f 8f       	std	Y+31, r24	; 0x1f
    12d6:	98 a3       	std	Y+32, r25	; 0x20
u32	Local_u32Arr[]={1,8,64,256,1025};
    12d8:	ce 01       	movw	r24, r28
    12da:	09 96       	adiw	r24, 0x09	; 9
    12dc:	9b a3       	std	Y+35, r25	; 0x23
    12de:	8a a3       	std	Y+34, r24	; 0x22
    12e0:	ee ee       	ldi	r30, 0xEE	; 238
    12e2:	f2 e0       	ldi	r31, 0x02	; 2
    12e4:	fd a3       	std	Y+37, r31	; 0x25
    12e6:	ec a3       	std	Y+36, r30	; 0x24
    12e8:	f4 e1       	ldi	r31, 0x14	; 20
    12ea:	fe a3       	std	Y+38, r31	; 0x26
    12ec:	ec a1       	ldd	r30, Y+36	; 0x24
    12ee:	fd a1       	ldd	r31, Y+37	; 0x25
    12f0:	00 80       	ld	r0, Z
    12f2:	8c a1       	ldd	r24, Y+36	; 0x24
    12f4:	9d a1       	ldd	r25, Y+37	; 0x25
    12f6:	01 96       	adiw	r24, 0x01	; 1
    12f8:	9d a3       	std	Y+37, r25	; 0x25
    12fa:	8c a3       	std	Y+36, r24	; 0x24
    12fc:	ea a1       	ldd	r30, Y+34	; 0x22
    12fe:	fb a1       	ldd	r31, Y+35	; 0x23
    1300:	00 82       	st	Z, r0
    1302:	8a a1       	ldd	r24, Y+34	; 0x22
    1304:	9b a1       	ldd	r25, Y+35	; 0x23
    1306:	01 96       	adiw	r24, 0x01	; 1
    1308:	9b a3       	std	Y+35, r25	; 0x23
    130a:	8a a3       	std	Y+34, r24	; 0x22
    130c:	9e a1       	ldd	r25, Y+38	; 0x26
    130e:	91 50       	subi	r25, 0x01	; 1
    1310:	9e a3       	std	Y+38, r25	; 0x26
    1312:	ee a1       	ldd	r30, Y+38	; 0x26
    1314:	ee 23       	and	r30, r30
    1316:	51 f7       	brne	.-44     	; 0x12ec <MTIMER0_enSetTime+0x30>

f32 Local_f32Tick_Time =(f32)Local_u32Arr[MTIMER0_CLK-1]/FCPU;
    1318:	89 8d       	ldd	r24, Y+25	; 0x19
    131a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    131c:	ab 8d       	ldd	r26, Y+27	; 0x1b
    131e:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1320:	bc 01       	movw	r22, r24
    1322:	cd 01       	movw	r24, r26
    1324:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatunsisf>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	bc 01       	movw	r22, r24
    132e:	cd 01       	movw	r24, r26
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	40 e8       	ldi	r20, 0x80	; 128
    1336:	51 e4       	ldi	r21, 0x41	; 65
    1338:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__divsf3>
    133c:	dc 01       	movw	r26, r24
    133e:	cb 01       	movw	r24, r22
    1340:	8d 83       	std	Y+5, r24	; 0x05
    1342:	9e 83       	std	Y+6, r25	; 0x06
    1344:	af 83       	std	Y+7, r26	; 0x07
    1346:	b8 87       	std	Y+8, r27	; 0x08
u32 Local_u32TotalNumberOfCounts =(copy_u32delayMS*1000)/Local_f32Tick_Time;
    1348:	8d 8d       	ldd	r24, Y+29	; 0x1d
    134a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    134c:	af 8d       	ldd	r26, Y+31	; 0x1f
    134e:	b8 a1       	ldd	r27, Y+32	; 0x20
    1350:	28 ee       	ldi	r18, 0xE8	; 232
    1352:	33 e0       	ldi	r19, 0x03	; 3
    1354:	40 e0       	ldi	r20, 0x00	; 0
    1356:	50 e0       	ldi	r21, 0x00	; 0
    1358:	bc 01       	movw	r22, r24
    135a:	cd 01       	movw	r24, r26
    135c:	0e 94 01 3a 	call	0x7402	; 0x7402 <__mulsi3>
    1360:	dc 01       	movw	r26, r24
    1362:	cb 01       	movw	r24, r22
    1364:	bc 01       	movw	r22, r24
    1366:	cd 01       	movw	r24, r26
    1368:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatunsisf>
    136c:	dc 01       	movw	r26, r24
    136e:	cb 01       	movw	r24, r22
    1370:	bc 01       	movw	r22, r24
    1372:	cd 01       	movw	r24, r26
    1374:	2d 81       	ldd	r18, Y+5	; 0x05
    1376:	3e 81       	ldd	r19, Y+6	; 0x06
    1378:	4f 81       	ldd	r20, Y+7	; 0x07
    137a:	58 85       	ldd	r21, Y+8	; 0x08
    137c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__divsf3>
    1380:	dc 01       	movw	r26, r24
    1382:	cb 01       	movw	r24, r22
    1384:	bc 01       	movw	r22, r24
    1386:	cd 01       	movw	r24, r26
    1388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    138c:	dc 01       	movw	r26, r24
    138e:	cb 01       	movw	r24, r22
    1390:	89 83       	std	Y+1, r24	; 0x01
    1392:	9a 83       	std	Y+2, r25	; 0x02
    1394:	ab 83       	std	Y+3, r26	; 0x03
    1396:	bc 83       	std	Y+4, r27	; 0x04
	}

	OCR0_REG = Local_u8OCRValue;
	g_u32NumOfCmpMatches=Local_u32TotalNumberOfCounts/Local_u8OCRValue;
	#endif
}//works same as delay_ms
    1398:	a6 96       	adiw	r28, 0x26	; 38
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	f8 94       	cli
    139e:	de bf       	out	0x3e, r29	; 62
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	cd bf       	out	0x3d, r28	; 61
    13a4:	cf 91       	pop	r28
    13a6:	df 91       	pop	r29
    13a8:	08 95       	ret

000013aa <MTIMER0_enEnableInt>:
ErrorState_t MTIMER0_enEnableInt(u8 copy_u8IntID)
{
    13aa:	df 93       	push	r29
    13ac:	cf 93       	push	r28
    13ae:	00 d0       	rcall	.+0      	; 0x13b0 <MTIMER0_enEnableInt+0x6>
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <MTIMER0_enEnableInt+0x8>
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
    13b6:	8a 83       	std	Y+2, r24	; 0x02
ErrorState_t Local_enState= SUCCES;
    13b8:	82 e0       	ldi	r24, 0x02	; 2
    13ba:	89 83       	std	Y+1, r24	; 0x01

	switch(copy_u8IntID)
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	3c 83       	std	Y+4, r19	; 0x04
    13c4:	2b 83       	std	Y+3, r18	; 0x03
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ca:	00 97       	sbiw	r24, 0x00	; 0
    13cc:	31 f0       	breq	.+12     	; 0x13da <MTIMER0_enEnableInt+0x30>
    13ce:	2b 81       	ldd	r18, Y+3	; 0x03
    13d0:	3c 81       	ldd	r19, Y+4	; 0x04
    13d2:	21 30       	cpi	r18, 0x01	; 1
    13d4:	31 05       	cpc	r19, r1
    13d6:	49 f0       	breq	.+18     	; 0x13ea <MTIMER0_enEnableInt+0x40>
    13d8:	10 c0       	rjmp	.+32     	; 0x13fa <MTIMER0_enEnableInt+0x50>
	{
	case MTIMER0_OVF_INT_ID:
		SET_BIT(TIMSK_REG,TOIEO_BIT);
    13da:	a9 e5       	ldi	r26, 0x59	; 89
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e9 e5       	ldi	r30, 0x59	; 89
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	81 60       	ori	r24, 0x01	; 1
    13e6:	8c 93       	st	X, r24
    13e8:	09 c0       	rjmp	.+18     	; 0x13fc <MTIMER0_enEnableInt+0x52>
		break;
	case MTIMER0_COM_INT_ID:
		SET_BIT(TIMSK_REG,OCIE0_BIT);
    13ea:	a9 e5       	ldi	r26, 0x59	; 89
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e9 e5       	ldi	r30, 0x59	; 89
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	82 60       	ori	r24, 0x02	; 2
    13f6:	8c 93       	st	X, r24
    13f8:	01 c0       	rjmp	.+2      	; 0x13fc <MTIMER0_enEnableInt+0x52>
		break;
	default:
		Local_enState= OUT_OF_RANGE;
    13fa:	19 82       	std	Y+1, r1	; 0x01
	}
return Local_enState;
    13fc:	89 81       	ldd	r24, Y+1	; 0x01

}
    13fe:	0f 90       	pop	r0
    1400:	0f 90       	pop	r0
    1402:	0f 90       	pop	r0
    1404:	0f 90       	pop	r0
    1406:	cf 91       	pop	r28
    1408:	df 91       	pop	r29
    140a:	08 95       	ret

0000140c <MTIMER0_enDisableInt>:
ErrorState_t MTIMER0_enDisableInt(u8 copy_u8IntID)
{
    140c:	df 93       	push	r29
    140e:	cf 93       	push	r28
    1410:	00 d0       	rcall	.+0      	; 0x1412 <MTIMER0_enDisableInt+0x6>
    1412:	00 d0       	rcall	.+0      	; 0x1414 <MTIMER0_enDisableInt+0x8>
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    1418:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState= SUCCES;
    141a:	82 e0       	ldi	r24, 0x02	; 2
    141c:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8IntID)
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	3c 83       	std	Y+4, r19	; 0x04
    1426:	2b 83       	std	Y+3, r18	; 0x03
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	9c 81       	ldd	r25, Y+4	; 0x04
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	31 f0       	breq	.+12     	; 0x143c <MTIMER0_enDisableInt+0x30>
    1430:	2b 81       	ldd	r18, Y+3	; 0x03
    1432:	3c 81       	ldd	r19, Y+4	; 0x04
    1434:	21 30       	cpi	r18, 0x01	; 1
    1436:	31 05       	cpc	r19, r1
    1438:	49 f0       	breq	.+18     	; 0x144c <MTIMER0_enDisableInt+0x40>
    143a:	10 c0       	rjmp	.+32     	; 0x145c <MTIMER0_enDisableInt+0x50>
		{
		case MTIMER0_OVF_INT_ID:
			CLR_BIT(TIMSK_REG,TOIEO_BIT);
    143c:	a9 e5       	ldi	r26, 0x59	; 89
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e9 e5       	ldi	r30, 0x59	; 89
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	8e 7f       	andi	r24, 0xFE	; 254
    1448:	8c 93       	st	X, r24
    144a:	09 c0       	rjmp	.+18     	; 0x145e <MTIMER0_enDisableInt+0x52>
			break;
		case MTIMER0_COM_INT_ID:
			CLR_BIT(TIMSK_REG,OCIE0_BIT);
    144c:	a9 e5       	ldi	r26, 0x59	; 89
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	e9 e5       	ldi	r30, 0x59	; 89
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	8d 7f       	andi	r24, 0xFD	; 253
    1458:	8c 93       	st	X, r24
    145a:	01 c0       	rjmp	.+2      	; 0x145e <MTIMER0_enDisableInt+0x52>
			break;
		default:
			Local_enState= OUT_OF_RANGE;
    145c:	19 82       	std	Y+1, r1	; 0x01
		}
	return Local_enState;
    145e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	cf 91       	pop	r28
    146a:	df 91       	pop	r29
    146c:	08 95       	ret

0000146e <MTIMER0_ensetCompareValue>:
ErrorState_t MTIMER0_ensetCompareValue(u8 copy_u8Value)
{
    146e:	df 93       	push	r29
    1470:	cf 93       	push	r28
    1472:	00 d0       	rcall	.+0      	; 0x1474 <MTIMER0_ensetCompareValue+0x6>
    1474:	0f 92       	push	r0
    1476:	cd b7       	in	r28, 0x3d	; 61
    1478:	de b7       	in	r29, 0x3e	; 62
    147a:	8a 83       	std	Y+2, r24	; 0x02

	OCR0_REG=copy_u8Value;
    147c:	ec e5       	ldi	r30, 0x5C	; 92
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	80 83       	st	Z, r24
	ErrorState_t Local_enState= SUCCES;
    1484:	82 e0       	ldi	r24, 0x02	; 2
    1486:	89 83       	std	Y+1, r24	; 0x01

}
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <MTIMER0_enSetFastPWM>:

#if(MTIMER0_MODE==MTIMER0_MODE_FAST_PWM)
ErrorState_t MTIMER0_enSetFastPWM(u8 copy_u8Duty)
{
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
    149c:	27 97       	sbiw	r28, 0x07	; 7
    149e:	0f b6       	in	r0, 0x3f	; 63
    14a0:	f8 94       	cli
    14a2:	de bf       	out	0x3e, r29	; 62
    14a4:	0f be       	out	0x3f, r0	; 63
    14a6:	cd bf       	out	0x3d, r28	; 61
    14a8:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState= SUCCES;
    14aa:	82 e0       	ldi	r24, 0x02	; 2
    14ac:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8Duty>=0&&copy_u8Duty<=100)
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	85 36       	cpi	r24, 0x65	; 101
    14b2:	08 f5       	brcc	.+66     	; 0x14f6 <MTIMER0_enSetFastPWM+0x62>
	{
	#if(MTIMER0_OC0_MODE==MTIMER_OC0_INVERTED)
		OCR0_REG=abs(255-((copy_u8Duty*256)/100));
#elif(MTIMER0_OC0_MODE==MTIMER_OC0_NONINVERTED)
		OCR0_REG=abs(((copy_u8Duty*256)/100)-1);
    14b4:	8c e5       	ldi	r24, 0x5C	; 92
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	9e 83       	std	Y+6, r25	; 0x06
    14ba:	8d 83       	std	Y+5, r24	; 0x05
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	88 2f       	mov	r24, r24
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	98 2f       	mov	r25, r24
    14c4:	88 27       	eor	r24, r24
    14c6:	24 e6       	ldi	r18, 0x64	; 100
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	b9 01       	movw	r22, r18
    14cc:	0e 94 40 3a 	call	0x7480	; 0x7480 <__divmodhi4>
    14d0:	cb 01       	movw	r24, r22
    14d2:	01 97       	sbiw	r24, 0x01	; 1
    14d4:	9c 83       	std	Y+4, r25	; 0x04
    14d6:	8b 83       	std	Y+3, r24	; 0x03
    14d8:	eb 81       	ldd	r30, Y+3	; 0x03
    14da:	fc 81       	ldd	r31, Y+4	; 0x04
    14dc:	ff 23       	and	r31, r31
    14de:	3c f4       	brge	.+14     	; 0x14ee <MTIMER0_enSetFastPWM+0x5a>
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	9c 81       	ldd	r25, Y+4	; 0x04
    14e4:	90 95       	com	r25
    14e6:	81 95       	neg	r24
    14e8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ea:	9c 83       	std	Y+4, r25	; 0x04
    14ec:	8b 83       	std	Y+3, r24	; 0x03
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	ed 81       	ldd	r30, Y+5	; 0x05
    14f2:	fe 81       	ldd	r31, Y+6	; 0x06
    14f4:	80 83       	st	Z, r24
#error("WRONG MODE")
#endif

	}

}
    14f6:	27 96       	adiw	r28, 0x07	; 7
    14f8:	0f b6       	in	r0, 0x3f	; 63
    14fa:	f8 94       	cli
    14fc:	de bf       	out	0x3e, r29	; 62
    14fe:	0f be       	out	0x3f, r0	; 63
    1500:	cd bf       	out	0x3d, r28	; 61
    1502:	cf 91       	pop	r28
    1504:	df 91       	pop	r29
    1506:	08 95       	ret

00001508 <__vector_11>:
}


#endif
ISR(TIMER0_OVF_vect)
{
    1508:	1f 92       	push	r1
    150a:	0f 92       	push	r0
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	0f 92       	push	r0
    1510:	11 24       	eor	r1, r1
    1512:	2f 93       	push	r18
    1514:	3f 93       	push	r19
    1516:	4f 93       	push	r20
    1518:	5f 93       	push	r21
    151a:	6f 93       	push	r22
    151c:	7f 93       	push	r23
    151e:	8f 93       	push	r24
    1520:	9f 93       	push	r25
    1522:	af 93       	push	r26
    1524:	bf 93       	push	r27
    1526:	ef 93       	push	r30
    1528:	ff 93       	push	r31
    152a:	df 93       	push	r29
    152c:	cf 93       	push	r28
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
	static u32 Local_u32NumberOfCounts=0; //act as global life time scope
	//Increment nuber of counts every time ISR happens
	Local_u32NumberOfCounts++;
    1532:	80 91 1f 03 	lds	r24, 0x031F
    1536:	90 91 20 03 	lds	r25, 0x0320
    153a:	a0 91 21 03 	lds	r26, 0x0321
    153e:	b0 91 22 03 	lds	r27, 0x0322
    1542:	01 96       	adiw	r24, 0x01	; 1
    1544:	a1 1d       	adc	r26, r1
    1546:	b1 1d       	adc	r27, r1
    1548:	80 93 1f 03 	sts	0x031F, r24
    154c:	90 93 20 03 	sts	0x0320, r25
    1550:	a0 93 21 03 	sts	0x0321, r26
    1554:	b0 93 22 03 	sts	0x0322, r27
	//if number of counts equals to global required Number
	if(Local_u32NumberOfCounts==g_u32NumberOfOverflows)
    1558:	20 91 1f 03 	lds	r18, 0x031F
    155c:	30 91 20 03 	lds	r19, 0x0320
    1560:	40 91 21 03 	lds	r20, 0x0321
    1564:	50 91 22 03 	lds	r21, 0x0322
    1568:	80 91 16 03 	lds	r24, 0x0316
    156c:	90 91 17 03 	lds	r25, 0x0317
    1570:	a0 91 18 03 	lds	r26, 0x0318
    1574:	b0 91 19 03 	lds	r27, 0x0319
    1578:	28 17       	cp	r18, r24
    157a:	39 07       	cpc	r19, r25
    157c:	4a 07       	cpc	r20, r26
    157e:	5b 07       	cpc	r21, r27
    1580:	c9 f4       	brne	.+50     	; 0x15b4 <__vector_11+0xac>
	{
		//preload TCNT with function part
		TCNT0_REG=256-g_u8NumberOfRemainingcounts;
    1582:	e2 e5       	ldi	r30, 0x52	; 82
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 91 1a 03 	lds	r24, 0x031A
    158a:	81 95       	neg	r24
    158c:	80 83       	st	Z, r24
		//take Action
		if(CallBackArr[MTIMER0_OVF_INT_ID]!=NULL)
    158e:	80 91 12 03 	lds	r24, 0x0312
    1592:	90 91 13 03 	lds	r25, 0x0313
    1596:	00 97       	sbiw	r24, 0x00	; 0
    1598:	29 f0       	breq	.+10     	; 0x15a4 <__vector_11+0x9c>
		{
		CallBackArr[MTIMER0_OVF_INT_ID]();//app function
    159a:	e0 91 12 03 	lds	r30, 0x0312
    159e:	f0 91 13 03 	lds	r31, 0x0313
    15a2:	09 95       	icall
		}
		//reset the Localcounter for the new period
		Local_u32NumberOfCounts=0;
    15a4:	10 92 1f 03 	sts	0x031F, r1
    15a8:	10 92 20 03 	sts	0x0320, r1
    15ac:	10 92 21 03 	sts	0x0321, r1
    15b0:	10 92 22 03 	sts	0x0322, r1
	}

}
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	ff 91       	pop	r31
    15ba:	ef 91       	pop	r30
    15bc:	bf 91       	pop	r27
    15be:	af 91       	pop	r26
    15c0:	9f 91       	pop	r25
    15c2:	8f 91       	pop	r24
    15c4:	7f 91       	pop	r23
    15c6:	6f 91       	pop	r22
    15c8:	5f 91       	pop	r21
    15ca:	4f 91       	pop	r20
    15cc:	3f 91       	pop	r19
    15ce:	2f 91       	pop	r18
    15d0:	0f 90       	pop	r0
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	0f 90       	pop	r0
    15d6:	1f 90       	pop	r1
    15d8:	18 95       	reti

000015da <__vector_10>:
ISR(TIMER0_COMP_vect)
{
    15da:	1f 92       	push	r1
    15dc:	0f 92       	push	r0
    15de:	0f b6       	in	r0, 0x3f	; 63
    15e0:	0f 92       	push	r0
    15e2:	11 24       	eor	r1, r1
    15e4:	2f 93       	push	r18
    15e6:	3f 93       	push	r19
    15e8:	4f 93       	push	r20
    15ea:	5f 93       	push	r21
    15ec:	6f 93       	push	r22
    15ee:	7f 93       	push	r23
    15f0:	8f 93       	push	r24
    15f2:	9f 93       	push	r25
    15f4:	af 93       	push	r26
    15f6:	bf 93       	push	r27
    15f8:	ef 93       	push	r30
    15fa:	ff 93       	push	r31
    15fc:	df 93       	push	r29
    15fe:	cf 93       	push	r28
    1600:	cd b7       	in	r28, 0x3d	; 61
    1602:	de b7       	in	r29, 0x3e	; 62
	static u32 Local_u32NumberOfCounts=0; //act as global life time scope
		//Increment nuber of counts every time ISR happens
		Local_u32NumberOfCounts++;
    1604:	80 91 23 03 	lds	r24, 0x0323
    1608:	90 91 24 03 	lds	r25, 0x0324
    160c:	a0 91 25 03 	lds	r26, 0x0325
    1610:	b0 91 26 03 	lds	r27, 0x0326
    1614:	01 96       	adiw	r24, 0x01	; 1
    1616:	a1 1d       	adc	r26, r1
    1618:	b1 1d       	adc	r27, r1
    161a:	80 93 23 03 	sts	0x0323, r24
    161e:	90 93 24 03 	sts	0x0324, r25
    1622:	a0 93 25 03 	sts	0x0325, r26
    1626:	b0 93 26 03 	sts	0x0326, r27
		//if number of counts equals to global required Number
if(Local_u32NumberOfCounts==g_u32NumOfCmpMatches)
    162a:	20 91 23 03 	lds	r18, 0x0323
    162e:	30 91 24 03 	lds	r19, 0x0324
    1632:	40 91 25 03 	lds	r20, 0x0325
    1636:	50 91 26 03 	lds	r21, 0x0326
    163a:	80 91 1b 03 	lds	r24, 0x031B
    163e:	90 91 1c 03 	lds	r25, 0x031C
    1642:	a0 91 1d 03 	lds	r26, 0x031D
    1646:	b0 91 1e 03 	lds	r27, 0x031E
    164a:	28 17       	cp	r18, r24
    164c:	39 07       	cpc	r19, r25
    164e:	4a 07       	cpc	r20, r26
    1650:	5b 07       	cpc	r21, r27
    1652:	99 f4       	brne	.+38     	; 0x167a <__vector_10+0xa0>
{	//take action
	Local_u32NumberOfCounts=0;
    1654:	10 92 23 03 	sts	0x0323, r1
    1658:	10 92 24 03 	sts	0x0324, r1
    165c:	10 92 25 03 	sts	0x0325, r1
    1660:	10 92 26 03 	sts	0x0326, r1

	if(CallBackArr[MTIMER0_COM_INT_ID]!=NULL)
    1664:	80 91 14 03 	lds	r24, 0x0314
    1668:	90 91 15 03 	lds	r25, 0x0315
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	29 f0       	breq	.+10     	; 0x167a <__vector_10+0xa0>
	{
		CallBackArr[MTIMER0_COM_INT_ID]();
    1670:	e0 91 14 03 	lds	r30, 0x0314
    1674:	f0 91 15 03 	lds	r31, 0x0315
    1678:	09 95       	icall
	}
}
}
    167a:	cf 91       	pop	r28
    167c:	df 91       	pop	r29
    167e:	ff 91       	pop	r31
    1680:	ef 91       	pop	r30
    1682:	bf 91       	pop	r27
    1684:	af 91       	pop	r26
    1686:	9f 91       	pop	r25
    1688:	8f 91       	pop	r24
    168a:	7f 91       	pop	r23
    168c:	6f 91       	pop	r22
    168e:	5f 91       	pop	r21
    1690:	4f 91       	pop	r20
    1692:	3f 91       	pop	r19
    1694:	2f 91       	pop	r18
    1696:	0f 90       	pop	r0
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	0f 90       	pop	r0
    169c:	1f 90       	pop	r1
    169e:	18 95       	reti

000016a0 <MUART_enInit>:
static void (*UART_DataReg_PtrF)(void)=NULL;
/************global variables*********/

//#include "HLCD_init.h"
ErrorState_t MUART_enInit(void)
{
    16a0:	df 93       	push	r29
    16a2:	cf 93       	push	r28
    16a4:	00 d0       	rcall	.+0      	; 0x16a6 <MUART_enInit+0x6>
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
	ErrorState_t Local_enState=SUCCES;
    16aa:	82 e0       	ldi	r24, 0x02	; 2
    16ac:	8a 83       	std	Y+2, r24	; 0x02
u8 Local_UCSRC_value=0x80;
    16ae:	80 e8       	ldi	r24, 0x80	; 128
    16b0:	89 83       	std	Y+1, r24	; 0x01
	//set buad rate
UBRRH_REG=(u8)(UART_BAUD_RATE>>8);
    16b2:	e0 e4       	ldi	r30, 0x40	; 64
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	10 82       	st	Z, r1
UBRRL_REG=(u8)UART_BAUD_RATE;
    16b8:	e9 e2       	ldi	r30, 0x29	; 41
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	87 e6       	ldi	r24, 0x67	; 103
    16be:	80 83       	st	Z, r24
//Set RX
SET_BIT(UCSRB_REG,RXEN_BIT);
    16c0:	aa e2       	ldi	r26, 0x2A	; 42
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	ea e2       	ldi	r30, 0x2A	; 42
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	80 61       	ori	r24, 0x10	; 16
    16cc:	8c 93       	st	X, r24
//set TX
SET_BIT(UCSRB_REG,TXEN_BIT);
    16ce:	aa e2       	ldi	r26, 0x2A	; 42
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	ea e2       	ldi	r30, 0x2A	; 42
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	88 60       	ori	r24, 0x08	; 8
    16da:	8c 93       	st	X, r24

CLR_BIT(UCSRA_REG,U2X_BIT);
    16dc:	ab e2       	ldi	r26, 0x2B	; 43
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	eb e2       	ldi	r30, 0x2B	; 43
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	8d 7f       	andi	r24, 0xFD	; 253
    16e8:	8c 93       	st	X, r24
//SET_BIT(UCSRC_REG,URSEL_BIT);//to active USCRC reg
//CLR_BIT(UCSRC_REG,UMSEL_BIT);//Asynch UART


//parity mode
Local_UCSRC_value&=UART_PARITY_MASK;
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	8f 7c       	andi	r24, 0xCF	; 207
    16ee:	89 83       	std	Y+1, r24	; 0x01
Local_UCSRC_value|=UART_PARITY_BIT<<UPM0_BIT;
//Stop bits mode
//WRITE_BIT(UCSRC_REG,USBS_BIT,UART_STOP_BIT);
Local_UCSRC_value&=UART_STOP_BIT_MASK;
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	87 7f       	andi	r24, 0xF7	; 247
    16f4:	89 83       	std	Y+1, r24	; 0x01
Local_UCSRC_value|=(UART_STOP_BIT<<USBS_BIT);
//data bits size
Local_UCSRC_value&=UART_CHARACTER_SIZE_MASK;
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	89 7f       	andi	r24, 0xF9	; 249
    16fa:	89 83       	std	Y+1, r24	; 0x01
Local_UCSRC_value|=(UART_CHARACTER_SIZE<<UCSZ0_BIT);
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	86 60       	ori	r24, 0x06	; 6
    1700:	89 83       	std	Y+1, r24	; 0x01
//WRITE_BIT(UCSRC_REG,UCSZ0_BIT,1);
//WRITE_BIT(UCSRC_REG,UCSZ1_BIT,1);
//max 8 data bits for 9 data bits you should set UCSZ2 in reg UCSRB

UCSRC_REG=Local_UCSRC_value;
    1702:	e0 e4       	ldi	r30, 0x40	; 64
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	89 81       	ldd	r24, Y+1	; 0x01
    1708:	80 83       	st	Z, r24
//HLCD_sendIntNum(UART_PARITY_BIT<<UPM0_BIT);
//HLCD_gotoXY(2, 1);
//HLCD_sendIntNum(UCSRC_REG);
/**********************/

return Local_enState;
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	cf 91       	pop	r28
    1712:	df 91       	pop	r29
    1714:	08 95       	ret

00001716 <MUART_enSendByteSync>:
ErrorState_t MUART_enSendByteSync(u8 Copy_u8Data)
{
    1716:	df 93       	push	r29
    1718:	cf 93       	push	r28
    171a:	00 d0       	rcall	.+0      	; 0x171c <MUART_enSendByteSync+0x6>
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState=SUCCES;
    1722:	82 e0       	ldi	r24, 0x02	; 2
    1724:	89 83       	std	Y+1, r24	; 0x01

	/*wait for empty reg buffer */
	while(!(GET_BIT(UCSRA_REG,UDRE_BIT)));
    1726:	eb e2       	ldi	r30, 0x2B	; 43
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	82 95       	swap	r24
    172e:	86 95       	lsr	r24
    1730:	87 70       	andi	r24, 0x07	; 7
    1732:	88 2f       	mov	r24, r24
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	81 70       	andi	r24, 0x01	; 1
    1738:	90 70       	andi	r25, 0x00	; 0
    173a:	00 97       	sbiw	r24, 0x00	; 0
    173c:	a1 f3       	breq	.-24     	; 0x1726 <MUART_enSendByteSync+0x10>
	/*Send Data to data register */
	UDR_REG=Copy_u8Data;
    173e:	ec e2       	ldi	r30, 0x2C	; 44
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	80 83       	st	Z, r24

	/* Wait for empty transmit buffer */
//	while ( !( UCSRA_REG & (1<<UDRE_BIT)) )	;
	/* Put data into buffer, sends the data */
	//UDR_REG = Copy_u8Data;
	return Local_enState;
    1746:	89 81       	ldd	r24, Y+1	; 0x01

}
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	cf 91       	pop	r28
    174e:	df 91       	pop	r29
    1750:	08 95       	ret

00001752 <MUART_enReciveByteSync>:
ErrorState_t MUART_enReciveByteSync(u8 * ptrCopyData)
{
    1752:	df 93       	push	r29
    1754:	cf 93       	push	r28
    1756:	00 d0       	rcall	.+0      	; 0x1758 <MUART_enReciveByteSync+0x6>
    1758:	0f 92       	push	r0
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
    175e:	9b 83       	std	Y+3, r25	; 0x03
    1760:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState=SUCCES;
    1762:	82 e0       	ldi	r24, 0x02	; 2
    1764:	89 83       	std	Y+1, r24	; 0x01
	/*wait for reciving coplete */
	//if(ptrCopyData!=NULL){
	while(!(GET_BIT(UCSRA_REG,RXC_BIT)));
    1766:	eb e2       	ldi	r30, 0x2B	; 43
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	88 23       	and	r24, r24
    176e:	dc f7       	brge	.-10     	; 0x1766 <MUART_enReciveByteSync+0x14>
		/* RECIVED*/
		*ptrCopyData=UDR_REG;
    1770:	ec e2       	ldi	r30, 0x2C	; 44
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	ea 81       	ldd	r30, Y+2	; 0x02
    1778:	fb 81       	ldd	r31, Y+3	; 0x03
    177a:	80 83       	st	Z, r24
	//UDR_REG=0;
	//}
	//else{
		//Local_enState=NULL_PTR_ERR;
		//}
		return Local_enState;
    177c:	89 81       	ldd	r24, Y+1	; 0x01
}
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <MUART_enSendStringSync>:
ErrorState_t MUART_enSendStringSync(char * str)
{ErrorState_t Local_enState=SUCCES;
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	00 d0       	rcall	.+0      	; 0x1790 <MUART_enSendStringSync+0x6>
    1790:	00 d0       	rcall	.+0      	; 0x1792 <MUART_enSendStringSync+0x8>
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
    1796:	9c 83       	std	Y+4, r25	; 0x04
    1798:	8b 83       	std	Y+3, r24	; 0x03
    179a:	82 e0       	ldi	r24, 0x02	; 2
    179c:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 Local_index=0;str[Local_index];Local_index++)
    179e:	19 82       	std	Y+1, r1	; 0x01
    17a0:	0e c0       	rjmp	.+28     	; 0x17be <MUART_enSendStringSync+0x34>
	{
		MUART_enSendByteSync(str[Local_index]);
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
    17a4:	28 2f       	mov	r18, r24
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	8b 81       	ldd	r24, Y+3	; 0x03
    17aa:	9c 81       	ldd	r25, Y+4	; 0x04
    17ac:	fc 01       	movw	r30, r24
    17ae:	e2 0f       	add	r30, r18
    17b0:	f3 1f       	adc	r31, r19
    17b2:	80 81       	ld	r24, Z
    17b4:	0e 94 8b 0b 	call	0x1716	; 0x1716 <MUART_enSendByteSync>
		//}
		return Local_enState;
}
ErrorState_t MUART_enSendStringSync(char * str)
{ErrorState_t Local_enState=SUCCES;
	for(u8 Local_index=0;str[Local_index];Local_index++)
    17b8:	89 81       	ldd	r24, Y+1	; 0x01
    17ba:	8f 5f       	subi	r24, 0xFF	; 255
    17bc:	89 83       	std	Y+1, r24	; 0x01
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	9c 81       	ldd	r25, Y+4	; 0x04
    17c8:	fc 01       	movw	r30, r24
    17ca:	e2 0f       	add	r30, r18
    17cc:	f3 1f       	adc	r31, r19
    17ce:	80 81       	ld	r24, Z
    17d0:	88 23       	and	r24, r24
    17d2:	39 f7       	brne	.-50     	; 0x17a2 <MUART_enSendStringSync+0x18>
	{
		MUART_enSendByteSync(str[Local_index]);
	}

	return Local_enState;
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02

}
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	0f 90       	pop	r0
    17dc:	0f 90       	pop	r0
    17de:	cf 91       	pop	r28
    17e0:	df 91       	pop	r29
    17e2:	08 95       	ret

000017e4 <MUART_enReciveStringSync>:

ErrorState_t MUART_enReciveStringSync(char * str)
{ErrorState_t Local_enState=SUCCES;
    17e4:	df 93       	push	r29
    17e6:	cf 93       	push	r28
    17e8:	00 d0       	rcall	.+0      	; 0x17ea <MUART_enReciveStringSync+0x6>
    17ea:	00 d0       	rcall	.+0      	; 0x17ec <MUART_enReciveStringSync+0x8>
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    17f0:	9c 83       	std	Y+4, r25	; 0x04
    17f2:	8b 83       	std	Y+3, r24	; 0x03
    17f4:	82 e0       	ldi	r24, 0x02	; 2
    17f6:	8a 83       	std	Y+2, r24	; 0x02

u8 Local_index;
	for(Local_index=0;str[Local_index-1]!='#';Local_index++)
    17f8:	19 82       	std	Y+1, r1	; 0x01
    17fa:	0c c0       	rjmp	.+24     	; 0x1814 <MUART_enReciveStringSync+0x30>
	{
		MUART_enReciveByteSync((u8 *)&str[Local_index]);
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	8b 81       	ldd	r24, Y+3	; 0x03
    1804:	9c 81       	ldd	r25, Y+4	; 0x04
    1806:	82 0f       	add	r24, r18
    1808:	93 1f       	adc	r25, r19
    180a:	0e 94 a9 0b 	call	0x1752	; 0x1752 <MUART_enReciveByteSync>

ErrorState_t MUART_enReciveStringSync(char * str)
{ErrorState_t Local_enState=SUCCES;

u8 Local_index;
	for(Local_index=0;str[Local_index-1]!='#';Local_index++)
    180e:	89 81       	ldd	r24, Y+1	; 0x01
    1810:	8f 5f       	subi	r24, 0xFF	; 255
    1812:	89 83       	std	Y+1, r24	; 0x01
    1814:	89 81       	ldd	r24, Y+1	; 0x01
    1816:	88 2f       	mov	r24, r24
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	9c 01       	movw	r18, r24
    181c:	21 50       	subi	r18, 0x01	; 1
    181e:	30 40       	sbci	r19, 0x00	; 0
    1820:	8b 81       	ldd	r24, Y+3	; 0x03
    1822:	9c 81       	ldd	r25, Y+4	; 0x04
    1824:	fc 01       	movw	r30, r24
    1826:	e2 0f       	add	r30, r18
    1828:	f3 1f       	adc	r31, r19
    182a:	80 81       	ld	r24, Z
    182c:	83 32       	cpi	r24, 0x23	; 35
    182e:	31 f7       	brne	.-52     	; 0x17fc <MUART_enReciveStringSync+0x18>
	{
		MUART_enReciveByteSync((u8 *)&str[Local_index]);
	}

	str[Local_index-1]='\0';
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	88 2f       	mov	r24, r24
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	9c 01       	movw	r18, r24
    1838:	21 50       	subi	r18, 0x01	; 1
    183a:	30 40       	sbci	r19, 0x00	; 0
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	9c 81       	ldd	r25, Y+4	; 0x04
    1840:	fc 01       	movw	r30, r24
    1842:	e2 0f       	add	r30, r18
    1844:	f3 1f       	adc	r31, r19
    1846:	10 82       	st	Z, r1
	return Local_enState;
    1848:	8a 81       	ldd	r24, Y+2	; 0x02

}
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	0f 90       	pop	r0
    1852:	cf 91       	pop	r28
    1854:	df 91       	pop	r29
    1856:	08 95       	ret

00001858 <UART_SendNoBlock>:

ErrorState_t UART_SendNoBlock(u8  Copy_u8Data)
{
    1858:	df 93       	push	r29
    185a:	cf 93       	push	r28
    185c:	00 d0       	rcall	.+0      	; 0x185e <UART_SendNoBlock+0x6>
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
    1862:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState=SUCCES;
    1864:	82 e0       	ldi	r24, 0x02	; 2
    1866:	89 83       	std	Y+1, r24	; 0x01


		UDR_REG=Copy_u8Data;
    1868:	ec e2       	ldi	r30, 0x2C	; 44
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	80 83       	st	Z, r24



		return Local_enState;
    1870:	89 81       	ldd	r24, Y+1	; 0x01


}
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	cf 91       	pop	r28
    1878:	df 91       	pop	r29
    187a:	08 95       	ret

0000187c <UART_ReceiveNoBlock>:

ErrorState_t UART_ReceiveNoBlock(u8 * ptrCopyData)
{
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	00 d0       	rcall	.+0      	; 0x1882 <UART_ReceiveNoBlock+0x6>
    1882:	0f 92       	push	r0
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    1888:	9b 83       	std	Y+3, r25	; 0x03
    188a:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState=SUCCES;
    188c:	82 e0       	ldi	r24, 0x02	; 2
    188e:	89 83       	std	Y+1, r24	; 0x01

	*ptrCopyData=UDR_REG;
    1890:	ec e2       	ldi	r30, 0x2C	; 44
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	ea 81       	ldd	r30, Y+2	; 0x02
    1898:	fb 81       	ldd	r31, Y+3	; 0x03
    189a:	80 83       	st	Z, r24
	return Local_enState;
    189c:	89 81       	ldd	r24, Y+1	; 0x01
}
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	cf 91       	pop	r28
    18a6:	df 91       	pop	r29
    18a8:	08 95       	ret

000018aa <MUART_enDataReg_EmptyInt_Enable>:


/*********interrupts*********/

ErrorState_t MUART_enDataReg_EmptyInt_Enable(void)
{
    18aa:	df 93       	push	r29
    18ac:	cf 93       	push	r28
    18ae:	0f 92       	push	r0
    18b0:	cd b7       	in	r28, 0x3d	; 61
    18b2:	de b7       	in	r29, 0x3e	; 62
	ErrorState_t Local_enState=SUCCES;
    18b4:	82 e0       	ldi	r24, 0x02	; 2
    18b6:	89 83       	std	Y+1, r24	; 0x01



SET_BIT(UCSRB_REG,UDRIE_BIT);
    18b8:	aa e2       	ldi	r26, 0x2A	; 42
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	ea e2       	ldi	r30, 0x2A	; 42
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	80 62       	ori	r24, 0x20	; 32
    18c4:	8c 93       	st	X, r24
return Local_enState;
    18c6:	89 81       	ldd	r24, Y+1	; 0x01

}
    18c8:	0f 90       	pop	r0
    18ca:	cf 91       	pop	r28
    18cc:	df 91       	pop	r29
    18ce:	08 95       	ret

000018d0 <MUART_enDataReg_EmptyInt_Disable>:

ErrorState_t MUART_enDataReg_EmptyInt_Disable(void)
{ErrorState_t Local_enState=SUCCES;
    18d0:	df 93       	push	r29
    18d2:	cf 93       	push	r28
    18d4:	0f 92       	push	r0
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
    18da:	82 e0       	ldi	r24, 0x02	; 2
    18dc:	89 83       	std	Y+1, r24	; 0x01



CLR_BIT(UCSRB_REG,UDRIE_BIT);
    18de:	aa e2       	ldi	r26, 0x2A	; 42
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	ea e2       	ldi	r30, 0x2A	; 42
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	8f 7d       	andi	r24, 0xDF	; 223
    18ea:	8c 93       	st	X, r24
return Local_enState;
    18ec:	89 81       	ldd	r24, Y+1	; 0x01

}
    18ee:	0f 90       	pop	r0
    18f0:	cf 91       	pop	r28
    18f2:	df 91       	pop	r29
    18f4:	08 95       	ret

000018f6 <MUART_enTx_interruptENable>:



ErrorState_t MUART_enTx_interruptENable(void)
{
    18f6:	df 93       	push	r29
    18f8:	cf 93       	push	r28
    18fa:	0f 92       	push	r0
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
		ErrorState_t Local_enState=SUCCES;
    1900:	82 e0       	ldi	r24, 0x02	; 2
    1902:	89 83       	std	Y+1, r24	; 0x01


		SET_BIT(UCSRB_REG,TXCIE_BIT);
    1904:	aa e2       	ldi	r26, 0x2A	; 42
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	ea e2       	ldi	r30, 0x2A	; 42
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	80 64       	ori	r24, 0x40	; 64
    1910:	8c 93       	st	X, r24

		return Local_enState;
    1912:	89 81       	ldd	r24, Y+1	; 0x01

}
    1914:	0f 90       	pop	r0
    1916:	cf 91       	pop	r28
    1918:	df 91       	pop	r29
    191a:	08 95       	ret

0000191c <MUART_enTx_interruptDisable>:

ErrorState_t MUART_enTx_interruptDisable(void)
{
    191c:	df 93       	push	r29
    191e:	cf 93       	push	r28
    1920:	0f 92       	push	r0
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
			ErrorState_t Local_enState=SUCCES;
    1926:	82 e0       	ldi	r24, 0x02	; 2
    1928:	89 83       	std	Y+1, r24	; 0x01


			CLR_BIT(UCSRB_REG,TXCIE_BIT);
    192a:	aa e2       	ldi	r26, 0x2A	; 42
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	ea e2       	ldi	r30, 0x2A	; 42
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	8f 7b       	andi	r24, 0xBF	; 191
    1936:	8c 93       	st	X, r24
			return Local_enState;
    1938:	89 81       	ldd	r24, Y+1	; 0x01

}
    193a:	0f 90       	pop	r0
    193c:	cf 91       	pop	r28
    193e:	df 91       	pop	r29
    1940:	08 95       	ret

00001942 <MUART_enRx_interruptENable>:

ErrorState_t MUART_enRx_interruptENable(void)
{
    1942:	df 93       	push	r29
    1944:	cf 93       	push	r28
    1946:	0f 92       	push	r0
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
			ErrorState_t Local_enState=SUCCES;
    194c:	82 e0       	ldi	r24, 0x02	; 2
    194e:	89 83       	std	Y+1, r24	; 0x01

			SET_BIT(UCSRB_REG,RXCIE_BIT);
    1950:	aa e2       	ldi	r26, 0x2A	; 42
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	ea e2       	ldi	r30, 0x2A	; 42
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	80 68       	ori	r24, 0x80	; 128
    195c:	8c 93       	st	X, r24

			return Local_enState;
    195e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1960:	0f 90       	pop	r0
    1962:	cf 91       	pop	r28
    1964:	df 91       	pop	r29
    1966:	08 95       	ret

00001968 <MUART_enRx_interruptDisable>:



ErrorState_t MUART_enRx_interruptDisable(void)
{
    1968:	df 93       	push	r29
    196a:	cf 93       	push	r28
    196c:	0f 92       	push	r0
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
			ErrorState_t Local_enState=SUCCES;
    1972:	82 e0       	ldi	r24, 0x02	; 2
    1974:	89 83       	std	Y+1, r24	; 0x01


			CLR_BIT(UCSRB_REG,RXCIE_BIT);
    1976:	aa e2       	ldi	r26, 0x2A	; 42
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	ea e2       	ldi	r30, 0x2A	; 42
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	8f 77       	andi	r24, 0x7F	; 127
    1982:	8c 93       	st	X, r24
			return Local_enState;
    1984:	89 81       	ldd	r24, Y+1	; 0x01

}
    1986:	0f 90       	pop	r0
    1988:	cf 91       	pop	r28
    198a:	df 91       	pop	r29
    198c:	08 95       	ret

0000198e <MUART_TX_Setcallback>:


ErrorState_t MUART_TX_Setcallback(void (*copy_ptrf)(void))
{
    198e:	df 93       	push	r29
    1990:	cf 93       	push	r28
    1992:	00 d0       	rcall	.+0      	; 0x1994 <MUART_TX_Setcallback+0x6>
    1994:	0f 92       	push	r0
    1996:	cd b7       	in	r28, 0x3d	; 61
    1998:	de b7       	in	r29, 0x3e	; 62
    199a:	9b 83       	std	Y+3, r25	; 0x03
    199c:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState=SUCCES;
    199e:	82 e0       	ldi	r24, 0x02	; 2
    19a0:	89 83       	std	Y+1, r24	; 0x01
	if(copy_ptrf!=NULL)
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	9b 81       	ldd	r25, Y+3	; 0x03
    19a6:	00 97       	sbiw	r24, 0x00	; 0
    19a8:	39 f0       	breq	.+14     	; 0x19b8 <MUART_TX_Setcallback+0x2a>
	{
	UART_TX_PtrF=copy_ptrf;
    19aa:	8a 81       	ldd	r24, Y+2	; 0x02
    19ac:	9b 81       	ldd	r25, Y+3	; 0x03
    19ae:	90 93 28 03 	sts	0x0328, r25
    19b2:	80 93 27 03 	sts	0x0327, r24
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <MUART_TX_Setcallback+0x2e>
	}
	else
	{
		Local_enState=NULL_PTR_ERR;
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enState;
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	cf 91       	pop	r28
    19c6:	df 91       	pop	r29
    19c8:	08 95       	ret

000019ca <MUART_RX_Setcallback>:


ErrorState_t MUART_RX_Setcallback(void (*copy_ptrf)(void))
{
    19ca:	df 93       	push	r29
    19cc:	cf 93       	push	r28
    19ce:	00 d0       	rcall	.+0      	; 0x19d0 <MUART_RX_Setcallback+0x6>
    19d0:	0f 92       	push	r0
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
    19d6:	9b 83       	std	Y+3, r25	; 0x03
    19d8:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState=SUCCES;
    19da:	82 e0       	ldi	r24, 0x02	; 2
    19dc:	89 83       	std	Y+1, r24	; 0x01
	if(copy_ptrf!=NULL)
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	9b 81       	ldd	r25, Y+3	; 0x03
    19e2:	00 97       	sbiw	r24, 0x00	; 0
    19e4:	39 f0       	breq	.+14     	; 0x19f4 <MUART_RX_Setcallback+0x2a>
	{
	UART_RX_PtrF=copy_ptrf;
    19e6:	8a 81       	ldd	r24, Y+2	; 0x02
    19e8:	9b 81       	ldd	r25, Y+3	; 0x03
    19ea:	90 93 2a 03 	sts	0x032A, r25
    19ee:	80 93 29 03 	sts	0x0329, r24
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <MUART_RX_Setcallback+0x2e>
	}
	else
	{
		Local_enState=NULL_PTR_ERR;
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enState;
    19f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	cf 91       	pop	r28
    1a02:	df 91       	pop	r29
    1a04:	08 95       	ret

00001a06 <MUART_Datareg_Setcallback>:

ErrorState_t MUART_Datareg_Setcallback(void (*copy_ptrf)(void))
{
    1a06:	df 93       	push	r29
    1a08:	cf 93       	push	r28
    1a0a:	00 d0       	rcall	.+0      	; 0x1a0c <MUART_Datareg_Setcallback+0x6>
    1a0c:	0f 92       	push	r0
    1a0e:	cd b7       	in	r28, 0x3d	; 61
    1a10:	de b7       	in	r29, 0x3e	; 62
    1a12:	9b 83       	std	Y+3, r25	; 0x03
    1a14:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState=SUCCES;
    1a16:	82 e0       	ldi	r24, 0x02	; 2
    1a18:	89 83       	std	Y+1, r24	; 0x01
	if(copy_ptrf!=NULL)
    1a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a1e:	00 97       	sbiw	r24, 0x00	; 0
    1a20:	39 f0       	breq	.+14     	; 0x1a30 <MUART_Datareg_Setcallback+0x2a>
	{
		UART_DataReg_PtrF=copy_ptrf;
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	9b 81       	ldd	r25, Y+3	; 0x03
    1a26:	90 93 2c 03 	sts	0x032C, r25
    1a2a:	80 93 2b 03 	sts	0x032B, r24
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <MUART_Datareg_Setcallback+0x2e>
	}
	else
	{
		Local_enState=NULL_PTR_ERR;
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enState;
    1a34:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	cf 91       	pop	r28
    1a3e:	df 91       	pop	r29
    1a40:	08 95       	ret

00001a42 <__vector_13>:

ISR(USART_RXC_vect)
{
    1a42:	1f 92       	push	r1
    1a44:	0f 92       	push	r0
    1a46:	0f b6       	in	r0, 0x3f	; 63
    1a48:	0f 92       	push	r0
    1a4a:	11 24       	eor	r1, r1
    1a4c:	2f 93       	push	r18
    1a4e:	3f 93       	push	r19
    1a50:	4f 93       	push	r20
    1a52:	5f 93       	push	r21
    1a54:	6f 93       	push	r22
    1a56:	7f 93       	push	r23
    1a58:	8f 93       	push	r24
    1a5a:	9f 93       	push	r25
    1a5c:	af 93       	push	r26
    1a5e:	bf 93       	push	r27
    1a60:	ef 93       	push	r30
    1a62:	ff 93       	push	r31
    1a64:	df 93       	push	r29
    1a66:	cf 93       	push	r28
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
	if(UART_RX_PtrF!=NULL){
    1a6c:	80 91 29 03 	lds	r24, 0x0329
    1a70:	90 91 2a 03 	lds	r25, 0x032A
    1a74:	00 97       	sbiw	r24, 0x00	; 0
    1a76:	29 f0       	breq	.+10     	; 0x1a82 <__vector_13+0x40>

		UART_RX_PtrF();
    1a78:	e0 91 29 03 	lds	r30, 0x0329
    1a7c:	f0 91 2a 03 	lds	r31, 0x032A
    1a80:	09 95       	icall
	}


}
    1a82:	cf 91       	pop	r28
    1a84:	df 91       	pop	r29
    1a86:	ff 91       	pop	r31
    1a88:	ef 91       	pop	r30
    1a8a:	bf 91       	pop	r27
    1a8c:	af 91       	pop	r26
    1a8e:	9f 91       	pop	r25
    1a90:	8f 91       	pop	r24
    1a92:	7f 91       	pop	r23
    1a94:	6f 91       	pop	r22
    1a96:	5f 91       	pop	r21
    1a98:	4f 91       	pop	r20
    1a9a:	3f 91       	pop	r19
    1a9c:	2f 91       	pop	r18
    1a9e:	0f 90       	pop	r0
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	0f 90       	pop	r0
    1aa4:	1f 90       	pop	r1
    1aa6:	18 95       	reti

00001aa8 <__vector_14>:


ISR(USART_UDRE_vect)
{
    1aa8:	1f 92       	push	r1
    1aaa:	0f 92       	push	r0
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	0f 92       	push	r0
    1ab0:	11 24       	eor	r1, r1
    1ab2:	2f 93       	push	r18
    1ab4:	3f 93       	push	r19
    1ab6:	4f 93       	push	r20
    1ab8:	5f 93       	push	r21
    1aba:	6f 93       	push	r22
    1abc:	7f 93       	push	r23
    1abe:	8f 93       	push	r24
    1ac0:	9f 93       	push	r25
    1ac2:	af 93       	push	r26
    1ac4:	bf 93       	push	r27
    1ac6:	ef 93       	push	r30
    1ac8:	ff 93       	push	r31
    1aca:	df 93       	push	r29
    1acc:	cf 93       	push	r28
    1ace:	cd b7       	in	r28, 0x3d	; 61
    1ad0:	de b7       	in	r29, 0x3e	; 62

	if(UART_DataReg_PtrF!=NULL)
    1ad2:	80 91 2b 03 	lds	r24, 0x032B
    1ad6:	90 91 2c 03 	lds	r25, 0x032C
    1ada:	00 97       	sbiw	r24, 0x00	; 0
    1adc:	29 f0       	breq	.+10     	; 0x1ae8 <__vector_14+0x40>
	{
		UART_DataReg_PtrF();
    1ade:	e0 91 2b 03 	lds	r30, 0x032B
    1ae2:	f0 91 2c 03 	lds	r31, 0x032C
    1ae6:	09 95       	icall
	}

}
    1ae8:	cf 91       	pop	r28
    1aea:	df 91       	pop	r29
    1aec:	ff 91       	pop	r31
    1aee:	ef 91       	pop	r30
    1af0:	bf 91       	pop	r27
    1af2:	af 91       	pop	r26
    1af4:	9f 91       	pop	r25
    1af6:	8f 91       	pop	r24
    1af8:	7f 91       	pop	r23
    1afa:	6f 91       	pop	r22
    1afc:	5f 91       	pop	r21
    1afe:	4f 91       	pop	r20
    1b00:	3f 91       	pop	r19
    1b02:	2f 91       	pop	r18
    1b04:	0f 90       	pop	r0
    1b06:	0f be       	out	0x3f, r0	; 63
    1b08:	0f 90       	pop	r0
    1b0a:	1f 90       	pop	r1
    1b0c:	18 95       	reti

00001b0e <__vector_15>:
ISR(USART_TXC_vect)
{
    1b0e:	1f 92       	push	r1
    1b10:	0f 92       	push	r0
    1b12:	0f b6       	in	r0, 0x3f	; 63
    1b14:	0f 92       	push	r0
    1b16:	11 24       	eor	r1, r1
    1b18:	2f 93       	push	r18
    1b1a:	3f 93       	push	r19
    1b1c:	4f 93       	push	r20
    1b1e:	5f 93       	push	r21
    1b20:	6f 93       	push	r22
    1b22:	7f 93       	push	r23
    1b24:	8f 93       	push	r24
    1b26:	9f 93       	push	r25
    1b28:	af 93       	push	r26
    1b2a:	bf 93       	push	r27
    1b2c:	ef 93       	push	r30
    1b2e:	ff 93       	push	r31
    1b30:	df 93       	push	r29
    1b32:	cf 93       	push	r28
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
	if(UART_TX_PtrF!=NULL){
    1b38:	80 91 27 03 	lds	r24, 0x0327
    1b3c:	90 91 28 03 	lds	r25, 0x0328
    1b40:	00 97       	sbiw	r24, 0x00	; 0
    1b42:	29 f0       	breq	.+10     	; 0x1b4e <__vector_15+0x40>

		UART_TX_PtrF();
    1b44:	e0 91 27 03 	lds	r30, 0x0327
    1b48:	f0 91 28 03 	lds	r31, 0x0328
    1b4c:	09 95       	icall

	}

}
    1b4e:	cf 91       	pop	r28
    1b50:	df 91       	pop	r29
    1b52:	ff 91       	pop	r31
    1b54:	ef 91       	pop	r30
    1b56:	bf 91       	pop	r27
    1b58:	af 91       	pop	r26
    1b5a:	9f 91       	pop	r25
    1b5c:	8f 91       	pop	r24
    1b5e:	7f 91       	pop	r23
    1b60:	6f 91       	pop	r22
    1b62:	5f 91       	pop	r21
    1b64:	4f 91       	pop	r20
    1b66:	3f 91       	pop	r19
    1b68:	2f 91       	pop	r18
    1b6a:	0f 90       	pop	r0
    1b6c:	0f be       	out	0x3f, r0	; 63
    1b6e:	0f 90       	pop	r0
    1b70:	1f 90       	pop	r1
    1b72:	18 95       	reti

00001b74 <MTIMER1_enInit>:
#include <stdlib.h>

static void (*g_ICU_CallBackPtr[2])(void)={NULL,NULL};
static volatile u8 flag=0;
ErrorState_t MTIMER1_enInit(void)
{
    1b74:	df 93       	push	r29
    1b76:	cf 93       	push	r28
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1A_REG,WGM10_BIT);
    1b7c:	af e4       	ldi	r26, 0x4F	; 79
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	ef e4       	ldi	r30, 0x4F	; 79
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	8e 7f       	andi	r24, 0xFE	; 254
    1b88:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A_REG,WGM11_BIT);
    1b8a:	af e4       	ldi	r26, 0x4F	; 79
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	ef e4       	ldi	r30, 0x4F	; 79
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	8d 7f       	andi	r24, 0xFD	; 253
    1b96:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A_REG,WGM12_BIT);
    1b98:	af e4       	ldi	r26, 0x4F	; 79
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	ef e4       	ldi	r30, 0x4F	; 79
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	87 7f       	andi	r24, 0xF7	; 247
    1ba4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A_REG,WGM13_BIT);
    1ba6:	af e4       	ldi	r26, 0x4F	; 79
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	ef e4       	ldi	r30, 0x4F	; 79
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	8f 7e       	andi	r24, 0xEF	; 239
    1bb2:	8c 93       	st	X, r24
	return SUCCES;
    1bb4:	82 e0       	ldi	r24, 0x02	; 2
}
    1bb6:	cf 91       	pop	r28
    1bb8:	df 91       	pop	r29
    1bba:	08 95       	ret

00001bbc <MTIMER1_enStart>:
//timer mode
ErrorState_t MTIMER1_enStart(void)
{
    1bbc:	df 93       	push	r29
    1bbe:	cf 93       	push	r28
    1bc0:	cd b7       	in	r28, 0x3d	; 61
    1bc2:	de b7       	in	r29, 0x3e	; 62
#if(MTIMER1_CLK >= MTIMER1_NO_CLOCK && MTIMER1_CLK <= MTIMER1_ECTTCL_RAISs_EDGE)

	//step1 :clear bits by applying Mask
	TCCR1B_REG &=MTIMER1_CS_MASK;
    1bc4:	ae e4       	ldi	r26, 0x4E	; 78
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	ee e4       	ldi	r30, 0x4E	; 78
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	88 7f       	andi	r24, 0xF8	; 248
    1bd0:	8c 93       	st	X, r24
	//step 2 :set clock value
	TCCR1B_REG |=MTIMER1_CLK;
    1bd2:	ae e4       	ldi	r26, 0x4E	; 78
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	ee e4       	ldi	r30, 0x4E	; 78
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	85 60       	ori	r24, 0x05	; 5
    1bde:	8c 93       	st	X, r24
#else
	#error ("Wrong Timer Clock")
#endif
return SUCCES;
    1be0:	82 e0       	ldi	r24, 0x02	; 2
}//clock
    1be2:	cf 91       	pop	r28
    1be4:	df 91       	pop	r29
    1be6:	08 95       	ret

00001be8 <MTIMER1_enStop>:
ErrorState_t MTIMER1_enStop(void)
{
    1be8:	df 93       	push	r29
    1bea:	cf 93       	push	r28
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62

	TCCR1B_REG &= MTIMER1_CS_MASK;
    1bf0:	ae e4       	ldi	r26, 0x4E	; 78
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	ee e4       	ldi	r30, 0x4E	; 78
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	88 7f       	andi	r24, 0xF8	; 248
    1bfc:	8c 93       	st	X, r24
	return SUCCES;
    1bfe:	82 e0       	ldi	r24, 0x02	; 2
}//stop
    1c00:	cf 91       	pop	r28
    1c02:	df 91       	pop	r29
    1c04:	08 95       	ret

00001c06 <MTIMER1_ICU_enInit>:
ErrorState_t MTIMER1_ICU_enInit(void)
{
    1c06:	df 93       	push	r29
    1c08:	cf 93       	push	r28
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62


	MTIMER1_ICU_enSetTrigger(MTIMER1_ICU_RAIS_EDGE_TRIG);
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <MTIMER1_ICU_enSetTrigger>


		return SUCCES;
    1c14:	82 e0       	ldi	r24, 0x02	; 2
}//first trigger to the ISR
    1c16:	cf 91       	pop	r28
    1c18:	df 91       	pop	r29
    1c1a:	08 95       	ret

00001c1c <MTIMER1_ICU_enEnableInt>:
ErrorState_t MTIMER1_ICU_enEnableInt(void)
{
    1c1c:	df 93       	push	r29
    1c1e:	cf 93       	push	r28
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK_REG,TICIE1_BIT);
    1c24:	a9 e5       	ldi	r26, 0x59	; 89
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e9 e5       	ldi	r30, 0x59	; 89
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	80 62       	ori	r24, 0x20	; 32
    1c30:	8c 93       	st	X, r24


	return SUCCES;
    1c32:	82 e0       	ldi	r24, 0x02	; 2
}
    1c34:	cf 91       	pop	r28
    1c36:	df 91       	pop	r29
    1c38:	08 95       	ret

00001c3a <MTIMER1_ICU_enDisableInt>:
ErrorState_t MTIMER1_ICU_enDisableInt(void)
{
    1c3a:	df 93       	push	r29
    1c3c:	cf 93       	push	r28
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(TIMSK_REG,TICIE1_BIT);
    1c42:	a9 e5       	ldi	r26, 0x59	; 89
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	e9 e5       	ldi	r30, 0x59	; 89
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	8f 7d       	andi	r24, 0xDF	; 223
    1c4e:	8c 93       	st	X, r24


	return SUCCES;
    1c50:	82 e0       	ldi	r24, 0x02	; 2
}
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	08 95       	ret

00001c58 <MTIMER1_ICU_enSetCallBack>:
ErrorState_t MTIMER1_ICU_enSetCallBack(u8 copy_u8IntID,void (* ptrfn)(void))
{
    1c58:	df 93       	push	r29
    1c5a:	cf 93       	push	r28
    1c5c:	00 d0       	rcall	.+0      	; 0x1c5e <MTIMER1_ICU_enSetCallBack+0x6>
    1c5e:	00 d0       	rcall	.+0      	; 0x1c60 <MTIMER1_ICU_enSetCallBack+0x8>
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
    1c64:	8a 83       	std	Y+2, r24	; 0x02
    1c66:	7c 83       	std	Y+4, r23	; 0x04
    1c68:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState_t Local_enstate=SUCCES;
    1c6a:	82 e0       	ldi	r24, 0x02	; 2
    1c6c:	89 83       	std	Y+1, r24	; 0x01
	if(ptrfn !=NULL)
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	9c 81       	ldd	r25, Y+4	; 0x04
    1c72:	00 97       	sbiw	r24, 0x00	; 0
    1c74:	a1 f0       	breq	.+40     	; 0x1c9e <MTIMER1_ICU_enSetCallBack+0x46>
	{
if(copy_u8IntID==MTIME1_CAPT_ID){
    1c76:	8a 81       	ldd	r24, Y+2	; 0x02
    1c78:	88 23       	and	r24, r24
    1c7a:	39 f4       	brne	.+14     	; 0x1c8a <MTIMER1_ICU_enSetCallBack+0x32>
		g_ICU_CallBackPtr[0]=ptrfn;
    1c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c80:	90 93 2e 03 	sts	0x032E, r25
    1c84:	80 93 2d 03 	sts	0x032D, r24
    1c88:	0c c0       	rjmp	.+24     	; 0x1ca2 <MTIMER1_ICU_enSetCallBack+0x4a>
}
else if(copy_u8IntID==MTIME1_OVF_ID){
    1c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8c:	81 30       	cpi	r24, 0x01	; 1
    1c8e:	49 f4       	brne	.+18     	; 0x1ca2 <MTIMER1_ICU_enSetCallBack+0x4a>

	g_ICU_CallBackPtr[1]=ptrfn;
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	9c 81       	ldd	r25, Y+4	; 0x04
    1c94:	90 93 30 03 	sts	0x0330, r25
    1c98:	80 93 2f 03 	sts	0x032F, r24
    1c9c:	02 c0       	rjmp	.+4      	; 0x1ca2 <MTIMER1_ICU_enSetCallBack+0x4a>

	}
	else
	{

		Local_enstate=NULL_PTR_ERR;
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enstate;
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	cf 91       	pop	r28
    1cae:	df 91       	pop	r29
    1cb0:	08 95       	ret

00001cb2 <MTIMER1_ICU_enRead>:
ErrorState_t MTIMER1_ICU_enRead(volatile u16 * ptrReadValue)
{
    1cb2:	df 93       	push	r29
    1cb4:	cf 93       	push	r28
    1cb6:	00 d0       	rcall	.+0      	; 0x1cb8 <MTIMER1_ICU_enRead+0x6>
    1cb8:	0f 92       	push	r0
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
    1cbe:	9b 83       	std	Y+3, r25	; 0x03
    1cc0:	8a 83       	std	Y+2, r24	; 0x02

	ErrorState_t Local_enstate=SUCCES;
    1cc2:	82 e0       	ldi	r24, 0x02	; 2
    1cc4:	89 83       	std	Y+1, r24	; 0x01
		if(ptrReadValue!=NULL)
    1cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc8:	9b 81       	ldd	r25, Y+3	; 0x03
    1cca:	00 97       	sbiw	r24, 0x00	; 0
    1ccc:	49 f0       	breq	.+18     	; 0x1ce0 <MTIMER1_ICU_enRead+0x2e>
		{
			* ptrReadValue=ICR1_REG;
    1cce:	e6 e4       	ldi	r30, 0x46	; 70
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	91 81       	ldd	r25, Z+1	; 0x01
    1cd6:	ea 81       	ldd	r30, Y+2	; 0x02
    1cd8:	fb 81       	ldd	r31, Y+3	; 0x03
    1cda:	91 83       	std	Z+1, r25	; 0x01
    1cdc:	80 83       	st	Z, r24
    1cde:	02 c0       	rjmp	.+4      	; 0x1ce4 <MTIMER1_ICU_enRead+0x32>
		}
		else
		{

			Local_enstate=NULL_PTR_ERR;
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_enstate;
    1ce4:	89 81       	ldd	r24, Y+1	; 0x01


}
    1ce6:	0f 90       	pop	r0
    1ce8:	0f 90       	pop	r0
    1cea:	0f 90       	pop	r0
    1cec:	cf 91       	pop	r28
    1cee:	df 91       	pop	r29
    1cf0:	08 95       	ret

00001cf2 <MTIMER1_ICU_enSetTrigger>:
ErrorState_t MTIMER1_ICU_enSetTrigger(u8 copy_u8Trigg)
{
    1cf2:	df 93       	push	r29
    1cf4:	cf 93       	push	r28
    1cf6:	00 d0       	rcall	.+0      	; 0x1cf8 <MTIMER1_ICU_enSetTrigger+0x6>
    1cf8:	00 d0       	rcall	.+0      	; 0x1cfa <MTIMER1_ICU_enSetTrigger+0x8>
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62
    1cfe:	8a 83       	std	Y+2, r24	; 0x02

	ErrorState_t Local_enstate=SUCCES;
    1d00:	82 e0       	ldi	r24, 0x02	; 2
    1d02:	89 83       	std	Y+1, r24	; 0x01
switch(copy_u8Trigg)
    1d04:	8a 81       	ldd	r24, Y+2	; 0x02
    1d06:	28 2f       	mov	r18, r24
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	3c 83       	std	Y+4, r19	; 0x04
    1d0c:	2b 83       	std	Y+3, r18	; 0x03
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	9c 81       	ldd	r25, Y+4	; 0x04
    1d12:	00 97       	sbiw	r24, 0x00	; 0
    1d14:	31 f0       	breq	.+12     	; 0x1d22 <MTIMER1_ICU_enSetTrigger+0x30>
    1d16:	2b 81       	ldd	r18, Y+3	; 0x03
    1d18:	3c 81       	ldd	r19, Y+4	; 0x04
    1d1a:	21 30       	cpi	r18, 0x01	; 1
    1d1c:	31 05       	cpc	r19, r1
    1d1e:	49 f0       	breq	.+18     	; 0x1d32 <MTIMER1_ICU_enSetTrigger+0x40>
    1d20:	10 c0       	rjmp	.+32     	; 0x1d42 <MTIMER1_ICU_enSetTrigger+0x50>
{

case MTIMER1_ICU_FALL_EDGE_TRIG:
	CLR_BIT(TCCR1B_REG,ICES1_BIT);
    1d22:	ae e4       	ldi	r26, 0x4E	; 78
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	ee e4       	ldi	r30, 0x4E	; 78
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	8f 7b       	andi	r24, 0xBF	; 191
    1d2e:	8c 93       	st	X, r24
    1d30:	09 c0       	rjmp	.+18     	; 0x1d44 <MTIMER1_ICU_enSetTrigger+0x52>
	break;
case MTIMER1_ICU_RAIS_EDGE_TRIG:
	SET_BIT(TCCR1B_REG,ICES1_BIT);
    1d32:	ae e4       	ldi	r26, 0x4E	; 78
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	ee e4       	ldi	r30, 0x4E	; 78
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	80 64       	ori	r24, 0x40	; 64
    1d3e:	8c 93       	st	X, r24
    1d40:	01 c0       	rjmp	.+2      	; 0x1d44 <MTIMER1_ICU_enSetTrigger+0x52>
	break;

default:
Local_enstate=OUT_OF_RANGE;
    1d42:	19 82       	std	Y+1, r1	; 0x01
break;
}

	return Local_enstate;
    1d44:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d46:	0f 90       	pop	r0
    1d48:	0f 90       	pop	r0
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	cf 91       	pop	r28
    1d50:	df 91       	pop	r29
    1d52:	08 95       	ret

00001d54 <MTIMER1_OVF_enEnableInt>:

ErrorState_t MTIMER1_OVF_enEnableInt(void)
{
    1d54:	df 93       	push	r29
    1d56:	cf 93       	push	r28
    1d58:	0f 92       	push	r0
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62
SET_BIT(TIMSK_REG,TOIE1_BIT);
    1d5e:	a9 e5       	ldi	r26, 0x59	; 89
    1d60:	b0 e0       	ldi	r27, 0x00	; 0
    1d62:	e9 e5       	ldi	r30, 0x59	; 89
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	84 60       	ori	r24, 0x04	; 4
    1d6a:	8c 93       	st	X, r24



}
    1d6c:	0f 90       	pop	r0
    1d6e:	cf 91       	pop	r28
    1d70:	df 91       	pop	r29
    1d72:	08 95       	ret

00001d74 <MTIMER1_OVF_enDisableInt>:
ErrorState_t MTIMER1_OVF_enDisableInt(void)
{
    1d74:	df 93       	push	r29
    1d76:	cf 93       	push	r28
    1d78:	0f 92       	push	r0
    1d7a:	cd b7       	in	r28, 0x3d	; 61
    1d7c:	de b7       	in	r29, 0x3e	; 62


CLR_BIT(TIMSK_REG,TOIE1_BIT);
    1d7e:	a9 e5       	ldi	r26, 0x59	; 89
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	e9 e5       	ldi	r30, 0x59	; 89
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	8b 7f       	andi	r24, 0xFB	; 251
    1d8a:	8c 93       	st	X, r24

}
    1d8c:	0f 90       	pop	r0
    1d8e:	cf 91       	pop	r28
    1d90:	df 91       	pop	r29
    1d92:	08 95       	ret

00001d94 <__vector_6>:


ISR(TIMER1_CAPT_vect)
{
    1d94:	1f 92       	push	r1
    1d96:	0f 92       	push	r0
    1d98:	0f b6       	in	r0, 0x3f	; 63
    1d9a:	0f 92       	push	r0
    1d9c:	11 24       	eor	r1, r1
    1d9e:	2f 93       	push	r18
    1da0:	3f 93       	push	r19
    1da2:	4f 93       	push	r20
    1da4:	5f 93       	push	r21
    1da6:	6f 93       	push	r22
    1da8:	7f 93       	push	r23
    1daa:	8f 93       	push	r24
    1dac:	9f 93       	push	r25
    1dae:	af 93       	push	r26
    1db0:	bf 93       	push	r27
    1db2:	ef 93       	push	r30
    1db4:	ff 93       	push	r31
    1db6:	df 93       	push	r29
    1db8:	cf 93       	push	r28
    1dba:	cd b7       	in	r28, 0x3d	; 61
    1dbc:	de b7       	in	r29, 0x3e	; 62

	if(g_ICU_CallBackPtr!= NULL&&flag!=0)
    1dbe:	80 91 31 03 	lds	r24, 0x0331
    1dc2:	88 23       	and	r24, r24
    1dc4:	29 f0       	breq	.+10     	; 0x1dd0 <__vector_6+0x3c>
		{
		g_ICU_CallBackPtr[MTIME1_CAPT_ID]();	//call fn on higher layer (APP)
    1dc6:	e0 91 2d 03 	lds	r30, 0x032D
    1dca:	f0 91 2e 03 	lds	r31, 0x032E
    1dce:	09 95       	icall
		}

flag=1;
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	80 93 31 03 	sts	0x0331, r24
}
    1dd6:	cf 91       	pop	r28
    1dd8:	df 91       	pop	r29
    1dda:	ff 91       	pop	r31
    1ddc:	ef 91       	pop	r30
    1dde:	bf 91       	pop	r27
    1de0:	af 91       	pop	r26
    1de2:	9f 91       	pop	r25
    1de4:	8f 91       	pop	r24
    1de6:	7f 91       	pop	r23
    1de8:	6f 91       	pop	r22
    1dea:	5f 91       	pop	r21
    1dec:	4f 91       	pop	r20
    1dee:	3f 91       	pop	r19
    1df0:	2f 91       	pop	r18
    1df2:	0f 90       	pop	r0
    1df4:	0f be       	out	0x3f, r0	; 63
    1df6:	0f 90       	pop	r0
    1df8:	1f 90       	pop	r1
    1dfa:	18 95       	reti

00001dfc <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    1dfc:	1f 92       	push	r1
    1dfe:	0f 92       	push	r0
    1e00:	0f b6       	in	r0, 0x3f	; 63
    1e02:	0f 92       	push	r0
    1e04:	11 24       	eor	r1, r1
    1e06:	2f 93       	push	r18
    1e08:	3f 93       	push	r19
    1e0a:	4f 93       	push	r20
    1e0c:	5f 93       	push	r21
    1e0e:	6f 93       	push	r22
    1e10:	7f 93       	push	r23
    1e12:	8f 93       	push	r24
    1e14:	9f 93       	push	r25
    1e16:	af 93       	push	r26
    1e18:	bf 93       	push	r27
    1e1a:	ef 93       	push	r30
    1e1c:	ff 93       	push	r31
    1e1e:	df 93       	push	r29
    1e20:	cf 93       	push	r28
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62

	if(g_ICU_CallBackPtr!= NULL)
			{
			g_ICU_CallBackPtr[MTIME1_OVF_ID]();	//call fn on higher layer (APP)
    1e26:	e0 91 2f 03 	lds	r30, 0x032F
    1e2a:	f0 91 30 03 	lds	r31, 0x0330
    1e2e:	09 95       	icall
			}

}
    1e30:	cf 91       	pop	r28
    1e32:	df 91       	pop	r29
    1e34:	ff 91       	pop	r31
    1e36:	ef 91       	pop	r30
    1e38:	bf 91       	pop	r27
    1e3a:	af 91       	pop	r26
    1e3c:	9f 91       	pop	r25
    1e3e:	8f 91       	pop	r24
    1e40:	7f 91       	pop	r23
    1e42:	6f 91       	pop	r22
    1e44:	5f 91       	pop	r21
    1e46:	4f 91       	pop	r20
    1e48:	3f 91       	pop	r19
    1e4a:	2f 91       	pop	r18
    1e4c:	0f 90       	pop	r0
    1e4e:	0f be       	out	0x3f, r0	; 63
    1e50:	0f 90       	pop	r0
    1e52:	1f 90       	pop	r1
    1e54:	18 95       	reti

00001e56 <MSPI_enSPI_MasterInit>:

#include "avr/io.h"


ErrorState_t MSPI_enSPI_MasterInit(void)
{
    1e56:	df 93       	push	r29
    1e58:	cf 93       	push	r28
    1e5a:	0f 92       	push	r0
    1e5c:	cd b7       	in	r28, 0x3d	; 61
    1e5e:	de b7       	in	r29, 0x3e	; 62
	ErrorState_t Local_State = SUCCES;
    1e60:	82 e0       	ldi	r24, 0x02	; 2
    1e62:	89 83       	std	Y+1, r24	; 0x01

	// Set MOSI and SCK output, all others input
	DDRB |= (1<<MOSI)| (1<<SCK)|(1<<SELECTOR);
    1e64:	a7 e3       	ldi	r26, 0x37	; 55
    1e66:	b0 e0       	ldi	r27, 0x00	; 0
    1e68:	e7 e3       	ldi	r30, 0x37	; 55
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	80 6b       	ori	r24, 0xB0	; 176
    1e70:	8c 93       	st	X, r24
	// Enable SPI, Master, set clock rate fck/16
	SPCR_REG |= (1<<SPE_BIT)|(1<<MSTR_BIT)|(1<<SPR0_BIT);
    1e72:	ad e2       	ldi	r26, 0x2D	; 45
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	ed e2       	ldi	r30, 0x2D	; 45
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	81 65       	ori	r24, 0x51	; 81
    1e7e:	8c 93       	st	X, r24
	// configer the bits in SPCR
	SET_BIT(SPCR_REG , SPE_BIT);	//Enable SPI
	SET_BIT(SPCR_REG , MSTR_BIT);	//SELECT MASTER
	SPCR_REG |= CLOCK_SELECT;		//SELECT CLOCK (from congfig)*/

	return Local_State;
    1e80:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e82:	0f 90       	pop	r0
    1e84:	cf 91       	pop	r28
    1e86:	df 91       	pop	r29
    1e88:	08 95       	ret

00001e8a <MSPI_enMasterTransmit>:

ErrorState_t MSPI_enMasterTransmit(u8 copy_u8Data , u8 * ptru8RetData)
{
    1e8a:	df 93       	push	r29
    1e8c:	cf 93       	push	r28
    1e8e:	00 d0       	rcall	.+0      	; 0x1e90 <MSPI_enMasterTransmit+0x6>
    1e90:	00 d0       	rcall	.+0      	; 0x1e92 <MSPI_enMasterTransmit+0x8>
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
    1e96:	8a 83       	std	Y+2, r24	; 0x02
    1e98:	7c 83       	std	Y+4, r23	; 0x04
    1e9a:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState_t Local_State = SUCCES;
    1e9c:	82 e0       	ldi	r24, 0x02	; 2
    1e9e:	89 83       	std	Y+1, r24	; 0x01
	//Start transmission
	SPDR_REG = copy_u8Data;
    1ea0:	ef e2       	ldi	r30, 0x2F	; 47
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea6:	80 83       	st	Z, r24
	// Wait for transmission complete
	while(!(SPSR_REG & (1<<SPIF_BIT)));
    1ea8:	ee e2       	ldi	r30, 0x2E	; 46
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	88 23       	and	r24, r24
    1eb0:	dc f7       	brge	.-10     	; 0x1ea8 <MSPI_enMasterTransmit+0x1e>
	*ptru8RetData = SPDR_REG;
    1eb2:	ef e2       	ldi	r30, 0x2F	; 47
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	eb 81       	ldd	r30, Y+3	; 0x03
    1eba:	fc 81       	ldd	r31, Y+4	; 0x04
    1ebc:	80 83       	st	Z, r24
	return Local_State;
    1ebe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ec0:	0f 90       	pop	r0
    1ec2:	0f 90       	pop	r0
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	cf 91       	pop	r28
    1eca:	df 91       	pop	r29
    1ecc:	08 95       	ret

00001ece <MSPI_enSPI_SlaveInit>:

ErrorState_t MSPI_enSPI_SlaveInit(void)
{
    1ece:	df 93       	push	r29
    1ed0:	cf 93       	push	r28
    1ed2:	0f 92       	push	r0
    1ed4:	cd b7       	in	r28, 0x3d	; 61
    1ed6:	de b7       	in	r29, 0x3e	; 62
	ErrorState_t Local_State = SUCCES;
    1ed8:	82 e0       	ldi	r24, 0x02	; 2
    1eda:	89 83       	std	Y+1, r24	; 0x01

	// congiger the pins as Output
	MDIO_SetPinDirection(MISO, OUTPUT);
    1edc:	86 e0       	ldi	r24, 0x06	; 6
    1ede:	61 e0       	ldi	r22, 0x01	; 1
    1ee0:	0e 94 de 11 	call	0x23bc	; 0x23bc <MDIO_SetPinDirection>

	// configer the bits in SPCR
	SET_BIT(SPCR_REG , SPE_BIT);	//Enable SPI
    1ee4:	ad e2       	ldi	r26, 0x2D	; 45
    1ee6:	b0 e0       	ldi	r27, 0x00	; 0
    1ee8:	ed e2       	ldi	r30, 0x2D	; 45
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	80 64       	ori	r24, 0x40	; 64
    1ef0:	8c 93       	st	X, r24

	return Local_State;
    1ef2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ef4:	0f 90       	pop	r0
    1ef6:	cf 91       	pop	r28
    1ef8:	df 91       	pop	r29
    1efa:	08 95       	ret

00001efc <MSPI_enSlaveReceive>:

ErrorState_t MSPI_enSlaveReceive( u8 * ptru8RetData)
{
    1efc:	df 93       	push	r29
    1efe:	cf 93       	push	r28
    1f00:	00 d0       	rcall	.+0      	; 0x1f02 <MSPI_enSlaveReceive+0x6>
    1f02:	0f 92       	push	r0
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
    1f08:	9b 83       	std	Y+3, r25	; 0x03
    1f0a:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_State = SUCCES;
    1f0c:	82 e0       	ldi	r24, 0x02	; 2
    1f0e:	89 83       	std	Y+1, r24	; 0x01

	if(SPDR_REG == 'A')
    1f10:	ef e2       	ldi	r30, 0x2F	; 47
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 81       	ld	r24, Z
    1f16:	81 34       	cpi	r24, 0x41	; 65
    1f18:	21 f4       	brne	.+8      	; 0x1f22 <MSPI_enSlaveReceive+0x26>
	{
		SPDR_REG = 'C';
    1f1a:	ef e2       	ldi	r30, 0x2F	; 47
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	83 e4       	ldi	r24, 0x43	; 67
    1f20:	80 83       	st	Z, r24
	}

	/* Wait for reception complete */
	while(!(SPSR_REG & (1<<SPIF_BIT)));
    1f22:	ee e2       	ldi	r30, 0x2E	; 46
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	80 81       	ld	r24, Z
    1f28:	88 23       	and	r24, r24
    1f2a:	dc f7       	brge	.-10     	; 0x1f22 <MSPI_enSlaveReceive+0x26>

	/* Return data register */
	*ptru8RetData =  SPDR_REG;
    1f2c:	ef e2       	ldi	r30, 0x2F	; 47
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	ea 81       	ldd	r30, Y+2	; 0x02
    1f34:	fb 81       	ldd	r31, Y+3	; 0x03
    1f36:	80 83       	st	Z, r24

	return Local_State;
    1f38:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f3a:	0f 90       	pop	r0
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	cf 91       	pop	r28
    1f42:	df 91       	pop	r29
    1f44:	08 95       	ret

00001f46 <MTWI_enInit>:




ErrorState_t MTWI_enInit(void)
{
    1f46:	df 93       	push	r29
    1f48:	cf 93       	push	r28
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62
//cofig speed -> 400KHz (TWBR register, prescaler bits)
CLR_BIT(TWSR_REG,TWSP0_BIT);
    1f4e:	a1 e2       	ldi	r26, 0x21	; 33
    1f50:	b0 e0       	ldi	r27, 0x00	; 0
    1f52:	e1 e2       	ldi	r30, 0x21	; 33
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	8e 7f       	andi	r24, 0xFE	; 254
    1f5a:	8c 93       	st	X, r24
CLR_BIT(TWSR_REG,TWSP1_BIT);
    1f5c:	a1 e2       	ldi	r26, 0x21	; 33
    1f5e:	b0 e0       	ldi	r27, 0x00	; 0
    1f60:	e1 e2       	ldi	r30, 0x21	; 33
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	8d 7f       	andi	r24, 0xFD	; 253
    1f68:	8c 93       	st	X, r24

TWBR_REG=0x02;
    1f6a:	e0 e2       	ldi	r30, 0x20	; 32
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	82 e0       	ldi	r24, 0x02	; 2
    1f70:	80 83       	st	Z, r24
//pre scaler = 1

//en twi turn on

SET_BIT(TWCR_REG,TWEN_BIT);
    1f72:	a6 e5       	ldi	r26, 0x56	; 86
    1f74:	b0 e0       	ldi	r27, 0x00	; 0
    1f76:	e6 e5       	ldi	r30, 0x56	; 86
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	80 81       	ld	r24, Z
    1f7c:	84 60       	ori	r24, 0x04	; 4
    1f7e:	8c 93       	st	X, r24

return SUCCES;
    1f80:	82 e0       	ldi	r24, 0x02	; 2
}
    1f82:	cf 91       	pop	r28
    1f84:	df 91       	pop	r29
    1f86:	08 95       	ret

00001f88 <MTWI_enSendStart>:

ErrorState_t MTWI_enSendStart(void)
{
    1f88:	df 93       	push	r29
    1f8a:	cf 93       	push	r28
    1f8c:	cd b7       	in	r28, 0x3d	; 61
    1f8e:	de b7       	in	r29, 0x3e	; 62
//	STEP1: clear flag + set start bit + Enable TWI
	TWCR_REG = (1<<TWINT_BIT)|(1<<TWSTA_BIT)|(1<<TWEN_BIT);
    1f90:	e6 e5       	ldi	r30, 0x56	; 86
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	84 ea       	ldi	r24, 0xA4	; 164
    1f96:	80 83       	st	Z, r24
// step 2 : wait until operation starts
	//while(GET_BIT(TWCR_REG,TWINT_BIT)==0);
	while (!(TWCR_REG & (1<<TWINT_BIT)));  //GET BIT
    1f98:	e6 e5       	ldi	r30, 0x56	; 86
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	88 23       	and	r24, r24
    1fa0:	dc f7       	brge	.-10     	; 0x1f98 <MTWI_enSendStart+0x10>

	return SUCCES;
    1fa2:	82 e0       	ldi	r24, 0x02	; 2
}
    1fa4:	cf 91       	pop	r28
    1fa6:	df 91       	pop	r29
    1fa8:	08 95       	ret

00001faa <MTWI_enSendStop>:

ErrorState_t MTWI_enSendStop(void)
{
    1faa:	df 93       	push	r29
    1fac:	cf 93       	push	r28
    1fae:	cd b7       	in	r28, 0x3d	; 61
    1fb0:	de b7       	in	r29, 0x3e	; 62
	TWCR_REG = (1<<TWINT_BIT)|(1<<TWEN_BIT)|(1<<TWSTO_BIT);
    1fb2:	e6 e5       	ldi	r30, 0x56	; 86
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	84 e9       	ldi	r24, 0x94	; 148
    1fb8:	80 83       	st	Z, r24
	return SUCCES;
    1fba:	82 e0       	ldi	r24, 0x02	; 2
}
    1fbc:	cf 91       	pop	r28
    1fbe:	df 91       	pop	r29
    1fc0:	08 95       	ret

00001fc2 <MTWI_enSendByte>:
ErrorState_t MTWI_enSendByte(u8 copy_u8Data)
{//load data into register
    1fc2:	df 93       	push	r29
    1fc4:	cf 93       	push	r28
    1fc6:	0f 92       	push	r0
    1fc8:	cd b7       	in	r28, 0x3d	; 61
    1fca:	de b7       	in	r29, 0x3e	; 62
    1fcc:	89 83       	std	Y+1, r24	; 0x01
	TWDR_REG = copy_u8Data;
    1fce:	e3 e2       	ldi	r30, 0x23	; 35
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	89 81       	ldd	r24, Y+1	; 0x01
    1fd4:	80 83       	st	Z, r24
//clear flag + set Enable
	TWCR_REG = (1<<TWINT_BIT) | (1<<TWEN_BIT);
    1fd6:	e6 e5       	ldi	r30, 0x56	; 86
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	84 e8       	ldi	r24, 0x84	; 132
    1fdc:	80 83       	st	Z, r24
	//wait
	//while(GET_BIT(TWCR_REG,TWINT_BIT)==0);
	while (!(TWCR_REG & (1<<TWINT_BIT)));  //GET BIT
    1fde:	e6 e5       	ldi	r30, 0x56	; 86
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	88 23       	and	r24, r24
    1fe6:	dc f7       	brge	.-10     	; 0x1fde <MTWI_enSendByte+0x1c>
	return SUCCES;
    1fe8:	82 e0       	ldi	r24, 0x02	; 2
}
    1fea:	0f 90       	pop	r0
    1fec:	cf 91       	pop	r28
    1fee:	df 91       	pop	r29
    1ff0:	08 95       	ret

00001ff2 <MTWI_enRecByteAck>:
ErrorState_t MTWI_enRecByteAck(u8 *ptrRECdata)
{
    1ff2:	df 93       	push	r29
    1ff4:	cf 93       	push	r28
    1ff6:	00 d0       	rcall	.+0      	; 0x1ff8 <MTWI_enRecByteAck+0x6>
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
    1ffc:	9a 83       	std	Y+2, r25	; 0x02
    1ffe:	89 83       	std	Y+1, r24	; 0x01
	//clear flag + set Enable
	TWCR_REG = (1<<TWINT_BIT) | (1<<TWEN_BIT)|(1<<TWEA_BIT);
    2000:	e6 e5       	ldi	r30, 0x56	; 86
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	84 ec       	ldi	r24, 0xC4	; 196
    2006:	80 83       	st	Z, r24
	//while(GET_BIT(TWCR_REG,TWINT_BIT)==0);
	while (!(TWCR_REG & (1<<TWINT_BIT)));  //GET BIT
    2008:	e6 e5       	ldi	r30, 0x56	; 86
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	88 23       	and	r24, r24
    2010:	dc f7       	brge	.-10     	; 0x2008 <MTWI_enRecByteAck+0x16>
	//load data
	*ptrRECdata=TWDR_REG;
    2012:	e3 e2       	ldi	r30, 0x23	; 35
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	80 81       	ld	r24, Z
    2018:	e9 81       	ldd	r30, Y+1	; 0x01
    201a:	fa 81       	ldd	r31, Y+2	; 0x02
    201c:	80 83       	st	Z, r24

	return SUCCES;
    201e:	82 e0       	ldi	r24, 0x02	; 2
}
    2020:	0f 90       	pop	r0
    2022:	0f 90       	pop	r0
    2024:	cf 91       	pop	r28
    2026:	df 91       	pop	r29
    2028:	08 95       	ret

0000202a <MTWI_enRecByteNoAck>:
ErrorState_t MTWI_enRecByteNoAck(u8 *ptrRECdata)
{
    202a:	df 93       	push	r29
    202c:	cf 93       	push	r28
    202e:	00 d0       	rcall	.+0      	; 0x2030 <MTWI_enRecByteNoAck+0x6>
    2030:	cd b7       	in	r28, 0x3d	; 61
    2032:	de b7       	in	r29, 0x3e	; 62
    2034:	9a 83       	std	Y+2, r25	; 0x02
    2036:	89 83       	std	Y+1, r24	; 0x01


	//clear flag + set Enable
	TWCR_REG = (1<<TWINT_BIT) | (1<<TWEN_BIT);
    2038:	e6 e5       	ldi	r30, 0x56	; 86
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	84 e8       	ldi	r24, 0x84	; 132
    203e:	80 83       	st	Z, r24
	//while(GET_BIT(TWCR_REG,TWINT_BIT)==0);
while (!(TWCR_REG & (1<<TWINT_BIT)));  //GET BIT
    2040:	e6 e5       	ldi	r30, 0x56	; 86
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	88 23       	and	r24, r24
    2048:	dc f7       	brge	.-10     	; 0x2040 <MTWI_enRecByteNoAck+0x16>
	//load data
	*ptrRECdata=TWDR_REG;
    204a:	e3 e2       	ldi	r30, 0x23	; 35
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	e9 81       	ldd	r30, Y+1	; 0x01
    2052:	fa 81       	ldd	r31, Y+2	; 0x02
    2054:	80 83       	st	Z, r24
	return SUCCES;
    2056:	82 e0       	ldi	r24, 0x02	; 2
}
    2058:	0f 90       	pop	r0
    205a:	0f 90       	pop	r0
    205c:	cf 91       	pop	r28
    205e:	df 91       	pop	r29
    2060:	08 95       	ret

00002062 <MTWI_enReadStatus>:
ErrorState_t MTWI_enReadStatus(u8 * ptrStatusValue)
{
    2062:	df 93       	push	r29
    2064:	cf 93       	push	r28
    2066:	00 d0       	rcall	.+0      	; 0x2068 <MTWI_enReadStatus+0x6>
    2068:	cd b7       	in	r28, 0x3d	; 61
    206a:	de b7       	in	r29, 0x3e	; 62
    206c:	9a 83       	std	Y+2, r25	; 0x02
    206e:	89 83       	std	Y+1, r24	; 0x01
	//apply mask on status register
	* ptrStatusValue =TWSR_REG & MTWI_STATUS_MASK;
    2070:	e1 e2       	ldi	r30, 0x21	; 33
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	88 7f       	andi	r24, 0xF8	; 248
    2078:	e9 81       	ldd	r30, Y+1	; 0x01
    207a:	fa 81       	ldd	r31, Y+2	; 0x02
    207c:	80 83       	st	Z, r24
	return SUCCES;
    207e:	82 e0       	ldi	r24, 0x02	; 2
}
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	cf 91       	pop	r28
    2086:	df 91       	pop	r29
    2088:	08 95       	ret

0000208a <MGIE_enEnable>:
#include "MGIE_config.h"
#include "MGIE_int.h"


ErrorState_t MGIE_enEnable(void)
{
    208a:	df 93       	push	r29
    208c:	cf 93       	push	r28
    208e:	cd b7       	in	r28, 0x3d	; 61
    2090:	de b7       	in	r29, 0x3e	; 62
	//SET_BIT(SREG_REG,I_BIT)
	asm("SEI");
    2092:	78 94       	sei
return SUCCES;
    2094:	82 e0       	ldi	r24, 0x02	; 2
}
    2096:	cf 91       	pop	r28
    2098:	df 91       	pop	r29
    209a:	08 95       	ret

0000209c <MGIE_enDisable>:

ErrorState_t MGIE_enDisable(void)
{
    209c:	df 93       	push	r29
    209e:	cf 93       	push	r28
    20a0:	cd b7       	in	r28, 0x3d	; 61
    20a2:	de b7       	in	r29, 0x3e	; 62

	//CLR_BIT(SREG_REG,I_BIT)
		asm("CLI");
    20a4:	f8 94       	cli
return SUCCES;
    20a6:	82 e0       	ldi	r24, 0x02	; 2
}
    20a8:	cf 91       	pop	r28
    20aa:	df 91       	pop	r29
    20ac:	08 95       	ret

000020ae <MEXIT_enEnable>:
#include "MEXIT_int.h"
#include <avr/interrupt.h>
void (*CallBackArr[3])(void)={NULL,NULL,NULL};

ErrorState_t MEXIT_enEnable(InterruptID_t copy_enID,IntTrigger_t copy_enTrig)
{
    20ae:	df 93       	push	r29
    20b0:	cf 93       	push	r28
    20b2:	00 d0       	rcall	.+0      	; 0x20b4 <MEXIT_enEnable+0x6>
    20b4:	00 d0       	rcall	.+0      	; 0x20b6 <MEXIT_enEnable+0x8>
    20b6:	0f 92       	push	r0
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
    20bc:	8a 83       	std	Y+2, r24	; 0x02
    20be:	6b 83       	std	Y+3, r22	; 0x03


	ErrorState_t Local_enState=SUCCES;
    20c0:	82 e0       	ldi	r24, 0x02	; 2
    20c2:	89 83       	std	Y+1, r24	; 0x01
if(copy_enTrig>RAIS_EDGE_TRIG||copy_enTrig<LOW_LEVEL_TRIG)
    20c4:	8b 81       	ldd	r24, Y+3	; 0x03
    20c6:	84 30       	cpi	r24, 0x04	; 4
    20c8:	10 f0       	brcs	.+4      	; 0x20ce <MEXIT_enEnable+0x20>
{
	Local_enState=OUT_OF_RANGE;
    20ca:	19 82       	std	Y+1, r1	; 0x01
    20cc:	62 c0       	rjmp	.+196    	; 0x2192 <MEXIT_enEnable+0xe4>
}//end if
else{
	switch(copy_enID)
    20ce:	8a 81       	ldd	r24, Y+2	; 0x02
    20d0:	28 2f       	mov	r18, r24
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	3d 83       	std	Y+5, r19	; 0x05
    20d6:	2c 83       	std	Y+4, r18	; 0x04
    20d8:	8c 81       	ldd	r24, Y+4	; 0x04
    20da:	9d 81       	ldd	r25, Y+5	; 0x05
    20dc:	86 30       	cpi	r24, 0x06	; 6
    20de:	91 05       	cpc	r25, r1
    20e0:	59 f0       	breq	.+22     	; 0x20f8 <MEXIT_enEnable+0x4a>
    20e2:	2c 81       	ldd	r18, Y+4	; 0x04
    20e4:	3d 81       	ldd	r19, Y+5	; 0x05
    20e6:	27 30       	cpi	r18, 0x07	; 7
    20e8:	31 05       	cpc	r19, r1
    20ea:	b1 f0       	breq	.+44     	; 0x2118 <MEXIT_enEnable+0x6a>
    20ec:	8c 81       	ldd	r24, Y+4	; 0x04
    20ee:	9d 81       	ldd	r25, Y+5	; 0x05
    20f0:	85 30       	cpi	r24, 0x05	; 5
    20f2:	91 05       	cpc	r25, r1
    20f4:	41 f1       	breq	.+80     	; 0x2146 <MEXIT_enEnable+0x98>
    20f6:	39 c0       	rjmp	.+114    	; 0x216a <MEXIT_enEnable+0xbc>
			CLR_BIT(MCUCR_REG,ISC00_BIT);


		}*/
		//aplly mask
		MCUCR_REG &=INT0_SC_MASK;
    20f8:	a5 e5       	ldi	r26, 0x55	; 85
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	e5 e5       	ldi	r30, 0x55	; 85
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	8c 7f       	andi	r24, 0xFC	; 252
    2104:	8c 93       	st	X, r24
		//insert value

		MCUCR_REG|= copy_enTrig;
    2106:	a5 e5       	ldi	r26, 0x55	; 85
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	e5 e5       	ldi	r30, 0x55	; 85
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	90 81       	ld	r25, Z
    2110:	8b 81       	ldd	r24, Y+3	; 0x03
    2112:	89 2b       	or	r24, r25
    2114:	8c 93       	st	X, r24
    2116:	2a c0       	rjmp	.+84     	; 0x216c <MEXIT_enEnable+0xbe>

	break;
	case INT1_ID:
		MCUCR_REG &=INT1_SC_MASK;
    2118:	a5 e5       	ldi	r26, 0x55	; 85
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	e5 e5       	ldi	r30, 0x55	; 85
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	83 7f       	andi	r24, 0xF3	; 243
    2124:	8c 93       	st	X, r24
		//insert value
		MCUCR_REG|= copy_enTrig<<INT1_SC_SH;
    2126:	a5 e5       	ldi	r26, 0x55	; 85
    2128:	b0 e0       	ldi	r27, 0x00	; 0
    212a:	e5 e5       	ldi	r30, 0x55	; 85
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	28 2f       	mov	r18, r24
    2132:	8b 81       	ldd	r24, Y+3	; 0x03
    2134:	88 2f       	mov	r24, r24
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	88 0f       	add	r24, r24
    213a:	99 1f       	adc	r25, r25
    213c:	88 0f       	add	r24, r24
    213e:	99 1f       	adc	r25, r25
    2140:	82 2b       	or	r24, r18
    2142:	8c 93       	st	X, r24
    2144:	13 c0       	rjmp	.+38     	; 0x216c <MEXIT_enEnable+0xbe>
		break;
	case INT2_ID:
		CLR_BIT(MCUCSR_REG,ISC2_BIT);
    2146:	a4 e5       	ldi	r26, 0x54	; 84
    2148:	b0 e0       	ldi	r27, 0x00	; 0
    214a:	e4 e5       	ldi	r30, 0x54	; 84
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	80 81       	ld	r24, Z
    2150:	8f 7b       	andi	r24, 0xBF	; 191
    2152:	8c 93       	st	X, r24
		MCUCSR_REG|=GET_BIT(copy_enTrig,0)<<ISC2_BIT;
    2154:	a4 e5       	ldi	r26, 0x54	; 84
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	e4 e5       	ldi	r30, 0x54	; 84
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	98 2f       	mov	r25, r24
    2160:	8b 81       	ldd	r24, Y+3	; 0x03
    2162:	80 74       	andi	r24, 0x40	; 64
    2164:	89 2b       	or	r24, r25
    2166:	8c 93       	st	X, r24
    2168:	01 c0       	rjmp	.+2      	; 0x216c <MEXIT_enEnable+0xbe>
		break;
	default:
		Local_enState=OUT_OF_RANGE;
    216a:	19 82       	std	Y+1, r1	; 0x01
	}//end switch triger
//Enable Special keu
SET_BIT(GICR,copy_enID);
    216c:	ab e5       	ldi	r26, 0x5B	; 91
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	eb e5       	ldi	r30, 0x5B	; 91
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	48 2f       	mov	r20, r24
    2178:	8a 81       	ldd	r24, Y+2	; 0x02
    217a:	28 2f       	mov	r18, r24
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	02 2e       	mov	r0, r18
    2184:	02 c0       	rjmp	.+4      	; 0x218a <MEXIT_enEnable+0xdc>
    2186:	88 0f       	add	r24, r24
    2188:	99 1f       	adc	r25, r25
    218a:	0a 94       	dec	r0
    218c:	e2 f7       	brpl	.-8      	; 0x2186 <MEXIT_enEnable+0xd8>
    218e:	84 2b       	or	r24, r20
    2190:	8c 93       	st	X, r24
}//end if
return Local_enState;
    2192:	89 81       	ldd	r24, Y+1	; 0x01
}
    2194:	0f 90       	pop	r0
    2196:	0f 90       	pop	r0
    2198:	0f 90       	pop	r0
    219a:	0f 90       	pop	r0
    219c:	0f 90       	pop	r0
    219e:	cf 91       	pop	r28
    21a0:	df 91       	pop	r29
    21a2:	08 95       	ret

000021a4 <MEXIT_enDisable>:
//set ON Enable , config trigger
ErrorState_t MEXIT_enDisable(InterruptID_t copy_enID)
{ 	ErrorState_t Local_enState=SUCCES;
    21a4:	df 93       	push	r29
    21a6:	cf 93       	push	r28
    21a8:	00 d0       	rcall	.+0      	; 0x21aa <MEXIT_enDisable+0x6>
    21aa:	cd b7       	in	r28, 0x3d	; 61
    21ac:	de b7       	in	r29, 0x3e	; 62
    21ae:	8a 83       	std	Y+2, r24	; 0x02
    21b0:	82 e0       	ldi	r24, 0x02	; 2
    21b2:	89 83       	std	Y+1, r24	; 0x01
	if(copy_enID>=INT2_ID&&copy_enID<=INT1_ID)
    21b4:	8a 81       	ldd	r24, Y+2	; 0x02
    21b6:	85 30       	cpi	r24, 0x05	; 5
    21b8:	c0 f0       	brcs	.+48     	; 0x21ea <MEXIT_enDisable+0x46>
    21ba:	8a 81       	ldd	r24, Y+2	; 0x02
    21bc:	88 30       	cpi	r24, 0x08	; 8
    21be:	a8 f4       	brcc	.+42     	; 0x21ea <MEXIT_enDisable+0x46>
	CLR_BIT(GICR_REG,copy_enID);
    21c0:	ab e5       	ldi	r26, 0x5B	; 91
    21c2:	b0 e0       	ldi	r27, 0x00	; 0
    21c4:	eb e5       	ldi	r30, 0x5B	; 91
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	80 81       	ld	r24, Z
    21ca:	48 2f       	mov	r20, r24
    21cc:	8a 81       	ldd	r24, Y+2	; 0x02
    21ce:	28 2f       	mov	r18, r24
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	02 2e       	mov	r0, r18
    21d8:	02 c0       	rjmp	.+4      	; 0x21de <MEXIT_enDisable+0x3a>
    21da:	88 0f       	add	r24, r24
    21dc:	99 1f       	adc	r25, r25
    21de:	0a 94       	dec	r0
    21e0:	e2 f7       	brpl	.-8      	; 0x21da <MEXIT_enDisable+0x36>
    21e2:	80 95       	com	r24
    21e4:	84 23       	and	r24, r20
    21e6:	8c 93       	st	X, r24
    21e8:	02 c0       	rjmp	.+4      	; 0x21ee <MEXIT_enDisable+0x4a>
	else
		Local_enState=SUCCES;
    21ea:	82 e0       	ldi	r24, 0x02	; 2
    21ec:	89 83       	std	Y+1, r24	; 0x01
	return Local_enState;
    21ee:	89 81       	ldd	r24, Y+1	; 0x01
}//Set off
    21f0:	0f 90       	pop	r0
    21f2:	0f 90       	pop	r0
    21f4:	cf 91       	pop	r28
    21f6:	df 91       	pop	r29
    21f8:	08 95       	ret

000021fa <MEXIT_enSetCallBack>:

ErrorState_t MEXIT_enSetCallBack(InterruptID_t copy_enID,void (*ptrfn)(void))
{ErrorState_t Local_enState=SUCCES;
    21fa:	df 93       	push	r29
    21fc:	cf 93       	push	r28
    21fe:	00 d0       	rcall	.+0      	; 0x2200 <MEXIT_enSetCallBack+0x6>
    2200:	00 d0       	rcall	.+0      	; 0x2202 <MEXIT_enSetCallBack+0x8>
    2202:	00 d0       	rcall	.+0      	; 0x2204 <MEXIT_enSetCallBack+0xa>
    2204:	cd b7       	in	r28, 0x3d	; 61
    2206:	de b7       	in	r29, 0x3e	; 62
    2208:	8a 83       	std	Y+2, r24	; 0x02
    220a:	7c 83       	std	Y+4, r23	; 0x04
    220c:	6b 83       	std	Y+3, r22	; 0x03
    220e:	82 e0       	ldi	r24, 0x02	; 2
    2210:	89 83       	std	Y+1, r24	; 0x01

if(ptrfn==NULL)
    2212:	8b 81       	ldd	r24, Y+3	; 0x03
    2214:	9c 81       	ldd	r25, Y+4	; 0x04
    2216:	00 97       	sbiw	r24, 0x00	; 0
    2218:	19 f4       	brne	.+6      	; 0x2220 <MEXIT_enSetCallBack+0x26>

{

Local_enState=NULL_PTR_ERR;
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	89 83       	std	Y+1, r24	; 0x01
    221e:	2b c0       	rjmp	.+86     	; 0x2276 <MEXIT_enSetCallBack+0x7c>
}
else{
switch (copy_enID)
    2220:	8a 81       	ldd	r24, Y+2	; 0x02
    2222:	28 2f       	mov	r18, r24
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	3e 83       	std	Y+6, r19	; 0x06
    2228:	2d 83       	std	Y+5, r18	; 0x05
    222a:	8d 81       	ldd	r24, Y+5	; 0x05
    222c:	9e 81       	ldd	r25, Y+6	; 0x06
    222e:	86 30       	cpi	r24, 0x06	; 6
    2230:	91 05       	cpc	r25, r1
    2232:	59 f0       	breq	.+22     	; 0x224a <MEXIT_enSetCallBack+0x50>
    2234:	2d 81       	ldd	r18, Y+5	; 0x05
    2236:	3e 81       	ldd	r19, Y+6	; 0x06
    2238:	27 30       	cpi	r18, 0x07	; 7
    223a:	31 05       	cpc	r19, r1
    223c:	69 f0       	breq	.+26     	; 0x2258 <MEXIT_enSetCallBack+0x5e>
    223e:	8d 81       	ldd	r24, Y+5	; 0x05
    2240:	9e 81       	ldd	r25, Y+6	; 0x06
    2242:	85 30       	cpi	r24, 0x05	; 5
    2244:	91 05       	cpc	r25, r1
    2246:	79 f0       	breq	.+30     	; 0x2266 <MEXIT_enSetCallBack+0x6c>
    2248:	15 c0       	rjmp	.+42     	; 0x2274 <MEXIT_enSetCallBack+0x7a>
{

case INT0_ID:
	CallBackArr[0]=ptrfn;
    224a:	8b 81       	ldd	r24, Y+3	; 0x03
    224c:	9c 81       	ldd	r25, Y+4	; 0x04
    224e:	90 93 33 03 	sts	0x0333, r25
    2252:	80 93 32 03 	sts	0x0332, r24
    2256:	0f c0       	rjmp	.+30     	; 0x2276 <MEXIT_enSetCallBack+0x7c>
	break;


case INT1_ID:
	CallBackArr[1]=ptrfn;
    2258:	8b 81       	ldd	r24, Y+3	; 0x03
    225a:	9c 81       	ldd	r25, Y+4	; 0x04
    225c:	90 93 35 03 	sts	0x0335, r25
    2260:	80 93 34 03 	sts	0x0334, r24
    2264:	08 c0       	rjmp	.+16     	; 0x2276 <MEXIT_enSetCallBack+0x7c>
	break;

case INT2_ID:
	CallBackArr[2]=ptrfn;
    2266:	8b 81       	ldd	r24, Y+3	; 0x03
    2268:	9c 81       	ldd	r25, Y+4	; 0x04
    226a:	90 93 37 03 	sts	0x0337, r25
    226e:	80 93 36 03 	sts	0x0336, r24
    2272:	01 c0       	rjmp	.+2      	; 0x2276 <MEXIT_enSetCallBack+0x7c>
	break;
default:
	Local_enState=OUT_OF_RANGE;
    2274:	19 82       	std	Y+1, r1	; 0x01
}
}
return Local_enState;
    2276:	89 81       	ldd	r24, Y+1	; 0x01

}
    2278:	26 96       	adiw	r28, 0x06	; 6
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	f8 94       	cli
    227e:	de bf       	out	0x3e, r29	; 62
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	cd bf       	out	0x3d, r28	; 61
    2284:	cf 91       	pop	r28
    2286:	df 91       	pop	r29
    2288:	08 95       	ret

0000228a <__vector_1>:

ISR(INT0_vect)
{
    228a:	1f 92       	push	r1
    228c:	0f 92       	push	r0
    228e:	0f b6       	in	r0, 0x3f	; 63
    2290:	0f 92       	push	r0
    2292:	11 24       	eor	r1, r1
    2294:	2f 93       	push	r18
    2296:	3f 93       	push	r19
    2298:	4f 93       	push	r20
    229a:	5f 93       	push	r21
    229c:	6f 93       	push	r22
    229e:	7f 93       	push	r23
    22a0:	8f 93       	push	r24
    22a2:	9f 93       	push	r25
    22a4:	af 93       	push	r26
    22a6:	bf 93       	push	r27
    22a8:	ef 93       	push	r30
    22aa:	ff 93       	push	r31
    22ac:	df 93       	push	r29
    22ae:	cf 93       	push	r28
    22b0:	cd b7       	in	r28, 0x3d	; 61
    22b2:	de b7       	in	r29, 0x3e	; 62
	if(CallBackArr[0]!=NULL)
    22b4:	80 91 32 03 	lds	r24, 0x0332
    22b8:	90 91 33 03 	lds	r25, 0x0333
    22bc:	00 97       	sbiw	r24, 0x00	; 0
    22be:	29 f0       	breq	.+10     	; 0x22ca <__vector_1+0x40>
	{
		CallBackArr[0]();
    22c0:	e0 91 32 03 	lds	r30, 0x0332
    22c4:	f0 91 33 03 	lds	r31, 0x0333
    22c8:	09 95       	icall

	}


}
    22ca:	cf 91       	pop	r28
    22cc:	df 91       	pop	r29
    22ce:	ff 91       	pop	r31
    22d0:	ef 91       	pop	r30
    22d2:	bf 91       	pop	r27
    22d4:	af 91       	pop	r26
    22d6:	9f 91       	pop	r25
    22d8:	8f 91       	pop	r24
    22da:	7f 91       	pop	r23
    22dc:	6f 91       	pop	r22
    22de:	5f 91       	pop	r21
    22e0:	4f 91       	pop	r20
    22e2:	3f 91       	pop	r19
    22e4:	2f 91       	pop	r18
    22e6:	0f 90       	pop	r0
    22e8:	0f be       	out	0x3f, r0	; 63
    22ea:	0f 90       	pop	r0
    22ec:	1f 90       	pop	r1
    22ee:	18 95       	reti

000022f0 <__vector_2>:

ISR(INT1_vect)
{
    22f0:	1f 92       	push	r1
    22f2:	0f 92       	push	r0
    22f4:	0f b6       	in	r0, 0x3f	; 63
    22f6:	0f 92       	push	r0
    22f8:	11 24       	eor	r1, r1
    22fa:	2f 93       	push	r18
    22fc:	3f 93       	push	r19
    22fe:	4f 93       	push	r20
    2300:	5f 93       	push	r21
    2302:	6f 93       	push	r22
    2304:	7f 93       	push	r23
    2306:	8f 93       	push	r24
    2308:	9f 93       	push	r25
    230a:	af 93       	push	r26
    230c:	bf 93       	push	r27
    230e:	ef 93       	push	r30
    2310:	ff 93       	push	r31
    2312:	df 93       	push	r29
    2314:	cf 93       	push	r28
    2316:	cd b7       	in	r28, 0x3d	; 61
    2318:	de b7       	in	r29, 0x3e	; 62
	if(CallBackArr[1]!=NULL)
    231a:	80 91 34 03 	lds	r24, 0x0334
    231e:	90 91 35 03 	lds	r25, 0x0335
    2322:	00 97       	sbiw	r24, 0x00	; 0
    2324:	29 f0       	breq	.+10     	; 0x2330 <__vector_2+0x40>
	{
		CallBackArr[1]();
    2326:	e0 91 34 03 	lds	r30, 0x0334
    232a:	f0 91 35 03 	lds	r31, 0x0335
    232e:	09 95       	icall

	}


}
    2330:	cf 91       	pop	r28
    2332:	df 91       	pop	r29
    2334:	ff 91       	pop	r31
    2336:	ef 91       	pop	r30
    2338:	bf 91       	pop	r27
    233a:	af 91       	pop	r26
    233c:	9f 91       	pop	r25
    233e:	8f 91       	pop	r24
    2340:	7f 91       	pop	r23
    2342:	6f 91       	pop	r22
    2344:	5f 91       	pop	r21
    2346:	4f 91       	pop	r20
    2348:	3f 91       	pop	r19
    234a:	2f 91       	pop	r18
    234c:	0f 90       	pop	r0
    234e:	0f be       	out	0x3f, r0	; 63
    2350:	0f 90       	pop	r0
    2352:	1f 90       	pop	r1
    2354:	18 95       	reti

00002356 <__vector_3>:

ISR(INT2_vect)
{
    2356:	1f 92       	push	r1
    2358:	0f 92       	push	r0
    235a:	0f b6       	in	r0, 0x3f	; 63
    235c:	0f 92       	push	r0
    235e:	11 24       	eor	r1, r1
    2360:	2f 93       	push	r18
    2362:	3f 93       	push	r19
    2364:	4f 93       	push	r20
    2366:	5f 93       	push	r21
    2368:	6f 93       	push	r22
    236a:	7f 93       	push	r23
    236c:	8f 93       	push	r24
    236e:	9f 93       	push	r25
    2370:	af 93       	push	r26
    2372:	bf 93       	push	r27
    2374:	ef 93       	push	r30
    2376:	ff 93       	push	r31
    2378:	df 93       	push	r29
    237a:	cf 93       	push	r28
    237c:	cd b7       	in	r28, 0x3d	; 61
    237e:	de b7       	in	r29, 0x3e	; 62
	if(CallBackArr[2]!=NULL)
    2380:	80 91 36 03 	lds	r24, 0x0336
    2384:	90 91 37 03 	lds	r25, 0x0337
    2388:	00 97       	sbiw	r24, 0x00	; 0
    238a:	29 f0       	breq	.+10     	; 0x2396 <__vector_3+0x40>
	{
		CallBackArr[2]();
    238c:	e0 91 36 03 	lds	r30, 0x0336
    2390:	f0 91 37 03 	lds	r31, 0x0337
    2394:	09 95       	icall

	}


}
    2396:	cf 91       	pop	r28
    2398:	df 91       	pop	r29
    239a:	ff 91       	pop	r31
    239c:	ef 91       	pop	r30
    239e:	bf 91       	pop	r27
    23a0:	af 91       	pop	r26
    23a2:	9f 91       	pop	r25
    23a4:	8f 91       	pop	r24
    23a6:	7f 91       	pop	r23
    23a8:	6f 91       	pop	r22
    23aa:	5f 91       	pop	r21
    23ac:	4f 91       	pop	r20
    23ae:	3f 91       	pop	r19
    23b0:	2f 91       	pop	r18
    23b2:	0f 90       	pop	r0
    23b4:	0f be       	out	0x3f, r0	; 63
    23b6:	0f 90       	pop	r0
    23b8:	1f 90       	pop	r1
    23ba:	18 95       	reti

000023bc <MDIO_SetPinDirection>:
#include "BIT_MATH.h"
#include "MDIO_priv.h"
#include "MDIO_int.h"

void MDIO_SetPinDirection(Pin_t copy_enPin, Direction_t copy_u8enDirection)
{
    23bc:	df 93       	push	r29
    23be:	cf 93       	push	r28
    23c0:	cd b7       	in	r28, 0x3d	; 61
    23c2:	de b7       	in	r29, 0x3e	; 62
    23c4:	2e 97       	sbiw	r28, 0x0e	; 14
    23c6:	0f b6       	in	r0, 0x3f	; 63
    23c8:	f8 94       	cli
    23ca:	de bf       	out	0x3e, r29	; 62
    23cc:	0f be       	out	0x3f, r0	; 63
    23ce:	cd bf       	out	0x3d, r28	; 61
    23d0:	8b 83       	std	Y+3, r24	; 0x03
    23d2:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8port= copy_enPin /10; //1-4
    23d4:	8b 81       	ldd	r24, Y+3	; 0x03
    23d6:	9a e0       	ldi	r25, 0x0A	; 10
    23d8:	69 2f       	mov	r22, r25
    23da:	0e 94 20 3a 	call	0x7440	; 0x7440 <__udivmodqi4>
    23de:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8pin= copy_enPin % 10; //0-7
    23e0:	8b 81       	ldd	r24, Y+3	; 0x03
    23e2:	9a e0       	ldi	r25, 0x0A	; 10
    23e4:	69 2f       	mov	r22, r25
    23e6:	0e 94 20 3a 	call	0x7440	; 0x7440 <__udivmodqi4>
    23ea:	89 2f       	mov	r24, r25
    23ec:	89 83       	std	Y+1, r24	; 0x01
	/*****************************/
	switch(Local_u8port)
    23ee:	8a 81       	ldd	r24, Y+2	; 0x02
    23f0:	28 2f       	mov	r18, r24
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	3e 87       	std	Y+14, r19	; 0x0e
    23f6:	2d 87       	std	Y+13, r18	; 0x0d
    23f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    23fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    23fc:	82 30       	cpi	r24, 0x02	; 2
    23fe:	91 05       	cpc	r25, r1
    2400:	09 f4       	brne	.+2      	; 0x2404 <MDIO_SetPinDirection+0x48>
    2402:	50 c0       	rjmp	.+160    	; 0x24a4 <MDIO_SetPinDirection+0xe8>
    2404:	2d 85       	ldd	r18, Y+13	; 0x0d
    2406:	3e 85       	ldd	r19, Y+14	; 0x0e
    2408:	23 30       	cpi	r18, 0x03	; 3
    240a:	31 05       	cpc	r19, r1
    240c:	34 f4       	brge	.+12     	; 0x241a <MDIO_SetPinDirection+0x5e>
    240e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2410:	9e 85       	ldd	r25, Y+14	; 0x0e
    2412:	81 30       	cpi	r24, 0x01	; 1
    2414:	91 05       	cpc	r25, r1
    2416:	71 f0       	breq	.+28     	; 0x2434 <MDIO_SetPinDirection+0x78>
    2418:	ec c0       	rjmp	.+472    	; 0x25f2 <MDIO_SetPinDirection+0x236>
    241a:	2d 85       	ldd	r18, Y+13	; 0x0d
    241c:	3e 85       	ldd	r19, Y+14	; 0x0e
    241e:	23 30       	cpi	r18, 0x03	; 3
    2420:	31 05       	cpc	r19, r1
    2422:	09 f4       	brne	.+2      	; 0x2426 <MDIO_SetPinDirection+0x6a>
    2424:	77 c0       	rjmp	.+238    	; 0x2514 <MDIO_SetPinDirection+0x158>
    2426:	8d 85       	ldd	r24, Y+13	; 0x0d
    2428:	9e 85       	ldd	r25, Y+14	; 0x0e
    242a:	84 30       	cpi	r24, 0x04	; 4
    242c:	91 05       	cpc	r25, r1
    242e:	09 f4       	brne	.+2      	; 0x2432 <MDIO_SetPinDirection+0x76>
    2430:	a9 c0       	rjmp	.+338    	; 0x2584 <MDIO_SetPinDirection+0x1c8>
    2432:	df c0       	rjmp	.+446    	; 0x25f2 <MDIO_SetPinDirection+0x236>
	{
	case PORTA:
		switch(copy_u8enDirection)
    2434:	8c 81       	ldd	r24, Y+4	; 0x04
    2436:	28 2f       	mov	r18, r24
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	3c 87       	std	Y+12, r19	; 0x0c
    243c:	2b 87       	std	Y+11, r18	; 0x0b
    243e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2440:	9c 85       	ldd	r25, Y+12	; 0x0c
    2442:	00 97       	sbiw	r24, 0x00	; 0
    2444:	31 f0       	breq	.+12     	; 0x2452 <MDIO_SetPinDirection+0x96>
    2446:	2b 85       	ldd	r18, Y+11	; 0x0b
    2448:	3c 85       	ldd	r19, Y+12	; 0x0c
    244a:	21 30       	cpi	r18, 0x01	; 1
    244c:	31 05       	cpc	r19, r1
    244e:	b1 f0       	breq	.+44     	; 0x247c <MDIO_SetPinDirection+0xc0>
    2450:	d0 c0       	rjmp	.+416    	; 0x25f2 <MDIO_SetPinDirection+0x236>
		{
		case INPUT :
			CLR_BIT(DDRA_REG,Local_u8pin);
    2452:	aa e3       	ldi	r26, 0x3A	; 58
    2454:	b0 e0       	ldi	r27, 0x00	; 0
    2456:	ea e3       	ldi	r30, 0x3A	; 58
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 81       	ld	r24, Z
    245c:	48 2f       	mov	r20, r24
    245e:	89 81       	ldd	r24, Y+1	; 0x01
    2460:	28 2f       	mov	r18, r24
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	02 2e       	mov	r0, r18
    246a:	02 c0       	rjmp	.+4      	; 0x2470 <MDIO_SetPinDirection+0xb4>
    246c:	88 0f       	add	r24, r24
    246e:	99 1f       	adc	r25, r25
    2470:	0a 94       	dec	r0
    2472:	e2 f7       	brpl	.-8      	; 0x246c <MDIO_SetPinDirection+0xb0>
    2474:	80 95       	com	r24
    2476:	84 23       	and	r24, r20
    2478:	8c 93       	st	X, r24
    247a:	bb c0       	rjmp	.+374    	; 0x25f2 <MDIO_SetPinDirection+0x236>
			break;
		case OUTPUT :
					SET_BIT(DDRA_REG,Local_u8pin);
    247c:	aa e3       	ldi	r26, 0x3A	; 58
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	ea e3       	ldi	r30, 0x3A	; 58
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	80 81       	ld	r24, Z
    2486:	48 2f       	mov	r20, r24
    2488:	89 81       	ldd	r24, Y+1	; 0x01
    248a:	28 2f       	mov	r18, r24
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	02 2e       	mov	r0, r18
    2494:	02 c0       	rjmp	.+4      	; 0x249a <MDIO_SetPinDirection+0xde>
    2496:	88 0f       	add	r24, r24
    2498:	99 1f       	adc	r25, r25
    249a:	0a 94       	dec	r0
    249c:	e2 f7       	brpl	.-8      	; 0x2496 <MDIO_SetPinDirection+0xda>
    249e:	84 2b       	or	r24, r20
    24a0:	8c 93       	st	X, r24
    24a2:	a7 c0       	rjmp	.+334    	; 0x25f2 <MDIO_SetPinDirection+0x236>
					break;
		}
		break;
		/*****************************/
	case PORTB:
		switch(copy_u8enDirection)
    24a4:	8c 81       	ldd	r24, Y+4	; 0x04
    24a6:	28 2f       	mov	r18, r24
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	3a 87       	std	Y+10, r19	; 0x0a
    24ac:	29 87       	std	Y+9, r18	; 0x09
    24ae:	89 85       	ldd	r24, Y+9	; 0x09
    24b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b2:	00 97       	sbiw	r24, 0x00	; 0
    24b4:	31 f0       	breq	.+12     	; 0x24c2 <MDIO_SetPinDirection+0x106>
    24b6:	29 85       	ldd	r18, Y+9	; 0x09
    24b8:	3a 85       	ldd	r19, Y+10	; 0x0a
    24ba:	21 30       	cpi	r18, 0x01	; 1
    24bc:	31 05       	cpc	r19, r1
    24be:	b1 f0       	breq	.+44     	; 0x24ec <MDIO_SetPinDirection+0x130>
    24c0:	98 c0       	rjmp	.+304    	; 0x25f2 <MDIO_SetPinDirection+0x236>
				{
				case INPUT :
					CLR_BIT(DDRB_REG,Local_u8pin);
    24c2:	a7 e3       	ldi	r26, 0x37	; 55
    24c4:	b0 e0       	ldi	r27, 0x00	; 0
    24c6:	e7 e3       	ldi	r30, 0x37	; 55
    24c8:	f0 e0       	ldi	r31, 0x00	; 0
    24ca:	80 81       	ld	r24, Z
    24cc:	48 2f       	mov	r20, r24
    24ce:	89 81       	ldd	r24, Y+1	; 0x01
    24d0:	28 2f       	mov	r18, r24
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	02 2e       	mov	r0, r18
    24da:	02 c0       	rjmp	.+4      	; 0x24e0 <MDIO_SetPinDirection+0x124>
    24dc:	88 0f       	add	r24, r24
    24de:	99 1f       	adc	r25, r25
    24e0:	0a 94       	dec	r0
    24e2:	e2 f7       	brpl	.-8      	; 0x24dc <MDIO_SetPinDirection+0x120>
    24e4:	80 95       	com	r24
    24e6:	84 23       	and	r24, r20
    24e8:	8c 93       	st	X, r24
    24ea:	83 c0       	rjmp	.+262    	; 0x25f2 <MDIO_SetPinDirection+0x236>
					break;
				case OUTPUT :
							SET_BIT(DDRB_REG,Local_u8pin);
    24ec:	a7 e3       	ldi	r26, 0x37	; 55
    24ee:	b0 e0       	ldi	r27, 0x00	; 0
    24f0:	e7 e3       	ldi	r30, 0x37	; 55
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	80 81       	ld	r24, Z
    24f6:	48 2f       	mov	r20, r24
    24f8:	89 81       	ldd	r24, Y+1	; 0x01
    24fa:	28 2f       	mov	r18, r24
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	02 2e       	mov	r0, r18
    2504:	02 c0       	rjmp	.+4      	; 0x250a <MDIO_SetPinDirection+0x14e>
    2506:	88 0f       	add	r24, r24
    2508:	99 1f       	adc	r25, r25
    250a:	0a 94       	dec	r0
    250c:	e2 f7       	brpl	.-8      	; 0x2506 <MDIO_SetPinDirection+0x14a>
    250e:	84 2b       	or	r24, r20
    2510:	8c 93       	st	X, r24
    2512:	6f c0       	rjmp	.+222    	; 0x25f2 <MDIO_SetPinDirection+0x236>
							break;
				}
			break;
			/*****************************/
	case PORTC:
		switch(copy_u8enDirection)
    2514:	8c 81       	ldd	r24, Y+4	; 0x04
    2516:	28 2f       	mov	r18, r24
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	38 87       	std	Y+8, r19	; 0x08
    251c:	2f 83       	std	Y+7, r18	; 0x07
    251e:	8f 81       	ldd	r24, Y+7	; 0x07
    2520:	98 85       	ldd	r25, Y+8	; 0x08
    2522:	00 97       	sbiw	r24, 0x00	; 0
    2524:	31 f0       	breq	.+12     	; 0x2532 <MDIO_SetPinDirection+0x176>
    2526:	2f 81       	ldd	r18, Y+7	; 0x07
    2528:	38 85       	ldd	r19, Y+8	; 0x08
    252a:	21 30       	cpi	r18, 0x01	; 1
    252c:	31 05       	cpc	r19, r1
    252e:	b1 f0       	breq	.+44     	; 0x255c <MDIO_SetPinDirection+0x1a0>
    2530:	60 c0       	rjmp	.+192    	; 0x25f2 <MDIO_SetPinDirection+0x236>
				{
				case INPUT :
					CLR_BIT(DDRC_REG,Local_u8pin);
    2532:	a4 e3       	ldi	r26, 0x34	; 52
    2534:	b0 e0       	ldi	r27, 0x00	; 0
    2536:	e4 e3       	ldi	r30, 0x34	; 52
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	80 81       	ld	r24, Z
    253c:	48 2f       	mov	r20, r24
    253e:	89 81       	ldd	r24, Y+1	; 0x01
    2540:	28 2f       	mov	r18, r24
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	02 2e       	mov	r0, r18
    254a:	02 c0       	rjmp	.+4      	; 0x2550 <MDIO_SetPinDirection+0x194>
    254c:	88 0f       	add	r24, r24
    254e:	99 1f       	adc	r25, r25
    2550:	0a 94       	dec	r0
    2552:	e2 f7       	brpl	.-8      	; 0x254c <MDIO_SetPinDirection+0x190>
    2554:	80 95       	com	r24
    2556:	84 23       	and	r24, r20
    2558:	8c 93       	st	X, r24
    255a:	4b c0       	rjmp	.+150    	; 0x25f2 <MDIO_SetPinDirection+0x236>
					break;
				case OUTPUT :
					SET_BIT(DDRC_REG,Local_u8pin);
    255c:	a4 e3       	ldi	r26, 0x34	; 52
    255e:	b0 e0       	ldi	r27, 0x00	; 0
    2560:	e4 e3       	ldi	r30, 0x34	; 52
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	80 81       	ld	r24, Z
    2566:	48 2f       	mov	r20, r24
    2568:	89 81       	ldd	r24, Y+1	; 0x01
    256a:	28 2f       	mov	r18, r24
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	02 2e       	mov	r0, r18
    2574:	02 c0       	rjmp	.+4      	; 0x257a <MDIO_SetPinDirection+0x1be>
    2576:	88 0f       	add	r24, r24
    2578:	99 1f       	adc	r25, r25
    257a:	0a 94       	dec	r0
    257c:	e2 f7       	brpl	.-8      	; 0x2576 <MDIO_SetPinDirection+0x1ba>
    257e:	84 2b       	or	r24, r20
    2580:	8c 93       	st	X, r24
    2582:	37 c0       	rjmp	.+110    	; 0x25f2 <MDIO_SetPinDirection+0x236>
				}
			break;
			/*****************************/
		case PORTD:

		switch(copy_u8enDirection)
    2584:	8c 81       	ldd	r24, Y+4	; 0x04
    2586:	28 2f       	mov	r18, r24
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	3e 83       	std	Y+6, r19	; 0x06
    258c:	2d 83       	std	Y+5, r18	; 0x05
    258e:	8d 81       	ldd	r24, Y+5	; 0x05
    2590:	9e 81       	ldd	r25, Y+6	; 0x06
    2592:	00 97       	sbiw	r24, 0x00	; 0
    2594:	31 f0       	breq	.+12     	; 0x25a2 <MDIO_SetPinDirection+0x1e6>
    2596:	2d 81       	ldd	r18, Y+5	; 0x05
    2598:	3e 81       	ldd	r19, Y+6	; 0x06
    259a:	21 30       	cpi	r18, 0x01	; 1
    259c:	31 05       	cpc	r19, r1
    259e:	b1 f0       	breq	.+44     	; 0x25cc <MDIO_SetPinDirection+0x210>
    25a0:	28 c0       	rjmp	.+80     	; 0x25f2 <MDIO_SetPinDirection+0x236>
				{
				case INPUT :
					CLR_BIT(DDRD_REG,Local_u8pin);
    25a2:	a1 e3       	ldi	r26, 0x31	; 49
    25a4:	b0 e0       	ldi	r27, 0x00	; 0
    25a6:	e1 e3       	ldi	r30, 0x31	; 49
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	80 81       	ld	r24, Z
    25ac:	48 2f       	mov	r20, r24
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	28 2f       	mov	r18, r24
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	02 2e       	mov	r0, r18
    25ba:	02 c0       	rjmp	.+4      	; 0x25c0 <MDIO_SetPinDirection+0x204>
    25bc:	88 0f       	add	r24, r24
    25be:	99 1f       	adc	r25, r25
    25c0:	0a 94       	dec	r0
    25c2:	e2 f7       	brpl	.-8      	; 0x25bc <MDIO_SetPinDirection+0x200>
    25c4:	80 95       	com	r24
    25c6:	84 23       	and	r24, r20
    25c8:	8c 93       	st	X, r24
    25ca:	13 c0       	rjmp	.+38     	; 0x25f2 <MDIO_SetPinDirection+0x236>
					break;
				case OUTPUT :
					SET_BIT(DDRD_REG,Local_u8pin);
    25cc:	a1 e3       	ldi	r26, 0x31	; 49
    25ce:	b0 e0       	ldi	r27, 0x00	; 0
    25d0:	e1 e3       	ldi	r30, 0x31	; 49
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	80 81       	ld	r24, Z
    25d6:	48 2f       	mov	r20, r24
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	28 2f       	mov	r18, r24
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	02 2e       	mov	r0, r18
    25e4:	02 c0       	rjmp	.+4      	; 0x25ea <MDIO_SetPinDirection+0x22e>
    25e6:	88 0f       	add	r24, r24
    25e8:	99 1f       	adc	r25, r25
    25ea:	0a 94       	dec	r0
    25ec:	e2 f7       	brpl	.-8      	; 0x25e6 <MDIO_SetPinDirection+0x22a>
    25ee:	84 2b       	or	r24, r20
    25f0:	8c 93       	st	X, r24
			break;
			/*****************************/
		default: break;

	}
}
    25f2:	2e 96       	adiw	r28, 0x0e	; 14
    25f4:	0f b6       	in	r0, 0x3f	; 63
    25f6:	f8 94       	cli
    25f8:	de bf       	out	0x3e, r29	; 62
    25fa:	0f be       	out	0x3f, r0	; 63
    25fc:	cd bf       	out	0x3d, r28	; 61
    25fe:	cf 91       	pop	r28
    2600:	df 91       	pop	r29
    2602:	08 95       	ret

00002604 <MDIO_voidSetPinValue>:

/////////////////////////////////////////////////////////////
void MDIO_voidSetPinValue(Pin_t copy_enPin,Value_t copy_enValue)
{
    2604:	df 93       	push	r29
    2606:	cf 93       	push	r28
    2608:	cd b7       	in	r28, 0x3d	; 61
    260a:	de b7       	in	r29, 0x3e	; 62
    260c:	2e 97       	sbiw	r28, 0x0e	; 14
    260e:	0f b6       	in	r0, 0x3f	; 63
    2610:	f8 94       	cli
    2612:	de bf       	out	0x3e, r29	; 62
    2614:	0f be       	out	0x3f, r0	; 63
    2616:	cd bf       	out	0x3d, r28	; 61
    2618:	8b 83       	std	Y+3, r24	; 0x03
    261a:	6c 83       	std	Y+4, r22	; 0x04
u8 Local_u8port= copy_enPin /10; //1-4
    261c:	8b 81       	ldd	r24, Y+3	; 0x03
    261e:	9a e0       	ldi	r25, 0x0A	; 10
    2620:	69 2f       	mov	r22, r25
    2622:	0e 94 20 3a 	call	0x7440	; 0x7440 <__udivmodqi4>
    2626:	8a 83       	std	Y+2, r24	; 0x02
u8 Local_u8pin= copy_enPin % 10; //0-7
    2628:	8b 81       	ldd	r24, Y+3	; 0x03
    262a:	9a e0       	ldi	r25, 0x0A	; 10
    262c:	69 2f       	mov	r22, r25
    262e:	0e 94 20 3a 	call	0x7440	; 0x7440 <__udivmodqi4>
    2632:	89 2f       	mov	r24, r25
    2634:	89 83       	std	Y+1, r24	; 0x01


switch(Local_u8port)
    2636:	8a 81       	ldd	r24, Y+2	; 0x02
    2638:	28 2f       	mov	r18, r24
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	3e 87       	std	Y+14, r19	; 0x0e
    263e:	2d 87       	std	Y+13, r18	; 0x0d
    2640:	8d 85       	ldd	r24, Y+13	; 0x0d
    2642:	9e 85       	ldd	r25, Y+14	; 0x0e
    2644:	82 30       	cpi	r24, 0x02	; 2
    2646:	91 05       	cpc	r25, r1
    2648:	09 f4       	brne	.+2      	; 0x264c <MDIO_voidSetPinValue+0x48>
    264a:	50 c0       	rjmp	.+160    	; 0x26ec <MDIO_voidSetPinValue+0xe8>
    264c:	2d 85       	ldd	r18, Y+13	; 0x0d
    264e:	3e 85       	ldd	r19, Y+14	; 0x0e
    2650:	23 30       	cpi	r18, 0x03	; 3
    2652:	31 05       	cpc	r19, r1
    2654:	34 f4       	brge	.+12     	; 0x2662 <MDIO_voidSetPinValue+0x5e>
    2656:	8d 85       	ldd	r24, Y+13	; 0x0d
    2658:	9e 85       	ldd	r25, Y+14	; 0x0e
    265a:	81 30       	cpi	r24, 0x01	; 1
    265c:	91 05       	cpc	r25, r1
    265e:	71 f0       	breq	.+28     	; 0x267c <MDIO_voidSetPinValue+0x78>
    2660:	ec c0       	rjmp	.+472    	; 0x283a <MDIO_voidSetPinValue+0x236>
    2662:	2d 85       	ldd	r18, Y+13	; 0x0d
    2664:	3e 85       	ldd	r19, Y+14	; 0x0e
    2666:	23 30       	cpi	r18, 0x03	; 3
    2668:	31 05       	cpc	r19, r1
    266a:	09 f4       	brne	.+2      	; 0x266e <MDIO_voidSetPinValue+0x6a>
    266c:	77 c0       	rjmp	.+238    	; 0x275c <MDIO_voidSetPinValue+0x158>
    266e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2670:	9e 85       	ldd	r25, Y+14	; 0x0e
    2672:	84 30       	cpi	r24, 0x04	; 4
    2674:	91 05       	cpc	r25, r1
    2676:	09 f4       	brne	.+2      	; 0x267a <MDIO_voidSetPinValue+0x76>
    2678:	a9 c0       	rjmp	.+338    	; 0x27cc <MDIO_voidSetPinValue+0x1c8>
    267a:	df c0       	rjmp	.+446    	; 0x283a <MDIO_voidSetPinValue+0x236>
	{
case PORTA:
	switch(copy_enValue)
    267c:	8c 81       	ldd	r24, Y+4	; 0x04
    267e:	28 2f       	mov	r18, r24
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	3c 87       	std	Y+12, r19	; 0x0c
    2684:	2b 87       	std	Y+11, r18	; 0x0b
    2686:	8b 85       	ldd	r24, Y+11	; 0x0b
    2688:	9c 85       	ldd	r25, Y+12	; 0x0c
    268a:	00 97       	sbiw	r24, 0x00	; 0
    268c:	31 f0       	breq	.+12     	; 0x269a <MDIO_voidSetPinValue+0x96>
    268e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2690:	3c 85       	ldd	r19, Y+12	; 0x0c
    2692:	21 30       	cpi	r18, 0x01	; 1
    2694:	31 05       	cpc	r19, r1
    2696:	b1 f0       	breq	.+44     	; 0x26c4 <MDIO_voidSetPinValue+0xc0>
    2698:	d0 c0       	rjmp	.+416    	; 0x283a <MDIO_voidSetPinValue+0x236>
	{
	case LOW :
		CLR_BIT(PRTA_REG,Local_u8pin);
    269a:	ab e3       	ldi	r26, 0x3B	; 59
    269c:	b0 e0       	ldi	r27, 0x00	; 0
    269e:	eb e3       	ldi	r30, 0x3B	; 59
    26a0:	f0 e0       	ldi	r31, 0x00	; 0
    26a2:	80 81       	ld	r24, Z
    26a4:	48 2f       	mov	r20, r24
    26a6:	89 81       	ldd	r24, Y+1	; 0x01
    26a8:	28 2f       	mov	r18, r24
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	02 2e       	mov	r0, r18
    26b2:	02 c0       	rjmp	.+4      	; 0x26b8 <MDIO_voidSetPinValue+0xb4>
    26b4:	88 0f       	add	r24, r24
    26b6:	99 1f       	adc	r25, r25
    26b8:	0a 94       	dec	r0
    26ba:	e2 f7       	brpl	.-8      	; 0x26b4 <MDIO_voidSetPinValue+0xb0>
    26bc:	80 95       	com	r24
    26be:	84 23       	and	r24, r20
    26c0:	8c 93       	st	X, r24
    26c2:	bb c0       	rjmp	.+374    	; 0x283a <MDIO_voidSetPinValue+0x236>
	break;
	case HIGH :
		SET_BIT(PRTA_REG,Local_u8pin);
    26c4:	ab e3       	ldi	r26, 0x3B	; 59
    26c6:	b0 e0       	ldi	r27, 0x00	; 0
    26c8:	eb e3       	ldi	r30, 0x3B	; 59
    26ca:	f0 e0       	ldi	r31, 0x00	; 0
    26cc:	80 81       	ld	r24, Z
    26ce:	48 2f       	mov	r20, r24
    26d0:	89 81       	ldd	r24, Y+1	; 0x01
    26d2:	28 2f       	mov	r18, r24
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	02 2e       	mov	r0, r18
    26dc:	02 c0       	rjmp	.+4      	; 0x26e2 <MDIO_voidSetPinValue+0xde>
    26de:	88 0f       	add	r24, r24
    26e0:	99 1f       	adc	r25, r25
    26e2:	0a 94       	dec	r0
    26e4:	e2 f7       	brpl	.-8      	; 0x26de <MDIO_voidSetPinValue+0xda>
    26e6:	84 2b       	or	r24, r20
    26e8:	8c 93       	st	X, r24
    26ea:	a7 c0       	rjmp	.+334    	; 0x283a <MDIO_voidSetPinValue+0x236>
	break;
	//PORTA_REG|=(copy_enValue<<Local_u8pin)
									/*****************************/
case PORTB:

	switch(copy_enValue)
    26ec:	8c 81       	ldd	r24, Y+4	; 0x04
    26ee:	28 2f       	mov	r18, r24
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	3a 87       	std	Y+10, r19	; 0x0a
    26f4:	29 87       	std	Y+9, r18	; 0x09
    26f6:	89 85       	ldd	r24, Y+9	; 0x09
    26f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26fa:	00 97       	sbiw	r24, 0x00	; 0
    26fc:	31 f0       	breq	.+12     	; 0x270a <MDIO_voidSetPinValue+0x106>
    26fe:	29 85       	ldd	r18, Y+9	; 0x09
    2700:	3a 85       	ldd	r19, Y+10	; 0x0a
    2702:	21 30       	cpi	r18, 0x01	; 1
    2704:	31 05       	cpc	r19, r1
    2706:	b1 f0       	breq	.+44     	; 0x2734 <MDIO_voidSetPinValue+0x130>
    2708:	98 c0       	rjmp	.+304    	; 0x283a <MDIO_voidSetPinValue+0x236>
		{
		case LOW :
		CLR_BIT(PRTB_REG,Local_u8pin);
    270a:	a8 e3       	ldi	r26, 0x38	; 56
    270c:	b0 e0       	ldi	r27, 0x00	; 0
    270e:	e8 e3       	ldi	r30, 0x38	; 56
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	80 81       	ld	r24, Z
    2714:	48 2f       	mov	r20, r24
    2716:	89 81       	ldd	r24, Y+1	; 0x01
    2718:	28 2f       	mov	r18, r24
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	02 2e       	mov	r0, r18
    2722:	02 c0       	rjmp	.+4      	; 0x2728 <MDIO_voidSetPinValue+0x124>
    2724:	88 0f       	add	r24, r24
    2726:	99 1f       	adc	r25, r25
    2728:	0a 94       	dec	r0
    272a:	e2 f7       	brpl	.-8      	; 0x2724 <MDIO_voidSetPinValue+0x120>
    272c:	80 95       	com	r24
    272e:	84 23       	and	r24, r20
    2730:	8c 93       	st	X, r24
    2732:	83 c0       	rjmp	.+262    	; 0x283a <MDIO_voidSetPinValue+0x236>
	break;
	case HIGH  :
		SET_BIT(PRTB_REG,Local_u8pin);
    2734:	a8 e3       	ldi	r26, 0x38	; 56
    2736:	b0 e0       	ldi	r27, 0x00	; 0
    2738:	e8 e3       	ldi	r30, 0x38	; 56
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	80 81       	ld	r24, Z
    273e:	48 2f       	mov	r20, r24
    2740:	89 81       	ldd	r24, Y+1	; 0x01
    2742:	28 2f       	mov	r18, r24
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	02 2e       	mov	r0, r18
    274c:	02 c0       	rjmp	.+4      	; 0x2752 <MDIO_voidSetPinValue+0x14e>
    274e:	88 0f       	add	r24, r24
    2750:	99 1f       	adc	r25, r25
    2752:	0a 94       	dec	r0
    2754:	e2 f7       	brpl	.-8      	; 0x274e <MDIO_voidSetPinValue+0x14a>
    2756:	84 2b       	or	r24, r20
    2758:	8c 93       	st	X, r24
    275a:	6f c0       	rjmp	.+222    	; 0x283a <MDIO_voidSetPinValue+0x236>
	break;
		}
break;
	/*****************************/
case PORTC:
		switch(copy_enValue)
    275c:	8c 81       	ldd	r24, Y+4	; 0x04
    275e:	28 2f       	mov	r18, r24
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	38 87       	std	Y+8, r19	; 0x08
    2764:	2f 83       	std	Y+7, r18	; 0x07
    2766:	8f 81       	ldd	r24, Y+7	; 0x07
    2768:	98 85       	ldd	r25, Y+8	; 0x08
    276a:	00 97       	sbiw	r24, 0x00	; 0
    276c:	d1 f0       	breq	.+52     	; 0x27a2 <MDIO_voidSetPinValue+0x19e>
    276e:	2f 81       	ldd	r18, Y+7	; 0x07
    2770:	38 85       	ldd	r19, Y+8	; 0x08
    2772:	21 30       	cpi	r18, 0x01	; 1
    2774:	31 05       	cpc	r19, r1
    2776:	09 f0       	breq	.+2      	; 0x277a <MDIO_voidSetPinValue+0x176>
    2778:	60 c0       	rjmp	.+192    	; 0x283a <MDIO_voidSetPinValue+0x236>
					{
		case HIGH  :
				SET_BIT(PRTC_REG,Local_u8pin);
    277a:	a5 e3       	ldi	r26, 0x35	; 53
    277c:	b0 e0       	ldi	r27, 0x00	; 0
    277e:	e5 e3       	ldi	r30, 0x35	; 53
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	80 81       	ld	r24, Z
    2784:	48 2f       	mov	r20, r24
    2786:	89 81       	ldd	r24, Y+1	; 0x01
    2788:	28 2f       	mov	r18, r24
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	02 2e       	mov	r0, r18
    2792:	02 c0       	rjmp	.+4      	; 0x2798 <MDIO_voidSetPinValue+0x194>
    2794:	88 0f       	add	r24, r24
    2796:	99 1f       	adc	r25, r25
    2798:	0a 94       	dec	r0
    279a:	e2 f7       	brpl	.-8      	; 0x2794 <MDIO_voidSetPinValue+0x190>
    279c:	84 2b       	or	r24, r20
    279e:	8c 93       	st	X, r24
    27a0:	4c c0       	rjmp	.+152    	; 0x283a <MDIO_voidSetPinValue+0x236>
				break;
		case LOW :
					CLR_BIT(PRTC_REG,Local_u8pin);
    27a2:	a5 e3       	ldi	r26, 0x35	; 53
    27a4:	b0 e0       	ldi	r27, 0x00	; 0
    27a6:	e5 e3       	ldi	r30, 0x35	; 53
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	80 81       	ld	r24, Z
    27ac:	48 2f       	mov	r20, r24
    27ae:	89 81       	ldd	r24, Y+1	; 0x01
    27b0:	28 2f       	mov	r18, r24
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	02 2e       	mov	r0, r18
    27ba:	02 c0       	rjmp	.+4      	; 0x27c0 <MDIO_voidSetPinValue+0x1bc>
    27bc:	88 0f       	add	r24, r24
    27be:	99 1f       	adc	r25, r25
    27c0:	0a 94       	dec	r0
    27c2:	e2 f7       	brpl	.-8      	; 0x27bc <MDIO_voidSetPinValue+0x1b8>
    27c4:	80 95       	com	r24
    27c6:	84 23       	and	r24, r20
    27c8:	8c 93       	st	X, r24
    27ca:	37 c0       	rjmp	.+110    	; 0x283a <MDIO_voidSetPinValue+0x236>
			}
	break;
	/*****************************/
case PORTD:

switch(copy_enValue)
    27cc:	8c 81       	ldd	r24, Y+4	; 0x04
    27ce:	28 2f       	mov	r18, r24
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	3e 83       	std	Y+6, r19	; 0x06
    27d4:	2d 83       	std	Y+5, r18	; 0x05
    27d6:	8d 81       	ldd	r24, Y+5	; 0x05
    27d8:	9e 81       	ldd	r25, Y+6	; 0x06
    27da:	00 97       	sbiw	r24, 0x00	; 0
    27dc:	31 f0       	breq	.+12     	; 0x27ea <MDIO_voidSetPinValue+0x1e6>
    27de:	2d 81       	ldd	r18, Y+5	; 0x05
    27e0:	3e 81       	ldd	r19, Y+6	; 0x06
    27e2:	21 30       	cpi	r18, 0x01	; 1
    27e4:	31 05       	cpc	r19, r1
    27e6:	b1 f0       	breq	.+44     	; 0x2814 <MDIO_voidSetPinValue+0x210>
    27e8:	28 c0       	rjmp	.+80     	; 0x283a <MDIO_voidSetPinValue+0x236>
				{
	case LOW :
	CLR_BIT(PRTD_REG,Local_u8pin);
    27ea:	a2 e3       	ldi	r26, 0x32	; 50
    27ec:	b0 e0       	ldi	r27, 0x00	; 0
    27ee:	e2 e3       	ldi	r30, 0x32	; 50
    27f0:	f0 e0       	ldi	r31, 0x00	; 0
    27f2:	80 81       	ld	r24, Z
    27f4:	48 2f       	mov	r20, r24
    27f6:	89 81       	ldd	r24, Y+1	; 0x01
    27f8:	28 2f       	mov	r18, r24
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	81 e0       	ldi	r24, 0x01	; 1
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	02 2e       	mov	r0, r18
    2802:	02 c0       	rjmp	.+4      	; 0x2808 <MDIO_voidSetPinValue+0x204>
    2804:	88 0f       	add	r24, r24
    2806:	99 1f       	adc	r25, r25
    2808:	0a 94       	dec	r0
    280a:	e2 f7       	brpl	.-8      	; 0x2804 <MDIO_voidSetPinValue+0x200>
    280c:	80 95       	com	r24
    280e:	84 23       	and	r24, r20
    2810:	8c 93       	st	X, r24
    2812:	13 c0       	rjmp	.+38     	; 0x283a <MDIO_voidSetPinValue+0x236>
	break;
	case HIGH  :
	SET_BIT(PRTD_REG,Local_u8pin);
    2814:	a2 e3       	ldi	r26, 0x32	; 50
    2816:	b0 e0       	ldi	r27, 0x00	; 0
    2818:	e2 e3       	ldi	r30, 0x32	; 50
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	80 81       	ld	r24, Z
    281e:	48 2f       	mov	r20, r24
    2820:	89 81       	ldd	r24, Y+1	; 0x01
    2822:	28 2f       	mov	r18, r24
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	02 2e       	mov	r0, r18
    282c:	02 c0       	rjmp	.+4      	; 0x2832 <MDIO_voidSetPinValue+0x22e>
    282e:	88 0f       	add	r24, r24
    2830:	99 1f       	adc	r25, r25
    2832:	0a 94       	dec	r0
    2834:	e2 f7       	brpl	.-8      	; 0x282e <MDIO_voidSetPinValue+0x22a>
    2836:	84 2b       	or	r24, r20
    2838:	8c 93       	st	X, r24




}
}
    283a:	2e 96       	adiw	r28, 0x0e	; 14
    283c:	0f b6       	in	r0, 0x3f	; 63
    283e:	f8 94       	cli
    2840:	de bf       	out	0x3e, r29	; 62
    2842:	0f be       	out	0x3f, r0	; 63
    2844:	cd bf       	out	0x3d, r28	; 61
    2846:	cf 91       	pop	r28
    2848:	df 91       	pop	r29
    284a:	08 95       	ret

0000284c <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue(Port_t copy_enPort, u8 copy_u8Value)
{
    284c:	df 93       	push	r29
    284e:	cf 93       	push	r28
    2850:	00 d0       	rcall	.+0      	; 0x2852 <MDIO_voidSetPortValue+0x6>
    2852:	00 d0       	rcall	.+0      	; 0x2854 <MDIO_voidSetPortValue+0x8>
    2854:	0f 92       	push	r0
    2856:	cd b7       	in	r28, 0x3d	; 61
    2858:	de b7       	in	r29, 0x3e	; 62
    285a:	8a 83       	std	Y+2, r24	; 0x02
    285c:	6b 83       	std	Y+3, r22	; 0x03
			u8 Local_u8port= copy_enPort /10; //1-4
    285e:	8a 81       	ldd	r24, Y+2	; 0x02
    2860:	9a e0       	ldi	r25, 0x0A	; 10
    2862:	69 2f       	mov	r22, r25
    2864:	0e 94 20 3a 	call	0x7440	; 0x7440 <__udivmodqi4>
    2868:	89 83       	std	Y+1, r24	; 0x01
			//u8 Local_u8pin= copy_enPort % 10; //0-7
			switch(Local_u8port)
    286a:	89 81       	ldd	r24, Y+1	; 0x01
    286c:	28 2f       	mov	r18, r24
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	3d 83       	std	Y+5, r19	; 0x05
    2872:	2c 83       	std	Y+4, r18	; 0x04
    2874:	8c 81       	ldd	r24, Y+4	; 0x04
    2876:	9d 81       	ldd	r25, Y+5	; 0x05
    2878:	82 30       	cpi	r24, 0x02	; 2
    287a:	91 05       	cpc	r25, r1
    287c:	f9 f0       	breq	.+62     	; 0x28bc <MDIO_voidSetPortValue+0x70>
    287e:	2c 81       	ldd	r18, Y+4	; 0x04
    2880:	3d 81       	ldd	r19, Y+5	; 0x05
    2882:	23 30       	cpi	r18, 0x03	; 3
    2884:	31 05       	cpc	r19, r1
    2886:	34 f4       	brge	.+12     	; 0x2894 <MDIO_voidSetPortValue+0x48>
    2888:	8c 81       	ldd	r24, Y+4	; 0x04
    288a:	9d 81       	ldd	r25, Y+5	; 0x05
    288c:	81 30       	cpi	r24, 0x01	; 1
    288e:	91 05       	cpc	r25, r1
    2890:	61 f0       	breq	.+24     	; 0x28aa <MDIO_voidSetPortValue+0x5e>
    2892:	14 c0       	rjmp	.+40     	; 0x28bc <MDIO_voidSetPortValue+0x70>
    2894:	2c 81       	ldd	r18, Y+4	; 0x04
    2896:	3d 81       	ldd	r19, Y+5	; 0x05
    2898:	23 30       	cpi	r18, 0x03	; 3
    289a:	31 05       	cpc	r19, r1
    289c:	79 f0       	breq	.+30     	; 0x28bc <MDIO_voidSetPortValue+0x70>
    289e:	8c 81       	ldd	r24, Y+4	; 0x04
    28a0:	9d 81       	ldd	r25, Y+5	; 0x05
    28a2:	84 30       	cpi	r24, 0x04	; 4
    28a4:	91 05       	cpc	r25, r1
    28a6:	31 f0       	breq	.+12     	; 0x28b4 <MDIO_voidSetPortValue+0x68>
    28a8:	09 c0       	rjmp	.+18     	; 0x28bc <MDIO_voidSetPortValue+0x70>
				{
				case PORTA:
					PRTA_REG=copy_u8Value;
    28aa:	eb e3       	ldi	r30, 0x3B	; 59
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	8b 81       	ldd	r24, Y+3	; 0x03
    28b0:	80 83       	st	Z, r24
    28b2:	04 c0       	rjmp	.+8      	; 0x28bc <MDIO_voidSetPortValue+0x70>
					PRTC_REG=copy_u8Value;
									break;
						/*****************************/
					case PORTD:

						PRTD_REG=copy_u8Value;
    28b4:	e2 e3       	ldi	r30, 0x32	; 50
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ba:	80 83       	st	Z, r24
							break;
						/*****************************/
					default: break;
				}
}
    28bc:	0f 90       	pop	r0
    28be:	0f 90       	pop	r0
    28c0:	0f 90       	pop	r0
    28c2:	0f 90       	pop	r0
    28c4:	0f 90       	pop	r0
    28c6:	cf 91       	pop	r28
    28c8:	df 91       	pop	r29
    28ca:	08 95       	ret

000028cc <MDIO_voidGetPinValue>:

void MDIO_voidGetPinValue(Pin_t copy_enPort, Value_t * ptrValue)
{
    28cc:	df 93       	push	r29
    28ce:	cf 93       	push	r28
    28d0:	cd b7       	in	r28, 0x3d	; 61
    28d2:	de b7       	in	r29, 0x3e	; 62
    28d4:	27 97       	sbiw	r28, 0x07	; 7
    28d6:	0f b6       	in	r0, 0x3f	; 63
    28d8:	f8 94       	cli
    28da:	de bf       	out	0x3e, r29	; 62
    28dc:	0f be       	out	0x3f, r0	; 63
    28de:	cd bf       	out	0x3d, r28	; 61
    28e0:	8b 83       	std	Y+3, r24	; 0x03
    28e2:	7d 83       	std	Y+5, r23	; 0x05
    28e4:	6c 83       	std	Y+4, r22	; 0x04
				u8 Local_u8port= copy_enPort /10; //1-4
    28e6:	8b 81       	ldd	r24, Y+3	; 0x03
    28e8:	9a e0       	ldi	r25, 0x0A	; 10
    28ea:	69 2f       	mov	r22, r25
    28ec:	0e 94 20 3a 	call	0x7440	; 0x7440 <__udivmodqi4>
    28f0:	8a 83       	std	Y+2, r24	; 0x02
				u8 Local_u8pin= copy_enPort % 10; //0-7
    28f2:	8b 81       	ldd	r24, Y+3	; 0x03
    28f4:	9a e0       	ldi	r25, 0x0A	; 10
    28f6:	69 2f       	mov	r22, r25
    28f8:	0e 94 20 3a 	call	0x7440	; 0x7440 <__udivmodqi4>
    28fc:	89 2f       	mov	r24, r25
    28fe:	89 83       	std	Y+1, r24	; 0x01

				switch(Local_u8port)
    2900:	8a 81       	ldd	r24, Y+2	; 0x02
    2902:	28 2f       	mov	r18, r24
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	3f 83       	std	Y+7, r19	; 0x07
    2908:	2e 83       	std	Y+6, r18	; 0x06
    290a:	4e 81       	ldd	r20, Y+6	; 0x06
    290c:	5f 81       	ldd	r21, Y+7	; 0x07
    290e:	42 30       	cpi	r20, 0x02	; 2
    2910:	51 05       	cpc	r21, r1
    2912:	09 f4       	brne	.+2      	; 0x2916 <MDIO_voidGetPinValue+0x4a>
    2914:	3d c0       	rjmp	.+122    	; 0x2990 <MDIO_voidGetPinValue+0xc4>
    2916:	8e 81       	ldd	r24, Y+6	; 0x06
    2918:	9f 81       	ldd	r25, Y+7	; 0x07
    291a:	83 30       	cpi	r24, 0x03	; 3
    291c:	91 05       	cpc	r25, r1
    291e:	34 f4       	brge	.+12     	; 0x292c <MDIO_voidGetPinValue+0x60>
    2920:	2e 81       	ldd	r18, Y+6	; 0x06
    2922:	3f 81       	ldd	r19, Y+7	; 0x07
    2924:	21 30       	cpi	r18, 0x01	; 1
    2926:	31 05       	cpc	r19, r1
    2928:	61 f0       	breq	.+24     	; 0x2942 <MDIO_voidGetPinValue+0x76>
    292a:	32 c0       	rjmp	.+100    	; 0x2990 <MDIO_voidGetPinValue+0xc4>
    292c:	4e 81       	ldd	r20, Y+6	; 0x06
    292e:	5f 81       	ldd	r21, Y+7	; 0x07
    2930:	43 30       	cpi	r20, 0x03	; 3
    2932:	51 05       	cpc	r21, r1
    2934:	69 f1       	breq	.+90     	; 0x2990 <MDIO_voidGetPinValue+0xc4>
    2936:	8e 81       	ldd	r24, Y+6	; 0x06
    2938:	9f 81       	ldd	r25, Y+7	; 0x07
    293a:	84 30       	cpi	r24, 0x04	; 4
    293c:	91 05       	cpc	r25, r1
    293e:	a9 f0       	breq	.+42     	; 0x296a <MDIO_voidGetPinValue+0x9e>
    2940:	27 c0       	rjmp	.+78     	; 0x2990 <MDIO_voidGetPinValue+0xc4>
					{
					case PORTA:
						* ptrValue = GET_BIT(PINA_REG,Local_u8pin);
    2942:	e9 e3       	ldi	r30, 0x39	; 57
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	80 81       	ld	r24, Z
    2948:	28 2f       	mov	r18, r24
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	89 81       	ldd	r24, Y+1	; 0x01
    294e:	88 2f       	mov	r24, r24
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	a9 01       	movw	r20, r18
    2954:	02 c0       	rjmp	.+4      	; 0x295a <MDIO_voidGetPinValue+0x8e>
    2956:	55 95       	asr	r21
    2958:	47 95       	ror	r20
    295a:	8a 95       	dec	r24
    295c:	e2 f7       	brpl	.-8      	; 0x2956 <MDIO_voidGetPinValue+0x8a>
    295e:	ca 01       	movw	r24, r20
    2960:	81 70       	andi	r24, 0x01	; 1
    2962:	ec 81       	ldd	r30, Y+4	; 0x04
    2964:	fd 81       	ldd	r31, Y+5	; 0x05
    2966:	80 83       	st	Z, r24
    2968:	13 c0       	rjmp	.+38     	; 0x2990 <MDIO_voidGetPinValue+0xc4>
						* ptrValue = GET_BIT(PINC_REG,Local_u8pin);
										break;
							/*****************************/
						case PORTD:

							* ptrValue = GET_BIT(PIND_REG,Local_u8pin);
    296a:	e0 e3       	ldi	r30, 0x30	; 48
    296c:	f0 e0       	ldi	r31, 0x00	; 0
    296e:	80 81       	ld	r24, Z
    2970:	28 2f       	mov	r18, r24
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	89 81       	ldd	r24, Y+1	; 0x01
    2976:	88 2f       	mov	r24, r24
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	a9 01       	movw	r20, r18
    297c:	02 c0       	rjmp	.+4      	; 0x2982 <MDIO_voidGetPinValue+0xb6>
    297e:	55 95       	asr	r21
    2980:	47 95       	ror	r20
    2982:	8a 95       	dec	r24
    2984:	e2 f7       	brpl	.-8      	; 0x297e <MDIO_voidGetPinValue+0xb2>
    2986:	ca 01       	movw	r24, r20
    2988:	81 70       	andi	r24, 0x01	; 1
    298a:	ec 81       	ldd	r30, Y+4	; 0x04
    298c:	fd 81       	ldd	r31, Y+5	; 0x05
    298e:	80 83       	st	Z, r24
								break;
							/*****************************/
						default: break;
}
}
    2990:	27 96       	adiw	r28, 0x07	; 7
    2992:	0f b6       	in	r0, 0x3f	; 63
    2994:	f8 94       	cli
    2996:	de bf       	out	0x3e, r29	; 62
    2998:	0f be       	out	0x3f, r0	; 63
    299a:	cd bf       	out	0x3d, r28	; 61
    299c:	cf 91       	pop	r28
    299e:	df 91       	pop	r29
    29a0:	08 95       	ret

000029a2 <MDIO_voidTogglePinValue>:

void MDIO_voidTogglePinValue(Pin_t copy_enPin)
{
    29a2:	df 93       	push	r29
    29a4:	cf 93       	push	r28
    29a6:	00 d0       	rcall	.+0      	; 0x29a8 <MDIO_voidTogglePinValue+0x6>
    29a8:	00 d0       	rcall	.+0      	; 0x29aa <MDIO_voidTogglePinValue+0x8>
    29aa:	0f 92       	push	r0
    29ac:	cd b7       	in	r28, 0x3d	; 61
    29ae:	de b7       	in	r29, 0x3e	; 62
    29b0:	8b 83       	std	Y+3, r24	; 0x03
					u8 Local_u8port= copy_enPin /10; //1-4
    29b2:	8b 81       	ldd	r24, Y+3	; 0x03
    29b4:	9a e0       	ldi	r25, 0x0A	; 10
    29b6:	69 2f       	mov	r22, r25
    29b8:	0e 94 20 3a 	call	0x7440	; 0x7440 <__udivmodqi4>
    29bc:	8a 83       	std	Y+2, r24	; 0x02
					u8 Local_u8pin= copy_enPin % 10; //0-7
    29be:	8b 81       	ldd	r24, Y+3	; 0x03
    29c0:	9a e0       	ldi	r25, 0x0A	; 10
    29c2:	69 2f       	mov	r22, r25
    29c4:	0e 94 20 3a 	call	0x7440	; 0x7440 <__udivmodqi4>
    29c8:	89 2f       	mov	r24, r25
    29ca:	89 83       	std	Y+1, r24	; 0x01
switch(Local_u8port)
    29cc:	8a 81       	ldd	r24, Y+2	; 0x02
    29ce:	28 2f       	mov	r18, r24
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	3d 83       	std	Y+5, r19	; 0x05
    29d4:	2c 83       	std	Y+4, r18	; 0x04
    29d6:	8c 81       	ldd	r24, Y+4	; 0x04
    29d8:	9d 81       	ldd	r25, Y+5	; 0x05
    29da:	82 30       	cpi	r24, 0x02	; 2
    29dc:	91 05       	cpc	r25, r1
    29de:	51 f1       	breq	.+84     	; 0x2a34 <MDIO_voidTogglePinValue+0x92>
    29e0:	2c 81       	ldd	r18, Y+4	; 0x04
    29e2:	3d 81       	ldd	r19, Y+5	; 0x05
    29e4:	23 30       	cpi	r18, 0x03	; 3
    29e6:	31 05       	cpc	r19, r1
    29e8:	34 f4       	brge	.+12     	; 0x29f6 <MDIO_voidTogglePinValue+0x54>
    29ea:	8c 81       	ldd	r24, Y+4	; 0x04
    29ec:	9d 81       	ldd	r25, Y+5	; 0x05
    29ee:	81 30       	cpi	r24, 0x01	; 1
    29f0:	91 05       	cpc	r25, r1
    29f2:	61 f0       	breq	.+24     	; 0x2a0c <MDIO_voidTogglePinValue+0x6a>
    29f4:	5a c0       	rjmp	.+180    	; 0x2aaa <MDIO_voidTogglePinValue+0x108>
    29f6:	2c 81       	ldd	r18, Y+4	; 0x04
    29f8:	3d 81       	ldd	r19, Y+5	; 0x05
    29fa:	23 30       	cpi	r18, 0x03	; 3
    29fc:	31 05       	cpc	r19, r1
    29fe:	71 f1       	breq	.+92     	; 0x2a5c <MDIO_voidTogglePinValue+0xba>
    2a00:	8c 81       	ldd	r24, Y+4	; 0x04
    2a02:	9d 81       	ldd	r25, Y+5	; 0x05
    2a04:	84 30       	cpi	r24, 0x04	; 4
    2a06:	91 05       	cpc	r25, r1
    2a08:	e9 f1       	breq	.+122    	; 0x2a84 <MDIO_voidTogglePinValue+0xe2>
    2a0a:	4f c0       	rjmp	.+158    	; 0x2aaa <MDIO_voidTogglePinValue+0x108>
{
case PORTA:
	TOG_BIT(PRTA_REG,Local_u8pin);
    2a0c:	ab e3       	ldi	r26, 0x3B	; 59
    2a0e:	b0 e0       	ldi	r27, 0x00	; 0
    2a10:	eb e3       	ldi	r30, 0x3B	; 59
    2a12:	f0 e0       	ldi	r31, 0x00	; 0
    2a14:	80 81       	ld	r24, Z
    2a16:	48 2f       	mov	r20, r24
    2a18:	89 81       	ldd	r24, Y+1	; 0x01
    2a1a:	28 2f       	mov	r18, r24
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	81 e0       	ldi	r24, 0x01	; 1
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	02 2e       	mov	r0, r18
    2a24:	02 c0       	rjmp	.+4      	; 0x2a2a <MDIO_voidTogglePinValue+0x88>
    2a26:	88 0f       	add	r24, r24
    2a28:	99 1f       	adc	r25, r25
    2a2a:	0a 94       	dec	r0
    2a2c:	e2 f7       	brpl	.-8      	; 0x2a26 <MDIO_voidTogglePinValue+0x84>
    2a2e:	84 27       	eor	r24, r20
    2a30:	8c 93       	st	X, r24
    2a32:	3b c0       	rjmp	.+118    	; 0x2aaa <MDIO_voidTogglePinValue+0x108>
	break;
case PORTB:
	TOG_BIT(PRTB_REG,Local_u8pin);
    2a34:	a8 e3       	ldi	r26, 0x38	; 56
    2a36:	b0 e0       	ldi	r27, 0x00	; 0
    2a38:	e8 e3       	ldi	r30, 0x38	; 56
    2a3a:	f0 e0       	ldi	r31, 0x00	; 0
    2a3c:	80 81       	ld	r24, Z
    2a3e:	48 2f       	mov	r20, r24
    2a40:	89 81       	ldd	r24, Y+1	; 0x01
    2a42:	28 2f       	mov	r18, r24
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	02 2e       	mov	r0, r18
    2a4c:	02 c0       	rjmp	.+4      	; 0x2a52 <MDIO_voidTogglePinValue+0xb0>
    2a4e:	88 0f       	add	r24, r24
    2a50:	99 1f       	adc	r25, r25
    2a52:	0a 94       	dec	r0
    2a54:	e2 f7       	brpl	.-8      	; 0x2a4e <MDIO_voidTogglePinValue+0xac>
    2a56:	84 27       	eor	r24, r20
    2a58:	8c 93       	st	X, r24
    2a5a:	27 c0       	rjmp	.+78     	; 0x2aaa <MDIO_voidTogglePinValue+0x108>
	break;
case PORTC:
	TOG_BIT(PRTC_REG,Local_u8pin);
    2a5c:	a5 e3       	ldi	r26, 0x35	; 53
    2a5e:	b0 e0       	ldi	r27, 0x00	; 0
    2a60:	e5 e3       	ldi	r30, 0x35	; 53
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	80 81       	ld	r24, Z
    2a66:	48 2f       	mov	r20, r24
    2a68:	89 81       	ldd	r24, Y+1	; 0x01
    2a6a:	28 2f       	mov	r18, r24
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	02 2e       	mov	r0, r18
    2a74:	02 c0       	rjmp	.+4      	; 0x2a7a <MDIO_voidTogglePinValue+0xd8>
    2a76:	88 0f       	add	r24, r24
    2a78:	99 1f       	adc	r25, r25
    2a7a:	0a 94       	dec	r0
    2a7c:	e2 f7       	brpl	.-8      	; 0x2a76 <MDIO_voidTogglePinValue+0xd4>
    2a7e:	84 27       	eor	r24, r20
    2a80:	8c 93       	st	X, r24
    2a82:	13 c0       	rjmp	.+38     	; 0x2aaa <MDIO_voidTogglePinValue+0x108>
	break;
case PORTD:
	TOG_BIT(PRTD_REG,Local_u8pin);
    2a84:	a2 e3       	ldi	r26, 0x32	; 50
    2a86:	b0 e0       	ldi	r27, 0x00	; 0
    2a88:	e2 e3       	ldi	r30, 0x32	; 50
    2a8a:	f0 e0       	ldi	r31, 0x00	; 0
    2a8c:	80 81       	ld	r24, Z
    2a8e:	48 2f       	mov	r20, r24
    2a90:	89 81       	ldd	r24, Y+1	; 0x01
    2a92:	28 2f       	mov	r18, r24
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	02 2e       	mov	r0, r18
    2a9c:	02 c0       	rjmp	.+4      	; 0x2aa2 <MDIO_voidTogglePinValue+0x100>
    2a9e:	88 0f       	add	r24, r24
    2aa0:	99 1f       	adc	r25, r25
    2aa2:	0a 94       	dec	r0
    2aa4:	e2 f7       	brpl	.-8      	; 0x2a9e <MDIO_voidTogglePinValue+0xfc>
    2aa6:	84 27       	eor	r24, r20
    2aa8:	8c 93       	st	X, r24
	break;

}
}
    2aaa:	0f 90       	pop	r0
    2aac:	0f 90       	pop	r0
    2aae:	0f 90       	pop	r0
    2ab0:	0f 90       	pop	r0
    2ab2:	0f 90       	pop	r0
    2ab4:	cf 91       	pop	r28
    2ab6:	df 91       	pop	r29
    2ab8:	08 95       	ret

00002aba <MDIO_voidGetPortValue>:



void MDIO_voidGetPortValue(Pin_t copy_enPort,u8 * ptrPortValue)
{
    2aba:	df 93       	push	r29
    2abc:	cf 93       	push	r28
    2abe:	00 d0       	rcall	.+0      	; 0x2ac0 <MDIO_voidGetPortValue+0x6>
    2ac0:	00 d0       	rcall	.+0      	; 0x2ac2 <MDIO_voidGetPortValue+0x8>
    2ac2:	00 d0       	rcall	.+0      	; 0x2ac4 <MDIO_voidGetPortValue+0xa>
    2ac4:	cd b7       	in	r28, 0x3d	; 61
    2ac6:	de b7       	in	r29, 0x3e	; 62
    2ac8:	8a 83       	std	Y+2, r24	; 0x02
    2aca:	7c 83       	std	Y+4, r23	; 0x04
    2acc:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8port= copy_enPort /10; //1-4
    2ace:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad0:	9a e0       	ldi	r25, 0x0A	; 10
    2ad2:	69 2f       	mov	r22, r25
    2ad4:	0e 94 20 3a 	call	0x7440	; 0x7440 <__udivmodqi4>
    2ad8:	89 83       	std	Y+1, r24	; 0x01
			//	u8 Local_u8pin= copy_enPort % 10; //0-7

				switch(Local_u8port)
    2ada:	89 81       	ldd	r24, Y+1	; 0x01
    2adc:	28 2f       	mov	r18, r24
    2ade:	30 e0       	ldi	r19, 0x00	; 0
    2ae0:	3e 83       	std	Y+6, r19	; 0x06
    2ae2:	2d 83       	std	Y+5, r18	; 0x05
    2ae4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae8:	82 30       	cpi	r24, 0x02	; 2
    2aea:	91 05       	cpc	r25, r1
    2aec:	e9 f0       	breq	.+58     	; 0x2b28 <MDIO_voidGetPortValue+0x6e>
    2aee:	2d 81       	ldd	r18, Y+5	; 0x05
    2af0:	3e 81       	ldd	r19, Y+6	; 0x06
    2af2:	23 30       	cpi	r18, 0x03	; 3
    2af4:	31 05       	cpc	r19, r1
    2af6:	34 f4       	brge	.+12     	; 0x2b04 <MDIO_voidGetPortValue+0x4a>
    2af8:	8d 81       	ldd	r24, Y+5	; 0x05
    2afa:	9e 81       	ldd	r25, Y+6	; 0x06
    2afc:	81 30       	cpi	r24, 0x01	; 1
    2afe:	91 05       	cpc	r25, r1
    2b00:	61 f0       	breq	.+24     	; 0x2b1a <MDIO_voidGetPortValue+0x60>
    2b02:	26 c0       	rjmp	.+76     	; 0x2b50 <MDIO_voidGetPortValue+0x96>
    2b04:	2d 81       	ldd	r18, Y+5	; 0x05
    2b06:	3e 81       	ldd	r19, Y+6	; 0x06
    2b08:	23 30       	cpi	r18, 0x03	; 3
    2b0a:	31 05       	cpc	r19, r1
    2b0c:	a1 f0       	breq	.+40     	; 0x2b36 <MDIO_voidGetPortValue+0x7c>
    2b0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b10:	9e 81       	ldd	r25, Y+6	; 0x06
    2b12:	84 30       	cpi	r24, 0x04	; 4
    2b14:	91 05       	cpc	r25, r1
    2b16:	b1 f0       	breq	.+44     	; 0x2b44 <MDIO_voidGetPortValue+0x8a>
    2b18:	1b c0       	rjmp	.+54     	; 0x2b50 <MDIO_voidGetPortValue+0x96>
					{
					case PORTA:
						* ptrPortValue = PRTA_REG;
    2b1a:	eb e3       	ldi	r30, 0x3B	; 59
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	80 81       	ld	r24, Z
    2b20:	eb 81       	ldd	r30, Y+3	; 0x03
    2b22:	fc 81       	ldd	r31, Y+4	; 0x04
    2b24:	80 83       	st	Z, r24
    2b26:	14 c0       	rjmp	.+40     	; 0x2b50 <MDIO_voidGetPortValue+0x96>
						break;
						/*****************************/
					case PORTB:
											* ptrPortValue = PRTB_REG;
    2b28:	e8 e3       	ldi	r30, 0x38	; 56
    2b2a:	f0 e0       	ldi	r31, 0x00	; 0
    2b2c:	80 81       	ld	r24, Z
    2b2e:	eb 81       	ldd	r30, Y+3	; 0x03
    2b30:	fc 81       	ldd	r31, Y+4	; 0x04
    2b32:	80 83       	st	Z, r24
    2b34:	0d c0       	rjmp	.+26     	; 0x2b50 <MDIO_voidGetPortValue+0x96>
											break;
							/*****************************/
					case PORTC:
											* ptrPortValue = PRTC_REG;
    2b36:	e5 e3       	ldi	r30, 0x35	; 53
    2b38:	f0 e0       	ldi	r31, 0x00	; 0
    2b3a:	80 81       	ld	r24, Z
    2b3c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b3e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b40:	80 83       	st	Z, r24
    2b42:	06 c0       	rjmp	.+12     	; 0x2b50 <MDIO_voidGetPortValue+0x96>
											break;
							/*****************************/
					case PORTD:
											* ptrPortValue = PRTD_REG;
    2b44:	e2 e3       	ldi	r30, 0x32	; 50
    2b46:	f0 e0       	ldi	r31, 0x00	; 0
    2b48:	80 81       	ld	r24, Z
    2b4a:	eb 81       	ldd	r30, Y+3	; 0x03
    2b4c:	fc 81       	ldd	r31, Y+4	; 0x04
    2b4e:	80 83       	st	Z, r24
							/*****************************/
						default: break;

}

}
    2b50:	26 96       	adiw	r28, 0x06	; 6
    2b52:	0f b6       	in	r0, 0x3f	; 63
    2b54:	f8 94       	cli
    2b56:	de bf       	out	0x3e, r29	; 62
    2b58:	0f be       	out	0x3f, r0	; 63
    2b5a:	cd bf       	out	0x3d, r28	; 61
    2b5c:	cf 91       	pop	r28
    2b5e:	df 91       	pop	r29
    2b60:	08 95       	ret

00002b62 <M_ADC_void_Init>:
	return adcValue;
}
*/

void M_ADC_void_Init(u8 copy_u8presclaer, u8 copy_vref)
{/*
    2b62:	df 93       	push	r29
    2b64:	cf 93       	push	r28
    2b66:	00 d0       	rcall	.+0      	; 0x2b68 <M_ADC_void_Init+0x6>
    2b68:	cd b7       	in	r28, 0x3d	; 61
    2b6a:	de b7       	in	r29, 0x3e	; 62
    2b6c:	89 83       	std	Y+1, r24	; 0x01
    2b6e:	6a 83       	std	Y+2, r22	; 0x02
			SET_BIT(ADMUX_REG,REFS1);
	break;
	default:
		*/

ADMUX_REG|=(copy_vref<<6);
    2b70:	a7 e2       	ldi	r26, 0x27	; 39
    2b72:	b0 e0       	ldi	r27, 0x00	; 0
    2b74:	e7 e2       	ldi	r30, 0x27	; 39
    2b76:	f0 e0       	ldi	r31, 0x00	; 0
    2b78:	80 81       	ld	r24, Z
    2b7a:	28 2f       	mov	r18, r24
    2b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7e:	88 2f       	mov	r24, r24
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	00 24       	eor	r0, r0
    2b84:	96 95       	lsr	r25
    2b86:	87 95       	ror	r24
    2b88:	07 94       	ror	r0
    2b8a:	96 95       	lsr	r25
    2b8c:	87 95       	ror	r24
    2b8e:	07 94       	ror	r0
    2b90:	98 2f       	mov	r25, r24
    2b92:	80 2d       	mov	r24, r0
    2b94:	82 2b       	or	r24, r18
    2b96:	8c 93       	st	X, r24
if(copy_u8presclaer<=7&&copy_u8presclaer>=0){
    2b98:	89 81       	ldd	r24, Y+1	; 0x01
    2b9a:	88 30       	cpi	r24, 0x08	; 8
    2b9c:	40 f4       	brcc	.+16     	; 0x2bae <M_ADC_void_Init+0x4c>

	ADCSRA_REG|=(copy_u8presclaer);
    2b9e:	a6 e2       	ldi	r26, 0x26	; 38
    2ba0:	b0 e0       	ldi	r27, 0x00	; 0
    2ba2:	e6 e2       	ldi	r30, 0x26	; 38
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	90 81       	ld	r25, Z
    2ba8:	89 81       	ldd	r24, Y+1	; 0x01
    2baa:	89 2b       	or	r24, r25
    2bac:	8c 93       	st	X, r24
}


//Enable ADC
SET_BIT(ADCSRA_REG,ADEN);
    2bae:	a6 e2       	ldi	r26, 0x26	; 38
    2bb0:	b0 e0       	ldi	r27, 0x00	; 0
    2bb2:	e6 e2       	ldi	r30, 0x26	; 38
    2bb4:	f0 e0       	ldi	r31, 0x00	; 0
    2bb6:	80 81       	ld	r24, Z
    2bb8:	80 68       	ori	r24, 0x80	; 128
    2bba:	8c 93       	st	X, r24
//Start conversion
SET_BIT(ADCSRA_REG,ADSC);
    2bbc:	a6 e2       	ldi	r26, 0x26	; 38
    2bbe:	b0 e0       	ldi	r27, 0x00	; 0
    2bc0:	e6 e2       	ldi	r30, 0x26	; 38
    2bc2:	f0 e0       	ldi	r31, 0x00	; 0
    2bc4:	80 81       	ld	r24, Z
    2bc6:	80 64       	ori	r24, 0x40	; 64
    2bc8:	8c 93       	st	X, r24
//Auto Trig
#if(CONVERSION_MODE==FREE_RUNNING_MODE)

SET_BIT(ADCSRA_REG,ADATE);
    2bca:	a6 e2       	ldi	r26, 0x26	; 38
    2bcc:	b0 e0       	ldi	r27, 0x00	; 0
    2bce:	e6 e2       	ldi	r30, 0x26	; 38
    2bd0:	f0 e0       	ldi	r31, 0x00	; 0
    2bd2:	80 81       	ld	r24, Z
    2bd4:	80 62       	ori	r24, 0x20	; 32
    2bd6:	8c 93       	st	X, r24



#endif
}
    2bd8:	0f 90       	pop	r0
    2bda:	0f 90       	pop	r0
    2bdc:	cf 91       	pop	r28
    2bde:	df 91       	pop	r29
    2be0:	08 95       	ret

00002be2 <M_ADC_u16_adcRead>:
u16 M_ADC_u16_adcRead(u8 copy_u8Channel )
{
    2be2:	df 93       	push	r29
    2be4:	cf 93       	push	r28
    2be6:	cd b7       	in	r28, 0x3d	; 61
    2be8:	de b7       	in	r29, 0x3e	; 62
    2bea:	27 97       	sbiw	r28, 0x07	; 7
    2bec:	0f b6       	in	r0, 0x3f	; 63
    2bee:	f8 94       	cli
    2bf0:	de bf       	out	0x3e, r29	; 62
    2bf2:	0f be       	out	0x3f, r0	; 63
    2bf4:	cd bf       	out	0x3d, r28	; 61
    2bf6:	8f 83       	std	Y+7, r24	; 0x07

ADMUX_REG|=(copy_u8Channel);
    2bf8:	a7 e2       	ldi	r26, 0x27	; 39
    2bfa:	b0 e0       	ldi	r27, 0x00	; 0
    2bfc:	e7 e2       	ldi	r30, 0x27	; 39
    2bfe:	f0 e0       	ldi	r31, 0x00	; 0
    2c00:	90 81       	ld	r25, Z
    2c02:	8f 81       	ldd	r24, Y+7	; 0x07
    2c04:	89 2b       	or	r24, r25
    2c06:	8c 93       	st	X, r24
u32 ADCvalue=0,low,high;
low=(u32)ADCL_REG;
high=(u32)(ADCH_REG*256);
ADCvalue=low+high;
*/
u16 ADCvalue=0,low,high;
    2c08:	1e 82       	std	Y+6, r1	; 0x06
    2c0a:	1d 82       	std	Y+5, r1	; 0x05
low=ADCL_REG;
    2c0c:	e4 e2       	ldi	r30, 0x24	; 36
    2c0e:	f0 e0       	ldi	r31, 0x00	; 0
    2c10:	80 81       	ld	r24, Z
    2c12:	88 2f       	mov	r24, r24
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	9c 83       	std	Y+4, r25	; 0x04
    2c18:	8b 83       	std	Y+3, r24	; 0x03
high=ADCH_REG<<8;
    2c1a:	e5 e2       	ldi	r30, 0x25	; 37
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	80 81       	ld	r24, Z
    2c20:	88 2f       	mov	r24, r24
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	98 2f       	mov	r25, r24
    2c26:	88 27       	eor	r24, r24
    2c28:	9a 83       	std	Y+2, r25	; 0x02
    2c2a:	89 83       	std	Y+1, r24	; 0x01
ADCvalue=low+high;
    2c2c:	2b 81       	ldd	r18, Y+3	; 0x03
    2c2e:	3c 81       	ldd	r19, Y+4	; 0x04
    2c30:	89 81       	ldd	r24, Y+1	; 0x01
    2c32:	9a 81       	ldd	r25, Y+2	; 0x02
    2c34:	82 0f       	add	r24, r18
    2c36:	93 1f       	adc	r25, r19
    2c38:	9e 83       	std	Y+6, r25	; 0x06
    2c3a:	8d 83       	std	Y+5, r24	; 0x05
return ADCvalue;
    2c3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c3e:	9e 81       	ldd	r25, Y+6	; 0x06

}
    2c40:	27 96       	adiw	r28, 0x07	; 7
    2c42:	0f b6       	in	r0, 0x3f	; 63
    2c44:	f8 94       	cli
    2c46:	de bf       	out	0x3e, r29	; 62
    2c48:	0f be       	out	0x3f, r0	; 63
    2c4a:	cd bf       	out	0x3d, r28	; 61
    2c4c:	cf 91       	pop	r28
    2c4e:	df 91       	pop	r29
    2c50:	08 95       	ret

00002c52 <HLED_enInit>:
#include "HLED_int.h"


/****************/
ErrorState_t HLED_enInit(u8 copy_u8LedId)
{
    2c52:	df 93       	push	r29
    2c54:	cf 93       	push	r28
    2c56:	00 d0       	rcall	.+0      	; 0x2c58 <HLED_enInit+0x6>
    2c58:	00 d0       	rcall	.+0      	; 0x2c5a <HLED_enInit+0x8>
    2c5a:	cd b7       	in	r28, 0x3d	; 61
    2c5c:	de b7       	in	r29, 0x3e	; 62
    2c5e:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_State=SUCCES;
    2c60:	82 e0       	ldi	r24, 0x02	; 2
    2c62:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8LedId)
    2c64:	8a 81       	ldd	r24, Y+2	; 0x02
    2c66:	28 2f       	mov	r18, r24
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	3c 83       	std	Y+4, r19	; 0x04
    2c6c:	2b 83       	std	Y+3, r18	; 0x03
    2c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c70:	9c 81       	ldd	r25, Y+4	; 0x04
    2c72:	82 30       	cpi	r24, 0x02	; 2
    2c74:	91 05       	cpc	r25, r1
    2c76:	79 f0       	breq	.+30     	; 0x2c96 <HLED_enInit+0x44>
    2c78:	2b 81       	ldd	r18, Y+3	; 0x03
    2c7a:	3c 81       	ldd	r19, Y+4	; 0x04
    2c7c:	23 30       	cpi	r18, 0x03	; 3
    2c7e:	31 05       	cpc	r19, r1
    2c80:	79 f0       	breq	.+30     	; 0x2ca0 <HLED_enInit+0x4e>
    2c82:	8b 81       	ldd	r24, Y+3	; 0x03
    2c84:	9c 81       	ldd	r25, Y+4	; 0x04
    2c86:	81 30       	cpi	r24, 0x01	; 1
    2c88:	91 05       	cpc	r25, r1
    2c8a:	79 f4       	brne	.+30     	; 0x2caa <HLED_enInit+0x58>
	{
	case HLED_RED_ID:
		MDIO_SetPinDirection(HLED_RED_LED_PIN,OUTPUT);
    2c8c:	8e e1       	ldi	r24, 0x1E	; 30
    2c8e:	61 e0       	ldi	r22, 0x01	; 1
    2c90:	0e 94 de 11 	call	0x23bc	; 0x23bc <MDIO_SetPinDirection>
    2c94:	0b c0       	rjmp	.+22     	; 0x2cac <HLED_enInit+0x5a>
		break;
		case HLED_BLUE_ID:
		MDIO_SetPinDirection(HLED_BLUE_LED_PIN,OUTPUT);
    2c96:	80 e2       	ldi	r24, 0x20	; 32
    2c98:	61 e0       	ldi	r22, 0x01	; 1
    2c9a:	0e 94 de 11 	call	0x23bc	; 0x23bc <MDIO_SetPinDirection>
    2c9e:	06 c0       	rjmp	.+12     	; 0x2cac <HLED_enInit+0x5a>
		break;
		case HLED_GRN_ID:
		MDIO_SetPinDirection(HLED_GRN_LED_PIN,OUTPUT);
    2ca0:	8f e1       	ldi	r24, 0x1F	; 31
    2ca2:	61 e0       	ldi	r22, 0x01	; 1
    2ca4:	0e 94 de 11 	call	0x23bc	; 0x23bc <MDIO_SetPinDirection>
    2ca8:	01 c0       	rjmp	.+2      	; 0x2cac <HLED_enInit+0x5a>
		break;
default:
	Local_State=OUT_OF_RANGE;
    2caa:	19 82       	std	Y+1, r1	; 0x01
	}
return Local_State;
    2cac:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cae:	0f 90       	pop	r0
    2cb0:	0f 90       	pop	r0
    2cb2:	0f 90       	pop	r0
    2cb4:	0f 90       	pop	r0
    2cb6:	cf 91       	pop	r28
    2cb8:	df 91       	pop	r29
    2cba:	08 95       	ret

00002cbc <HLED_enSetON>:
/****************/
ErrorState_t HLED_enSetON(u8 copy_u8LedId)
{
    2cbc:	df 93       	push	r29
    2cbe:	cf 93       	push	r28
    2cc0:	00 d0       	rcall	.+0      	; 0x2cc2 <HLED_enSetON+0x6>
    2cc2:	00 d0       	rcall	.+0      	; 0x2cc4 <HLED_enSetON+0x8>
    2cc4:	cd b7       	in	r28, 0x3d	; 61
    2cc6:	de b7       	in	r29, 0x3e	; 62
    2cc8:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_State=SUCCES;
    2cca:	82 e0       	ldi	r24, 0x02	; 2
    2ccc:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8LedId)
    2cce:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd0:	28 2f       	mov	r18, r24
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	3c 83       	std	Y+4, r19	; 0x04
    2cd6:	2b 83       	std	Y+3, r18	; 0x03
    2cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cda:	9c 81       	ldd	r25, Y+4	; 0x04
    2cdc:	82 30       	cpi	r24, 0x02	; 2
    2cde:	91 05       	cpc	r25, r1
    2ce0:	79 f0       	breq	.+30     	; 0x2d00 <HLED_enSetON+0x44>
    2ce2:	2b 81       	ldd	r18, Y+3	; 0x03
    2ce4:	3c 81       	ldd	r19, Y+4	; 0x04
    2ce6:	23 30       	cpi	r18, 0x03	; 3
    2ce8:	31 05       	cpc	r19, r1
    2cea:	79 f0       	breq	.+30     	; 0x2d0a <HLED_enSetON+0x4e>
    2cec:	8b 81       	ldd	r24, Y+3	; 0x03
    2cee:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf0:	81 30       	cpi	r24, 0x01	; 1
    2cf2:	91 05       	cpc	r25, r1
    2cf4:	79 f4       	brne	.+30     	; 0x2d14 <HLED_enSetON+0x58>
	{
	case HLED_RED_ID:
#if(HLED_RED_LED_DIR==HLED_LED_FORWARD)
		MDIO_voidSetPinValue(HLED_RED_LED_PIN,HIGH);
    2cf6:	8e e1       	ldi	r24, 0x1E	; 30
    2cf8:	61 e0       	ldi	r22, 0x01	; 1
    2cfa:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
    2cfe:	0b c0       	rjmp	.+22     	; 0x2d16 <HLED_enSetON+0x5a>
	#error  ("wrong led Red Direction")
#endif
		break;
	case HLED_BLUE_ID:
#if(HLED_BLUE_LED_DIR==HLED_LED_FORWARD)
		MDIO_voidSetPinValue(HLED_BLUE_LED_PIN,HIGH);
    2d00:	80 e2       	ldi	r24, 0x20	; 32
    2d02:	61 e0       	ldi	r22, 0x01	; 1
    2d04:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
    2d08:	06 c0       	rjmp	.+12     	; 0x2d16 <HLED_enSetON+0x5a>
		break;


	case HLED_GRN_ID:
#if(HLED_GRN_LED_DIR==HLED_LED_FORWARD)
		MDIO_voidSetPinValue(HLED_GRN_LED_PIN,HIGH);
    2d0a:	8f e1       	ldi	r24, 0x1F	; 31
    2d0c:	61 e0       	ldi	r22, 0x01	; 1
    2d0e:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
    2d12:	01 c0       	rjmp	.+2      	; 0x2d16 <HLED_enSetON+0x5a>
	#error  ("wrong led Red Direction")
#endif

break;
default:
	Local_State=OUT_OF_RANGE;
    2d14:	19 82       	std	Y+1, r1	; 0x01
	}
return Local_State;
    2d16:	89 81       	ldd	r24, Y+1	; 0x01

}
    2d18:	0f 90       	pop	r0
    2d1a:	0f 90       	pop	r0
    2d1c:	0f 90       	pop	r0
    2d1e:	0f 90       	pop	r0
    2d20:	cf 91       	pop	r28
    2d22:	df 91       	pop	r29
    2d24:	08 95       	ret

00002d26 <HLED_enSetOFF>:
/****************/
ErrorState_t HLED_enSetOFF(u8 copy_u8LedId)
{
    2d26:	df 93       	push	r29
    2d28:	cf 93       	push	r28
    2d2a:	00 d0       	rcall	.+0      	; 0x2d2c <HLED_enSetOFF+0x6>
    2d2c:	00 d0       	rcall	.+0      	; 0x2d2e <HLED_enSetOFF+0x8>
    2d2e:	cd b7       	in	r28, 0x3d	; 61
    2d30:	de b7       	in	r29, 0x3e	; 62
    2d32:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_State=SUCCES;
    2d34:	82 e0       	ldi	r24, 0x02	; 2
    2d36:	89 83       	std	Y+1, r24	; 0x01
		switch(copy_u8LedId)
    2d38:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3a:	28 2f       	mov	r18, r24
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	3c 83       	std	Y+4, r19	; 0x04
    2d40:	2b 83       	std	Y+3, r18	; 0x03
    2d42:	8b 81       	ldd	r24, Y+3	; 0x03
    2d44:	9c 81       	ldd	r25, Y+4	; 0x04
    2d46:	82 30       	cpi	r24, 0x02	; 2
    2d48:	91 05       	cpc	r25, r1
    2d4a:	79 f0       	breq	.+30     	; 0x2d6a <HLED_enSetOFF+0x44>
    2d4c:	2b 81       	ldd	r18, Y+3	; 0x03
    2d4e:	3c 81       	ldd	r19, Y+4	; 0x04
    2d50:	23 30       	cpi	r18, 0x03	; 3
    2d52:	31 05       	cpc	r19, r1
    2d54:	79 f0       	breq	.+30     	; 0x2d74 <HLED_enSetOFF+0x4e>
    2d56:	8b 81       	ldd	r24, Y+3	; 0x03
    2d58:	9c 81       	ldd	r25, Y+4	; 0x04
    2d5a:	81 30       	cpi	r24, 0x01	; 1
    2d5c:	91 05       	cpc	r25, r1
    2d5e:	79 f4       	brne	.+30     	; 0x2d7e <HLED_enSetOFF+0x58>
		{
		case HLED_RED_ID:
	#if(HLED_RED_LED_DIR==HLED_LED_FORWARD)
			MDIO_voidSetPinValue(HLED_RED_LED_PIN,LOW);
    2d60:	8e e1       	ldi	r24, 0x1E	; 30
    2d62:	60 e0       	ldi	r22, 0x00	; 0
    2d64:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
    2d68:	0b c0       	rjmp	.+22     	; 0x2d80 <HLED_enSetOFF+0x5a>
		#error  ("wrong led Red Direction")
	#endif
			break;
		case HLED_BLUE_ID:
	#if(HLED_BLUE_LED_DIR==HLED_LED_FORWARD)
			MDIO_voidSetPinValue(HLED_BLUE_LED_PIN,LOW);
    2d6a:	80 e2       	ldi	r24, 0x20	; 32
    2d6c:	60 e0       	ldi	r22, 0x00	; 0
    2d6e:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
    2d72:	06 c0       	rjmp	.+12     	; 0x2d80 <HLED_enSetOFF+0x5a>
			break;


		case HLED_GRN_ID:
	#if(HLED_GRN_LED_DIR==HLED_LED_FORWARD)
			MDIO_voidSetPinValue(HLED_GRN_LED_PIN,LOW);
    2d74:	8f e1       	ldi	r24, 0x1F	; 31
    2d76:	60 e0       	ldi	r22, 0x00	; 0
    2d78:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
    2d7c:	01 c0       	rjmp	.+2      	; 0x2d80 <HLED_enSetOFF+0x5a>
		#error  ("wrong led Red Direction")
	#endif

	break;
	default:
		Local_State=OUT_OF_RANGE;
    2d7e:	19 82       	std	Y+1, r1	; 0x01
		}
	return Local_State;
    2d80:	89 81       	ldd	r24, Y+1	; 0x01


}
    2d82:	0f 90       	pop	r0
    2d84:	0f 90       	pop	r0
    2d86:	0f 90       	pop	r0
    2d88:	0f 90       	pop	r0
    2d8a:	cf 91       	pop	r28
    2d8c:	df 91       	pop	r29
    2d8e:	08 95       	ret

00002d90 <HLED_enToggle>:
ErrorState_t HLED_enToggle(u8 copy_u8LedId)
{
    2d90:	df 93       	push	r29
    2d92:	cf 93       	push	r28
    2d94:	00 d0       	rcall	.+0      	; 0x2d96 <HLED_enToggle+0x6>
    2d96:	00 d0       	rcall	.+0      	; 0x2d98 <HLED_enToggle+0x8>
    2d98:	cd b7       	in	r28, 0x3d	; 61
    2d9a:	de b7       	in	r29, 0x3e	; 62
    2d9c:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_State=SUCCES;
    2d9e:	82 e0       	ldi	r24, 0x02	; 2
    2da0:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8LedId)
    2da2:	8a 81       	ldd	r24, Y+2	; 0x02
    2da4:	28 2f       	mov	r18, r24
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	3c 83       	std	Y+4, r19	; 0x04
    2daa:	2b 83       	std	Y+3, r18	; 0x03
    2dac:	8b 81       	ldd	r24, Y+3	; 0x03
    2dae:	9c 81       	ldd	r25, Y+4	; 0x04
    2db0:	82 30       	cpi	r24, 0x02	; 2
    2db2:	91 05       	cpc	r25, r1
    2db4:	71 f0       	breq	.+28     	; 0x2dd2 <HLED_enToggle+0x42>
    2db6:	2b 81       	ldd	r18, Y+3	; 0x03
    2db8:	3c 81       	ldd	r19, Y+4	; 0x04
    2dba:	23 30       	cpi	r18, 0x03	; 3
    2dbc:	31 05       	cpc	r19, r1
    2dbe:	69 f0       	breq	.+26     	; 0x2dda <HLED_enToggle+0x4a>
    2dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc2:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc4:	81 30       	cpi	r24, 0x01	; 1
    2dc6:	91 05       	cpc	r25, r1
    2dc8:	61 f4       	brne	.+24     	; 0x2de2 <HLED_enToggle+0x52>
	{
	case HLED_RED_ID:
		MDIO_voidTogglePinValue(HLED_RED_LED_PIN);
    2dca:	8e e1       	ldi	r24, 0x1E	; 30
    2dcc:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <MDIO_voidTogglePinValue>
    2dd0:	09 c0       	rjmp	.+18     	; 0x2de4 <HLED_enToggle+0x54>
		break;
	case HLED_BLUE_ID:
		MDIO_voidTogglePinValue(HLED_BLUE_LED_PIN);
    2dd2:	80 e2       	ldi	r24, 0x20	; 32
    2dd4:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <MDIO_voidTogglePinValue>
    2dd8:	05 c0       	rjmp	.+10     	; 0x2de4 <HLED_enToggle+0x54>
		break;

	case HLED_GRN_ID:
		MDIO_voidTogglePinValue(HLED_GRN_LED_PIN);
    2dda:	8f e1       	ldi	r24, 0x1F	; 31
    2ddc:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <MDIO_voidTogglePinValue>
    2de0:	01 c0       	rjmp	.+2      	; 0x2de4 <HLED_enToggle+0x54>
		break;
default:
	Local_State=OUT_OF_RANGE;
    2de2:	19 82       	std	Y+1, r1	; 0x01

	}
return Local_State;
    2de4:	89 81       	ldd	r24, Y+1	; 0x01

}
    2de6:	0f 90       	pop	r0
    2de8:	0f 90       	pop	r0
    2dea:	0f 90       	pop	r0
    2dec:	0f 90       	pop	r0
    2dee:	cf 91       	pop	r28
    2df0:	df 91       	pop	r29
    2df2:	08 95       	ret

00002df4 <OVF_INC>:
#include "HULTRASONIC_config.h"
#include "HULTRASONIC_int.h"


	void OVF_INC(void)
		{
    2df4:	df 93       	push	r29
    2df6:	cf 93       	push	r28
    2df8:	cd b7       	in	r28, 0x3d	; 61
    2dfa:	de b7       	in	r29, 0x3e	; 62
			//MDIO_voidTogglePinValue(PC6);
			g_T1OVFint++;
    2dfc:	80 91 3c 03 	lds	r24, 0x033C
    2e00:	90 91 3d 03 	lds	r25, 0x033D
    2e04:	01 96       	adiw	r24, 0x01	; 1
    2e06:	90 93 3d 03 	sts	0x033D, r25
    2e0a:	80 93 3c 03 	sts	0x033C, r24

		}
    2e0e:	cf 91       	pop	r28
    2e10:	df 91       	pop	r29
    2e12:	08 95       	ret

00002e14 <ICU_HW>:

		void ICU_HW(void) // fn to check if ICU work and read the signal
		{	//MDIO_voidTogglePinValue(PC5);
    2e14:	df 93       	push	r29
    2e16:	cf 93       	push	r28
    2e18:	cd b7       	in	r28, 0x3d	; 61
    2e1a:	de b7       	in	r29, 0x3e	; 62
			//if(flag!=0){
			if(g_State == STATE1)
    2e1c:	80 91 ea 02 	lds	r24, 0x02EA
    2e20:	81 30       	cpi	r24, 0x01	; 1
    2e22:	99 f4       	brne	.+38     	; 0x2e4a <ICU_HW+0x36>
			{
				MTIMER1_ICU_enRead(&g_Reading1);
    2e24:	88 e3       	ldi	r24, 0x38	; 56
    2e26:	93 e0       	ldi	r25, 0x03	; 3
    2e28:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <MTIMER1_ICU_enRead>
				MTIMER1_ICU_enSetTrigger(MTIMER1_ICU_FALL_EDGE_TRIG);
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
    2e2e:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <MTIMER1_ICU_enSetTrigger>
				g_T1OVFint_Multfact1=g_T1OVFint;
    2e32:	80 91 3c 03 	lds	r24, 0x033C
    2e36:	90 91 3d 03 	lds	r25, 0x033D
    2e3a:	90 93 3f 03 	sts	0x033F, r25
    2e3e:	80 93 3e 03 	sts	0x033E, r24
				g_State = STATE2;
    2e42:	82 e0       	ldi	r24, 0x02	; 2
    2e44:	80 93 ea 02 	sts	0x02EA, r24
    2e48:	1a c0       	rjmp	.+52     	; 0x2e7e <ICU_HW+0x6a>
			}
			else if(g_State == STATE2)
    2e4a:	80 91 ea 02 	lds	r24, 0x02EA
    2e4e:	82 30       	cpi	r24, 0x02	; 2
    2e50:	b1 f4       	brne	.+44     	; 0x2e7e <ICU_HW+0x6a>
			{
				// change trigger

				MTIMER1_ICU_enRead(&g_Reading2);
    2e52:	8a e3       	ldi	r24, 0x3A	; 58
    2e54:	93 e0       	ldi	r25, 0x03	; 3
    2e56:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <MTIMER1_ICU_enRead>
				g_T1OVFint_Multfact2=g_T1OVFint;
    2e5a:	80 91 3c 03 	lds	r24, 0x033C
    2e5e:	90 91 3d 03 	lds	r25, 0x033D
    2e62:	90 93 41 03 	sts	0x0341, r25
    2e66:	80 93 40 03 	sts	0x0340, r24

				g_State = STATE3;
    2e6a:	83 e0       	ldi	r24, 0x03	; 3
    2e6c:	80 93 ea 02 	sts	0x02EA, r24

				MTIMER1_ICU_enSetTrigger(MTIMER1_ICU_RAIS_EDGE_TRIG);
    2e70:	81 e0       	ldi	r24, 0x01	; 1
    2e72:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <MTIMER1_ICU_enSetTrigger>
				g_T1OVFint=0;
    2e76:	10 92 3d 03 	sts	0x033D, r1
    2e7a:	10 92 3c 03 	sts	0x033C, r1

			//MTIMER1_enStop();

			//MTIMER1_ICU_enDisableInt()		}
			}
		}
    2e7e:	cf 91       	pop	r28
    2e80:	df 91       	pop	r29
    2e82:	08 95       	ret

00002e84 <HUltrasonic_enInit>:



ErrorState_t HUltrasonic_enInit(Pin_t copy_enTrigPin)
{
    2e84:	df 93       	push	r29
    2e86:	cf 93       	push	r28
    2e88:	0f 92       	push	r0
    2e8a:	cd b7       	in	r28, 0x3d	; 61
    2e8c:	de b7       	in	r29, 0x3e	; 62
    2e8e:	89 83       	std	Y+1, r24	; 0x01



	//	MDIO_SetPinDirection(PC5, OUTPUT);
	//	MDIO_SetPinDirection(PC6, OUTPUT);
		MDIO_SetPinDirection(ECHO_PIN, INPUT);//echo
    2e90:	8e e2       	ldi	r24, 0x2E	; 46
    2e92:	60 e0       	ldi	r22, 0x00	; 0
    2e94:	0e 94 de 11 	call	0x23bc	; 0x23bc <MDIO_SetPinDirection>
		MDIO_SetPinDirection(copy_enTrigPin, OUTPUT);//trig
    2e98:	89 81       	ldd	r24, Y+1	; 0x01
    2e9a:	61 e0       	ldi	r22, 0x01	; 1
    2e9c:	0e 94 de 11 	call	0x23bc	; 0x23bc <MDIO_SetPinDirection>
		MTIMER1_enInit();
    2ea0:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <MTIMER1_enInit>
		MTIMER1_ICU_enInit();
    2ea4:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <MTIMER1_ICU_enInit>
		MTIMER1_ICU_enEnableInt();
    2ea8:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <MTIMER1_ICU_enEnableInt>
		MTIMER1_OVF_enEnableInt();
    2eac:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <MTIMER1_OVF_enEnableInt>
		MTIMER1_enStart();
    2eb0:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <MTIMER1_enStart>
		MGIE_enEnable();
    2eb4:	0e 94 45 10 	call	0x208a	; 0x208a <MGIE_enEnable>
		MTIMER1_ICU_enSetCallBack(MTIME1_CAPT_ID,ICU_HW);
    2eb8:	2a e0       	ldi	r18, 0x0A	; 10
    2eba:	37 e1       	ldi	r19, 0x17	; 23
    2ebc:	80 e0       	ldi	r24, 0x00	; 0
    2ebe:	b9 01       	movw	r22, r18
    2ec0:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <MTIMER1_ICU_enSetCallBack>
		MTIMER1_ICU_enSetCallBack(MTIME1_OVF_ID,OVF_INC);
    2ec4:	2a ef       	ldi	r18, 0xFA	; 250
    2ec6:	36 e1       	ldi	r19, 0x16	; 22
    2ec8:	81 e0       	ldi	r24, 0x01	; 1
    2eca:	b9 01       	movw	r22, r18
    2ecc:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <MTIMER1_ICU_enSetCallBack>
return SUCCES;
    2ed0:	82 e0       	ldi	r24, 0x02	; 2
}
    2ed2:	0f 90       	pop	r0
    2ed4:	cf 91       	pop	r28
    2ed6:	df 91       	pop	r29
    2ed8:	08 95       	ret

00002eda <HUltrasonic_enStartReading>:

ErrorState_t HUltrasonic_enStartReading(Pin_t copy_enTrigPin,u32 * copy_u8Distance)
{
    2eda:	ef 92       	push	r14
    2edc:	ff 92       	push	r15
    2ede:	0f 93       	push	r16
    2ee0:	1f 93       	push	r17
    2ee2:	df 93       	push	r29
    2ee4:	cf 93       	push	r28
    2ee6:	cd b7       	in	r28, 0x3d	; 61
    2ee8:	de b7       	in	r29, 0x3e	; 62
    2eea:	c3 54       	subi	r28, 0x43	; 67
    2eec:	d0 40       	sbci	r29, 0x00	; 0
    2eee:	0f b6       	in	r0, 0x3f	; 63
    2ef0:	f8 94       	cli
    2ef2:	de bf       	out	0x3e, r29	; 62
    2ef4:	0f be       	out	0x3f, r0	; 63
    2ef6:	cd bf       	out	0x3d, r28	; 61
    2ef8:	fe 01       	movw	r30, r28
    2efa:	ef 5b       	subi	r30, 0xBF	; 191
    2efc:	ff 4f       	sbci	r31, 0xFF	; 255
    2efe:	80 83       	st	Z, r24
    2f00:	fe 01       	movw	r30, r28
    2f02:	ee 5b       	subi	r30, 0xBE	; 190
    2f04:	ff 4f       	sbci	r31, 0xFF	; 255
    2f06:	71 83       	std	Z+1, r23	; 0x01
    2f08:	60 83       	st	Z, r22
    2f0a:	80 e0       	ldi	r24, 0x00	; 0
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	a0 ea       	ldi	r26, 0xA0	; 160
    2f10:	b1 e4       	ldi	r27, 0x41	; 65
    2f12:	8d a7       	std	Y+45, r24	; 0x2d
    2f14:	9e a7       	std	Y+46, r25	; 0x2e
    2f16:	af a7       	std	Y+47, r26	; 0x2f
    2f18:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2f1a:	6d a5       	ldd	r22, Y+45	; 0x2d
    2f1c:	7e a5       	ldd	r23, Y+46	; 0x2e
    2f1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f20:	98 a9       	ldd	r25, Y+48	; 0x30
    2f22:	2b ea       	ldi	r18, 0xAB	; 171
    2f24:	3a ea       	ldi	r19, 0xAA	; 170
    2f26:	4a ea       	ldi	r20, 0xAA	; 170
    2f28:	50 e4       	ldi	r21, 0x40	; 64
    2f2a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    2f2e:	dc 01       	movw	r26, r24
    2f30:	cb 01       	movw	r24, r22
    2f32:	89 a7       	std	Y+41, r24	; 0x29
    2f34:	9a a7       	std	Y+42, r25	; 0x2a
    2f36:	ab a7       	std	Y+43, r26	; 0x2b
    2f38:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2f3a:	69 a5       	ldd	r22, Y+41	; 0x29
    2f3c:	7a a5       	ldd	r23, Y+42	; 0x2a
    2f3e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f40:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f42:	20 e0       	ldi	r18, 0x00	; 0
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	40 e8       	ldi	r20, 0x80	; 128
    2f48:	5f e3       	ldi	r21, 0x3F	; 63
    2f4a:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    2f4e:	88 23       	and	r24, r24
    2f50:	1c f4       	brge	.+6      	; 0x2f58 <HUltrasonic_enStartReading+0x7e>
		__ticks = 1;
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	88 a7       	std	Y+40, r24	; 0x28
    2f56:	91 c0       	rjmp	.+290    	; 0x307a <HUltrasonic_enStartReading+0x1a0>
	else if (__tmp > 255)
    2f58:	69 a5       	ldd	r22, Y+41	; 0x29
    2f5a:	7a a5       	ldd	r23, Y+42	; 0x2a
    2f5c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f5e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f60:	20 e0       	ldi	r18, 0x00	; 0
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	4f e7       	ldi	r20, 0x7F	; 127
    2f66:	53 e4       	ldi	r21, 0x43	; 67
    2f68:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    2f6c:	18 16       	cp	r1, r24
    2f6e:	0c f0       	brlt	.+2      	; 0x2f72 <HUltrasonic_enStartReading+0x98>
    2f70:	7b c0       	rjmp	.+246    	; 0x3068 <HUltrasonic_enStartReading+0x18e>
	{
		_delay_ms(__us / 1000.0);
    2f72:	6d a5       	ldd	r22, Y+45	; 0x2d
    2f74:	7e a5       	ldd	r23, Y+46	; 0x2e
    2f76:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f78:	98 a9       	ldd	r25, Y+48	; 0x30
    2f7a:	20 e0       	ldi	r18, 0x00	; 0
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	4a e7       	ldi	r20, 0x7A	; 122
    2f80:	54 e4       	ldi	r21, 0x44	; 68
    2f82:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__divsf3>
    2f86:	dc 01       	movw	r26, r24
    2f88:	cb 01       	movw	r24, r22
    2f8a:	8c a3       	std	Y+36, r24	; 0x24
    2f8c:	9d a3       	std	Y+37, r25	; 0x25
    2f8e:	ae a3       	std	Y+38, r26	; 0x26
    2f90:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f92:	6c a1       	ldd	r22, Y+36	; 0x24
    2f94:	7d a1       	ldd	r23, Y+37	; 0x25
    2f96:	8e a1       	ldd	r24, Y+38	; 0x26
    2f98:	9f a1       	ldd	r25, Y+39	; 0x27
    2f9a:	20 e0       	ldi	r18, 0x00	; 0
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	4a e7       	ldi	r20, 0x7A	; 122
    2fa0:	55 e4       	ldi	r21, 0x45	; 69
    2fa2:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    2fa6:	dc 01       	movw	r26, r24
    2fa8:	cb 01       	movw	r24, r22
    2faa:	88 a3       	std	Y+32, r24	; 0x20
    2fac:	99 a3       	std	Y+33, r25	; 0x21
    2fae:	aa a3       	std	Y+34, r26	; 0x22
    2fb0:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2fb2:	68 a1       	ldd	r22, Y+32	; 0x20
    2fb4:	79 a1       	ldd	r23, Y+33	; 0x21
    2fb6:	8a a1       	ldd	r24, Y+34	; 0x22
    2fb8:	9b a1       	ldd	r25, Y+35	; 0x23
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	40 e8       	ldi	r20, 0x80	; 128
    2fc0:	5f e3       	ldi	r21, 0x3F	; 63
    2fc2:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    2fc6:	88 23       	and	r24, r24
    2fc8:	2c f4       	brge	.+10     	; 0x2fd4 <HUltrasonic_enStartReading+0xfa>
		__ticks = 1;
    2fca:	81 e0       	ldi	r24, 0x01	; 1
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	9f 8f       	std	Y+31, r25	; 0x1f
    2fd0:	8e 8f       	std	Y+30, r24	; 0x1e
    2fd2:	3f c0       	rjmp	.+126    	; 0x3052 <HUltrasonic_enStartReading+0x178>
	else if (__tmp > 65535)
    2fd4:	68 a1       	ldd	r22, Y+32	; 0x20
    2fd6:	79 a1       	ldd	r23, Y+33	; 0x21
    2fd8:	8a a1       	ldd	r24, Y+34	; 0x22
    2fda:	9b a1       	ldd	r25, Y+35	; 0x23
    2fdc:	20 e0       	ldi	r18, 0x00	; 0
    2fde:	3f ef       	ldi	r19, 0xFF	; 255
    2fe0:	4f e7       	ldi	r20, 0x7F	; 127
    2fe2:	57 e4       	ldi	r21, 0x47	; 71
    2fe4:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    2fe8:	18 16       	cp	r1, r24
    2fea:	4c f5       	brge	.+82     	; 0x303e <HUltrasonic_enStartReading+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fec:	6c a1       	ldd	r22, Y+36	; 0x24
    2fee:	7d a1       	ldd	r23, Y+37	; 0x25
    2ff0:	8e a1       	ldd	r24, Y+38	; 0x26
    2ff2:	9f a1       	ldd	r25, Y+39	; 0x27
    2ff4:	20 e0       	ldi	r18, 0x00	; 0
    2ff6:	30 e0       	ldi	r19, 0x00	; 0
    2ff8:	40 e2       	ldi	r20, 0x20	; 32
    2ffa:	51 e4       	ldi	r21, 0x41	; 65
    2ffc:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    3000:	dc 01       	movw	r26, r24
    3002:	cb 01       	movw	r24, r22
    3004:	bc 01       	movw	r22, r24
    3006:	cd 01       	movw	r24, r26
    3008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    300c:	dc 01       	movw	r26, r24
    300e:	cb 01       	movw	r24, r22
    3010:	9f 8f       	std	Y+31, r25	; 0x1f
    3012:	8e 8f       	std	Y+30, r24	; 0x1e
    3014:	0f c0       	rjmp	.+30     	; 0x3034 <HUltrasonic_enStartReading+0x15a>
    3016:	80 e9       	ldi	r24, 0x90	; 144
    3018:	91 e0       	ldi	r25, 0x01	; 1
    301a:	9d 8f       	std	Y+29, r25	; 0x1d
    301c:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    301e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3020:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3022:	01 97       	sbiw	r24, 0x01	; 1
    3024:	f1 f7       	brne	.-4      	; 0x3022 <HUltrasonic_enStartReading+0x148>
    3026:	9d 8f       	std	Y+29, r25	; 0x1d
    3028:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    302a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    302c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    302e:	01 97       	sbiw	r24, 0x01	; 1
    3030:	9f 8f       	std	Y+31, r25	; 0x1f
    3032:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3034:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3036:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3038:	00 97       	sbiw	r24, 0x00	; 0
    303a:	69 f7       	brne	.-38     	; 0x3016 <HUltrasonic_enStartReading+0x13c>
    303c:	24 c0       	rjmp	.+72     	; 0x3086 <HUltrasonic_enStartReading+0x1ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    303e:	68 a1       	ldd	r22, Y+32	; 0x20
    3040:	79 a1       	ldd	r23, Y+33	; 0x21
    3042:	8a a1       	ldd	r24, Y+34	; 0x22
    3044:	9b a1       	ldd	r25, Y+35	; 0x23
    3046:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    304a:	dc 01       	movw	r26, r24
    304c:	cb 01       	movw	r24, r22
    304e:	9f 8f       	std	Y+31, r25	; 0x1f
    3050:	8e 8f       	std	Y+30, r24	; 0x1e
    3052:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3054:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3056:	9b 8f       	std	Y+27, r25	; 0x1b
    3058:	8a 8f       	std	Y+26, r24	; 0x1a
    305a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    305c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    305e:	01 97       	sbiw	r24, 0x01	; 1
    3060:	f1 f7       	brne	.-4      	; 0x305e <HUltrasonic_enStartReading+0x184>
    3062:	9b 8f       	std	Y+27, r25	; 0x1b
    3064:	8a 8f       	std	Y+26, r24	; 0x1a
    3066:	0f c0       	rjmp	.+30     	; 0x3086 <HUltrasonic_enStartReading+0x1ac>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3068:	69 a5       	ldd	r22, Y+41	; 0x29
    306a:	7a a5       	ldd	r23, Y+42	; 0x2a
    306c:	8b a5       	ldd	r24, Y+43	; 0x2b
    306e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3074:	dc 01       	movw	r26, r24
    3076:	cb 01       	movw	r24, r22
    3078:	88 a7       	std	Y+40, r24	; 0x28
    307a:	88 a5       	ldd	r24, Y+40	; 0x28
    307c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    307e:	89 8d       	ldd	r24, Y+25	; 0x19
    3080:	8a 95       	dec	r24
    3082:	f1 f7       	brne	.-4      	; 0x3080 <HUltrasonic_enStartReading+0x1a6>
    3084:	89 8f       	std	Y+25, r24	; 0x19

	    _delay_us(20);
	MDIO_voidSetPinValue(copy_enTrigPin, HIGH);
    3086:	fe 01       	movw	r30, r28
    3088:	ef 5b       	subi	r30, 0xBF	; 191
    308a:	ff 4f       	sbci	r31, 0xFF	; 255
    308c:	80 81       	ld	r24, Z
    308e:	61 e0       	ldi	r22, 0x01	; 1
    3090:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
    3094:	80 e0       	ldi	r24, 0x00	; 0
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	a0 ea       	ldi	r26, 0xA0	; 160
    309a:	b1 e4       	ldi	r27, 0x41	; 65
    309c:	8d 8b       	std	Y+21, r24	; 0x15
    309e:	9e 8b       	std	Y+22, r25	; 0x16
    30a0:	af 8b       	std	Y+23, r26	; 0x17
    30a2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    30a4:	6d 89       	ldd	r22, Y+21	; 0x15
    30a6:	7e 89       	ldd	r23, Y+22	; 0x16
    30a8:	8f 89       	ldd	r24, Y+23	; 0x17
    30aa:	98 8d       	ldd	r25, Y+24	; 0x18
    30ac:	2b ea       	ldi	r18, 0xAB	; 171
    30ae:	3a ea       	ldi	r19, 0xAA	; 170
    30b0:	4a ea       	ldi	r20, 0xAA	; 170
    30b2:	50 e4       	ldi	r21, 0x40	; 64
    30b4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    30b8:	dc 01       	movw	r26, r24
    30ba:	cb 01       	movw	r24, r22
    30bc:	89 8b       	std	Y+17, r24	; 0x11
    30be:	9a 8b       	std	Y+18, r25	; 0x12
    30c0:	ab 8b       	std	Y+19, r26	; 0x13
    30c2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    30c4:	69 89       	ldd	r22, Y+17	; 0x11
    30c6:	7a 89       	ldd	r23, Y+18	; 0x12
    30c8:	8b 89       	ldd	r24, Y+19	; 0x13
    30ca:	9c 89       	ldd	r25, Y+20	; 0x14
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	40 e8       	ldi	r20, 0x80	; 128
    30d2:	5f e3       	ldi	r21, 0x3F	; 63
    30d4:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    30d8:	88 23       	and	r24, r24
    30da:	1c f4       	brge	.+6      	; 0x30e2 <HUltrasonic_enStartReading+0x208>
		__ticks = 1;
    30dc:	81 e0       	ldi	r24, 0x01	; 1
    30de:	88 8b       	std	Y+16, r24	; 0x10
    30e0:	91 c0       	rjmp	.+290    	; 0x3204 <HUltrasonic_enStartReading+0x32a>
	else if (__tmp > 255)
    30e2:	69 89       	ldd	r22, Y+17	; 0x11
    30e4:	7a 89       	ldd	r23, Y+18	; 0x12
    30e6:	8b 89       	ldd	r24, Y+19	; 0x13
    30e8:	9c 89       	ldd	r25, Y+20	; 0x14
    30ea:	20 e0       	ldi	r18, 0x00	; 0
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	4f e7       	ldi	r20, 0x7F	; 127
    30f0:	53 e4       	ldi	r21, 0x43	; 67
    30f2:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    30f6:	18 16       	cp	r1, r24
    30f8:	0c f0       	brlt	.+2      	; 0x30fc <HUltrasonic_enStartReading+0x222>
    30fa:	7b c0       	rjmp	.+246    	; 0x31f2 <HUltrasonic_enStartReading+0x318>
	{
		_delay_ms(__us / 1000.0);
    30fc:	6d 89       	ldd	r22, Y+21	; 0x15
    30fe:	7e 89       	ldd	r23, Y+22	; 0x16
    3100:	8f 89       	ldd	r24, Y+23	; 0x17
    3102:	98 8d       	ldd	r25, Y+24	; 0x18
    3104:	20 e0       	ldi	r18, 0x00	; 0
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	4a e7       	ldi	r20, 0x7A	; 122
    310a:	54 e4       	ldi	r21, 0x44	; 68
    310c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__divsf3>
    3110:	dc 01       	movw	r26, r24
    3112:	cb 01       	movw	r24, r22
    3114:	8c 87       	std	Y+12, r24	; 0x0c
    3116:	9d 87       	std	Y+13, r25	; 0x0d
    3118:	ae 87       	std	Y+14, r26	; 0x0e
    311a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    311c:	6c 85       	ldd	r22, Y+12	; 0x0c
    311e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3120:	8e 85       	ldd	r24, Y+14	; 0x0e
    3122:	9f 85       	ldd	r25, Y+15	; 0x0f
    3124:	20 e0       	ldi	r18, 0x00	; 0
    3126:	30 e0       	ldi	r19, 0x00	; 0
    3128:	4a e7       	ldi	r20, 0x7A	; 122
    312a:	55 e4       	ldi	r21, 0x45	; 69
    312c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    3130:	dc 01       	movw	r26, r24
    3132:	cb 01       	movw	r24, r22
    3134:	88 87       	std	Y+8, r24	; 0x08
    3136:	99 87       	std	Y+9, r25	; 0x09
    3138:	aa 87       	std	Y+10, r26	; 0x0a
    313a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    313c:	68 85       	ldd	r22, Y+8	; 0x08
    313e:	79 85       	ldd	r23, Y+9	; 0x09
    3140:	8a 85       	ldd	r24, Y+10	; 0x0a
    3142:	9b 85       	ldd	r25, Y+11	; 0x0b
    3144:	20 e0       	ldi	r18, 0x00	; 0
    3146:	30 e0       	ldi	r19, 0x00	; 0
    3148:	40 e8       	ldi	r20, 0x80	; 128
    314a:	5f e3       	ldi	r21, 0x3F	; 63
    314c:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    3150:	88 23       	and	r24, r24
    3152:	2c f4       	brge	.+10     	; 0x315e <HUltrasonic_enStartReading+0x284>
		__ticks = 1;
    3154:	81 e0       	ldi	r24, 0x01	; 1
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	9f 83       	std	Y+7, r25	; 0x07
    315a:	8e 83       	std	Y+6, r24	; 0x06
    315c:	3f c0       	rjmp	.+126    	; 0x31dc <HUltrasonic_enStartReading+0x302>
	else if (__tmp > 65535)
    315e:	68 85       	ldd	r22, Y+8	; 0x08
    3160:	79 85       	ldd	r23, Y+9	; 0x09
    3162:	8a 85       	ldd	r24, Y+10	; 0x0a
    3164:	9b 85       	ldd	r25, Y+11	; 0x0b
    3166:	20 e0       	ldi	r18, 0x00	; 0
    3168:	3f ef       	ldi	r19, 0xFF	; 255
    316a:	4f e7       	ldi	r20, 0x7F	; 127
    316c:	57 e4       	ldi	r21, 0x47	; 71
    316e:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    3172:	18 16       	cp	r1, r24
    3174:	4c f5       	brge	.+82     	; 0x31c8 <HUltrasonic_enStartReading+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3176:	6c 85       	ldd	r22, Y+12	; 0x0c
    3178:	7d 85       	ldd	r23, Y+13	; 0x0d
    317a:	8e 85       	ldd	r24, Y+14	; 0x0e
    317c:	9f 85       	ldd	r25, Y+15	; 0x0f
    317e:	20 e0       	ldi	r18, 0x00	; 0
    3180:	30 e0       	ldi	r19, 0x00	; 0
    3182:	40 e2       	ldi	r20, 0x20	; 32
    3184:	51 e4       	ldi	r21, 0x41	; 65
    3186:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    318a:	dc 01       	movw	r26, r24
    318c:	cb 01       	movw	r24, r22
    318e:	bc 01       	movw	r22, r24
    3190:	cd 01       	movw	r24, r26
    3192:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3196:	dc 01       	movw	r26, r24
    3198:	cb 01       	movw	r24, r22
    319a:	9f 83       	std	Y+7, r25	; 0x07
    319c:	8e 83       	std	Y+6, r24	; 0x06
    319e:	0f c0       	rjmp	.+30     	; 0x31be <HUltrasonic_enStartReading+0x2e4>
    31a0:	80 e9       	ldi	r24, 0x90	; 144
    31a2:	91 e0       	ldi	r25, 0x01	; 1
    31a4:	9d 83       	std	Y+5, r25	; 0x05
    31a6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31a8:	8c 81       	ldd	r24, Y+4	; 0x04
    31aa:	9d 81       	ldd	r25, Y+5	; 0x05
    31ac:	01 97       	sbiw	r24, 0x01	; 1
    31ae:	f1 f7       	brne	.-4      	; 0x31ac <HUltrasonic_enStartReading+0x2d2>
    31b0:	9d 83       	std	Y+5, r25	; 0x05
    31b2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31b4:	8e 81       	ldd	r24, Y+6	; 0x06
    31b6:	9f 81       	ldd	r25, Y+7	; 0x07
    31b8:	01 97       	sbiw	r24, 0x01	; 1
    31ba:	9f 83       	std	Y+7, r25	; 0x07
    31bc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31be:	8e 81       	ldd	r24, Y+6	; 0x06
    31c0:	9f 81       	ldd	r25, Y+7	; 0x07
    31c2:	00 97       	sbiw	r24, 0x00	; 0
    31c4:	69 f7       	brne	.-38     	; 0x31a0 <HUltrasonic_enStartReading+0x2c6>
    31c6:	24 c0       	rjmp	.+72     	; 0x3210 <HUltrasonic_enStartReading+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31c8:	68 85       	ldd	r22, Y+8	; 0x08
    31ca:	79 85       	ldd	r23, Y+9	; 0x09
    31cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    31ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    31d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d4:	dc 01       	movw	r26, r24
    31d6:	cb 01       	movw	r24, r22
    31d8:	9f 83       	std	Y+7, r25	; 0x07
    31da:	8e 83       	std	Y+6, r24	; 0x06
    31dc:	8e 81       	ldd	r24, Y+6	; 0x06
    31de:	9f 81       	ldd	r25, Y+7	; 0x07
    31e0:	9b 83       	std	Y+3, r25	; 0x03
    31e2:	8a 83       	std	Y+2, r24	; 0x02
    31e4:	8a 81       	ldd	r24, Y+2	; 0x02
    31e6:	9b 81       	ldd	r25, Y+3	; 0x03
    31e8:	01 97       	sbiw	r24, 0x01	; 1
    31ea:	f1 f7       	brne	.-4      	; 0x31e8 <HUltrasonic_enStartReading+0x30e>
    31ec:	9b 83       	std	Y+3, r25	; 0x03
    31ee:	8a 83       	std	Y+2, r24	; 0x02
    31f0:	0f c0       	rjmp	.+30     	; 0x3210 <HUltrasonic_enStartReading+0x336>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    31f2:	69 89       	ldd	r22, Y+17	; 0x11
    31f4:	7a 89       	ldd	r23, Y+18	; 0x12
    31f6:	8b 89       	ldd	r24, Y+19	; 0x13
    31f8:	9c 89       	ldd	r25, Y+20	; 0x14
    31fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31fe:	dc 01       	movw	r26, r24
    3200:	cb 01       	movw	r24, r22
    3202:	88 8b       	std	Y+16, r24	; 0x10
    3204:	88 89       	ldd	r24, Y+16	; 0x10
    3206:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3208:	89 81       	ldd	r24, Y+1	; 0x01
    320a:	8a 95       	dec	r24
    320c:	f1 f7       	brne	.-4      	; 0x320a <HUltrasonic_enStartReading+0x330>
    320e:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(20);
	MDIO_voidSetPinValue(copy_enTrigPin,LOW);
    3210:	fe 01       	movw	r30, r28
    3212:	ef 5b       	subi	r30, 0xBF	; 191
    3214:	ff 4f       	sbci	r31, 0xFF	; 255
    3216:	80 81       	ld	r24, Z
    3218:	60 e0       	ldi	r22, 0x00	; 0
    321a:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	   // _delay_us(10);


	while(g_State != STATE3)
    321e:	80 91 ea 02 	lds	r24, 0x02EA
    3222:	83 30       	cpi	r24, 0x03	; 3
    3224:	e1 f7       	brne	.-8      	; 0x321e <HUltrasonic_enStartReading+0x344>
		{

		}
		g_State=STATE1;
    3226:	81 e0       	ldi	r24, 0x01	; 1
    3228:	80 93 ea 02 	sts	0x02EA, r24

		u32 TimeTicks;
		//TimeTicks=((u32)g_Reading2+((u32)g_T1OVFint_Multfact2*OVF_VALUE))-((u32)g_Reading1+((u32)g_T1OVFint_Multfact1*OVF_VALUE));
		TimeTicks=(u32)g_Reading2-(u32)g_Reading1;
    322c:	80 91 3a 03 	lds	r24, 0x033A
    3230:	90 91 3b 03 	lds	r25, 0x033B
    3234:	9c 01       	movw	r18, r24
    3236:	40 e0       	ldi	r20, 0x00	; 0
    3238:	50 e0       	ldi	r21, 0x00	; 0
    323a:	80 91 38 03 	lds	r24, 0x0338
    323e:	90 91 39 03 	lds	r25, 0x0339
    3242:	cc 01       	movw	r24, r24
    3244:	a0 e0       	ldi	r26, 0x00	; 0
    3246:	b0 e0       	ldi	r27, 0x00	; 0
    3248:	79 01       	movw	r14, r18
    324a:	8a 01       	movw	r16, r20
    324c:	e8 1a       	sub	r14, r24
    324e:	f9 0a       	sbc	r15, r25
    3250:	0a 0b       	sbc	r16, r26
    3252:	1b 0b       	sbc	r17, r27
    3254:	d8 01       	movw	r26, r16
    3256:	c7 01       	movw	r24, r14
    3258:	fe 01       	movw	r30, r28
    325a:	fd 96       	adiw	r30, 0x3d	; 61
    325c:	80 83       	st	Z, r24
    325e:	91 83       	std	Z+1, r25	; 0x01
    3260:	a2 83       	std	Z+2, r26	; 0x02
    3262:	b3 83       	std	Z+3, r27	; 0x03


			f32 tickTime = PRESCALER1024/FCPU; //prescaler/FCPU
    3264:	80 e0       	ldi	r24, 0x00	; 0
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	a0 e8       	ldi	r26, 0x80	; 128
    326a:	b2 e4       	ldi	r27, 0x42	; 66
    326c:	89 af       	std	Y+57, r24	; 0x39
    326e:	9a af       	std	Y+58, r25	; 0x3a
    3270:	ab af       	std	Y+59, r26	; 0x3b
    3272:	bc af       	std	Y+60, r27	; 0x3c
	 	    f32	Time = (TimeTicks * tickTime)/1000000.0;//convert to micro
    3274:	fe 01       	movw	r30, r28
    3276:	fd 96       	adiw	r30, 0x3d	; 61
    3278:	60 81       	ld	r22, Z
    327a:	71 81       	ldd	r23, Z+1	; 0x01
    327c:	82 81       	ldd	r24, Z+2	; 0x02
    327e:	93 81       	ldd	r25, Z+3	; 0x03
    3280:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatunsisf>
    3284:	dc 01       	movw	r26, r24
    3286:	cb 01       	movw	r24, r22
    3288:	bc 01       	movw	r22, r24
    328a:	cd 01       	movw	r24, r26
    328c:	29 ad       	ldd	r18, Y+57	; 0x39
    328e:	3a ad       	ldd	r19, Y+58	; 0x3a
    3290:	4b ad       	ldd	r20, Y+59	; 0x3b
    3292:	5c ad       	ldd	r21, Y+60	; 0x3c
    3294:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    3298:	dc 01       	movw	r26, r24
    329a:	cb 01       	movw	r24, r22
    329c:	bc 01       	movw	r22, r24
    329e:	cd 01       	movw	r24, r26
    32a0:	20 e0       	ldi	r18, 0x00	; 0
    32a2:	34 e2       	ldi	r19, 0x24	; 36
    32a4:	44 e7       	ldi	r20, 0x74	; 116
    32a6:	59 e4       	ldi	r21, 0x49	; 73
    32a8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__divsf3>
    32ac:	dc 01       	movw	r26, r24
    32ae:	cb 01       	movw	r24, r22
    32b0:	8d ab       	std	Y+53, r24	; 0x35
    32b2:	9e ab       	std	Y+54, r25	; 0x36
    32b4:	af ab       	std	Y+55, r26	; 0x37
    32b6:	b8 af       	std	Y+56, r27	; 0x38
			u32 Distance = ceil( SPEED_OF_SOUND*(Time/2));
    32b8:	6d a9       	ldd	r22, Y+53	; 0x35
    32ba:	7e a9       	ldd	r23, Y+54	; 0x36
    32bc:	8f a9       	ldd	r24, Y+55	; 0x37
    32be:	98 ad       	ldd	r25, Y+56	; 0x38
    32c0:	20 e0       	ldi	r18, 0x00	; 0
    32c2:	30 e0       	ldi	r19, 0x00	; 0
    32c4:	40 e0       	ldi	r20, 0x00	; 0
    32c6:	50 e4       	ldi	r21, 0x40	; 64
    32c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__divsf3>
    32cc:	dc 01       	movw	r26, r24
    32ce:	cb 01       	movw	r24, r22
    32d0:	bc 01       	movw	r22, r24
    32d2:	cd 01       	movw	r24, r26
    32d4:	20 e0       	ldi	r18, 0x00	; 0
    32d6:	3c ef       	ldi	r19, 0xFC	; 252
    32d8:	45 e0       	ldi	r20, 0x05	; 5
    32da:	57 e4       	ldi	r21, 0x47	; 71
    32dc:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    32e0:	dc 01       	movw	r26, r24
    32e2:	cb 01       	movw	r24, r22
    32e4:	bc 01       	movw	r22, r24
    32e6:	cd 01       	movw	r24, r26
    32e8:	0e 94 c7 3a 	call	0x758e	; 0x758e <ceil>
    32ec:	dc 01       	movw	r26, r24
    32ee:	cb 01       	movw	r24, r22
    32f0:	bc 01       	movw	r22, r24
    32f2:	cd 01       	movw	r24, r26
    32f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f8:	dc 01       	movw	r26, r24
    32fa:	cb 01       	movw	r24, r22
    32fc:	89 ab       	std	Y+49, r24	; 0x31
    32fe:	9a ab       	std	Y+50, r25	; 0x32
    3300:	ab ab       	std	Y+51, r26	; 0x33
    3302:	bc ab       	std	Y+52, r27	; 0x34
		if(Distance<=400&&Distance>=2){
    3304:	89 a9       	ldd	r24, Y+49	; 0x31
    3306:	9a a9       	ldd	r25, Y+50	; 0x32
    3308:	ab a9       	ldd	r26, Y+51	; 0x33
    330a:	bc a9       	ldd	r27, Y+52	; 0x34
    330c:	81 39       	cpi	r24, 0x91	; 145
    330e:	01 e0       	ldi	r16, 0x01	; 1
    3310:	90 07       	cpc	r25, r16
    3312:	00 e0       	ldi	r16, 0x00	; 0
    3314:	a0 07       	cpc	r26, r16
    3316:	00 e0       	ldi	r16, 0x00	; 0
    3318:	b0 07       	cpc	r27, r16
    331a:	b8 f4       	brcc	.+46     	; 0x334a <HUltrasonic_enStartReading+0x470>
    331c:	89 a9       	ldd	r24, Y+49	; 0x31
    331e:	9a a9       	ldd	r25, Y+50	; 0x32
    3320:	ab a9       	ldd	r26, Y+51	; 0x33
    3322:	bc a9       	ldd	r27, Y+52	; 0x34
    3324:	82 30       	cpi	r24, 0x02	; 2
    3326:	91 05       	cpc	r25, r1
    3328:	a1 05       	cpc	r26, r1
    332a:	b1 05       	cpc	r27, r1
    332c:	70 f0       	brcs	.+28     	; 0x334a <HUltrasonic_enStartReading+0x470>
			*copy_u8Distance=Distance;
    332e:	fe 01       	movw	r30, r28
    3330:	ee 5b       	subi	r30, 0xBE	; 190
    3332:	ff 4f       	sbci	r31, 0xFF	; 255
    3334:	01 90       	ld	r0, Z+
    3336:	f0 81       	ld	r31, Z
    3338:	e0 2d       	mov	r30, r0
    333a:	89 a9       	ldd	r24, Y+49	; 0x31
    333c:	9a a9       	ldd	r25, Y+50	; 0x32
    333e:	ab a9       	ldd	r26, Y+51	; 0x33
    3340:	bc a9       	ldd	r27, Y+52	; 0x34
    3342:	80 83       	st	Z, r24
    3344:	91 83       	std	Z+1, r25	; 0x01
    3346:	a2 83       	std	Z+2, r26	; 0x02
    3348:	b3 83       	std	Z+3, r27	; 0x03
		}
			g_Reading1=0;
    334a:	10 92 39 03 	sts	0x0339, r1
    334e:	10 92 38 03 	sts	0x0338, r1
			g_Reading2=0;
    3352:	10 92 3b 03 	sts	0x033B, r1
    3356:	10 92 3a 03 	sts	0x033A, r1

return SUCCES;
    335a:	82 e0       	ldi	r24, 0x02	; 2
}
    335c:	cd 5b       	subi	r28, 0xBD	; 189
    335e:	df 4f       	sbci	r29, 0xFF	; 255
    3360:	0f b6       	in	r0, 0x3f	; 63
    3362:	f8 94       	cli
    3364:	de bf       	out	0x3e, r29	; 62
    3366:	0f be       	out	0x3f, r0	; 63
    3368:	cd bf       	out	0x3d, r28	; 61
    336a:	cf 91       	pop	r28
    336c:	df 91       	pop	r29
    336e:	1f 91       	pop	r17
    3370:	0f 91       	pop	r16
    3372:	ff 90       	pop	r15
    3374:	ef 90       	pop	r14
    3376:	08 95       	ret

00003378 <HSSD_enInit>:
#include "HSSD_config.h"
#include "HSSD_int.h"


ErrorState_t HSSD_enInit(void)
{
    3378:	df 93       	push	r29
    337a:	cf 93       	push	r28
    337c:	cd b7       	in	r28, 0x3d	; 61
    337e:	de b7       	in	r29, 0x3e	; 62
	//Initialize all pins as output.
	MDIO_SetPinDirection(HSSD_LED_A_PIN, OUTPUT);
    3380:	8b e0       	ldi	r24, 0x0B	; 11
    3382:	61 e0       	ldi	r22, 0x01	; 1
    3384:	0e 94 de 11 	call	0x23bc	; 0x23bc <MDIO_SetPinDirection>
	MDIO_SetPinDirection(HSSD_LED_B_PIN, OUTPUT);
    3388:	8c e0       	ldi	r24, 0x0C	; 12
    338a:	61 e0       	ldi	r22, 0x01	; 1
    338c:	0e 94 de 11 	call	0x23bc	; 0x23bc <MDIO_SetPinDirection>
	MDIO_SetPinDirection(HSSD_LED_C_PIN, OUTPUT);
    3390:	8d e0       	ldi	r24, 0x0D	; 13
    3392:	61 e0       	ldi	r22, 0x01	; 1
    3394:	0e 94 de 11 	call	0x23bc	; 0x23bc <MDIO_SetPinDirection>
	MDIO_SetPinDirection(HSSD_LED_D_PIN, OUTPUT);
    3398:	8e e0       	ldi	r24, 0x0E	; 14
    339a:	61 e0       	ldi	r22, 0x01	; 1
    339c:	0e 94 de 11 	call	0x23bc	; 0x23bc <MDIO_SetPinDirection>
	MDIO_SetPinDirection(HSSD_LED_E_PIN, OUTPUT);
    33a0:	8f e0       	ldi	r24, 0x0F	; 15
    33a2:	61 e0       	ldi	r22, 0x01	; 1
    33a4:	0e 94 de 11 	call	0x23bc	; 0x23bc <MDIO_SetPinDirection>
	MDIO_SetPinDirection(HSSD_LED_F_PIN, OUTPUT);
    33a8:	80 e1       	ldi	r24, 0x10	; 16
    33aa:	61 e0       	ldi	r22, 0x01	; 1
    33ac:	0e 94 de 11 	call	0x23bc	; 0x23bc <MDIO_SetPinDirection>
	MDIO_SetPinDirection(HSSD_LED_G_PIN, OUTPUT);
    33b0:	81 e1       	ldi	r24, 0x11	; 17
    33b2:	61 e0       	ldi	r22, 0x01	; 1
    33b4:	0e 94 de 11 	call	0x23bc	; 0x23bc <MDIO_SetPinDirection>
	MDIO_SetPinDirection(HSSD_LED_DP_PIN, OUTPUT);
    33b8:	84 e1       	ldi	r24, 0x14	; 20
    33ba:	61 e0       	ldi	r22, 0x01	; 1
    33bc:	0e 94 de 11 	call	0x23bc	; 0x23bc <MDIO_SetPinDirection>
	//TO MAKE THE PORT CONFIGRABLE AS MUCH AS POSSIBLE
		MDIO_SetPinDirection(HSSD_EN1_PIN, OUTPUT);
    33c0:	84 e2       	ldi	r24, 0x24	; 36
    33c2:	61 e0       	ldi	r22, 0x01	; 1
    33c4:	0e 94 de 11 	call	0x23bc	; 0x23bc <MDIO_SetPinDirection>
		MDIO_SetPinDirection(HSSD_EN2_PIN, OUTPUT);
    33c8:	85 e2       	ldi	r24, 0x25	; 37
    33ca:	61 e0       	ldi	r22, 0x01	; 1
    33cc:	0e 94 de 11 	call	0x23bc	; 0x23bc <MDIO_SetPinDirection>
		return SUCCES;
    33d0:	82 e0       	ldi	r24, 0x02	; 2
}
    33d2:	cf 91       	pop	r28
    33d4:	df 91       	pop	r29
    33d6:	08 95       	ret

000033d8 <HSSD_enDisplayNumber>:


ErrorState_t HSSD_enDisplayNumber(u8 copy_u8NUMBER)//00-99
{
    33d8:	df 93       	push	r29
    33da:	cf 93       	push	r28
    33dc:	cd b7       	in	r28, 0x3d	; 61
    33de:	de b7       	in	r29, 0x3e	; 62
    33e0:	a6 97       	sbiw	r28, 0x26	; 38
    33e2:	0f b6       	in	r0, 0x3f	; 63
    33e4:	f8 94       	cli
    33e6:	de bf       	out	0x3e, r29	; 62
    33e8:	0f be       	out	0x3f, r0	; 63
    33ea:	cd bf       	out	0x3d, r28	; 61
    33ec:	8a a3       	std	Y+34, r24	; 0x22
	ErrorState_t Local_enState =SUCCES;
    33ee:	82 e0       	ldi	r24, 0x02	; 2
    33f0:	89 a3       	std	Y+33, r24	; 0x21
	if(copy_u8NUMBER>99)
    33f2:	8a a1       	ldd	r24, Y+34	; 0x22
    33f4:	84 36       	cpi	r24, 0x64	; 100
    33f6:	10 f0       	brcs	.+4      	; 0x33fc <HSSD_enDisplayNumber+0x24>
	{
		Local_enState =OUT_OF_RANGE;
    33f8:	19 a2       	std	Y+33, r1	; 0x21
    33fa:	02 c4       	rjmp	.+2052   	; 0x3c00 <HSSD_enDisplayNumber+0x828>
	}//end if
	else
	{


u8 Local_u8Units =copy_u8NUMBER %10;
    33fc:	8a a1       	ldd	r24, Y+34	; 0x22
    33fe:	9a e0       	ldi	r25, 0x0A	; 10
    3400:	69 2f       	mov	r22, r25
    3402:	0e 94 20 3a 	call	0x7440	; 0x7440 <__udivmodqi4>
    3406:	89 2f       	mov	r24, r25
    3408:	88 a3       	std	Y+32, r24	; 0x20
u8 Local_u8Tens =copy_u8NUMBER /10;
    340a:	8a a1       	ldd	r24, Y+34	; 0x22
    340c:	9a e0       	ldi	r25, 0x0A	; 10
    340e:	69 2f       	mov	r22, r25
    3410:	0e 94 20 3a 	call	0x7440	; 0x7440 <__udivmodqi4>
    3414:	8f 8f       	std	Y+31, r24	; 0x1f
MDIO_voidSetPinValue(HSSD_LED_DP_PIN,LOW);
    3416:	84 e1       	ldi	r24, 0x14	; 20
    3418:	60 e0       	ldi	r22, 0x00	; 0
    341a:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
u16 i;
for(i=0;i<HSSD_DISPLAY_TIME;i++)
    341e:	1e 8e       	std	Y+30, r1	; 0x1e
    3420:	1d 8e       	std	Y+29, r1	; 0x1d
    3422:	e7 c3       	rjmp	.+1998   	; 0x3bf2 <HSSD_enDisplayNumber+0x81a>
{

switch(Local_u8Units)
    3424:	88 a1       	ldd	r24, Y+32	; 0x20
    3426:	28 2f       	mov	r18, r24
    3428:	30 e0       	ldi	r19, 0x00	; 0
    342a:	3e a3       	std	Y+38, r19	; 0x26
    342c:	2d a3       	std	Y+37, r18	; 0x25
    342e:	8d a1       	ldd	r24, Y+37	; 0x25
    3430:	9e a1       	ldd	r25, Y+38	; 0x26
    3432:	84 30       	cpi	r24, 0x04	; 4
    3434:	91 05       	cpc	r25, r1
    3436:	09 f4       	brne	.+2      	; 0x343a <HSSD_enDisplayNumber+0x62>
    3438:	bb c0       	rjmp	.+374    	; 0x35b0 <HSSD_enDisplayNumber+0x1d8>
    343a:	2d a1       	ldd	r18, Y+37	; 0x25
    343c:	3e a1       	ldd	r19, Y+38	; 0x26
    343e:	25 30       	cpi	r18, 0x05	; 5
    3440:	31 05       	cpc	r19, r1
    3442:	ec f4       	brge	.+58     	; 0x347e <HSSD_enDisplayNumber+0xa6>
    3444:	8d a1       	ldd	r24, Y+37	; 0x25
    3446:	9e a1       	ldd	r25, Y+38	; 0x26
    3448:	81 30       	cpi	r24, 0x01	; 1
    344a:	91 05       	cpc	r25, r1
    344c:	09 f4       	brne	.+2      	; 0x3450 <HSSD_enDisplayNumber+0x78>
    344e:	59 c0       	rjmp	.+178    	; 0x3502 <HSSD_enDisplayNumber+0x12a>
    3450:	2d a1       	ldd	r18, Y+37	; 0x25
    3452:	3e a1       	ldd	r19, Y+38	; 0x26
    3454:	22 30       	cpi	r18, 0x02	; 2
    3456:	31 05       	cpc	r19, r1
    3458:	2c f4       	brge	.+10     	; 0x3464 <HSSD_enDisplayNumber+0x8c>
    345a:	8d a1       	ldd	r24, Y+37	; 0x25
    345c:	9e a1       	ldd	r25, Y+38	; 0x26
    345e:	00 97       	sbiw	r24, 0x00	; 0
    3460:	99 f1       	breq	.+102    	; 0x34c8 <HSSD_enDisplayNumber+0xf0>
    3462:	53 c1       	rjmp	.+678    	; 0x370a <HSSD_enDisplayNumber+0x332>
    3464:	2d a1       	ldd	r18, Y+37	; 0x25
    3466:	3e a1       	ldd	r19, Y+38	; 0x26
    3468:	22 30       	cpi	r18, 0x02	; 2
    346a:	31 05       	cpc	r19, r1
    346c:	09 f4       	brne	.+2      	; 0x3470 <HSSD_enDisplayNumber+0x98>
    346e:	66 c0       	rjmp	.+204    	; 0x353c <HSSD_enDisplayNumber+0x164>
    3470:	8d a1       	ldd	r24, Y+37	; 0x25
    3472:	9e a1       	ldd	r25, Y+38	; 0x26
    3474:	83 30       	cpi	r24, 0x03	; 3
    3476:	91 05       	cpc	r25, r1
    3478:	09 f4       	brne	.+2      	; 0x347c <HSSD_enDisplayNumber+0xa4>
    347a:	7d c0       	rjmp	.+250    	; 0x3576 <HSSD_enDisplayNumber+0x19e>
    347c:	46 c1       	rjmp	.+652    	; 0x370a <HSSD_enDisplayNumber+0x332>
    347e:	2d a1       	ldd	r18, Y+37	; 0x25
    3480:	3e a1       	ldd	r19, Y+38	; 0x26
    3482:	27 30       	cpi	r18, 0x07	; 7
    3484:	31 05       	cpc	r19, r1
    3486:	09 f4       	brne	.+2      	; 0x348a <HSSD_enDisplayNumber+0xb2>
    3488:	ea c0       	rjmp	.+468    	; 0x365e <HSSD_enDisplayNumber+0x286>
    348a:	8d a1       	ldd	r24, Y+37	; 0x25
    348c:	9e a1       	ldd	r25, Y+38	; 0x26
    348e:	88 30       	cpi	r24, 0x08	; 8
    3490:	91 05       	cpc	r25, r1
    3492:	6c f4       	brge	.+26     	; 0x34ae <HSSD_enDisplayNumber+0xd6>
    3494:	2d a1       	ldd	r18, Y+37	; 0x25
    3496:	3e a1       	ldd	r19, Y+38	; 0x26
    3498:	25 30       	cpi	r18, 0x05	; 5
    349a:	31 05       	cpc	r19, r1
    349c:	09 f4       	brne	.+2      	; 0x34a0 <HSSD_enDisplayNumber+0xc8>
    349e:	a5 c0       	rjmp	.+330    	; 0x35ea <HSSD_enDisplayNumber+0x212>
    34a0:	8d a1       	ldd	r24, Y+37	; 0x25
    34a2:	9e a1       	ldd	r25, Y+38	; 0x26
    34a4:	86 30       	cpi	r24, 0x06	; 6
    34a6:	91 05       	cpc	r25, r1
    34a8:	09 f4       	brne	.+2      	; 0x34ac <HSSD_enDisplayNumber+0xd4>
    34aa:	bc c0       	rjmp	.+376    	; 0x3624 <HSSD_enDisplayNumber+0x24c>
    34ac:	2e c1       	rjmp	.+604    	; 0x370a <HSSD_enDisplayNumber+0x332>
    34ae:	2d a1       	ldd	r18, Y+37	; 0x25
    34b0:	3e a1       	ldd	r19, Y+38	; 0x26
    34b2:	28 30       	cpi	r18, 0x08	; 8
    34b4:	31 05       	cpc	r19, r1
    34b6:	09 f4       	brne	.+2      	; 0x34ba <HSSD_enDisplayNumber+0xe2>
    34b8:	ef c0       	rjmp	.+478    	; 0x3698 <HSSD_enDisplayNumber+0x2c0>
    34ba:	8d a1       	ldd	r24, Y+37	; 0x25
    34bc:	9e a1       	ldd	r25, Y+38	; 0x26
    34be:	89 30       	cpi	r24, 0x09	; 9
    34c0:	91 05       	cpc	r25, r1
    34c2:	09 f4       	brne	.+2      	; 0x34c6 <HSSD_enDisplayNumber+0xee>
    34c4:	06 c1       	rjmp	.+524    	; 0x36d2 <HSSD_enDisplayNumber+0x2fa>
    34c6:	21 c1       	rjmp	.+578    	; 0x370a <HSSD_enDisplayNumber+0x332>
{
case 0:
	MDIO_voidSetPinValue(HSSD_LED_A_PIN,HIGH);
    34c8:	8b e0       	ldi	r24, 0x0B	; 11
    34ca:	61 e0       	ldi	r22, 0x01	; 1
    34cc:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_B_PIN,HIGH);
    34d0:	8c e0       	ldi	r24, 0x0C	; 12
    34d2:	61 e0       	ldi	r22, 0x01	; 1
    34d4:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_C_PIN,HIGH);
    34d8:	8d e0       	ldi	r24, 0x0D	; 13
    34da:	61 e0       	ldi	r22, 0x01	; 1
    34dc:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_D_PIN,HIGH);
    34e0:	8e e0       	ldi	r24, 0x0E	; 14
    34e2:	61 e0       	ldi	r22, 0x01	; 1
    34e4:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_E_PIN,HIGH);
    34e8:	8f e0       	ldi	r24, 0x0F	; 15
    34ea:	61 e0       	ldi	r22, 0x01	; 1
    34ec:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_F_PIN,HIGH);
    34f0:	80 e1       	ldi	r24, 0x10	; 16
    34f2:	61 e0       	ldi	r22, 0x01	; 1
    34f4:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_G_PIN,LOW);
    34f8:	81 e1       	ldi	r24, 0x11	; 17
    34fa:	60 e0       	ldi	r22, 0x00	; 0
    34fc:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
    3500:	04 c1       	rjmp	.+520    	; 0x370a <HSSD_enDisplayNumber+0x332>
	break;
case 1:
	MDIO_voidSetPinValue(HSSD_LED_A_PIN,LOW);
    3502:	8b e0       	ldi	r24, 0x0B	; 11
    3504:	60 e0       	ldi	r22, 0x00	; 0
    3506:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_B_PIN,HIGH);
    350a:	8c e0       	ldi	r24, 0x0C	; 12
    350c:	61 e0       	ldi	r22, 0x01	; 1
    350e:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_C_PIN,HIGH);
    3512:	8d e0       	ldi	r24, 0x0D	; 13
    3514:	61 e0       	ldi	r22, 0x01	; 1
    3516:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_D_PIN,LOW);
    351a:	8e e0       	ldi	r24, 0x0E	; 14
    351c:	60 e0       	ldi	r22, 0x00	; 0
    351e:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_E_PIN,LOW);
    3522:	8f e0       	ldi	r24, 0x0F	; 15
    3524:	60 e0       	ldi	r22, 0x00	; 0
    3526:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_F_PIN,LOW);
    352a:	80 e1       	ldi	r24, 0x10	; 16
    352c:	60 e0       	ldi	r22, 0x00	; 0
    352e:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_G_PIN,LOW);
    3532:	81 e1       	ldi	r24, 0x11	; 17
    3534:	60 e0       	ldi	r22, 0x00	; 0
    3536:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
    353a:	e7 c0       	rjmp	.+462    	; 0x370a <HSSD_enDisplayNumber+0x332>
	break;
case 2:
	MDIO_voidSetPinValue(HSSD_LED_A_PIN,HIGH);
    353c:	8b e0       	ldi	r24, 0x0B	; 11
    353e:	61 e0       	ldi	r22, 0x01	; 1
    3540:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(HSSD_LED_B_PIN,HIGH);
    3544:	8c e0       	ldi	r24, 0x0C	; 12
    3546:	61 e0       	ldi	r22, 0x01	; 1
    3548:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(HSSD_LED_C_PIN,LOW);
    354c:	8d e0       	ldi	r24, 0x0D	; 13
    354e:	60 e0       	ldi	r22, 0x00	; 0
    3550:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(HSSD_LED_D_PIN,HIGH);
    3554:	8e e0       	ldi	r24, 0x0E	; 14
    3556:	61 e0       	ldi	r22, 0x01	; 1
    3558:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(HSSD_LED_E_PIN,HIGH);
    355c:	8f e0       	ldi	r24, 0x0F	; 15
    355e:	61 e0       	ldi	r22, 0x01	; 1
    3560:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(HSSD_LED_F_PIN,LOW);
    3564:	80 e1       	ldi	r24, 0x10	; 16
    3566:	60 e0       	ldi	r22, 0x00	; 0
    3568:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(HSSD_LED_G_PIN,HIGH);
    356c:	81 e1       	ldi	r24, 0x11	; 17
    356e:	61 e0       	ldi	r22, 0x01	; 1
    3570:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
    3574:	ca c0       	rjmp	.+404    	; 0x370a <HSSD_enDisplayNumber+0x332>
	break;
case 3:
			MDIO_voidSetPinValue(HSSD_LED_A_PIN,HIGH);
    3576:	8b e0       	ldi	r24, 0x0B	; 11
    3578:	61 e0       	ldi	r22, 0x01	; 1
    357a:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(HSSD_LED_B_PIN,HIGH);
    357e:	8c e0       	ldi	r24, 0x0C	; 12
    3580:	61 e0       	ldi	r22, 0x01	; 1
    3582:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(HSSD_LED_C_PIN,HIGH);
    3586:	8d e0       	ldi	r24, 0x0D	; 13
    3588:	61 e0       	ldi	r22, 0x01	; 1
    358a:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(HSSD_LED_D_PIN,HIGH);
    358e:	8e e0       	ldi	r24, 0x0E	; 14
    3590:	61 e0       	ldi	r22, 0x01	; 1
    3592:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(HSSD_LED_E_PIN,LOW);
    3596:	8f e0       	ldi	r24, 0x0F	; 15
    3598:	60 e0       	ldi	r22, 0x00	; 0
    359a:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(HSSD_LED_F_PIN,LOW);
    359e:	80 e1       	ldi	r24, 0x10	; 16
    35a0:	60 e0       	ldi	r22, 0x00	; 0
    35a2:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(HSSD_LED_G_PIN,HIGH);
    35a6:	81 e1       	ldi	r24, 0x11	; 17
    35a8:	61 e0       	ldi	r22, 0x01	; 1
    35aa:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
    35ae:	ad c0       	rjmp	.+346    	; 0x370a <HSSD_enDisplayNumber+0x332>
	break;
case 4:
	MDIO_voidSetPinValue(HSSD_LED_A_PIN,LOW);
    35b0:	8b e0       	ldi	r24, 0x0B	; 11
    35b2:	60 e0       	ldi	r22, 0x00	; 0
    35b4:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_B_PIN,HIGH);
    35b8:	8c e0       	ldi	r24, 0x0C	; 12
    35ba:	61 e0       	ldi	r22, 0x01	; 1
    35bc:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_C_PIN,HIGH);
    35c0:	8d e0       	ldi	r24, 0x0D	; 13
    35c2:	61 e0       	ldi	r22, 0x01	; 1
    35c4:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_D_PIN,LOW);
    35c8:	8e e0       	ldi	r24, 0x0E	; 14
    35ca:	60 e0       	ldi	r22, 0x00	; 0
    35cc:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_E_PIN,LOW);
    35d0:	8f e0       	ldi	r24, 0x0F	; 15
    35d2:	60 e0       	ldi	r22, 0x00	; 0
    35d4:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_F_PIN,HIGH);
    35d8:	80 e1       	ldi	r24, 0x10	; 16
    35da:	61 e0       	ldi	r22, 0x01	; 1
    35dc:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_G_PIN,HIGH);
    35e0:	81 e1       	ldi	r24, 0x11	; 17
    35e2:	61 e0       	ldi	r22, 0x01	; 1
    35e4:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
    35e8:	90 c0       	rjmp	.+288    	; 0x370a <HSSD_enDisplayNumber+0x332>
	break;
case 5:
	MDIO_voidSetPinValue(HSSD_LED_A_PIN,HIGH);
    35ea:	8b e0       	ldi	r24, 0x0B	; 11
    35ec:	61 e0       	ldi	r22, 0x01	; 1
    35ee:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_B_PIN,LOW);
    35f2:	8c e0       	ldi	r24, 0x0C	; 12
    35f4:	60 e0       	ldi	r22, 0x00	; 0
    35f6:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_C_PIN,HIGH);
    35fa:	8d e0       	ldi	r24, 0x0D	; 13
    35fc:	61 e0       	ldi	r22, 0x01	; 1
    35fe:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_D_PIN,HIGH);
    3602:	8e e0       	ldi	r24, 0x0E	; 14
    3604:	61 e0       	ldi	r22, 0x01	; 1
    3606:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_E_PIN,LOW);
    360a:	8f e0       	ldi	r24, 0x0F	; 15
    360c:	60 e0       	ldi	r22, 0x00	; 0
    360e:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_F_PIN,HIGH);
    3612:	80 e1       	ldi	r24, 0x10	; 16
    3614:	61 e0       	ldi	r22, 0x01	; 1
    3616:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_G_PIN,HIGH);
    361a:	81 e1       	ldi	r24, 0x11	; 17
    361c:	61 e0       	ldi	r22, 0x01	; 1
    361e:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
    3622:	73 c0       	rjmp	.+230    	; 0x370a <HSSD_enDisplayNumber+0x332>
	break;
case 6:
	MDIO_voidSetPinValue(HSSD_LED_A_PIN,HIGH);
    3624:	8b e0       	ldi	r24, 0x0B	; 11
    3626:	61 e0       	ldi	r22, 0x01	; 1
    3628:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_B_PIN,LOW);
    362c:	8c e0       	ldi	r24, 0x0C	; 12
    362e:	60 e0       	ldi	r22, 0x00	; 0
    3630:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_C_PIN,HIGH);
    3634:	8d e0       	ldi	r24, 0x0D	; 13
    3636:	61 e0       	ldi	r22, 0x01	; 1
    3638:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_D_PIN,HIGH);
    363c:	8e e0       	ldi	r24, 0x0E	; 14
    363e:	61 e0       	ldi	r22, 0x01	; 1
    3640:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_E_PIN,HIGH);
    3644:	8f e0       	ldi	r24, 0x0F	; 15
    3646:	61 e0       	ldi	r22, 0x01	; 1
    3648:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_F_PIN,HIGH);
    364c:	80 e1       	ldi	r24, 0x10	; 16
    364e:	61 e0       	ldi	r22, 0x01	; 1
    3650:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_G_PIN,HIGH);
    3654:	81 e1       	ldi	r24, 0x11	; 17
    3656:	61 e0       	ldi	r22, 0x01	; 1
    3658:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
    365c:	56 c0       	rjmp	.+172    	; 0x370a <HSSD_enDisplayNumber+0x332>
	break;
case 7:
	MDIO_voidSetPinValue(HSSD_LED_A_PIN,HIGH);
    365e:	8b e0       	ldi	r24, 0x0B	; 11
    3660:	61 e0       	ldi	r22, 0x01	; 1
    3662:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_B_PIN,HIGH);
    3666:	8c e0       	ldi	r24, 0x0C	; 12
    3668:	61 e0       	ldi	r22, 0x01	; 1
    366a:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_C_PIN,HIGH);
    366e:	8d e0       	ldi	r24, 0x0D	; 13
    3670:	61 e0       	ldi	r22, 0x01	; 1
    3672:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_D_PIN,LOW);
    3676:	8e e0       	ldi	r24, 0x0E	; 14
    3678:	60 e0       	ldi	r22, 0x00	; 0
    367a:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_E_PIN,LOW);
    367e:	8f e0       	ldi	r24, 0x0F	; 15
    3680:	60 e0       	ldi	r22, 0x00	; 0
    3682:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_F_PIN,LOW);
    3686:	80 e1       	ldi	r24, 0x10	; 16
    3688:	60 e0       	ldi	r22, 0x00	; 0
    368a:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_G_PIN,LOW);
    368e:	81 e1       	ldi	r24, 0x11	; 17
    3690:	60 e0       	ldi	r22, 0x00	; 0
    3692:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
    3696:	39 c0       	rjmp	.+114    	; 0x370a <HSSD_enDisplayNumber+0x332>
	break;
case 8:
	MDIO_voidSetPinValue(HSSD_LED_A_PIN,HIGH);
    3698:	8b e0       	ldi	r24, 0x0B	; 11
    369a:	61 e0       	ldi	r22, 0x01	; 1
    369c:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_B_PIN,HIGH);
    36a0:	8c e0       	ldi	r24, 0x0C	; 12
    36a2:	61 e0       	ldi	r22, 0x01	; 1
    36a4:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_C_PIN,HIGH);
    36a8:	8d e0       	ldi	r24, 0x0D	; 13
    36aa:	61 e0       	ldi	r22, 0x01	; 1
    36ac:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_D_PIN,HIGH);
    36b0:	8e e0       	ldi	r24, 0x0E	; 14
    36b2:	61 e0       	ldi	r22, 0x01	; 1
    36b4:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_E_PIN,HIGH);
    36b8:	8f e0       	ldi	r24, 0x0F	; 15
    36ba:	61 e0       	ldi	r22, 0x01	; 1
    36bc:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_F_PIN,HIGH);
    36c0:	80 e1       	ldi	r24, 0x10	; 16
    36c2:	61 e0       	ldi	r22, 0x01	; 1
    36c4:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_G_PIN,HIGH);
    36c8:	81 e1       	ldi	r24, 0x11	; 17
    36ca:	61 e0       	ldi	r22, 0x01	; 1
    36cc:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
    36d0:	1c c0       	rjmp	.+56     	; 0x370a <HSSD_enDisplayNumber+0x332>
	break;
case 9:
	MDIO_voidSetPinValue(HSSD_LED_A_PIN,HIGH);
    36d2:	8b e0       	ldi	r24, 0x0B	; 11
    36d4:	61 e0       	ldi	r22, 0x01	; 1
    36d6:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_B_PIN,HIGH);
    36da:	8c e0       	ldi	r24, 0x0C	; 12
    36dc:	61 e0       	ldi	r22, 0x01	; 1
    36de:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_C_PIN,HIGH);
    36e2:	8d e0       	ldi	r24, 0x0D	; 13
    36e4:	61 e0       	ldi	r22, 0x01	; 1
    36e6:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_D_PIN,HIGH);
    36ea:	8e e0       	ldi	r24, 0x0E	; 14
    36ec:	61 e0       	ldi	r22, 0x01	; 1
    36ee:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_E_PIN,LOW);
    36f2:	8f e0       	ldi	r24, 0x0F	; 15
    36f4:	60 e0       	ldi	r22, 0x00	; 0
    36f6:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_F_PIN,HIGH);
    36fa:	80 e1       	ldi	r24, 0x10	; 16
    36fc:	61 e0       	ldi	r22, 0x01	; 1
    36fe:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_G_PIN,HIGH);
    3702:	81 e1       	ldi	r24, 0x11	; 17
    3704:	61 e0       	ldi	r22, 0x01	; 1
    3706:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	break;
default:break;
}//end switch
//Enable Dig1
MDIO_voidSetPinValue (HSSD_EN1_PIN , HIGH);
    370a:	84 e2       	ldi	r24, 0x24	; 36
    370c:	61 e0       	ldi	r22, 0x01	; 1
    370e:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
//Disable Gig2
MDIO_voidSetPinValue (HSSD_EN2_PIN ,LOW);
    3712:	85 e2       	ldi	r24, 0x25	; 37
    3714:	60 e0       	ldi	r22, 0x00	; 0
    3716:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
    371a:	80 e0       	ldi	r24, 0x00	; 0
    371c:	90 e0       	ldi	r25, 0x00	; 0
    371e:	a0 e8       	ldi	r26, 0x80	; 128
    3720:	bf e3       	ldi	r27, 0x3F	; 63
    3722:	89 8f       	std	Y+25, r24	; 0x19
    3724:	9a 8f       	std	Y+26, r25	; 0x1a
    3726:	ab 8f       	std	Y+27, r26	; 0x1b
    3728:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    372a:	69 8d       	ldd	r22, Y+25	; 0x19
    372c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    372e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3730:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3732:	20 e0       	ldi	r18, 0x00	; 0
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	4a e7       	ldi	r20, 0x7A	; 122
    3738:	55 e4       	ldi	r21, 0x45	; 69
    373a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    373e:	dc 01       	movw	r26, r24
    3740:	cb 01       	movw	r24, r22
    3742:	8d 8b       	std	Y+21, r24	; 0x15
    3744:	9e 8b       	std	Y+22, r25	; 0x16
    3746:	af 8b       	std	Y+23, r26	; 0x17
    3748:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    374a:	6d 89       	ldd	r22, Y+21	; 0x15
    374c:	7e 89       	ldd	r23, Y+22	; 0x16
    374e:	8f 89       	ldd	r24, Y+23	; 0x17
    3750:	98 8d       	ldd	r25, Y+24	; 0x18
    3752:	20 e0       	ldi	r18, 0x00	; 0
    3754:	30 e0       	ldi	r19, 0x00	; 0
    3756:	40 e8       	ldi	r20, 0x80	; 128
    3758:	5f e3       	ldi	r21, 0x3F	; 63
    375a:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    375e:	88 23       	and	r24, r24
    3760:	2c f4       	brge	.+10     	; 0x376c <HSSD_enDisplayNumber+0x394>
		__ticks = 1;
    3762:	81 e0       	ldi	r24, 0x01	; 1
    3764:	90 e0       	ldi	r25, 0x00	; 0
    3766:	9c 8b       	std	Y+20, r25	; 0x14
    3768:	8b 8b       	std	Y+19, r24	; 0x13
    376a:	3f c0       	rjmp	.+126    	; 0x37ea <HSSD_enDisplayNumber+0x412>
	else if (__tmp > 65535)
    376c:	6d 89       	ldd	r22, Y+21	; 0x15
    376e:	7e 89       	ldd	r23, Y+22	; 0x16
    3770:	8f 89       	ldd	r24, Y+23	; 0x17
    3772:	98 8d       	ldd	r25, Y+24	; 0x18
    3774:	20 e0       	ldi	r18, 0x00	; 0
    3776:	3f ef       	ldi	r19, 0xFF	; 255
    3778:	4f e7       	ldi	r20, 0x7F	; 127
    377a:	57 e4       	ldi	r21, 0x47	; 71
    377c:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    3780:	18 16       	cp	r1, r24
    3782:	4c f5       	brge	.+82     	; 0x37d6 <HSSD_enDisplayNumber+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3784:	69 8d       	ldd	r22, Y+25	; 0x19
    3786:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3788:	8b 8d       	ldd	r24, Y+27	; 0x1b
    378a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    378c:	20 e0       	ldi	r18, 0x00	; 0
    378e:	30 e0       	ldi	r19, 0x00	; 0
    3790:	40 e2       	ldi	r20, 0x20	; 32
    3792:	51 e4       	ldi	r21, 0x41	; 65
    3794:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    3798:	dc 01       	movw	r26, r24
    379a:	cb 01       	movw	r24, r22
    379c:	bc 01       	movw	r22, r24
    379e:	cd 01       	movw	r24, r26
    37a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37a4:	dc 01       	movw	r26, r24
    37a6:	cb 01       	movw	r24, r22
    37a8:	9c 8b       	std	Y+20, r25	; 0x14
    37aa:	8b 8b       	std	Y+19, r24	; 0x13
    37ac:	0f c0       	rjmp	.+30     	; 0x37cc <HSSD_enDisplayNumber+0x3f4>
    37ae:	80 e9       	ldi	r24, 0x90	; 144
    37b0:	91 e0       	ldi	r25, 0x01	; 1
    37b2:	9a 8b       	std	Y+18, r25	; 0x12
    37b4:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    37b6:	89 89       	ldd	r24, Y+17	; 0x11
    37b8:	9a 89       	ldd	r25, Y+18	; 0x12
    37ba:	01 97       	sbiw	r24, 0x01	; 1
    37bc:	f1 f7       	brne	.-4      	; 0x37ba <HSSD_enDisplayNumber+0x3e2>
    37be:	9a 8b       	std	Y+18, r25	; 0x12
    37c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37c2:	8b 89       	ldd	r24, Y+19	; 0x13
    37c4:	9c 89       	ldd	r25, Y+20	; 0x14
    37c6:	01 97       	sbiw	r24, 0x01	; 1
    37c8:	9c 8b       	std	Y+20, r25	; 0x14
    37ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37cc:	8b 89       	ldd	r24, Y+19	; 0x13
    37ce:	9c 89       	ldd	r25, Y+20	; 0x14
    37d0:	00 97       	sbiw	r24, 0x00	; 0
    37d2:	69 f7       	brne	.-38     	; 0x37ae <HSSD_enDisplayNumber+0x3d6>
    37d4:	14 c0       	rjmp	.+40     	; 0x37fe <HSSD_enDisplayNumber+0x426>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37d6:	6d 89       	ldd	r22, Y+21	; 0x15
    37d8:	7e 89       	ldd	r23, Y+22	; 0x16
    37da:	8f 89       	ldd	r24, Y+23	; 0x17
    37dc:	98 8d       	ldd	r25, Y+24	; 0x18
    37de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e2:	dc 01       	movw	r26, r24
    37e4:	cb 01       	movw	r24, r22
    37e6:	9c 8b       	std	Y+20, r25	; 0x14
    37e8:	8b 8b       	std	Y+19, r24	; 0x13
    37ea:	8b 89       	ldd	r24, Y+19	; 0x13
    37ec:	9c 89       	ldd	r25, Y+20	; 0x14
    37ee:	98 8b       	std	Y+16, r25	; 0x10
    37f0:	8f 87       	std	Y+15, r24	; 0x0f
    37f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    37f4:	98 89       	ldd	r25, Y+16	; 0x10
    37f6:	01 97       	sbiw	r24, 0x01	; 1
    37f8:	f1 f7       	brne	.-4      	; 0x37f6 <HSSD_enDisplayNumber+0x41e>
    37fa:	98 8b       	std	Y+16, r25	; 0x10
    37fc:	8f 87       	std	Y+15, r24	; 0x0f
//delay fo the digit to be on
_delay_ms(1);
//disable Dig1
MDIO_voidSetPinValue (HSSD_EN1_PIN , LOW);
    37fe:	84 e2       	ldi	r24, 0x24	; 36
    3800:	60 e0       	ldi	r22, 0x00	; 0
    3802:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
switch(Local_u8Tens)
    3806:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3808:	28 2f       	mov	r18, r24
    380a:	30 e0       	ldi	r19, 0x00	; 0
    380c:	3c a3       	std	Y+36, r19	; 0x24
    380e:	2b a3       	std	Y+35, r18	; 0x23
    3810:	8b a1       	ldd	r24, Y+35	; 0x23
    3812:	9c a1       	ldd	r25, Y+36	; 0x24
    3814:	84 30       	cpi	r24, 0x04	; 4
    3816:	91 05       	cpc	r25, r1
    3818:	09 f4       	brne	.+2      	; 0x381c <HSSD_enDisplayNumber+0x444>
    381a:	bb c0       	rjmp	.+374    	; 0x3992 <HSSD_enDisplayNumber+0x5ba>
    381c:	2b a1       	ldd	r18, Y+35	; 0x23
    381e:	3c a1       	ldd	r19, Y+36	; 0x24
    3820:	25 30       	cpi	r18, 0x05	; 5
    3822:	31 05       	cpc	r19, r1
    3824:	ec f4       	brge	.+58     	; 0x3860 <HSSD_enDisplayNumber+0x488>
    3826:	8b a1       	ldd	r24, Y+35	; 0x23
    3828:	9c a1       	ldd	r25, Y+36	; 0x24
    382a:	81 30       	cpi	r24, 0x01	; 1
    382c:	91 05       	cpc	r25, r1
    382e:	09 f4       	brne	.+2      	; 0x3832 <HSSD_enDisplayNumber+0x45a>
    3830:	59 c0       	rjmp	.+178    	; 0x38e4 <HSSD_enDisplayNumber+0x50c>
    3832:	2b a1       	ldd	r18, Y+35	; 0x23
    3834:	3c a1       	ldd	r19, Y+36	; 0x24
    3836:	22 30       	cpi	r18, 0x02	; 2
    3838:	31 05       	cpc	r19, r1
    383a:	2c f4       	brge	.+10     	; 0x3846 <HSSD_enDisplayNumber+0x46e>
    383c:	8b a1       	ldd	r24, Y+35	; 0x23
    383e:	9c a1       	ldd	r25, Y+36	; 0x24
    3840:	00 97       	sbiw	r24, 0x00	; 0
    3842:	99 f1       	breq	.+102    	; 0x38aa <HSSD_enDisplayNumber+0x4d2>
    3844:	53 c1       	rjmp	.+678    	; 0x3aec <HSSD_enDisplayNumber+0x714>
    3846:	2b a1       	ldd	r18, Y+35	; 0x23
    3848:	3c a1       	ldd	r19, Y+36	; 0x24
    384a:	22 30       	cpi	r18, 0x02	; 2
    384c:	31 05       	cpc	r19, r1
    384e:	09 f4       	brne	.+2      	; 0x3852 <HSSD_enDisplayNumber+0x47a>
    3850:	66 c0       	rjmp	.+204    	; 0x391e <HSSD_enDisplayNumber+0x546>
    3852:	8b a1       	ldd	r24, Y+35	; 0x23
    3854:	9c a1       	ldd	r25, Y+36	; 0x24
    3856:	83 30       	cpi	r24, 0x03	; 3
    3858:	91 05       	cpc	r25, r1
    385a:	09 f4       	brne	.+2      	; 0x385e <HSSD_enDisplayNumber+0x486>
    385c:	7d c0       	rjmp	.+250    	; 0x3958 <HSSD_enDisplayNumber+0x580>
    385e:	46 c1       	rjmp	.+652    	; 0x3aec <HSSD_enDisplayNumber+0x714>
    3860:	2b a1       	ldd	r18, Y+35	; 0x23
    3862:	3c a1       	ldd	r19, Y+36	; 0x24
    3864:	27 30       	cpi	r18, 0x07	; 7
    3866:	31 05       	cpc	r19, r1
    3868:	09 f4       	brne	.+2      	; 0x386c <HSSD_enDisplayNumber+0x494>
    386a:	ea c0       	rjmp	.+468    	; 0x3a40 <HSSD_enDisplayNumber+0x668>
    386c:	8b a1       	ldd	r24, Y+35	; 0x23
    386e:	9c a1       	ldd	r25, Y+36	; 0x24
    3870:	88 30       	cpi	r24, 0x08	; 8
    3872:	91 05       	cpc	r25, r1
    3874:	6c f4       	brge	.+26     	; 0x3890 <HSSD_enDisplayNumber+0x4b8>
    3876:	2b a1       	ldd	r18, Y+35	; 0x23
    3878:	3c a1       	ldd	r19, Y+36	; 0x24
    387a:	25 30       	cpi	r18, 0x05	; 5
    387c:	31 05       	cpc	r19, r1
    387e:	09 f4       	brne	.+2      	; 0x3882 <HSSD_enDisplayNumber+0x4aa>
    3880:	a5 c0       	rjmp	.+330    	; 0x39cc <HSSD_enDisplayNumber+0x5f4>
    3882:	8b a1       	ldd	r24, Y+35	; 0x23
    3884:	9c a1       	ldd	r25, Y+36	; 0x24
    3886:	86 30       	cpi	r24, 0x06	; 6
    3888:	91 05       	cpc	r25, r1
    388a:	09 f4       	brne	.+2      	; 0x388e <HSSD_enDisplayNumber+0x4b6>
    388c:	bc c0       	rjmp	.+376    	; 0x3a06 <HSSD_enDisplayNumber+0x62e>
    388e:	2e c1       	rjmp	.+604    	; 0x3aec <HSSD_enDisplayNumber+0x714>
    3890:	2b a1       	ldd	r18, Y+35	; 0x23
    3892:	3c a1       	ldd	r19, Y+36	; 0x24
    3894:	28 30       	cpi	r18, 0x08	; 8
    3896:	31 05       	cpc	r19, r1
    3898:	09 f4       	brne	.+2      	; 0x389c <HSSD_enDisplayNumber+0x4c4>
    389a:	ef c0       	rjmp	.+478    	; 0x3a7a <HSSD_enDisplayNumber+0x6a2>
    389c:	8b a1       	ldd	r24, Y+35	; 0x23
    389e:	9c a1       	ldd	r25, Y+36	; 0x24
    38a0:	89 30       	cpi	r24, 0x09	; 9
    38a2:	91 05       	cpc	r25, r1
    38a4:	09 f4       	brne	.+2      	; 0x38a8 <HSSD_enDisplayNumber+0x4d0>
    38a6:	06 c1       	rjmp	.+524    	; 0x3ab4 <HSSD_enDisplayNumber+0x6dc>
    38a8:	21 c1       	rjmp	.+578    	; 0x3aec <HSSD_enDisplayNumber+0x714>
{
case 0:
	MDIO_voidSetPinValue(HSSD_LED_A_PIN,HIGH);
    38aa:	8b e0       	ldi	r24, 0x0B	; 11
    38ac:	61 e0       	ldi	r22, 0x01	; 1
    38ae:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_B_PIN,HIGH);
    38b2:	8c e0       	ldi	r24, 0x0C	; 12
    38b4:	61 e0       	ldi	r22, 0x01	; 1
    38b6:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_C_PIN,HIGH);
    38ba:	8d e0       	ldi	r24, 0x0D	; 13
    38bc:	61 e0       	ldi	r22, 0x01	; 1
    38be:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_D_PIN,HIGH);
    38c2:	8e e0       	ldi	r24, 0x0E	; 14
    38c4:	61 e0       	ldi	r22, 0x01	; 1
    38c6:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_E_PIN,HIGH);
    38ca:	8f e0       	ldi	r24, 0x0F	; 15
    38cc:	61 e0       	ldi	r22, 0x01	; 1
    38ce:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_F_PIN,HIGH);
    38d2:	80 e1       	ldi	r24, 0x10	; 16
    38d4:	61 e0       	ldi	r22, 0x01	; 1
    38d6:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_G_PIN,LOW);
    38da:	81 e1       	ldi	r24, 0x11	; 17
    38dc:	60 e0       	ldi	r22, 0x00	; 0
    38de:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
    38e2:	04 c1       	rjmp	.+520    	; 0x3aec <HSSD_enDisplayNumber+0x714>
	break;
case 1:
	MDIO_voidSetPinValue(HSSD_LED_A_PIN,LOW);
    38e4:	8b e0       	ldi	r24, 0x0B	; 11
    38e6:	60 e0       	ldi	r22, 0x00	; 0
    38e8:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_B_PIN,HIGH);
    38ec:	8c e0       	ldi	r24, 0x0C	; 12
    38ee:	61 e0       	ldi	r22, 0x01	; 1
    38f0:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_C_PIN,HIGH);
    38f4:	8d e0       	ldi	r24, 0x0D	; 13
    38f6:	61 e0       	ldi	r22, 0x01	; 1
    38f8:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_D_PIN,LOW);
    38fc:	8e e0       	ldi	r24, 0x0E	; 14
    38fe:	60 e0       	ldi	r22, 0x00	; 0
    3900:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_E_PIN,LOW);
    3904:	8f e0       	ldi	r24, 0x0F	; 15
    3906:	60 e0       	ldi	r22, 0x00	; 0
    3908:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_F_PIN,LOW);
    390c:	80 e1       	ldi	r24, 0x10	; 16
    390e:	60 e0       	ldi	r22, 0x00	; 0
    3910:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_G_PIN,LOW);
    3914:	81 e1       	ldi	r24, 0x11	; 17
    3916:	60 e0       	ldi	r22, 0x00	; 0
    3918:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
    391c:	e7 c0       	rjmp	.+462    	; 0x3aec <HSSD_enDisplayNumber+0x714>
	break;
case 2:
	MDIO_voidSetPinValue(HSSD_LED_A_PIN,HIGH);
    391e:	8b e0       	ldi	r24, 0x0B	; 11
    3920:	61 e0       	ldi	r22, 0x01	; 1
    3922:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(HSSD_LED_B_PIN,HIGH);
    3926:	8c e0       	ldi	r24, 0x0C	; 12
    3928:	61 e0       	ldi	r22, 0x01	; 1
    392a:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(HSSD_LED_C_PIN,LOW);
    392e:	8d e0       	ldi	r24, 0x0D	; 13
    3930:	60 e0       	ldi	r22, 0x00	; 0
    3932:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(HSSD_LED_D_PIN,HIGH);
    3936:	8e e0       	ldi	r24, 0x0E	; 14
    3938:	61 e0       	ldi	r22, 0x01	; 1
    393a:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(HSSD_LED_E_PIN,HIGH);
    393e:	8f e0       	ldi	r24, 0x0F	; 15
    3940:	61 e0       	ldi	r22, 0x01	; 1
    3942:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(HSSD_LED_F_PIN,LOW);
    3946:	80 e1       	ldi	r24, 0x10	; 16
    3948:	60 e0       	ldi	r22, 0x00	; 0
    394a:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(HSSD_LED_G_PIN,HIGH);
    394e:	81 e1       	ldi	r24, 0x11	; 17
    3950:	61 e0       	ldi	r22, 0x01	; 1
    3952:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
    3956:	ca c0       	rjmp	.+404    	; 0x3aec <HSSD_enDisplayNumber+0x714>
	break;
case 3:
			MDIO_voidSetPinValue(HSSD_LED_A_PIN,HIGH);
    3958:	8b e0       	ldi	r24, 0x0B	; 11
    395a:	61 e0       	ldi	r22, 0x01	; 1
    395c:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(HSSD_LED_B_PIN,HIGH);
    3960:	8c e0       	ldi	r24, 0x0C	; 12
    3962:	61 e0       	ldi	r22, 0x01	; 1
    3964:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(HSSD_LED_C_PIN,HIGH);
    3968:	8d e0       	ldi	r24, 0x0D	; 13
    396a:	61 e0       	ldi	r22, 0x01	; 1
    396c:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(HSSD_LED_D_PIN,HIGH);
    3970:	8e e0       	ldi	r24, 0x0E	; 14
    3972:	61 e0       	ldi	r22, 0x01	; 1
    3974:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(HSSD_LED_E_PIN,LOW);
    3978:	8f e0       	ldi	r24, 0x0F	; 15
    397a:	60 e0       	ldi	r22, 0x00	; 0
    397c:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(HSSD_LED_F_PIN,LOW);
    3980:	80 e1       	ldi	r24, 0x10	; 16
    3982:	60 e0       	ldi	r22, 0x00	; 0
    3984:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(HSSD_LED_G_PIN,HIGH);
    3988:	81 e1       	ldi	r24, 0x11	; 17
    398a:	61 e0       	ldi	r22, 0x01	; 1
    398c:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
    3990:	ad c0       	rjmp	.+346    	; 0x3aec <HSSD_enDisplayNumber+0x714>
	break;
case 4:
	MDIO_voidSetPinValue(HSSD_LED_A_PIN,LOW);
    3992:	8b e0       	ldi	r24, 0x0B	; 11
    3994:	60 e0       	ldi	r22, 0x00	; 0
    3996:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_B_PIN,HIGH);
    399a:	8c e0       	ldi	r24, 0x0C	; 12
    399c:	61 e0       	ldi	r22, 0x01	; 1
    399e:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_C_PIN,HIGH);
    39a2:	8d e0       	ldi	r24, 0x0D	; 13
    39a4:	61 e0       	ldi	r22, 0x01	; 1
    39a6:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_D_PIN,LOW);
    39aa:	8e e0       	ldi	r24, 0x0E	; 14
    39ac:	60 e0       	ldi	r22, 0x00	; 0
    39ae:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_E_PIN,LOW);
    39b2:	8f e0       	ldi	r24, 0x0F	; 15
    39b4:	60 e0       	ldi	r22, 0x00	; 0
    39b6:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_F_PIN,HIGH);
    39ba:	80 e1       	ldi	r24, 0x10	; 16
    39bc:	61 e0       	ldi	r22, 0x01	; 1
    39be:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_G_PIN,HIGH);
    39c2:	81 e1       	ldi	r24, 0x11	; 17
    39c4:	61 e0       	ldi	r22, 0x01	; 1
    39c6:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
    39ca:	90 c0       	rjmp	.+288    	; 0x3aec <HSSD_enDisplayNumber+0x714>
	break;
case 5:
	MDIO_voidSetPinValue(HSSD_LED_A_PIN,HIGH);
    39cc:	8b e0       	ldi	r24, 0x0B	; 11
    39ce:	61 e0       	ldi	r22, 0x01	; 1
    39d0:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_B_PIN,LOW);
    39d4:	8c e0       	ldi	r24, 0x0C	; 12
    39d6:	60 e0       	ldi	r22, 0x00	; 0
    39d8:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_C_PIN,HIGH);
    39dc:	8d e0       	ldi	r24, 0x0D	; 13
    39de:	61 e0       	ldi	r22, 0x01	; 1
    39e0:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_D_PIN,HIGH);
    39e4:	8e e0       	ldi	r24, 0x0E	; 14
    39e6:	61 e0       	ldi	r22, 0x01	; 1
    39e8:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_E_PIN,LOW);
    39ec:	8f e0       	ldi	r24, 0x0F	; 15
    39ee:	60 e0       	ldi	r22, 0x00	; 0
    39f0:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_F_PIN,HIGH);
    39f4:	80 e1       	ldi	r24, 0x10	; 16
    39f6:	61 e0       	ldi	r22, 0x01	; 1
    39f8:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_G_PIN,HIGH);
    39fc:	81 e1       	ldi	r24, 0x11	; 17
    39fe:	61 e0       	ldi	r22, 0x01	; 1
    3a00:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
    3a04:	73 c0       	rjmp	.+230    	; 0x3aec <HSSD_enDisplayNumber+0x714>
	break;
case 6:
	MDIO_voidSetPinValue(HSSD_LED_A_PIN,HIGH);
    3a06:	8b e0       	ldi	r24, 0x0B	; 11
    3a08:	61 e0       	ldi	r22, 0x01	; 1
    3a0a:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_B_PIN,LOW);
    3a0e:	8c e0       	ldi	r24, 0x0C	; 12
    3a10:	60 e0       	ldi	r22, 0x00	; 0
    3a12:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_C_PIN,HIGH);
    3a16:	8d e0       	ldi	r24, 0x0D	; 13
    3a18:	61 e0       	ldi	r22, 0x01	; 1
    3a1a:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_D_PIN,HIGH);
    3a1e:	8e e0       	ldi	r24, 0x0E	; 14
    3a20:	61 e0       	ldi	r22, 0x01	; 1
    3a22:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_E_PIN,HIGH);
    3a26:	8f e0       	ldi	r24, 0x0F	; 15
    3a28:	61 e0       	ldi	r22, 0x01	; 1
    3a2a:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_F_PIN,HIGH);
    3a2e:	80 e1       	ldi	r24, 0x10	; 16
    3a30:	61 e0       	ldi	r22, 0x01	; 1
    3a32:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_G_PIN,HIGH);
    3a36:	81 e1       	ldi	r24, 0x11	; 17
    3a38:	61 e0       	ldi	r22, 0x01	; 1
    3a3a:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
    3a3e:	56 c0       	rjmp	.+172    	; 0x3aec <HSSD_enDisplayNumber+0x714>
	break;
case 7:
	MDIO_voidSetPinValue(HSSD_LED_A_PIN,HIGH);
    3a40:	8b e0       	ldi	r24, 0x0B	; 11
    3a42:	61 e0       	ldi	r22, 0x01	; 1
    3a44:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_B_PIN,HIGH);
    3a48:	8c e0       	ldi	r24, 0x0C	; 12
    3a4a:	61 e0       	ldi	r22, 0x01	; 1
    3a4c:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_C_PIN,HIGH);
    3a50:	8d e0       	ldi	r24, 0x0D	; 13
    3a52:	61 e0       	ldi	r22, 0x01	; 1
    3a54:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_D_PIN,LOW);
    3a58:	8e e0       	ldi	r24, 0x0E	; 14
    3a5a:	60 e0       	ldi	r22, 0x00	; 0
    3a5c:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_E_PIN,LOW);
    3a60:	8f e0       	ldi	r24, 0x0F	; 15
    3a62:	60 e0       	ldi	r22, 0x00	; 0
    3a64:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_F_PIN,LOW);
    3a68:	80 e1       	ldi	r24, 0x10	; 16
    3a6a:	60 e0       	ldi	r22, 0x00	; 0
    3a6c:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_G_PIN,LOW);
    3a70:	81 e1       	ldi	r24, 0x11	; 17
    3a72:	60 e0       	ldi	r22, 0x00	; 0
    3a74:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
    3a78:	39 c0       	rjmp	.+114    	; 0x3aec <HSSD_enDisplayNumber+0x714>
	break;
case 8:
	MDIO_voidSetPinValue(HSSD_LED_A_PIN,HIGH);
    3a7a:	8b e0       	ldi	r24, 0x0B	; 11
    3a7c:	61 e0       	ldi	r22, 0x01	; 1
    3a7e:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_B_PIN,HIGH);
    3a82:	8c e0       	ldi	r24, 0x0C	; 12
    3a84:	61 e0       	ldi	r22, 0x01	; 1
    3a86:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_C_PIN,HIGH);
    3a8a:	8d e0       	ldi	r24, 0x0D	; 13
    3a8c:	61 e0       	ldi	r22, 0x01	; 1
    3a8e:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_D_PIN,HIGH);
    3a92:	8e e0       	ldi	r24, 0x0E	; 14
    3a94:	61 e0       	ldi	r22, 0x01	; 1
    3a96:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_E_PIN,HIGH);
    3a9a:	8f e0       	ldi	r24, 0x0F	; 15
    3a9c:	61 e0       	ldi	r22, 0x01	; 1
    3a9e:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_F_PIN,HIGH);
    3aa2:	80 e1       	ldi	r24, 0x10	; 16
    3aa4:	61 e0       	ldi	r22, 0x01	; 1
    3aa6:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_G_PIN,HIGH);
    3aaa:	81 e1       	ldi	r24, 0x11	; 17
    3aac:	61 e0       	ldi	r22, 0x01	; 1
    3aae:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
    3ab2:	1c c0       	rjmp	.+56     	; 0x3aec <HSSD_enDisplayNumber+0x714>
	break;
case 9:
	MDIO_voidSetPinValue(HSSD_LED_A_PIN,HIGH);
    3ab4:	8b e0       	ldi	r24, 0x0B	; 11
    3ab6:	61 e0       	ldi	r22, 0x01	; 1
    3ab8:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_B_PIN,HIGH);
    3abc:	8c e0       	ldi	r24, 0x0C	; 12
    3abe:	61 e0       	ldi	r22, 0x01	; 1
    3ac0:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_C_PIN,HIGH);
    3ac4:	8d e0       	ldi	r24, 0x0D	; 13
    3ac6:	61 e0       	ldi	r22, 0x01	; 1
    3ac8:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_D_PIN,HIGH);
    3acc:	8e e0       	ldi	r24, 0x0E	; 14
    3ace:	61 e0       	ldi	r22, 0x01	; 1
    3ad0:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_E_PIN,LOW);
    3ad4:	8f e0       	ldi	r24, 0x0F	; 15
    3ad6:	60 e0       	ldi	r22, 0x00	; 0
    3ad8:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_F_PIN,HIGH);
    3adc:	80 e1       	ldi	r24, 0x10	; 16
    3ade:	61 e0       	ldi	r22, 0x01	; 1
    3ae0:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_G_PIN,HIGH);
    3ae4:	81 e1       	ldi	r24, 0x11	; 17
    3ae6:	61 e0       	ldi	r22, 0x01	; 1
    3ae8:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	break;
}//end switch
//Enable Dig2
MDIO_voidSetPinValue (HSSD_EN2_PIN ,HIGH);
    3aec:	85 e2       	ldi	r24, 0x25	; 37
    3aee:	61 e0       	ldi	r22, 0x01	; 1
    3af0:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
//Disable Gig1
MDIO_voidSetPinValue (HSSD_EN1_PIN ,LOW);
    3af4:	84 e2       	ldi	r24, 0x24	; 36
    3af6:	60 e0       	ldi	r22, 0x00	; 0
    3af8:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
    3afc:	80 e0       	ldi	r24, 0x00	; 0
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	a0 e8       	ldi	r26, 0x80	; 128
    3b02:	bf e3       	ldi	r27, 0x3F	; 63
    3b04:	8b 87       	std	Y+11, r24	; 0x0b
    3b06:	9c 87       	std	Y+12, r25	; 0x0c
    3b08:	ad 87       	std	Y+13, r26	; 0x0d
    3b0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b10:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b12:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b14:	20 e0       	ldi	r18, 0x00	; 0
    3b16:	30 e0       	ldi	r19, 0x00	; 0
    3b18:	4a e7       	ldi	r20, 0x7A	; 122
    3b1a:	55 e4       	ldi	r21, 0x45	; 69
    3b1c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    3b20:	dc 01       	movw	r26, r24
    3b22:	cb 01       	movw	r24, r22
    3b24:	8f 83       	std	Y+7, r24	; 0x07
    3b26:	98 87       	std	Y+8, r25	; 0x08
    3b28:	a9 87       	std	Y+9, r26	; 0x09
    3b2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b2c:	6f 81       	ldd	r22, Y+7	; 0x07
    3b2e:	78 85       	ldd	r23, Y+8	; 0x08
    3b30:	89 85       	ldd	r24, Y+9	; 0x09
    3b32:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b34:	20 e0       	ldi	r18, 0x00	; 0
    3b36:	30 e0       	ldi	r19, 0x00	; 0
    3b38:	40 e8       	ldi	r20, 0x80	; 128
    3b3a:	5f e3       	ldi	r21, 0x3F	; 63
    3b3c:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    3b40:	88 23       	and	r24, r24
    3b42:	2c f4       	brge	.+10     	; 0x3b4e <HSSD_enDisplayNumber+0x776>
		__ticks = 1;
    3b44:	81 e0       	ldi	r24, 0x01	; 1
    3b46:	90 e0       	ldi	r25, 0x00	; 0
    3b48:	9e 83       	std	Y+6, r25	; 0x06
    3b4a:	8d 83       	std	Y+5, r24	; 0x05
    3b4c:	3f c0       	rjmp	.+126    	; 0x3bcc <HSSD_enDisplayNumber+0x7f4>
	else if (__tmp > 65535)
    3b4e:	6f 81       	ldd	r22, Y+7	; 0x07
    3b50:	78 85       	ldd	r23, Y+8	; 0x08
    3b52:	89 85       	ldd	r24, Y+9	; 0x09
    3b54:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b56:	20 e0       	ldi	r18, 0x00	; 0
    3b58:	3f ef       	ldi	r19, 0xFF	; 255
    3b5a:	4f e7       	ldi	r20, 0x7F	; 127
    3b5c:	57 e4       	ldi	r21, 0x47	; 71
    3b5e:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    3b62:	18 16       	cp	r1, r24
    3b64:	4c f5       	brge	.+82     	; 0x3bb8 <HSSD_enDisplayNumber+0x7e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b66:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b68:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b6e:	20 e0       	ldi	r18, 0x00	; 0
    3b70:	30 e0       	ldi	r19, 0x00	; 0
    3b72:	40 e2       	ldi	r20, 0x20	; 32
    3b74:	51 e4       	ldi	r21, 0x41	; 65
    3b76:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    3b7a:	dc 01       	movw	r26, r24
    3b7c:	cb 01       	movw	r24, r22
    3b7e:	bc 01       	movw	r22, r24
    3b80:	cd 01       	movw	r24, r26
    3b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b86:	dc 01       	movw	r26, r24
    3b88:	cb 01       	movw	r24, r22
    3b8a:	9e 83       	std	Y+6, r25	; 0x06
    3b8c:	8d 83       	std	Y+5, r24	; 0x05
    3b8e:	0f c0       	rjmp	.+30     	; 0x3bae <HSSD_enDisplayNumber+0x7d6>
    3b90:	80 e9       	ldi	r24, 0x90	; 144
    3b92:	91 e0       	ldi	r25, 0x01	; 1
    3b94:	9c 83       	std	Y+4, r25	; 0x04
    3b96:	8b 83       	std	Y+3, r24	; 0x03
    3b98:	8b 81       	ldd	r24, Y+3	; 0x03
    3b9a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b9c:	01 97       	sbiw	r24, 0x01	; 1
    3b9e:	f1 f7       	brne	.-4      	; 0x3b9c <HSSD_enDisplayNumber+0x7c4>
    3ba0:	9c 83       	std	Y+4, r25	; 0x04
    3ba2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ba4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ba6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ba8:	01 97       	sbiw	r24, 0x01	; 1
    3baa:	9e 83       	std	Y+6, r25	; 0x06
    3bac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bae:	8d 81       	ldd	r24, Y+5	; 0x05
    3bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    3bb2:	00 97       	sbiw	r24, 0x00	; 0
    3bb4:	69 f7       	brne	.-38     	; 0x3b90 <HSSD_enDisplayNumber+0x7b8>
    3bb6:	14 c0       	rjmp	.+40     	; 0x3be0 <HSSD_enDisplayNumber+0x808>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bb8:	6f 81       	ldd	r22, Y+7	; 0x07
    3bba:	78 85       	ldd	r23, Y+8	; 0x08
    3bbc:	89 85       	ldd	r24, Y+9	; 0x09
    3bbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bc4:	dc 01       	movw	r26, r24
    3bc6:	cb 01       	movw	r24, r22
    3bc8:	9e 83       	std	Y+6, r25	; 0x06
    3bca:	8d 83       	std	Y+5, r24	; 0x05
    3bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    3bce:	9e 81       	ldd	r25, Y+6	; 0x06
    3bd0:	9a 83       	std	Y+2, r25	; 0x02
    3bd2:	89 83       	std	Y+1, r24	; 0x01
    3bd4:	89 81       	ldd	r24, Y+1	; 0x01
    3bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    3bd8:	01 97       	sbiw	r24, 0x01	; 1
    3bda:	f1 f7       	brne	.-4      	; 0x3bd8 <HSSD_enDisplayNumber+0x800>
    3bdc:	9a 83       	std	Y+2, r25	; 0x02
    3bde:	89 83       	std	Y+1, r24	; 0x01
//delay fo the digit to be on
_delay_ms(1);
//disable Dig2
MDIO_voidSetPinValue (HSSD_EN2_PIN , LOW);
    3be0:	85 e2       	ldi	r24, 0x25	; 37
    3be2:	60 e0       	ldi	r22, 0x00	; 0
    3be4:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>

u8 Local_u8Units =copy_u8NUMBER %10;
u8 Local_u8Tens =copy_u8NUMBER /10;
MDIO_voidSetPinValue(HSSD_LED_DP_PIN,LOW);
u16 i;
for(i=0;i<HSSD_DISPLAY_TIME;i++)
    3be8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3bea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3bec:	01 96       	adiw	r24, 0x01	; 1
    3bee:	9e 8f       	std	Y+30, r25	; 0x1e
    3bf0:	8d 8f       	std	Y+29, r24	; 0x1d
    3bf2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3bf4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3bf6:	21 e0       	ldi	r18, 0x01	; 1
    3bf8:	84 3f       	cpi	r24, 0xF4	; 244
    3bfa:	92 07       	cpc	r25, r18
    3bfc:	08 f4       	brcc	.+2      	; 0x3c00 <HSSD_enDisplayNumber+0x828>
    3bfe:	12 cc       	rjmp	.-2012   	; 0x3424 <HSSD_enDisplayNumber+0x4c>
/*the foor loop is Important to see the out for the display time ,
	the function must do all proprties ,hence IF i called it before
 * the while(1) or the while 1 has many function ,it wont work well
*/
	}//end else
	return Local_enState;
    3c00:	89 a1       	ldd	r24, Y+33	; 0x21
}
    3c02:	a6 96       	adiw	r28, 0x26	; 38
    3c04:	0f b6       	in	r0, 0x3f	; 63
    3c06:	f8 94       	cli
    3c08:	de bf       	out	0x3e, r29	; 62
    3c0a:	0f be       	out	0x3f, r0	; 63
    3c0c:	cd bf       	out	0x3d, r28	; 61
    3c0e:	cf 91       	pop	r28
    3c10:	df 91       	pop	r29
    3c12:	08 95       	ret

00003c14 <HRELAY_enInit>:
#include "HRELAY_config.h"
#include "HRELAY_int.h"
#include "MDIO_int.h"

ErrorState_t HRELAY_enInit(void)
{
    3c14:	df 93       	push	r29
    3c16:	cf 93       	push	r28
    3c18:	cd b7       	in	r28, 0x3d	; 61
    3c1a:	de b7       	in	r29, 0x3e	; 62
MDIO_SetPinDirection(HRELAY_PIN,OUTPUT);
    3c1c:	84 e2       	ldi	r24, 0x24	; 36
    3c1e:	61 e0       	ldi	r22, 0x01	; 1
    3c20:	0e 94 de 11 	call	0x23bc	; 0x23bc <MDIO_SetPinDirection>
return SUCCES;
    3c24:	82 e0       	ldi	r24, 0x02	; 2
}
    3c26:	cf 91       	pop	r28
    3c28:	df 91       	pop	r29
    3c2a:	08 95       	ret

00003c2c <HRELAY_enOn>:
ErrorState_t HRELAY_enOn(void)
{
    3c2c:	df 93       	push	r29
    3c2e:	cf 93       	push	r28
    3c30:	cd b7       	in	r28, 0x3d	; 61
    3c32:	de b7       	in	r29, 0x3e	; 62
MDIO_voidSetPinValue(HRELAY_PIN, HIGH);
    3c34:	84 e2       	ldi	r24, 0x24	; 36
    3c36:	61 e0       	ldi	r22, 0x01	; 1
    3c38:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	return SUCCES;
    3c3c:	82 e0       	ldi	r24, 0x02	; 2
}
    3c3e:	cf 91       	pop	r28
    3c40:	df 91       	pop	r29
    3c42:	08 95       	ret

00003c44 <HRELAY_enOFF>:
ErrorState_t HRELAY_enOFF(void)
{
    3c44:	df 93       	push	r29
    3c46:	cf 93       	push	r28
    3c48:	cd b7       	in	r28, 0x3d	; 61
    3c4a:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue(HRELAY_PIN, LOW);
    3c4c:	84 e2       	ldi	r24, 0x24	; 36
    3c4e:	60 e0       	ldi	r22, 0x00	; 0
    3c50:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	return SUCCES;
    3c54:	82 e0       	ldi	r24, 0x02	; 2
}
    3c56:	cf 91       	pop	r28
    3c58:	df 91       	pop	r29
    3c5a:	08 95       	ret

00003c5c <HRELAY_enToggle>:
ErrorState_t HRELAY_enToggle(void)
{
    3c5c:	df 93       	push	r29
    3c5e:	cf 93       	push	r28
    3c60:	cd b7       	in	r28, 0x3d	; 61
    3c62:	de b7       	in	r29, 0x3e	; 62
MDIO_voidTogglePinValue(HRELAY_PIN);
    3c64:	84 e2       	ldi	r24, 0x24	; 36
    3c66:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <MDIO_voidTogglePinValue>
	return SUCCES;
    3c6a:	82 e0       	ldi	r24, 0x02	; 2
}
    3c6c:	cf 91       	pop	r28
    3c6e:	df 91       	pop	r29
    3c70:	08 95       	ret

00003c72 <HPB_enInit>:
#include  "HPB_priv.h"
#include "HPB_config.h"
#include "HPB_init.h"

 ErrorState_t HPB_enInit(PB_t * ptrPB)
{
    3c72:	df 93       	push	r29
    3c74:	cf 93       	push	r28
    3c76:	00 d0       	rcall	.+0      	; 0x3c78 <HPB_enInit+0x6>
    3c78:	0f 92       	push	r0
    3c7a:	cd b7       	in	r28, 0x3d	; 61
    3c7c:	de b7       	in	r29, 0x3e	; 62
    3c7e:	9b 83       	std	Y+3, r25	; 0x03
    3c80:	8a 83       	std	Y+2, r24	; 0x02
	 ErrorState_t Local_enState = SUCCES;
    3c82:	82 e0       	ldi	r24, 0x02	; 2
    3c84:	89 83       	std	Y+1, r24	; 0x01

MDIO_SetPinDirection(ptrPB->PushButtonPin , INPUT);
    3c86:	ea 81       	ldd	r30, Y+2	; 0x02
    3c88:	fb 81       	ldd	r31, Y+3	; 0x03
    3c8a:	81 81       	ldd	r24, Z+1	; 0x01
    3c8c:	60 e0       	ldi	r22, 0x00	; 0
    3c8e:	0e 94 de 11 	call	0x23bc	; 0x23bc <MDIO_SetPinDirection>

if(ptrPB->PushButtonID>=1&&ptrPB->PushButtonID<=4)
    3c92:	ea 81       	ldd	r30, Y+2	; 0x02
    3c94:	fb 81       	ldd	r31, Y+3	; 0x03
    3c96:	80 81       	ld	r24, Z
    3c98:	88 23       	and	r24, r24
    3c9a:	61 f0       	breq	.+24     	; 0x3cb4 <HPB_enInit+0x42>
    3c9c:	ea 81       	ldd	r30, Y+2	; 0x02
    3c9e:	fb 81       	ldd	r31, Y+3	; 0x03
    3ca0:	80 81       	ld	r24, Z
    3ca2:	85 30       	cpi	r24, 0x05	; 5
    3ca4:	38 f4       	brcc	.+14     	; 0x3cb4 <HPB_enInit+0x42>
{

#if(KIT_TYPE==SIM_KIT)
MDIO_voidSetPinValue(ptrPB->PushButtonPin, HIGH);
    3ca6:	ea 81       	ldd	r30, Y+2	; 0x02
    3ca8:	fb 81       	ldd	r31, Y+3	; 0x03
    3caa:	81 81       	ldd	r24, Z+1	; 0x01
    3cac:	61 e0       	ldi	r22, 0x01	; 1
    3cae:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
    3cb2:	02 c0       	rjmp	.+4      	; 0x3cb8 <HPB_enInit+0x46>

#endif
}//end if
else
{
 Local_enState = SUCCES;
    3cb4:	82 e0       	ldi	r24, 0x02	; 2
    3cb6:	89 83       	std	Y+1, r24	; 0x01
		}//end switcj


#endif*/

return Local_enState;
    3cb8:	89 81       	ldd	r24, Y+1	; 0x01
}//end init
    3cba:	0f 90       	pop	r0
    3cbc:	0f 90       	pop	r0
    3cbe:	0f 90       	pop	r0
    3cc0:	cf 91       	pop	r28
    3cc2:	df 91       	pop	r29
    3cc4:	08 95       	ret

00003cc6 <HPB_enRead>:

 ErrorState_t HPB_enRead(PB_t *ptrPB,PBState_t * ptrState)
{
    3cc6:	df 93       	push	r29
    3cc8:	cf 93       	push	r28
    3cca:	cd b7       	in	r28, 0x3d	; 61
    3ccc:	de b7       	in	r29, 0x3e	; 62
    3cce:	64 97       	sbiw	r28, 0x14	; 20
    3cd0:	0f b6       	in	r0, 0x3f	; 63
    3cd2:	f8 94       	cli
    3cd4:	de bf       	out	0x3e, r29	; 62
    3cd6:	0f be       	out	0x3f, r0	; 63
    3cd8:	cd bf       	out	0x3d, r28	; 61
    3cda:	9a 8b       	std	Y+18, r25	; 0x12
    3cdc:	89 8b       	std	Y+17, r24	; 0x11
    3cde:	7c 8b       	std	Y+20, r23	; 0x14
    3ce0:	6b 8b       	std	Y+19, r22	; 0x13
	ErrorState_t Local_enState = SUCCES;
    3ce2:	82 e0       	ldi	r24, 0x02	; 2
    3ce4:	8f 87       	std	Y+15, r24	; 0x0f

	u8 Local_u8PinRead = PB_RELEASED;
    3ce6:	81 e0       	ldi	r24, 0x01	; 1
    3ce8:	88 8b       	std	Y+16, r24	; 0x10


			MDIO_voidGetPinValue(ptrPB->PushButtonPin,&Local_u8PinRead);
    3cea:	e9 89       	ldd	r30, Y+17	; 0x11
    3cec:	fa 89       	ldd	r31, Y+18	; 0x12
    3cee:	81 81       	ldd	r24, Z+1	; 0x01
    3cf0:	9e 01       	movw	r18, r28
    3cf2:	20 5f       	subi	r18, 0xF0	; 240
    3cf4:	3f 4f       	sbci	r19, 0xFF	; 255
    3cf6:	b9 01       	movw	r22, r18
    3cf8:	0e 94 66 14 	call	0x28cc	; 0x28cc <MDIO_voidGetPinValue>
			if(Local_u8PinRead==PB_PRESSED)
    3cfc:	88 89       	ldd	r24, Y+16	; 0x10
    3cfe:	88 23       	and	r24, r24
    3d00:	09 f0       	breq	.+2      	; 0x3d04 <HPB_enRead+0x3e>
    3d02:	94 c0       	rjmp	.+296    	; 0x3e2c <HPB_enRead+0x166>
    3d04:	80 e0       	ldi	r24, 0x00	; 0
    3d06:	90 e0       	ldi	r25, 0x00	; 0
    3d08:	a8 e4       	ldi	r26, 0x48	; 72
    3d0a:	b2 e4       	ldi	r27, 0x42	; 66
    3d0c:	8b 87       	std	Y+11, r24	; 0x0b
    3d0e:	9c 87       	std	Y+12, r25	; 0x0c
    3d10:	ad 87       	std	Y+13, r26	; 0x0d
    3d12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d14:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d16:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d18:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d1c:	20 e0       	ldi	r18, 0x00	; 0
    3d1e:	30 e0       	ldi	r19, 0x00	; 0
    3d20:	4a e7       	ldi	r20, 0x7A	; 122
    3d22:	55 e4       	ldi	r21, 0x45	; 69
    3d24:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    3d28:	dc 01       	movw	r26, r24
    3d2a:	cb 01       	movw	r24, r22
    3d2c:	8f 83       	std	Y+7, r24	; 0x07
    3d2e:	98 87       	std	Y+8, r25	; 0x08
    3d30:	a9 87       	std	Y+9, r26	; 0x09
    3d32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d34:	6f 81       	ldd	r22, Y+7	; 0x07
    3d36:	78 85       	ldd	r23, Y+8	; 0x08
    3d38:	89 85       	ldd	r24, Y+9	; 0x09
    3d3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d3c:	20 e0       	ldi	r18, 0x00	; 0
    3d3e:	30 e0       	ldi	r19, 0x00	; 0
    3d40:	40 e8       	ldi	r20, 0x80	; 128
    3d42:	5f e3       	ldi	r21, 0x3F	; 63
    3d44:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    3d48:	88 23       	and	r24, r24
    3d4a:	2c f4       	brge	.+10     	; 0x3d56 <HPB_enRead+0x90>
		__ticks = 1;
    3d4c:	81 e0       	ldi	r24, 0x01	; 1
    3d4e:	90 e0       	ldi	r25, 0x00	; 0
    3d50:	9e 83       	std	Y+6, r25	; 0x06
    3d52:	8d 83       	std	Y+5, r24	; 0x05
    3d54:	3f c0       	rjmp	.+126    	; 0x3dd4 <HPB_enRead+0x10e>
	else if (__tmp > 65535)
    3d56:	6f 81       	ldd	r22, Y+7	; 0x07
    3d58:	78 85       	ldd	r23, Y+8	; 0x08
    3d5a:	89 85       	ldd	r24, Y+9	; 0x09
    3d5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d5e:	20 e0       	ldi	r18, 0x00	; 0
    3d60:	3f ef       	ldi	r19, 0xFF	; 255
    3d62:	4f e7       	ldi	r20, 0x7F	; 127
    3d64:	57 e4       	ldi	r21, 0x47	; 71
    3d66:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    3d6a:	18 16       	cp	r1, r24
    3d6c:	4c f5       	brge	.+82     	; 0x3dc0 <HPB_enRead+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d70:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d72:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d74:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d76:	20 e0       	ldi	r18, 0x00	; 0
    3d78:	30 e0       	ldi	r19, 0x00	; 0
    3d7a:	40 e2       	ldi	r20, 0x20	; 32
    3d7c:	51 e4       	ldi	r21, 0x41	; 65
    3d7e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    3d82:	dc 01       	movw	r26, r24
    3d84:	cb 01       	movw	r24, r22
    3d86:	bc 01       	movw	r22, r24
    3d88:	cd 01       	movw	r24, r26
    3d8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d8e:	dc 01       	movw	r26, r24
    3d90:	cb 01       	movw	r24, r22
    3d92:	9e 83       	std	Y+6, r25	; 0x06
    3d94:	8d 83       	std	Y+5, r24	; 0x05
    3d96:	0f c0       	rjmp	.+30     	; 0x3db6 <HPB_enRead+0xf0>
    3d98:	80 e9       	ldi	r24, 0x90	; 144
    3d9a:	91 e0       	ldi	r25, 0x01	; 1
    3d9c:	9c 83       	std	Y+4, r25	; 0x04
    3d9e:	8b 83       	std	Y+3, r24	; 0x03
    3da0:	8b 81       	ldd	r24, Y+3	; 0x03
    3da2:	9c 81       	ldd	r25, Y+4	; 0x04
    3da4:	01 97       	sbiw	r24, 0x01	; 1
    3da6:	f1 f7       	brne	.-4      	; 0x3da4 <HPB_enRead+0xde>
    3da8:	9c 83       	std	Y+4, r25	; 0x04
    3daa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dac:	8d 81       	ldd	r24, Y+5	; 0x05
    3dae:	9e 81       	ldd	r25, Y+6	; 0x06
    3db0:	01 97       	sbiw	r24, 0x01	; 1
    3db2:	9e 83       	std	Y+6, r25	; 0x06
    3db4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3db6:	8d 81       	ldd	r24, Y+5	; 0x05
    3db8:	9e 81       	ldd	r25, Y+6	; 0x06
    3dba:	00 97       	sbiw	r24, 0x00	; 0
    3dbc:	69 f7       	brne	.-38     	; 0x3d98 <HPB_enRead+0xd2>
    3dbe:	14 c0       	rjmp	.+40     	; 0x3de8 <HPB_enRead+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dc0:	6f 81       	ldd	r22, Y+7	; 0x07
    3dc2:	78 85       	ldd	r23, Y+8	; 0x08
    3dc4:	89 85       	ldd	r24, Y+9	; 0x09
    3dc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dcc:	dc 01       	movw	r26, r24
    3dce:	cb 01       	movw	r24, r22
    3dd0:	9e 83       	std	Y+6, r25	; 0x06
    3dd2:	8d 83       	std	Y+5, r24	; 0x05
    3dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    3dd6:	9e 81       	ldd	r25, Y+6	; 0x06
    3dd8:	9a 83       	std	Y+2, r25	; 0x02
    3dda:	89 83       	std	Y+1, r24	; 0x01
    3ddc:	89 81       	ldd	r24, Y+1	; 0x01
    3dde:	9a 81       	ldd	r25, Y+2	; 0x02
    3de0:	01 97       	sbiw	r24, 0x01	; 1
    3de2:	f1 f7       	brne	.-4      	; 0x3de0 <HPB_enRead+0x11a>
    3de4:	9a 83       	std	Y+2, r25	; 0x02
    3de6:	89 83       	std	Y+1, r24	; 0x01
			{//for debpuncing
				_delay_ms(50);
				//socend read
				MDIO_voidGetPinValue(ptrPB->PushButtonPin,&Local_u8PinRead);
    3de8:	e9 89       	ldd	r30, Y+17	; 0x11
    3dea:	fa 89       	ldd	r31, Y+18	; 0x12
    3dec:	81 81       	ldd	r24, Z+1	; 0x01
    3dee:	9e 01       	movw	r18, r28
    3df0:	20 5f       	subi	r18, 0xF0	; 240
    3df2:	3f 4f       	sbci	r19, 0xFF	; 255
    3df4:	b9 01       	movw	r22, r18
    3df6:	0e 94 66 14 	call	0x28cc	; 0x28cc <MDIO_voidGetPinValue>
				if(Local_u8PinRead==PB_PRESSED)
    3dfa:	88 89       	ldd	r24, Y+16	; 0x10
    3dfc:	88 23       	and	r24, r24
    3dfe:	89 f4       	brne	.+34     	; 0x3e22 <HPB_enRead+0x15c>
    3e00:	09 c0       	rjmp	.+18     	; 0x3e14 <HPB_enRead+0x14e>
				{
					//for single press
					while(Local_u8PinRead==PB_PRESSED)
					{
						MDIO_voidGetPinValue(ptrPB->PushButtonPin,&Local_u8PinRead);
    3e02:	e9 89       	ldd	r30, Y+17	; 0x11
    3e04:	fa 89       	ldd	r31, Y+18	; 0x12
    3e06:	81 81       	ldd	r24, Z+1	; 0x01
    3e08:	9e 01       	movw	r18, r28
    3e0a:	20 5f       	subi	r18, 0xF0	; 240
    3e0c:	3f 4f       	sbci	r19, 0xFF	; 255
    3e0e:	b9 01       	movw	r22, r18
    3e10:	0e 94 66 14 	call	0x28cc	; 0x28cc <MDIO_voidGetPinValue>
				//socend read
				MDIO_voidGetPinValue(ptrPB->PushButtonPin,&Local_u8PinRead);
				if(Local_u8PinRead==PB_PRESSED)
				{
					//for single press
					while(Local_u8PinRead==PB_PRESSED)
    3e14:	88 89       	ldd	r24, Y+16	; 0x10
    3e16:	88 23       	and	r24, r24
    3e18:	a1 f3       	breq	.-24     	; 0x3e02 <HPB_enRead+0x13c>
					{
						MDIO_voidGetPinValue(ptrPB->PushButtonPin,&Local_u8PinRead);
						//check if the button is still pressed or not

					}//end while
					*ptrState=PB_PRESSED;
    3e1a:	eb 89       	ldd	r30, Y+19	; 0x13
    3e1c:	fc 89       	ldd	r31, Y+20	; 0x14
    3e1e:	10 82       	st	Z, r1
    3e20:	09 c0       	rjmp	.+18     	; 0x3e34 <HPB_enRead+0x16e>
				}//end if socend problem
				else
				{

					*ptrState=PB_RELEASED;
    3e22:	eb 89       	ldd	r30, Y+19	; 0x13
    3e24:	fc 89       	ldd	r31, Y+20	; 0x14
    3e26:	81 e0       	ldi	r24, 0x01	; 1
    3e28:	80 83       	st	Z, r24
    3e2a:	04 c0       	rjmp	.+8      	; 0x3e34 <HPB_enRead+0x16e>
				}
			}// end if debouncing
			else
							{

								*ptrState=PB_RELEASED;
    3e2c:	eb 89       	ldd	r30, Y+19	; 0x13
    3e2e:	fc 89       	ldd	r31, Y+20	; 0x14
    3e30:	81 e0       	ldi	r24, 0x01	; 1
    3e32:	80 83       	st	Z, r24
							}

		//Local_enState =OUT_OF_RANGE;


return Local_enState;
    3e34:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3e36:	64 96       	adiw	r28, 0x14	; 20
    3e38:	0f b6       	in	r0, 0x3f	; 63
    3e3a:	f8 94       	cli
    3e3c:	de bf       	out	0x3e, r29	; 62
    3e3e:	0f be       	out	0x3f, r0	; 63
    3e40:	cd bf       	out	0x3d, r28	; 61
    3e42:	cf 91       	pop	r28
    3e44:	df 91       	pop	r29
    3e46:	08 95       	ret

00003e48 <HLM35_enInit>:
#include "HLM35_config.h"
#include "HLM35_int.h"
#include "MADC_int.h"
#include "MDIO_int.h"
ErrorState_t HLM35_enInit(void)
{
    3e48:	df 93       	push	r29
    3e4a:	cf 93       	push	r28
    3e4c:	cd b7       	in	r28, 0x3d	; 61
    3e4e:	de b7       	in	r29, 0x3e	; 62

//step 1 set pin input
	MDIO_SetPinDirection(HLM35_PIN, INPUT);
    3e50:	8a e0       	ldi	r24, 0x0A	; 10
    3e52:	60 e0       	ldi	r22, 0x00	; 0
    3e54:	0e 94 de 11 	call	0x23bc	; 0x23bc <MDIO_SetPinDirection>
	//init adc
	M_ADC_void_Init(prescaler_128,vref_AVCC);
    3e58:	87 e0       	ldi	r24, 0x07	; 7
    3e5a:	61 e0       	ldi	r22, 0x01	; 1
    3e5c:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <M_ADC_void_Init>

	return SUCCES;
    3e60:	82 e0       	ldi	r24, 0x02	; 2

}
    3e62:	cf 91       	pop	r28
    3e64:	df 91       	pop	r29
    3e66:	08 95       	ret

00003e68 <HLM35_enTempRead>:
ErrorState_t HLM35_enTempRead(u8 *pTempValue)
{
    3e68:	df 93       	push	r29
    3e6a:	cf 93       	push	r28
    3e6c:	cd b7       	in	r28, 0x3d	; 61
    3e6e:	de b7       	in	r29, 0x3e	; 62
    3e70:	2a 97       	sbiw	r28, 0x0a	; 10
    3e72:	0f b6       	in	r0, 0x3f	; 63
    3e74:	f8 94       	cli
    3e76:	de bf       	out	0x3e, r29	; 62
    3e78:	0f be       	out	0x3f, r0	; 63
    3e7a:	cd bf       	out	0x3d, r28	; 61
    3e7c:	9a 87       	std	Y+10, r25	; 0x0a
    3e7e:	89 87       	std	Y+9, r24	; 0x09
	ErrorState_t Local_enState=SUCCES;
    3e80:	82 e0       	ldi	r24, 0x02	; 2
    3e82:	88 87       	std	Y+8, r24	; 0x08
	if(pTempValue !=NULL){
    3e84:	89 85       	ldd	r24, Y+9	; 0x09
    3e86:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e88:	00 97       	sbiw	r24, 0x00	; 0
    3e8a:	99 f1       	breq	.+102    	; 0x3ef2 <HLM35_enTempRead+0x8a>
u16 Local_ADC_DigitalValue;

Local_ADC_DigitalValue=M_ADC_u16_adcRead(HLM35_CHANNEL);
    3e8c:	80 e0       	ldi	r24, 0x00	; 0
    3e8e:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <M_ADC_u16_adcRead>
    3e92:	9f 83       	std	Y+7, r25	; 0x07
    3e94:	8e 83       	std	Y+6, r24	; 0x06


//convert
u32 Local_u32Readmv =((u32)Local_ADC_DigitalValue*5000)/1024;//DCA 5mV/resulution ==> value in mvolt
    3e96:	8e 81       	ldd	r24, Y+6	; 0x06
    3e98:	9f 81       	ldd	r25, Y+7	; 0x07
    3e9a:	cc 01       	movw	r24, r24
    3e9c:	a0 e0       	ldi	r26, 0x00	; 0
    3e9e:	b0 e0       	ldi	r27, 0x00	; 0
    3ea0:	28 e8       	ldi	r18, 0x88	; 136
    3ea2:	33 e1       	ldi	r19, 0x13	; 19
    3ea4:	40 e0       	ldi	r20, 0x00	; 0
    3ea6:	50 e0       	ldi	r21, 0x00	; 0
    3ea8:	bc 01       	movw	r22, r24
    3eaa:	cd 01       	movw	r24, r26
    3eac:	0e 94 01 3a 	call	0x7402	; 0x7402 <__mulsi3>
    3eb0:	dc 01       	movw	r26, r24
    3eb2:	cb 01       	movw	r24, r22
    3eb4:	07 2e       	mov	r0, r23
    3eb6:	7a e0       	ldi	r23, 0x0A	; 10
    3eb8:	b6 95       	lsr	r27
    3eba:	a7 95       	ror	r26
    3ebc:	97 95       	ror	r25
    3ebe:	87 95       	ror	r24
    3ec0:	7a 95       	dec	r23
    3ec2:	d1 f7       	brne	.-12     	; 0x3eb8 <HLM35_enTempRead+0x50>
    3ec4:	70 2d       	mov	r23, r0
    3ec6:	8a 83       	std	Y+2, r24	; 0x02
    3ec8:	9b 83       	std	Y+3, r25	; 0x03
    3eca:	ac 83       	std	Y+4, r26	; 0x04
    3ecc:	bd 83       	std	Y+5, r27	; 0x05
*pTempValue=Local_u32Readmv/10; //==>50mV =5 C
    3ece:	8a 81       	ldd	r24, Y+2	; 0x02
    3ed0:	9b 81       	ldd	r25, Y+3	; 0x03
    3ed2:	ac 81       	ldd	r26, Y+4	; 0x04
    3ed4:	bd 81       	ldd	r27, Y+5	; 0x05
    3ed6:	2a e0       	ldi	r18, 0x0A	; 10
    3ed8:	30 e0       	ldi	r19, 0x00	; 0
    3eda:	40 e0       	ldi	r20, 0x00	; 0
    3edc:	50 e0       	ldi	r21, 0x00	; 0
    3ede:	bc 01       	movw	r22, r24
    3ee0:	cd 01       	movw	r24, r26
    3ee2:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
    3ee6:	da 01       	movw	r26, r20
    3ee8:	c9 01       	movw	r24, r18
    3eea:	e9 85       	ldd	r30, Y+9	; 0x09
    3eec:	fa 85       	ldd	r31, Y+10	; 0x0a
    3eee:	80 83       	st	Z, r24
    3ef0:	02 c0       	rjmp	.+4      	; 0x3ef6 <HLM35_enTempRead+0x8e>

	}//end if
	else
	{
		ErrorState_t Local_enState=NULL_PTR_ERR;
    3ef2:	81 e0       	ldi	r24, 0x01	; 1
    3ef4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enState;
    3ef6:	88 85       	ldd	r24, Y+8	; 0x08
}
    3ef8:	2a 96       	adiw	r28, 0x0a	; 10
    3efa:	0f b6       	in	r0, 0x3f	; 63
    3efc:	f8 94       	cli
    3efe:	de bf       	out	0x3e, r29	; 62
    3f00:	0f be       	out	0x3f, r0	; 63
    3f02:	cd bf       	out	0x3d, r28	; 61
    3f04:	cf 91       	pop	r28
    3f06:	df 91       	pop	r29
    3f08:	08 95       	ret

00003f0a <HLCD_Init>:
#include "HLCD_config.h"
#include "HLCD_init.h"


ErrorState_t HLCD_Init(void)
{
    3f0a:	df 93       	push	r29
    3f0c:	cf 93       	push	r28
    3f0e:	cd b7       	in	r28, 0x3d	; 61
    3f10:	de b7       	in	r29, 0x3e	; 62
    3f12:	aa 97       	sbiw	r28, 0x2a	; 42
    3f14:	0f b6       	in	r0, 0x3f	; 63
    3f16:	f8 94       	cli
    3f18:	de bf       	out	0x3e, r29	; 62
    3f1a:	0f be       	out	0x3f, r0	; 63
    3f1c:	cd bf       	out	0x3d, r28	; 61
//set direction
MDIO_SetPinDirection(HLCD_RS_PIN, OUTPUT);
    3f1e:	8b e0       	ldi	r24, 0x0B	; 11
    3f20:	61 e0       	ldi	r22, 0x01	; 1
    3f22:	0e 94 de 11 	call	0x23bc	; 0x23bc <MDIO_SetPinDirection>
MDIO_SetPinDirection(HLCD_EN_PIN, OUTPUT);
    3f26:	8c e0       	ldi	r24, 0x0C	; 12
    3f28:	61 e0       	ldi	r22, 0x01	; 1
    3f2a:	0e 94 de 11 	call	0x23bc	; 0x23bc <MDIO_SetPinDirection>

MDIO_SetPinDirection(HLCD_D7_PIN, OUTPUT);
    3f2e:	80 e1       	ldi	r24, 0x10	; 16
    3f30:	61 e0       	ldi	r22, 0x01	; 1
    3f32:	0e 94 de 11 	call	0x23bc	; 0x23bc <MDIO_SetPinDirection>
MDIO_SetPinDirection(HLCD_D6_PIN, OUTPUT);
    3f36:	8f e0       	ldi	r24, 0x0F	; 15
    3f38:	61 e0       	ldi	r22, 0x01	; 1
    3f3a:	0e 94 de 11 	call	0x23bc	; 0x23bc <MDIO_SetPinDirection>
MDIO_SetPinDirection(HLCD_D5_PIN, OUTPUT);
    3f3e:	8e e0       	ldi	r24, 0x0E	; 14
    3f40:	61 e0       	ldi	r22, 0x01	; 1
    3f42:	0e 94 de 11 	call	0x23bc	; 0x23bc <MDIO_SetPinDirection>
MDIO_SetPinDirection(HLCD_D4_PIN, OUTPUT);
    3f46:	8d e0       	ldi	r24, 0x0D	; 13
    3f48:	61 e0       	ldi	r22, 0x01	; 1
    3f4a:	0e 94 de 11 	call	0x23bc	; 0x23bc <MDIO_SetPinDirection>
    3f4e:	80 e0       	ldi	r24, 0x00	; 0
    3f50:	90 e0       	ldi	r25, 0x00	; 0
    3f52:	ac e0       	ldi	r26, 0x0C	; 12
    3f54:	b2 e4       	ldi	r27, 0x42	; 66
    3f56:	8f a3       	std	Y+39, r24	; 0x27
    3f58:	98 a7       	std	Y+40, r25	; 0x28
    3f5a:	a9 a7       	std	Y+41, r26	; 0x29
    3f5c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f5e:	6f a1       	ldd	r22, Y+39	; 0x27
    3f60:	78 a5       	ldd	r23, Y+40	; 0x28
    3f62:	89 a5       	ldd	r24, Y+41	; 0x29
    3f64:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f66:	20 e0       	ldi	r18, 0x00	; 0
    3f68:	30 e0       	ldi	r19, 0x00	; 0
    3f6a:	4a e7       	ldi	r20, 0x7A	; 122
    3f6c:	55 e4       	ldi	r21, 0x45	; 69
    3f6e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    3f72:	dc 01       	movw	r26, r24
    3f74:	cb 01       	movw	r24, r22
    3f76:	8b a3       	std	Y+35, r24	; 0x23
    3f78:	9c a3       	std	Y+36, r25	; 0x24
    3f7a:	ad a3       	std	Y+37, r26	; 0x25
    3f7c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3f7e:	6b a1       	ldd	r22, Y+35	; 0x23
    3f80:	7c a1       	ldd	r23, Y+36	; 0x24
    3f82:	8d a1       	ldd	r24, Y+37	; 0x25
    3f84:	9e a1       	ldd	r25, Y+38	; 0x26
    3f86:	20 e0       	ldi	r18, 0x00	; 0
    3f88:	30 e0       	ldi	r19, 0x00	; 0
    3f8a:	40 e8       	ldi	r20, 0x80	; 128
    3f8c:	5f e3       	ldi	r21, 0x3F	; 63
    3f8e:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    3f92:	88 23       	and	r24, r24
    3f94:	2c f4       	brge	.+10     	; 0x3fa0 <HLCD_Init+0x96>
		__ticks = 1;
    3f96:	81 e0       	ldi	r24, 0x01	; 1
    3f98:	90 e0       	ldi	r25, 0x00	; 0
    3f9a:	9a a3       	std	Y+34, r25	; 0x22
    3f9c:	89 a3       	std	Y+33, r24	; 0x21
    3f9e:	3f c0       	rjmp	.+126    	; 0x401e <HLCD_Init+0x114>
	else if (__tmp > 65535)
    3fa0:	6b a1       	ldd	r22, Y+35	; 0x23
    3fa2:	7c a1       	ldd	r23, Y+36	; 0x24
    3fa4:	8d a1       	ldd	r24, Y+37	; 0x25
    3fa6:	9e a1       	ldd	r25, Y+38	; 0x26
    3fa8:	20 e0       	ldi	r18, 0x00	; 0
    3faa:	3f ef       	ldi	r19, 0xFF	; 255
    3fac:	4f e7       	ldi	r20, 0x7F	; 127
    3fae:	57 e4       	ldi	r21, 0x47	; 71
    3fb0:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    3fb4:	18 16       	cp	r1, r24
    3fb6:	4c f5       	brge	.+82     	; 0x400a <HLCD_Init+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fb8:	6f a1       	ldd	r22, Y+39	; 0x27
    3fba:	78 a5       	ldd	r23, Y+40	; 0x28
    3fbc:	89 a5       	ldd	r24, Y+41	; 0x29
    3fbe:	9a a5       	ldd	r25, Y+42	; 0x2a
    3fc0:	20 e0       	ldi	r18, 0x00	; 0
    3fc2:	30 e0       	ldi	r19, 0x00	; 0
    3fc4:	40 e2       	ldi	r20, 0x20	; 32
    3fc6:	51 e4       	ldi	r21, 0x41	; 65
    3fc8:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    3fcc:	dc 01       	movw	r26, r24
    3fce:	cb 01       	movw	r24, r22
    3fd0:	bc 01       	movw	r22, r24
    3fd2:	cd 01       	movw	r24, r26
    3fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fd8:	dc 01       	movw	r26, r24
    3fda:	cb 01       	movw	r24, r22
    3fdc:	9a a3       	std	Y+34, r25	; 0x22
    3fde:	89 a3       	std	Y+33, r24	; 0x21
    3fe0:	0f c0       	rjmp	.+30     	; 0x4000 <HLCD_Init+0xf6>
    3fe2:	80 e9       	ldi	r24, 0x90	; 144
    3fe4:	91 e0       	ldi	r25, 0x01	; 1
    3fe6:	98 a3       	std	Y+32, r25	; 0x20
    3fe8:	8f 8f       	std	Y+31, r24	; 0x1f
    3fea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3fec:	98 a1       	ldd	r25, Y+32	; 0x20
    3fee:	01 97       	sbiw	r24, 0x01	; 1
    3ff0:	f1 f7       	brne	.-4      	; 0x3fee <HLCD_Init+0xe4>
    3ff2:	98 a3       	std	Y+32, r25	; 0x20
    3ff4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ff6:	89 a1       	ldd	r24, Y+33	; 0x21
    3ff8:	9a a1       	ldd	r25, Y+34	; 0x22
    3ffa:	01 97       	sbiw	r24, 0x01	; 1
    3ffc:	9a a3       	std	Y+34, r25	; 0x22
    3ffe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4000:	89 a1       	ldd	r24, Y+33	; 0x21
    4002:	9a a1       	ldd	r25, Y+34	; 0x22
    4004:	00 97       	sbiw	r24, 0x00	; 0
    4006:	69 f7       	brne	.-38     	; 0x3fe2 <HLCD_Init+0xd8>
    4008:	14 c0       	rjmp	.+40     	; 0x4032 <HLCD_Init+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    400a:	6b a1       	ldd	r22, Y+35	; 0x23
    400c:	7c a1       	ldd	r23, Y+36	; 0x24
    400e:	8d a1       	ldd	r24, Y+37	; 0x25
    4010:	9e a1       	ldd	r25, Y+38	; 0x26
    4012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4016:	dc 01       	movw	r26, r24
    4018:	cb 01       	movw	r24, r22
    401a:	9a a3       	std	Y+34, r25	; 0x22
    401c:	89 a3       	std	Y+33, r24	; 0x21
    401e:	89 a1       	ldd	r24, Y+33	; 0x21
    4020:	9a a1       	ldd	r25, Y+34	; 0x22
    4022:	9e 8f       	std	Y+30, r25	; 0x1e
    4024:	8d 8f       	std	Y+29, r24	; 0x1d
    4026:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4028:	9e 8d       	ldd	r25, Y+30	; 0x1e
    402a:	01 97       	sbiw	r24, 0x01	; 1
    402c:	f1 f7       	brne	.-4      	; 0x402a <HLCD_Init+0x120>
    402e:	9e 8f       	std	Y+30, r25	; 0x1e
    4030:	8d 8f       	std	Y+29, r24	; 0x1d

HLCD_SendCommand(HLCD_FUNCTION_SET_8Bit_2Lines_5X7);
#elif (HLCD_MODE==_4BIT_)
_delay_ms(35);
//send 0010
MDIO_voidSetPinValue(HLCD_EN_PIN, LOW);
    4032:	8c e0       	ldi	r24, 0x0C	; 12
    4034:	60 e0       	ldi	r22, 0x00	; 0
    4036:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>

MDIO_voidSetPinValue(HLCD_D7_PIN, 0);
    403a:	80 e1       	ldi	r24, 0x10	; 16
    403c:	60 e0       	ldi	r22, 0x00	; 0
    403e:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
MDIO_voidSetPinValue(HLCD_D6_PIN, 0);
    4042:	8f e0       	ldi	r24, 0x0F	; 15
    4044:	60 e0       	ldi	r22, 0x00	; 0
    4046:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
MDIO_voidSetPinValue(HLCD_D5_PIN, 1);
    404a:	8e e0       	ldi	r24, 0x0E	; 14
    404c:	61 e0       	ldi	r22, 0x01	; 1
    404e:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
MDIO_voidSetPinValue(HLCD_D4_PIN, 0);
    4052:	8d e0       	ldi	r24, 0x0D	; 13
    4054:	60 e0       	ldi	r22, 0x00	; 0
    4056:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
MDIO_voidSetPinValue(HLCD_EN_PIN, HIGH);
    405a:	8c e0       	ldi	r24, 0x0C	; 12
    405c:	61 e0       	ldi	r22, 0x01	; 1
    405e:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
    4062:	80 e0       	ldi	r24, 0x00	; 0
    4064:	90 e0       	ldi	r25, 0x00	; 0
    4066:	a0 e8       	ldi	r26, 0x80	; 128
    4068:	bf e3       	ldi	r27, 0x3F	; 63
    406a:	89 8f       	std	Y+25, r24	; 0x19
    406c:	9a 8f       	std	Y+26, r25	; 0x1a
    406e:	ab 8f       	std	Y+27, r26	; 0x1b
    4070:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4072:	69 8d       	ldd	r22, Y+25	; 0x19
    4074:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4076:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4078:	9c 8d       	ldd	r25, Y+28	; 0x1c
    407a:	20 e0       	ldi	r18, 0x00	; 0
    407c:	30 e0       	ldi	r19, 0x00	; 0
    407e:	4a e7       	ldi	r20, 0x7A	; 122
    4080:	55 e4       	ldi	r21, 0x45	; 69
    4082:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    4086:	dc 01       	movw	r26, r24
    4088:	cb 01       	movw	r24, r22
    408a:	8d 8b       	std	Y+21, r24	; 0x15
    408c:	9e 8b       	std	Y+22, r25	; 0x16
    408e:	af 8b       	std	Y+23, r26	; 0x17
    4090:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4092:	6d 89       	ldd	r22, Y+21	; 0x15
    4094:	7e 89       	ldd	r23, Y+22	; 0x16
    4096:	8f 89       	ldd	r24, Y+23	; 0x17
    4098:	98 8d       	ldd	r25, Y+24	; 0x18
    409a:	20 e0       	ldi	r18, 0x00	; 0
    409c:	30 e0       	ldi	r19, 0x00	; 0
    409e:	40 e8       	ldi	r20, 0x80	; 128
    40a0:	5f e3       	ldi	r21, 0x3F	; 63
    40a2:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    40a6:	88 23       	and	r24, r24
    40a8:	2c f4       	brge	.+10     	; 0x40b4 <HLCD_Init+0x1aa>
		__ticks = 1;
    40aa:	81 e0       	ldi	r24, 0x01	; 1
    40ac:	90 e0       	ldi	r25, 0x00	; 0
    40ae:	9c 8b       	std	Y+20, r25	; 0x14
    40b0:	8b 8b       	std	Y+19, r24	; 0x13
    40b2:	3f c0       	rjmp	.+126    	; 0x4132 <HLCD_Init+0x228>
	else if (__tmp > 65535)
    40b4:	6d 89       	ldd	r22, Y+21	; 0x15
    40b6:	7e 89       	ldd	r23, Y+22	; 0x16
    40b8:	8f 89       	ldd	r24, Y+23	; 0x17
    40ba:	98 8d       	ldd	r25, Y+24	; 0x18
    40bc:	20 e0       	ldi	r18, 0x00	; 0
    40be:	3f ef       	ldi	r19, 0xFF	; 255
    40c0:	4f e7       	ldi	r20, 0x7F	; 127
    40c2:	57 e4       	ldi	r21, 0x47	; 71
    40c4:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    40c8:	18 16       	cp	r1, r24
    40ca:	4c f5       	brge	.+82     	; 0x411e <HLCD_Init+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40cc:	69 8d       	ldd	r22, Y+25	; 0x19
    40ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    40d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    40d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    40d4:	20 e0       	ldi	r18, 0x00	; 0
    40d6:	30 e0       	ldi	r19, 0x00	; 0
    40d8:	40 e2       	ldi	r20, 0x20	; 32
    40da:	51 e4       	ldi	r21, 0x41	; 65
    40dc:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    40e0:	dc 01       	movw	r26, r24
    40e2:	cb 01       	movw	r24, r22
    40e4:	bc 01       	movw	r22, r24
    40e6:	cd 01       	movw	r24, r26
    40e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ec:	dc 01       	movw	r26, r24
    40ee:	cb 01       	movw	r24, r22
    40f0:	9c 8b       	std	Y+20, r25	; 0x14
    40f2:	8b 8b       	std	Y+19, r24	; 0x13
    40f4:	0f c0       	rjmp	.+30     	; 0x4114 <HLCD_Init+0x20a>
    40f6:	80 e9       	ldi	r24, 0x90	; 144
    40f8:	91 e0       	ldi	r25, 0x01	; 1
    40fa:	9a 8b       	std	Y+18, r25	; 0x12
    40fc:	89 8b       	std	Y+17, r24	; 0x11
    40fe:	89 89       	ldd	r24, Y+17	; 0x11
    4100:	9a 89       	ldd	r25, Y+18	; 0x12
    4102:	01 97       	sbiw	r24, 0x01	; 1
    4104:	f1 f7       	brne	.-4      	; 0x4102 <HLCD_Init+0x1f8>
    4106:	9a 8b       	std	Y+18, r25	; 0x12
    4108:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    410a:	8b 89       	ldd	r24, Y+19	; 0x13
    410c:	9c 89       	ldd	r25, Y+20	; 0x14
    410e:	01 97       	sbiw	r24, 0x01	; 1
    4110:	9c 8b       	std	Y+20, r25	; 0x14
    4112:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4114:	8b 89       	ldd	r24, Y+19	; 0x13
    4116:	9c 89       	ldd	r25, Y+20	; 0x14
    4118:	00 97       	sbiw	r24, 0x00	; 0
    411a:	69 f7       	brne	.-38     	; 0x40f6 <HLCD_Init+0x1ec>
    411c:	14 c0       	rjmp	.+40     	; 0x4146 <HLCD_Init+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    411e:	6d 89       	ldd	r22, Y+21	; 0x15
    4120:	7e 89       	ldd	r23, Y+22	; 0x16
    4122:	8f 89       	ldd	r24, Y+23	; 0x17
    4124:	98 8d       	ldd	r25, Y+24	; 0x18
    4126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    412a:	dc 01       	movw	r26, r24
    412c:	cb 01       	movw	r24, r22
    412e:	9c 8b       	std	Y+20, r25	; 0x14
    4130:	8b 8b       	std	Y+19, r24	; 0x13
    4132:	8b 89       	ldd	r24, Y+19	; 0x13
    4134:	9c 89       	ldd	r25, Y+20	; 0x14
    4136:	98 8b       	std	Y+16, r25	; 0x10
    4138:	8f 87       	std	Y+15, r24	; 0x0f
    413a:	8f 85       	ldd	r24, Y+15	; 0x0f
    413c:	98 89       	ldd	r25, Y+16	; 0x10
    413e:	01 97       	sbiw	r24, 0x01	; 1
    4140:	f1 f7       	brne	.-4      	; 0x413e <HLCD_Init+0x234>
    4142:	98 8b       	std	Y+16, r25	; 0x10
    4144:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
	MDIO_voidSetPinValue(HLCD_EN_PIN, LOW);
    4146:	8c e0       	ldi	r24, 0x0C	; 12
    4148:	60 e0       	ldi	r22, 0x00	; 0
    414a:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
    414e:	80 e0       	ldi	r24, 0x00	; 0
    4150:	90 e0       	ldi	r25, 0x00	; 0
    4152:	a0 ef       	ldi	r26, 0xF0	; 240
    4154:	b1 e4       	ldi	r27, 0x41	; 65
    4156:	8b 87       	std	Y+11, r24	; 0x0b
    4158:	9c 87       	std	Y+12, r25	; 0x0c
    415a:	ad 87       	std	Y+13, r26	; 0x0d
    415c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    415e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4160:	7c 85       	ldd	r23, Y+12	; 0x0c
    4162:	8d 85       	ldd	r24, Y+13	; 0x0d
    4164:	9e 85       	ldd	r25, Y+14	; 0x0e
    4166:	20 e0       	ldi	r18, 0x00	; 0
    4168:	30 e0       	ldi	r19, 0x00	; 0
    416a:	4a e7       	ldi	r20, 0x7A	; 122
    416c:	55 e4       	ldi	r21, 0x45	; 69
    416e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    4172:	dc 01       	movw	r26, r24
    4174:	cb 01       	movw	r24, r22
    4176:	8f 83       	std	Y+7, r24	; 0x07
    4178:	98 87       	std	Y+8, r25	; 0x08
    417a:	a9 87       	std	Y+9, r26	; 0x09
    417c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    417e:	6f 81       	ldd	r22, Y+7	; 0x07
    4180:	78 85       	ldd	r23, Y+8	; 0x08
    4182:	89 85       	ldd	r24, Y+9	; 0x09
    4184:	9a 85       	ldd	r25, Y+10	; 0x0a
    4186:	20 e0       	ldi	r18, 0x00	; 0
    4188:	30 e0       	ldi	r19, 0x00	; 0
    418a:	40 e8       	ldi	r20, 0x80	; 128
    418c:	5f e3       	ldi	r21, 0x3F	; 63
    418e:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    4192:	88 23       	and	r24, r24
    4194:	2c f4       	brge	.+10     	; 0x41a0 <HLCD_Init+0x296>
		__ticks = 1;
    4196:	81 e0       	ldi	r24, 0x01	; 1
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	9e 83       	std	Y+6, r25	; 0x06
    419c:	8d 83       	std	Y+5, r24	; 0x05
    419e:	3f c0       	rjmp	.+126    	; 0x421e <HLCD_Init+0x314>
	else if (__tmp > 65535)
    41a0:	6f 81       	ldd	r22, Y+7	; 0x07
    41a2:	78 85       	ldd	r23, Y+8	; 0x08
    41a4:	89 85       	ldd	r24, Y+9	; 0x09
    41a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    41a8:	20 e0       	ldi	r18, 0x00	; 0
    41aa:	3f ef       	ldi	r19, 0xFF	; 255
    41ac:	4f e7       	ldi	r20, 0x7F	; 127
    41ae:	57 e4       	ldi	r21, 0x47	; 71
    41b0:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    41b4:	18 16       	cp	r1, r24
    41b6:	4c f5       	brge	.+82     	; 0x420a <HLCD_Init+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    41ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    41bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    41be:	9e 85       	ldd	r25, Y+14	; 0x0e
    41c0:	20 e0       	ldi	r18, 0x00	; 0
    41c2:	30 e0       	ldi	r19, 0x00	; 0
    41c4:	40 e2       	ldi	r20, 0x20	; 32
    41c6:	51 e4       	ldi	r21, 0x41	; 65
    41c8:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    41cc:	dc 01       	movw	r26, r24
    41ce:	cb 01       	movw	r24, r22
    41d0:	bc 01       	movw	r22, r24
    41d2:	cd 01       	movw	r24, r26
    41d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41d8:	dc 01       	movw	r26, r24
    41da:	cb 01       	movw	r24, r22
    41dc:	9e 83       	std	Y+6, r25	; 0x06
    41de:	8d 83       	std	Y+5, r24	; 0x05
    41e0:	0f c0       	rjmp	.+30     	; 0x4200 <HLCD_Init+0x2f6>
    41e2:	80 e9       	ldi	r24, 0x90	; 144
    41e4:	91 e0       	ldi	r25, 0x01	; 1
    41e6:	9c 83       	std	Y+4, r25	; 0x04
    41e8:	8b 83       	std	Y+3, r24	; 0x03
    41ea:	8b 81       	ldd	r24, Y+3	; 0x03
    41ec:	9c 81       	ldd	r25, Y+4	; 0x04
    41ee:	01 97       	sbiw	r24, 0x01	; 1
    41f0:	f1 f7       	brne	.-4      	; 0x41ee <HLCD_Init+0x2e4>
    41f2:	9c 83       	std	Y+4, r25	; 0x04
    41f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41f6:	8d 81       	ldd	r24, Y+5	; 0x05
    41f8:	9e 81       	ldd	r25, Y+6	; 0x06
    41fa:	01 97       	sbiw	r24, 0x01	; 1
    41fc:	9e 83       	std	Y+6, r25	; 0x06
    41fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4200:	8d 81       	ldd	r24, Y+5	; 0x05
    4202:	9e 81       	ldd	r25, Y+6	; 0x06
    4204:	00 97       	sbiw	r24, 0x00	; 0
    4206:	69 f7       	brne	.-38     	; 0x41e2 <HLCD_Init+0x2d8>
    4208:	14 c0       	rjmp	.+40     	; 0x4232 <HLCD_Init+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    420a:	6f 81       	ldd	r22, Y+7	; 0x07
    420c:	78 85       	ldd	r23, Y+8	; 0x08
    420e:	89 85       	ldd	r24, Y+9	; 0x09
    4210:	9a 85       	ldd	r25, Y+10	; 0x0a
    4212:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4216:	dc 01       	movw	r26, r24
    4218:	cb 01       	movw	r24, r22
    421a:	9e 83       	std	Y+6, r25	; 0x06
    421c:	8d 83       	std	Y+5, r24	; 0x05
    421e:	8d 81       	ldd	r24, Y+5	; 0x05
    4220:	9e 81       	ldd	r25, Y+6	; 0x06
    4222:	9a 83       	std	Y+2, r25	; 0x02
    4224:	89 83       	std	Y+1, r24	; 0x01
    4226:	89 81       	ldd	r24, Y+1	; 0x01
    4228:	9a 81       	ldd	r25, Y+2	; 0x02
    422a:	01 97       	sbiw	r24, 0x01	; 1
    422c:	f1 f7       	brne	.-4      	; 0x422a <HLCD_Init+0x320>
    422e:	9a 83       	std	Y+2, r25	; 0x02
    4230:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(30);
		HLCD_SendCommand(HLCD_FUNCTION_SET_4Bit_2Lines_5X7);
    4232:	88 e2       	ldi	r24, 0x28	; 40
    4234:	0e 94 86 23 	call	0x470c	; 0x470c <HLCD_SendCommand>

#endif
		//perfom Init sequence
		//display on of
		HLCD_SendCommand(HLCD_DISPLAY_ON_CURSOS_ON_BLINK_OFF);
    4238:	8e e0       	ldi	r24, 0x0E	; 14
    423a:	0e 94 86 23 	call	0x470c	; 0x470c <HLCD_SendCommand>
		//DSPLAY CLEAR
		HLCD_SendCommand(HLCD_CLEAR);
    423e:	81 e0       	ldi	r24, 0x01	; 1
    4240:	0e 94 86 23 	call	0x470c	; 0x470c <HLCD_SendCommand>
		//ENTRY MODE
		HLCD_SendCommand(HLCD_ENTRY_MODE_SET_INC_NO_SHIFT);
    4244:	86 e0       	ldi	r24, 0x06	; 6
    4246:	0e 94 86 23 	call	0x470c	; 0x470c <HLCD_SendCommand>

		return SUCCES;
    424a:	82 e0       	ldi	r24, 0x02	; 2
}
    424c:	aa 96       	adiw	r28, 0x2a	; 42
    424e:	0f b6       	in	r0, 0x3f	; 63
    4250:	f8 94       	cli
    4252:	de bf       	out	0x3e, r29	; 62
    4254:	0f be       	out	0x3f, r0	; 63
    4256:	cd bf       	out	0x3d, r28	; 61
    4258:	cf 91       	pop	r28
    425a:	df 91       	pop	r29
    425c:	08 95       	ret

0000425e <HLCD_voidNLatch>:

static void HLCD_voidNLatch(u8 copy_u8Byte)
{
    425e:	df 93       	push	r29
    4260:	cf 93       	push	r28
    4262:	cd b7       	in	r28, 0x3d	; 61
    4264:	de b7       	in	r29, 0x3e	; 62
    4266:	ef 97       	sbiw	r28, 0x3f	; 63
    4268:	0f b6       	in	r0, 0x3f	; 63
    426a:	f8 94       	cli
    426c:	de bf       	out	0x3e, r29	; 62
    426e:	0f be       	out	0x3f, r0	; 63
    4270:	cd bf       	out	0x3d, r28	; 61
    4272:	8f af       	std	Y+63, r24	; 0x3f
	MDIO_voidSetPinValue(HLCD_EN_PIN, HIGH);
	_delay_ms(1);
	MDIO_voidSetPinValue(HLCD_EN_PIN, LOW);
	_delay_ms(30);
#elif (HLCD_MODE== _4BIT_)
	u8 LCdPinArr[]={HLCD_D4_PIN,HLCD_D5_PIN,HLCD_D6_PIN,HLCD_D7_PIN};
    4274:	8d e0       	ldi	r24, 0x0D	; 13
    4276:	8b af       	std	Y+59, r24	; 0x3b
    4278:	8e e0       	ldi	r24, 0x0E	; 14
    427a:	8c af       	std	Y+60, r24	; 0x3c
    427c:	8f e0       	ldi	r24, 0x0F	; 15
    427e:	8d af       	std	Y+61, r24	; 0x3d
    4280:	80 e1       	ldi	r24, 0x10	; 16
    4282:	8e af       	std	Y+62, r24	; 0x3e
	//send upper 4 bits
	MDIO_voidSetPinValue(HLCD_EN_PIN, LOW);
    4284:	8c e0       	ldi	r24, 0x0C	; 12
    4286:	60 e0       	ldi	r22, 0x00	; 0
    4288:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	for(u8 i=0;i<=3;i++)
    428c:	1a ae       	std	Y+58, r1	; 0x3a
    428e:	20 c0       	rjmp	.+64     	; 0x42d0 <HLCD_voidNLatch+0x72>
	{
		MDIO_voidSetPinValue(LCdPinArr[i], GET_BIT(copy_u8Byte,i+4));
    4290:	8a ad       	ldd	r24, Y+58	; 0x3a
    4292:	28 2f       	mov	r18, r24
    4294:	30 e0       	ldi	r19, 0x00	; 0
    4296:	ce 01       	movw	r24, r28
    4298:	cb 96       	adiw	r24, 0x3b	; 59
    429a:	fc 01       	movw	r30, r24
    429c:	e2 0f       	add	r30, r18
    429e:	f3 1f       	adc	r31, r19
    42a0:	40 81       	ld	r20, Z
    42a2:	8f ad       	ldd	r24, Y+63	; 0x3f
    42a4:	28 2f       	mov	r18, r24
    42a6:	30 e0       	ldi	r19, 0x00	; 0
    42a8:	8a ad       	ldd	r24, Y+58	; 0x3a
    42aa:	88 2f       	mov	r24, r24
    42ac:	90 e0       	ldi	r25, 0x00	; 0
    42ae:	04 96       	adiw	r24, 0x04	; 4
    42b0:	b9 01       	movw	r22, r18
    42b2:	02 c0       	rjmp	.+4      	; 0x42b8 <HLCD_voidNLatch+0x5a>
    42b4:	75 95       	asr	r23
    42b6:	67 95       	ror	r22
    42b8:	8a 95       	dec	r24
    42ba:	e2 f7       	brpl	.-8      	; 0x42b4 <HLCD_voidNLatch+0x56>
    42bc:	cb 01       	movw	r24, r22
    42be:	98 2f       	mov	r25, r24
    42c0:	91 70       	andi	r25, 0x01	; 1
    42c2:	84 2f       	mov	r24, r20
    42c4:	69 2f       	mov	r22, r25
    42c6:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	_delay_ms(30);
#elif (HLCD_MODE== _4BIT_)
	u8 LCdPinArr[]={HLCD_D4_PIN,HLCD_D5_PIN,HLCD_D6_PIN,HLCD_D7_PIN};
	//send upper 4 bits
	MDIO_voidSetPinValue(HLCD_EN_PIN, LOW);
	for(u8 i=0;i<=3;i++)
    42ca:	8a ad       	ldd	r24, Y+58	; 0x3a
    42cc:	8f 5f       	subi	r24, 0xFF	; 255
    42ce:	8a af       	std	Y+58, r24	; 0x3a
    42d0:	8a ad       	ldd	r24, Y+58	; 0x3a
    42d2:	84 30       	cpi	r24, 0x04	; 4
    42d4:	e8 f2       	brcs	.-70     	; 0x4290 <HLCD_voidNLatch+0x32>
	{
		MDIO_voidSetPinValue(LCdPinArr[i], GET_BIT(copy_u8Byte,i+4));
	}

	MDIO_voidSetPinValue(HLCD_EN_PIN, HIGH);
    42d6:	8c e0       	ldi	r24, 0x0C	; 12
    42d8:	61 e0       	ldi	r22, 0x01	; 1
    42da:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
    42de:	80 e0       	ldi	r24, 0x00	; 0
    42e0:	90 e0       	ldi	r25, 0x00	; 0
    42e2:	a0 e8       	ldi	r26, 0x80	; 128
    42e4:	bf e3       	ldi	r27, 0x3F	; 63
    42e6:	8d ab       	std	Y+53, r24	; 0x35
    42e8:	9e ab       	std	Y+54, r25	; 0x36
    42ea:	af ab       	std	Y+55, r26	; 0x37
    42ec:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42ee:	6d a9       	ldd	r22, Y+53	; 0x35
    42f0:	7e a9       	ldd	r23, Y+54	; 0x36
    42f2:	8f a9       	ldd	r24, Y+55	; 0x37
    42f4:	98 ad       	ldd	r25, Y+56	; 0x38
    42f6:	20 e0       	ldi	r18, 0x00	; 0
    42f8:	30 e0       	ldi	r19, 0x00	; 0
    42fa:	4a e7       	ldi	r20, 0x7A	; 122
    42fc:	55 e4       	ldi	r21, 0x45	; 69
    42fe:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    4302:	dc 01       	movw	r26, r24
    4304:	cb 01       	movw	r24, r22
    4306:	89 ab       	std	Y+49, r24	; 0x31
    4308:	9a ab       	std	Y+50, r25	; 0x32
    430a:	ab ab       	std	Y+51, r26	; 0x33
    430c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    430e:	69 a9       	ldd	r22, Y+49	; 0x31
    4310:	7a a9       	ldd	r23, Y+50	; 0x32
    4312:	8b a9       	ldd	r24, Y+51	; 0x33
    4314:	9c a9       	ldd	r25, Y+52	; 0x34
    4316:	20 e0       	ldi	r18, 0x00	; 0
    4318:	30 e0       	ldi	r19, 0x00	; 0
    431a:	40 e8       	ldi	r20, 0x80	; 128
    431c:	5f e3       	ldi	r21, 0x3F	; 63
    431e:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    4322:	88 23       	and	r24, r24
    4324:	2c f4       	brge	.+10     	; 0x4330 <HLCD_voidNLatch+0xd2>
		__ticks = 1;
    4326:	81 e0       	ldi	r24, 0x01	; 1
    4328:	90 e0       	ldi	r25, 0x00	; 0
    432a:	98 ab       	std	Y+48, r25	; 0x30
    432c:	8f a7       	std	Y+47, r24	; 0x2f
    432e:	3f c0       	rjmp	.+126    	; 0x43ae <HLCD_voidNLatch+0x150>
	else if (__tmp > 65535)
    4330:	69 a9       	ldd	r22, Y+49	; 0x31
    4332:	7a a9       	ldd	r23, Y+50	; 0x32
    4334:	8b a9       	ldd	r24, Y+51	; 0x33
    4336:	9c a9       	ldd	r25, Y+52	; 0x34
    4338:	20 e0       	ldi	r18, 0x00	; 0
    433a:	3f ef       	ldi	r19, 0xFF	; 255
    433c:	4f e7       	ldi	r20, 0x7F	; 127
    433e:	57 e4       	ldi	r21, 0x47	; 71
    4340:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    4344:	18 16       	cp	r1, r24
    4346:	4c f5       	brge	.+82     	; 0x439a <HLCD_voidNLatch+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4348:	6d a9       	ldd	r22, Y+53	; 0x35
    434a:	7e a9       	ldd	r23, Y+54	; 0x36
    434c:	8f a9       	ldd	r24, Y+55	; 0x37
    434e:	98 ad       	ldd	r25, Y+56	; 0x38
    4350:	20 e0       	ldi	r18, 0x00	; 0
    4352:	30 e0       	ldi	r19, 0x00	; 0
    4354:	40 e2       	ldi	r20, 0x20	; 32
    4356:	51 e4       	ldi	r21, 0x41	; 65
    4358:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    435c:	dc 01       	movw	r26, r24
    435e:	cb 01       	movw	r24, r22
    4360:	bc 01       	movw	r22, r24
    4362:	cd 01       	movw	r24, r26
    4364:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4368:	dc 01       	movw	r26, r24
    436a:	cb 01       	movw	r24, r22
    436c:	98 ab       	std	Y+48, r25	; 0x30
    436e:	8f a7       	std	Y+47, r24	; 0x2f
    4370:	0f c0       	rjmp	.+30     	; 0x4390 <HLCD_voidNLatch+0x132>
    4372:	80 e9       	ldi	r24, 0x90	; 144
    4374:	91 e0       	ldi	r25, 0x01	; 1
    4376:	9e a7       	std	Y+46, r25	; 0x2e
    4378:	8d a7       	std	Y+45, r24	; 0x2d
    437a:	8d a5       	ldd	r24, Y+45	; 0x2d
    437c:	9e a5       	ldd	r25, Y+46	; 0x2e
    437e:	01 97       	sbiw	r24, 0x01	; 1
    4380:	f1 f7       	brne	.-4      	; 0x437e <HLCD_voidNLatch+0x120>
    4382:	9e a7       	std	Y+46, r25	; 0x2e
    4384:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4386:	8f a5       	ldd	r24, Y+47	; 0x2f
    4388:	98 a9       	ldd	r25, Y+48	; 0x30
    438a:	01 97       	sbiw	r24, 0x01	; 1
    438c:	98 ab       	std	Y+48, r25	; 0x30
    438e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4390:	8f a5       	ldd	r24, Y+47	; 0x2f
    4392:	98 a9       	ldd	r25, Y+48	; 0x30
    4394:	00 97       	sbiw	r24, 0x00	; 0
    4396:	69 f7       	brne	.-38     	; 0x4372 <HLCD_voidNLatch+0x114>
    4398:	14 c0       	rjmp	.+40     	; 0x43c2 <HLCD_voidNLatch+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    439a:	69 a9       	ldd	r22, Y+49	; 0x31
    439c:	7a a9       	ldd	r23, Y+50	; 0x32
    439e:	8b a9       	ldd	r24, Y+51	; 0x33
    43a0:	9c a9       	ldd	r25, Y+52	; 0x34
    43a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43a6:	dc 01       	movw	r26, r24
    43a8:	cb 01       	movw	r24, r22
    43aa:	98 ab       	std	Y+48, r25	; 0x30
    43ac:	8f a7       	std	Y+47, r24	; 0x2f
    43ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    43b0:	98 a9       	ldd	r25, Y+48	; 0x30
    43b2:	9c a7       	std	Y+44, r25	; 0x2c
    43b4:	8b a7       	std	Y+43, r24	; 0x2b
    43b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    43b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    43ba:	01 97       	sbiw	r24, 0x01	; 1
    43bc:	f1 f7       	brne	.-4      	; 0x43ba <HLCD_voidNLatch+0x15c>
    43be:	9c a7       	std	Y+44, r25	; 0x2c
    43c0:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
	MDIO_voidSetPinValue(HLCD_EN_PIN, LOW);
    43c2:	8c e0       	ldi	r24, 0x0C	; 12
    43c4:	60 e0       	ldi	r22, 0x00	; 0
    43c6:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
    43ca:	80 e0       	ldi	r24, 0x00	; 0
    43cc:	90 e0       	ldi	r25, 0x00	; 0
    43ce:	a0 ef       	ldi	r26, 0xF0	; 240
    43d0:	b1 e4       	ldi	r27, 0x41	; 65
    43d2:	8f a3       	std	Y+39, r24	; 0x27
    43d4:	98 a7       	std	Y+40, r25	; 0x28
    43d6:	a9 a7       	std	Y+41, r26	; 0x29
    43d8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43da:	6f a1       	ldd	r22, Y+39	; 0x27
    43dc:	78 a5       	ldd	r23, Y+40	; 0x28
    43de:	89 a5       	ldd	r24, Y+41	; 0x29
    43e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    43e2:	20 e0       	ldi	r18, 0x00	; 0
    43e4:	30 e0       	ldi	r19, 0x00	; 0
    43e6:	4a e7       	ldi	r20, 0x7A	; 122
    43e8:	55 e4       	ldi	r21, 0x45	; 69
    43ea:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    43ee:	dc 01       	movw	r26, r24
    43f0:	cb 01       	movw	r24, r22
    43f2:	8b a3       	std	Y+35, r24	; 0x23
    43f4:	9c a3       	std	Y+36, r25	; 0x24
    43f6:	ad a3       	std	Y+37, r26	; 0x25
    43f8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    43fa:	6b a1       	ldd	r22, Y+35	; 0x23
    43fc:	7c a1       	ldd	r23, Y+36	; 0x24
    43fe:	8d a1       	ldd	r24, Y+37	; 0x25
    4400:	9e a1       	ldd	r25, Y+38	; 0x26
    4402:	20 e0       	ldi	r18, 0x00	; 0
    4404:	30 e0       	ldi	r19, 0x00	; 0
    4406:	40 e8       	ldi	r20, 0x80	; 128
    4408:	5f e3       	ldi	r21, 0x3F	; 63
    440a:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    440e:	88 23       	and	r24, r24
    4410:	2c f4       	brge	.+10     	; 0x441c <HLCD_voidNLatch+0x1be>
		__ticks = 1;
    4412:	81 e0       	ldi	r24, 0x01	; 1
    4414:	90 e0       	ldi	r25, 0x00	; 0
    4416:	9a a3       	std	Y+34, r25	; 0x22
    4418:	89 a3       	std	Y+33, r24	; 0x21
    441a:	3f c0       	rjmp	.+126    	; 0x449a <HLCD_voidNLatch+0x23c>
	else if (__tmp > 65535)
    441c:	6b a1       	ldd	r22, Y+35	; 0x23
    441e:	7c a1       	ldd	r23, Y+36	; 0x24
    4420:	8d a1       	ldd	r24, Y+37	; 0x25
    4422:	9e a1       	ldd	r25, Y+38	; 0x26
    4424:	20 e0       	ldi	r18, 0x00	; 0
    4426:	3f ef       	ldi	r19, 0xFF	; 255
    4428:	4f e7       	ldi	r20, 0x7F	; 127
    442a:	57 e4       	ldi	r21, 0x47	; 71
    442c:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    4430:	18 16       	cp	r1, r24
    4432:	4c f5       	brge	.+82     	; 0x4486 <HLCD_voidNLatch+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4434:	6f a1       	ldd	r22, Y+39	; 0x27
    4436:	78 a5       	ldd	r23, Y+40	; 0x28
    4438:	89 a5       	ldd	r24, Y+41	; 0x29
    443a:	9a a5       	ldd	r25, Y+42	; 0x2a
    443c:	20 e0       	ldi	r18, 0x00	; 0
    443e:	30 e0       	ldi	r19, 0x00	; 0
    4440:	40 e2       	ldi	r20, 0x20	; 32
    4442:	51 e4       	ldi	r21, 0x41	; 65
    4444:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    4448:	dc 01       	movw	r26, r24
    444a:	cb 01       	movw	r24, r22
    444c:	bc 01       	movw	r22, r24
    444e:	cd 01       	movw	r24, r26
    4450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4454:	dc 01       	movw	r26, r24
    4456:	cb 01       	movw	r24, r22
    4458:	9a a3       	std	Y+34, r25	; 0x22
    445a:	89 a3       	std	Y+33, r24	; 0x21
    445c:	0f c0       	rjmp	.+30     	; 0x447c <HLCD_voidNLatch+0x21e>
    445e:	80 e9       	ldi	r24, 0x90	; 144
    4460:	91 e0       	ldi	r25, 0x01	; 1
    4462:	98 a3       	std	Y+32, r25	; 0x20
    4464:	8f 8f       	std	Y+31, r24	; 0x1f
    4466:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4468:	98 a1       	ldd	r25, Y+32	; 0x20
    446a:	01 97       	sbiw	r24, 0x01	; 1
    446c:	f1 f7       	brne	.-4      	; 0x446a <HLCD_voidNLatch+0x20c>
    446e:	98 a3       	std	Y+32, r25	; 0x20
    4470:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4472:	89 a1       	ldd	r24, Y+33	; 0x21
    4474:	9a a1       	ldd	r25, Y+34	; 0x22
    4476:	01 97       	sbiw	r24, 0x01	; 1
    4478:	9a a3       	std	Y+34, r25	; 0x22
    447a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    447c:	89 a1       	ldd	r24, Y+33	; 0x21
    447e:	9a a1       	ldd	r25, Y+34	; 0x22
    4480:	00 97       	sbiw	r24, 0x00	; 0
    4482:	69 f7       	brne	.-38     	; 0x445e <HLCD_voidNLatch+0x200>
    4484:	14 c0       	rjmp	.+40     	; 0x44ae <HLCD_voidNLatch+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4486:	6b a1       	ldd	r22, Y+35	; 0x23
    4488:	7c a1       	ldd	r23, Y+36	; 0x24
    448a:	8d a1       	ldd	r24, Y+37	; 0x25
    448c:	9e a1       	ldd	r25, Y+38	; 0x26
    448e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4492:	dc 01       	movw	r26, r24
    4494:	cb 01       	movw	r24, r22
    4496:	9a a3       	std	Y+34, r25	; 0x22
    4498:	89 a3       	std	Y+33, r24	; 0x21
    449a:	89 a1       	ldd	r24, Y+33	; 0x21
    449c:	9a a1       	ldd	r25, Y+34	; 0x22
    449e:	9e 8f       	std	Y+30, r25	; 0x1e
    44a0:	8d 8f       	std	Y+29, r24	; 0x1d
    44a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    44a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    44a6:	01 97       	sbiw	r24, 0x01	; 1
    44a8:	f1 f7       	brne	.-4      	; 0x44a6 <HLCD_voidNLatch+0x248>
    44aa:	9e 8f       	std	Y+30, r25	; 0x1e
    44ac:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(30);
		//send lower 4 bits
		MDIO_voidSetPinValue(HLCD_EN_PIN, LOW);
    44ae:	8c e0       	ldi	r24, 0x0C	; 12
    44b0:	60 e0       	ldi	r22, 0x00	; 0
    44b2:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
		for(u8 i=0;i<=3;i++)
    44b6:	19 ae       	std	Y+57, r1	; 0x39
    44b8:	1f c0       	rjmp	.+62     	; 0x44f8 <HLCD_voidNLatch+0x29a>
		{
			MDIO_voidSetPinValue(LCdPinArr[i], GET_BIT(copy_u8Byte,i));
    44ba:	89 ad       	ldd	r24, Y+57	; 0x39
    44bc:	28 2f       	mov	r18, r24
    44be:	30 e0       	ldi	r19, 0x00	; 0
    44c0:	ce 01       	movw	r24, r28
    44c2:	cb 96       	adiw	r24, 0x3b	; 59
    44c4:	fc 01       	movw	r30, r24
    44c6:	e2 0f       	add	r30, r18
    44c8:	f3 1f       	adc	r31, r19
    44ca:	40 81       	ld	r20, Z
    44cc:	8f ad       	ldd	r24, Y+63	; 0x3f
    44ce:	28 2f       	mov	r18, r24
    44d0:	30 e0       	ldi	r19, 0x00	; 0
    44d2:	89 ad       	ldd	r24, Y+57	; 0x39
    44d4:	88 2f       	mov	r24, r24
    44d6:	90 e0       	ldi	r25, 0x00	; 0
    44d8:	b9 01       	movw	r22, r18
    44da:	02 c0       	rjmp	.+4      	; 0x44e0 <HLCD_voidNLatch+0x282>
    44dc:	75 95       	asr	r23
    44de:	67 95       	ror	r22
    44e0:	8a 95       	dec	r24
    44e2:	e2 f7       	brpl	.-8      	; 0x44dc <HLCD_voidNLatch+0x27e>
    44e4:	cb 01       	movw	r24, r22
    44e6:	98 2f       	mov	r25, r24
    44e8:	91 70       	andi	r25, 0x01	; 1
    44ea:	84 2f       	mov	r24, r20
    44ec:	69 2f       	mov	r22, r25
    44ee:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
		_delay_ms(1);
	MDIO_voidSetPinValue(HLCD_EN_PIN, LOW);
		_delay_ms(30);
		//send lower 4 bits
		MDIO_voidSetPinValue(HLCD_EN_PIN, LOW);
		for(u8 i=0;i<=3;i++)
    44f2:	89 ad       	ldd	r24, Y+57	; 0x39
    44f4:	8f 5f       	subi	r24, 0xFF	; 255
    44f6:	89 af       	std	Y+57, r24	; 0x39
    44f8:	89 ad       	ldd	r24, Y+57	; 0x39
    44fa:	84 30       	cpi	r24, 0x04	; 4
    44fc:	f0 f2       	brcs	.-68     	; 0x44ba <HLCD_voidNLatch+0x25c>
		{
			MDIO_voidSetPinValue(LCdPinArr[i], GET_BIT(copy_u8Byte,i));
		}

		MDIO_voidSetPinValue(HLCD_EN_PIN, HIGH);
    44fe:	8c e0       	ldi	r24, 0x0C	; 12
    4500:	61 e0       	ldi	r22, 0x01	; 1
    4502:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
    4506:	80 e0       	ldi	r24, 0x00	; 0
    4508:	90 e0       	ldi	r25, 0x00	; 0
    450a:	a0 e8       	ldi	r26, 0x80	; 128
    450c:	bf e3       	ldi	r27, 0x3F	; 63
    450e:	89 8f       	std	Y+25, r24	; 0x19
    4510:	9a 8f       	std	Y+26, r25	; 0x1a
    4512:	ab 8f       	std	Y+27, r26	; 0x1b
    4514:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4516:	69 8d       	ldd	r22, Y+25	; 0x19
    4518:	7a 8d       	ldd	r23, Y+26	; 0x1a
    451a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    451c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    451e:	20 e0       	ldi	r18, 0x00	; 0
    4520:	30 e0       	ldi	r19, 0x00	; 0
    4522:	4a e7       	ldi	r20, 0x7A	; 122
    4524:	55 e4       	ldi	r21, 0x45	; 69
    4526:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    452a:	dc 01       	movw	r26, r24
    452c:	cb 01       	movw	r24, r22
    452e:	8d 8b       	std	Y+21, r24	; 0x15
    4530:	9e 8b       	std	Y+22, r25	; 0x16
    4532:	af 8b       	std	Y+23, r26	; 0x17
    4534:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4536:	6d 89       	ldd	r22, Y+21	; 0x15
    4538:	7e 89       	ldd	r23, Y+22	; 0x16
    453a:	8f 89       	ldd	r24, Y+23	; 0x17
    453c:	98 8d       	ldd	r25, Y+24	; 0x18
    453e:	20 e0       	ldi	r18, 0x00	; 0
    4540:	30 e0       	ldi	r19, 0x00	; 0
    4542:	40 e8       	ldi	r20, 0x80	; 128
    4544:	5f e3       	ldi	r21, 0x3F	; 63
    4546:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    454a:	88 23       	and	r24, r24
    454c:	2c f4       	brge	.+10     	; 0x4558 <HLCD_voidNLatch+0x2fa>
		__ticks = 1;
    454e:	81 e0       	ldi	r24, 0x01	; 1
    4550:	90 e0       	ldi	r25, 0x00	; 0
    4552:	9c 8b       	std	Y+20, r25	; 0x14
    4554:	8b 8b       	std	Y+19, r24	; 0x13
    4556:	3f c0       	rjmp	.+126    	; 0x45d6 <HLCD_voidNLatch+0x378>
	else if (__tmp > 65535)
    4558:	6d 89       	ldd	r22, Y+21	; 0x15
    455a:	7e 89       	ldd	r23, Y+22	; 0x16
    455c:	8f 89       	ldd	r24, Y+23	; 0x17
    455e:	98 8d       	ldd	r25, Y+24	; 0x18
    4560:	20 e0       	ldi	r18, 0x00	; 0
    4562:	3f ef       	ldi	r19, 0xFF	; 255
    4564:	4f e7       	ldi	r20, 0x7F	; 127
    4566:	57 e4       	ldi	r21, 0x47	; 71
    4568:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    456c:	18 16       	cp	r1, r24
    456e:	4c f5       	brge	.+82     	; 0x45c2 <HLCD_voidNLatch+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4570:	69 8d       	ldd	r22, Y+25	; 0x19
    4572:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4574:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4576:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4578:	20 e0       	ldi	r18, 0x00	; 0
    457a:	30 e0       	ldi	r19, 0x00	; 0
    457c:	40 e2       	ldi	r20, 0x20	; 32
    457e:	51 e4       	ldi	r21, 0x41	; 65
    4580:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    4584:	dc 01       	movw	r26, r24
    4586:	cb 01       	movw	r24, r22
    4588:	bc 01       	movw	r22, r24
    458a:	cd 01       	movw	r24, r26
    458c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4590:	dc 01       	movw	r26, r24
    4592:	cb 01       	movw	r24, r22
    4594:	9c 8b       	std	Y+20, r25	; 0x14
    4596:	8b 8b       	std	Y+19, r24	; 0x13
    4598:	0f c0       	rjmp	.+30     	; 0x45b8 <HLCD_voidNLatch+0x35a>
    459a:	80 e9       	ldi	r24, 0x90	; 144
    459c:	91 e0       	ldi	r25, 0x01	; 1
    459e:	9a 8b       	std	Y+18, r25	; 0x12
    45a0:	89 8b       	std	Y+17, r24	; 0x11
    45a2:	89 89       	ldd	r24, Y+17	; 0x11
    45a4:	9a 89       	ldd	r25, Y+18	; 0x12
    45a6:	01 97       	sbiw	r24, 0x01	; 1
    45a8:	f1 f7       	brne	.-4      	; 0x45a6 <HLCD_voidNLatch+0x348>
    45aa:	9a 8b       	std	Y+18, r25	; 0x12
    45ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45ae:	8b 89       	ldd	r24, Y+19	; 0x13
    45b0:	9c 89       	ldd	r25, Y+20	; 0x14
    45b2:	01 97       	sbiw	r24, 0x01	; 1
    45b4:	9c 8b       	std	Y+20, r25	; 0x14
    45b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45b8:	8b 89       	ldd	r24, Y+19	; 0x13
    45ba:	9c 89       	ldd	r25, Y+20	; 0x14
    45bc:	00 97       	sbiw	r24, 0x00	; 0
    45be:	69 f7       	brne	.-38     	; 0x459a <HLCD_voidNLatch+0x33c>
    45c0:	14 c0       	rjmp	.+40     	; 0x45ea <HLCD_voidNLatch+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45c2:	6d 89       	ldd	r22, Y+21	; 0x15
    45c4:	7e 89       	ldd	r23, Y+22	; 0x16
    45c6:	8f 89       	ldd	r24, Y+23	; 0x17
    45c8:	98 8d       	ldd	r25, Y+24	; 0x18
    45ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45ce:	dc 01       	movw	r26, r24
    45d0:	cb 01       	movw	r24, r22
    45d2:	9c 8b       	std	Y+20, r25	; 0x14
    45d4:	8b 8b       	std	Y+19, r24	; 0x13
    45d6:	8b 89       	ldd	r24, Y+19	; 0x13
    45d8:	9c 89       	ldd	r25, Y+20	; 0x14
    45da:	98 8b       	std	Y+16, r25	; 0x10
    45dc:	8f 87       	std	Y+15, r24	; 0x0f
    45de:	8f 85       	ldd	r24, Y+15	; 0x0f
    45e0:	98 89       	ldd	r25, Y+16	; 0x10
    45e2:	01 97       	sbiw	r24, 0x01	; 1
    45e4:	f1 f7       	brne	.-4      	; 0x45e2 <HLCD_voidNLatch+0x384>
    45e6:	98 8b       	std	Y+16, r25	; 0x10
    45e8:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1);
		MDIO_voidSetPinValue(HLCD_EN_PIN, LOW);
    45ea:	8c e0       	ldi	r24, 0x0C	; 12
    45ec:	60 e0       	ldi	r22, 0x00	; 0
    45ee:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
    45f2:	80 e0       	ldi	r24, 0x00	; 0
    45f4:	90 e0       	ldi	r25, 0x00	; 0
    45f6:	a0 ef       	ldi	r26, 0xF0	; 240
    45f8:	b1 e4       	ldi	r27, 0x41	; 65
    45fa:	8b 87       	std	Y+11, r24	; 0x0b
    45fc:	9c 87       	std	Y+12, r25	; 0x0c
    45fe:	ad 87       	std	Y+13, r26	; 0x0d
    4600:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4602:	6b 85       	ldd	r22, Y+11	; 0x0b
    4604:	7c 85       	ldd	r23, Y+12	; 0x0c
    4606:	8d 85       	ldd	r24, Y+13	; 0x0d
    4608:	9e 85       	ldd	r25, Y+14	; 0x0e
    460a:	20 e0       	ldi	r18, 0x00	; 0
    460c:	30 e0       	ldi	r19, 0x00	; 0
    460e:	4a e7       	ldi	r20, 0x7A	; 122
    4610:	55 e4       	ldi	r21, 0x45	; 69
    4612:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    4616:	dc 01       	movw	r26, r24
    4618:	cb 01       	movw	r24, r22
    461a:	8f 83       	std	Y+7, r24	; 0x07
    461c:	98 87       	std	Y+8, r25	; 0x08
    461e:	a9 87       	std	Y+9, r26	; 0x09
    4620:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4622:	6f 81       	ldd	r22, Y+7	; 0x07
    4624:	78 85       	ldd	r23, Y+8	; 0x08
    4626:	89 85       	ldd	r24, Y+9	; 0x09
    4628:	9a 85       	ldd	r25, Y+10	; 0x0a
    462a:	20 e0       	ldi	r18, 0x00	; 0
    462c:	30 e0       	ldi	r19, 0x00	; 0
    462e:	40 e8       	ldi	r20, 0x80	; 128
    4630:	5f e3       	ldi	r21, 0x3F	; 63
    4632:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    4636:	88 23       	and	r24, r24
    4638:	2c f4       	brge	.+10     	; 0x4644 <HLCD_voidNLatch+0x3e6>
		__ticks = 1;
    463a:	81 e0       	ldi	r24, 0x01	; 1
    463c:	90 e0       	ldi	r25, 0x00	; 0
    463e:	9e 83       	std	Y+6, r25	; 0x06
    4640:	8d 83       	std	Y+5, r24	; 0x05
    4642:	3f c0       	rjmp	.+126    	; 0x46c2 <HLCD_voidNLatch+0x464>
	else if (__tmp > 65535)
    4644:	6f 81       	ldd	r22, Y+7	; 0x07
    4646:	78 85       	ldd	r23, Y+8	; 0x08
    4648:	89 85       	ldd	r24, Y+9	; 0x09
    464a:	9a 85       	ldd	r25, Y+10	; 0x0a
    464c:	20 e0       	ldi	r18, 0x00	; 0
    464e:	3f ef       	ldi	r19, 0xFF	; 255
    4650:	4f e7       	ldi	r20, 0x7F	; 127
    4652:	57 e4       	ldi	r21, 0x47	; 71
    4654:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    4658:	18 16       	cp	r1, r24
    465a:	4c f5       	brge	.+82     	; 0x46ae <HLCD_voidNLatch+0x450>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    465c:	6b 85       	ldd	r22, Y+11	; 0x0b
    465e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4660:	8d 85       	ldd	r24, Y+13	; 0x0d
    4662:	9e 85       	ldd	r25, Y+14	; 0x0e
    4664:	20 e0       	ldi	r18, 0x00	; 0
    4666:	30 e0       	ldi	r19, 0x00	; 0
    4668:	40 e2       	ldi	r20, 0x20	; 32
    466a:	51 e4       	ldi	r21, 0x41	; 65
    466c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    4670:	dc 01       	movw	r26, r24
    4672:	cb 01       	movw	r24, r22
    4674:	bc 01       	movw	r22, r24
    4676:	cd 01       	movw	r24, r26
    4678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    467c:	dc 01       	movw	r26, r24
    467e:	cb 01       	movw	r24, r22
    4680:	9e 83       	std	Y+6, r25	; 0x06
    4682:	8d 83       	std	Y+5, r24	; 0x05
    4684:	0f c0       	rjmp	.+30     	; 0x46a4 <HLCD_voidNLatch+0x446>
    4686:	80 e9       	ldi	r24, 0x90	; 144
    4688:	91 e0       	ldi	r25, 0x01	; 1
    468a:	9c 83       	std	Y+4, r25	; 0x04
    468c:	8b 83       	std	Y+3, r24	; 0x03
    468e:	8b 81       	ldd	r24, Y+3	; 0x03
    4690:	9c 81       	ldd	r25, Y+4	; 0x04
    4692:	01 97       	sbiw	r24, 0x01	; 1
    4694:	f1 f7       	brne	.-4      	; 0x4692 <HLCD_voidNLatch+0x434>
    4696:	9c 83       	std	Y+4, r25	; 0x04
    4698:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    469a:	8d 81       	ldd	r24, Y+5	; 0x05
    469c:	9e 81       	ldd	r25, Y+6	; 0x06
    469e:	01 97       	sbiw	r24, 0x01	; 1
    46a0:	9e 83       	std	Y+6, r25	; 0x06
    46a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46a4:	8d 81       	ldd	r24, Y+5	; 0x05
    46a6:	9e 81       	ldd	r25, Y+6	; 0x06
    46a8:	00 97       	sbiw	r24, 0x00	; 0
    46aa:	69 f7       	brne	.-38     	; 0x4686 <HLCD_voidNLatch+0x428>
    46ac:	14 c0       	rjmp	.+40     	; 0x46d6 <HLCD_voidNLatch+0x478>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46ae:	6f 81       	ldd	r22, Y+7	; 0x07
    46b0:	78 85       	ldd	r23, Y+8	; 0x08
    46b2:	89 85       	ldd	r24, Y+9	; 0x09
    46b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    46b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46ba:	dc 01       	movw	r26, r24
    46bc:	cb 01       	movw	r24, r22
    46be:	9e 83       	std	Y+6, r25	; 0x06
    46c0:	8d 83       	std	Y+5, r24	; 0x05
    46c2:	8d 81       	ldd	r24, Y+5	; 0x05
    46c4:	9e 81       	ldd	r25, Y+6	; 0x06
    46c6:	9a 83       	std	Y+2, r25	; 0x02
    46c8:	89 83       	std	Y+1, r24	; 0x01
    46ca:	89 81       	ldd	r24, Y+1	; 0x01
    46cc:	9a 81       	ldd	r25, Y+2	; 0x02
    46ce:	01 97       	sbiw	r24, 0x01	; 1
    46d0:	f1 f7       	brne	.-4      	; 0x46ce <HLCD_voidNLatch+0x470>
    46d2:	9a 83       	std	Y+2, r25	; 0x02
    46d4:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(30);
#else
#error("wrong LCD MODE")
#endif
		//	return SUCCES;
}
    46d6:	ef 96       	adiw	r28, 0x3f	; 63
    46d8:	0f b6       	in	r0, 0x3f	; 63
    46da:	f8 94       	cli
    46dc:	de bf       	out	0x3e, r29	; 62
    46de:	0f be       	out	0x3f, r0	; 63
    46e0:	cd bf       	out	0x3d, r28	; 61
    46e2:	cf 91       	pop	r28
    46e4:	df 91       	pop	r29
    46e6:	08 95       	ret

000046e8 <HLCD_SendData>:

ErrorState_t HLCD_SendData(u8 copy_u8Data)
{
    46e8:	df 93       	push	r29
    46ea:	cf 93       	push	r28
    46ec:	0f 92       	push	r0
    46ee:	cd b7       	in	r28, 0x3d	; 61
    46f0:	de b7       	in	r29, 0x3e	; 62
    46f2:	89 83       	std	Y+1, r24	; 0x01

//SEND RS=1
	MDIO_voidSetPinValue(HLCD_RS_PIN, HIGH);
    46f4:	8b e0       	ldi	r24, 0x0B	; 11
    46f6:	61 e0       	ldi	r22, 0x01	; 1
    46f8:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	//send data as a byte to NLATCH

	HLCD_voidNLatch(copy_u8Data);
    46fc:	89 81       	ldd	r24, Y+1	; 0x01
    46fe:	0e 94 2f 21 	call	0x425e	; 0x425e <HLCD_voidNLatch>

	return SUCCES;
    4702:	82 e0       	ldi	r24, 0x02	; 2
}
    4704:	0f 90       	pop	r0
    4706:	cf 91       	pop	r28
    4708:	df 91       	pop	r29
    470a:	08 95       	ret

0000470c <HLCD_SendCommand>:

ErrorState_t HLCD_SendCommand(u8 copy_u8Command)
{
    470c:	df 93       	push	r29
    470e:	cf 93       	push	r28
    4710:	0f 92       	push	r0
    4712:	cd b7       	in	r28, 0x3d	; 61
    4714:	de b7       	in	r29, 0x3e	; 62
    4716:	89 83       	std	Y+1, r24	; 0x01
//SEND RS low
	MDIO_voidSetPinValue(HLCD_RS_PIN, LOW);
    4718:	8b e0       	ldi	r24, 0x0B	; 11
    471a:	60 e0       	ldi	r22, 0x00	; 0
    471c:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	HLCD_voidNLatch(copy_u8Command);
    4720:	89 81       	ldd	r24, Y+1	; 0x01
    4722:	0e 94 2f 21 	call	0x425e	; 0x425e <HLCD_voidNLatch>
	return SUCCES;
    4726:	82 e0       	ldi	r24, 0x02	; 2
}
    4728:	0f 90       	pop	r0
    472a:	cf 91       	pop	r28
    472c:	df 91       	pop	r29
    472e:	08 95       	ret

00004730 <HLCD_SendString>:
ErrorState_t HLCD_SendString(char * str)
{
    4730:	df 93       	push	r29
    4732:	cf 93       	push	r28
    4734:	00 d0       	rcall	.+0      	; 0x4736 <HLCD_SendString+0x6>
    4736:	cd b7       	in	r28, 0x3d	; 61
    4738:	de b7       	in	r29, 0x3e	; 62
    473a:	9a 83       	std	Y+2, r25	; 0x02
    473c:	89 83       	std	Y+1, r24	; 0x01
    473e:	0a c0       	rjmp	.+20     	; 0x4754 <HLCD_SendString+0x24>

while (*str !='\0')
{
	HLCD_SendData(*str);
    4740:	e9 81       	ldd	r30, Y+1	; 0x01
    4742:	fa 81       	ldd	r31, Y+2	; 0x02
    4744:	80 81       	ld	r24, Z
    4746:	0e 94 74 23 	call	0x46e8	; 0x46e8 <HLCD_SendData>

	str++;
    474a:	89 81       	ldd	r24, Y+1	; 0x01
    474c:	9a 81       	ldd	r25, Y+2	; 0x02
    474e:	01 96       	adiw	r24, 0x01	; 1
    4750:	9a 83       	std	Y+2, r25	; 0x02
    4752:	89 83       	std	Y+1, r24	; 0x01
	return SUCCES;
}
ErrorState_t HLCD_SendString(char * str)
{

while (*str !='\0')
    4754:	e9 81       	ldd	r30, Y+1	; 0x01
    4756:	fa 81       	ldd	r31, Y+2	; 0x02
    4758:	80 81       	ld	r24, Z
    475a:	88 23       	and	r24, r24
    475c:	89 f7       	brne	.-30     	; 0x4740 <HLCD_SendString+0x10>

	str++;

}

return SUCCES;
    475e:	82 e0       	ldi	r24, 0x02	; 2

}
    4760:	0f 90       	pop	r0
    4762:	0f 90       	pop	r0
    4764:	cf 91       	pop	r28
    4766:	df 91       	pop	r29
    4768:	08 95       	ret

0000476a <HLCD_ClearDisplay>:
ErrorState_t HLCD_ClearDisplay(void)
{
    476a:	df 93       	push	r29
    476c:	cf 93       	push	r28
    476e:	cd b7       	in	r28, 0x3d	; 61
    4770:	de b7       	in	r29, 0x3e	; 62
	HLCD_SendCommand(HLCD_CLEAR);
    4772:	81 e0       	ldi	r24, 0x01	; 1
    4774:	0e 94 86 23 	call	0x470c	; 0x470c <HLCD_SendCommand>

	return SUCCES;
    4778:	82 e0       	ldi	r24, 0x02	; 2
}
    477a:	cf 91       	pop	r28
    477c:	df 91       	pop	r29
    477e:	08 95       	ret

00004780 <HLCD_sendIntNum>:

ErrorState_t HLCD_sendIntNum(s32 copy_u32Num)
{
    4780:	af 92       	push	r10
    4782:	bf 92       	push	r11
    4784:	cf 92       	push	r12
    4786:	df 92       	push	r13
    4788:	ef 92       	push	r14
    478a:	ff 92       	push	r15
    478c:	0f 93       	push	r16
    478e:	1f 93       	push	r17
    4790:	df 93       	push	r29
    4792:	cf 93       	push	r28
    4794:	cd b7       	in	r28, 0x3d	; 61
    4796:	de b7       	in	r29, 0x3e	; 62
    4798:	c3 54       	subi	r28, 0x43	; 67
    479a:	d0 40       	sbci	r29, 0x00	; 0
    479c:	0f b6       	in	r0, 0x3f	; 63
    479e:	f8 94       	cli
    47a0:	de bf       	out	0x3e, r29	; 62
    47a2:	0f be       	out	0x3f, r0	; 63
    47a4:	cd bf       	out	0x3d, r28	; 61
    47a6:	fe 01       	movw	r30, r28
    47a8:	e0 5c       	subi	r30, 0xC0	; 192
    47aa:	ff 4f       	sbci	r31, 0xFF	; 255
    47ac:	60 83       	st	Z, r22
    47ae:	71 83       	std	Z+1, r23	; 0x01
    47b0:	82 83       	std	Z+2, r24	; 0x02
    47b2:	93 83       	std	Z+3, r25	; 0x03

char  str[50],temp;
s32 i=0,j=0,negativeFlag=0;
    47b4:	19 86       	std	Y+9, r1	; 0x09
    47b6:	1a 86       	std	Y+10, r1	; 0x0a
    47b8:	1b 86       	std	Y+11, r1	; 0x0b
    47ba:	1c 86       	std	Y+12, r1	; 0x0c
    47bc:	1d 82       	std	Y+5, r1	; 0x05
    47be:	1e 82       	std	Y+6, r1	; 0x06
    47c0:	1f 82       	std	Y+7, r1	; 0x07
    47c2:	18 86       	std	Y+8, r1	; 0x08
    47c4:	19 82       	std	Y+1, r1	; 0x01
    47c6:	1a 82       	std	Y+2, r1	; 0x02
    47c8:	1b 82       	std	Y+3, r1	; 0x03
    47ca:	1c 82       	std	Y+4, r1	; 0x04

if(copy_u32Num<0){
    47cc:	fe 01       	movw	r30, r28
    47ce:	e0 5c       	subi	r30, 0xC0	; 192
    47d0:	ff 4f       	sbci	r31, 0xFF	; 255
    47d2:	80 81       	ld	r24, Z
    47d4:	91 81       	ldd	r25, Z+1	; 0x01
    47d6:	a2 81       	ldd	r26, Z+2	; 0x02
    47d8:	b3 81       	ldd	r27, Z+3	; 0x03
    47da:	bb 23       	and	r27, r27
    47dc:	f4 f4       	brge	.+60     	; 0x481a <HLCD_sendIntNum+0x9a>
	negativeFlag=1;
    47de:	81 e0       	ldi	r24, 0x01	; 1
    47e0:	90 e0       	ldi	r25, 0x00	; 0
    47e2:	a0 e0       	ldi	r26, 0x00	; 0
    47e4:	b0 e0       	ldi	r27, 0x00	; 0
    47e6:	89 83       	std	Y+1, r24	; 0x01
    47e8:	9a 83       	std	Y+2, r25	; 0x02
    47ea:	ab 83       	std	Y+3, r26	; 0x03
    47ec:	bc 83       	std	Y+4, r27	; 0x04
	copy_u32Num*=-1;
    47ee:	9e 01       	movw	r18, r28
    47f0:	20 5c       	subi	r18, 0xC0	; 192
    47f2:	3f 4f       	sbci	r19, 0xFF	; 255
    47f4:	fe 01       	movw	r30, r28
    47f6:	e0 5c       	subi	r30, 0xC0	; 192
    47f8:	ff 4f       	sbci	r31, 0xFF	; 255
    47fa:	80 81       	ld	r24, Z
    47fc:	91 81       	ldd	r25, Z+1	; 0x01
    47fe:	a2 81       	ldd	r26, Z+2	; 0x02
    4800:	b3 81       	ldd	r27, Z+3	; 0x03
    4802:	b0 95       	com	r27
    4804:	a0 95       	com	r26
    4806:	90 95       	com	r25
    4808:	81 95       	neg	r24
    480a:	9f 4f       	sbci	r25, 0xFF	; 255
    480c:	af 4f       	sbci	r26, 0xFF	; 255
    480e:	bf 4f       	sbci	r27, 0xFF	; 255
    4810:	f9 01       	movw	r30, r18
    4812:	80 83       	st	Z, r24
    4814:	91 83       	std	Z+1, r25	; 0x01
    4816:	a2 83       	std	Z+2, r26	; 0x02
    4818:	b3 83       	std	Z+3, r27	; 0x03
}//end if

do{
str[i++]=(copy_u32Num%10 )+ '0';
    481a:	e9 84       	ldd	r14, Y+9	; 0x09
    481c:	fa 84       	ldd	r15, Y+10	; 0x0a
    481e:	0b 85       	ldd	r16, Y+11	; 0x0b
    4820:	1c 85       	ldd	r17, Y+12	; 0x0c
    4822:	fe 01       	movw	r30, r28
    4824:	e0 5c       	subi	r30, 0xC0	; 192
    4826:	ff 4f       	sbci	r31, 0xFF	; 255
    4828:	80 81       	ld	r24, Z
    482a:	91 81       	ldd	r25, Z+1	; 0x01
    482c:	a2 81       	ldd	r26, Z+2	; 0x02
    482e:	b3 81       	ldd	r27, Z+3	; 0x03
    4830:	2a e0       	ldi	r18, 0x0A	; 10
    4832:	30 e0       	ldi	r19, 0x00	; 0
    4834:	40 e0       	ldi	r20, 0x00	; 0
    4836:	50 e0       	ldi	r21, 0x00	; 0
    4838:	bc 01       	movw	r22, r24
    483a:	cd 01       	movw	r24, r26
    483c:	0e 94 75 3a 	call	0x74ea	; 0x74ea <__divmodsi4>
    4840:	dc 01       	movw	r26, r24
    4842:	cb 01       	movw	r24, r22
    4844:	28 2f       	mov	r18, r24
    4846:	20 5d       	subi	r18, 0xD0	; 208
    4848:	ce 01       	movw	r24, r28
    484a:	0e 96       	adiw	r24, 0x0e	; 14
    484c:	fc 01       	movw	r30, r24
    484e:	ee 0d       	add	r30, r14
    4850:	ff 1d       	adc	r31, r15
    4852:	20 83       	st	Z, r18
    4854:	89 85       	ldd	r24, Y+9	; 0x09
    4856:	9a 85       	ldd	r25, Y+10	; 0x0a
    4858:	ab 85       	ldd	r26, Y+11	; 0x0b
    485a:	bc 85       	ldd	r27, Y+12	; 0x0c
    485c:	01 96       	adiw	r24, 0x01	; 1
    485e:	a1 1d       	adc	r26, r1
    4860:	b1 1d       	adc	r27, r1
    4862:	89 87       	std	Y+9, r24	; 0x09
    4864:	9a 87       	std	Y+10, r25	; 0x0a
    4866:	ab 87       	std	Y+11, r26	; 0x0b
    4868:	bc 87       	std	Y+12, r27	; 0x0c
copy_u32Num/=10;
    486a:	8e 01       	movw	r16, r28
    486c:	00 5c       	subi	r16, 0xC0	; 192
    486e:	1f 4f       	sbci	r17, 0xFF	; 255
    4870:	fe 01       	movw	r30, r28
    4872:	e0 5c       	subi	r30, 0xC0	; 192
    4874:	ff 4f       	sbci	r31, 0xFF	; 255
    4876:	80 81       	ld	r24, Z
    4878:	91 81       	ldd	r25, Z+1	; 0x01
    487a:	a2 81       	ldd	r26, Z+2	; 0x02
    487c:	b3 81       	ldd	r27, Z+3	; 0x03
    487e:	2a e0       	ldi	r18, 0x0A	; 10
    4880:	30 e0       	ldi	r19, 0x00	; 0
    4882:	40 e0       	ldi	r20, 0x00	; 0
    4884:	50 e0       	ldi	r21, 0x00	; 0
    4886:	bc 01       	movw	r22, r24
    4888:	cd 01       	movw	r24, r26
    488a:	0e 94 75 3a 	call	0x74ea	; 0x74ea <__divmodsi4>
    488e:	da 01       	movw	r26, r20
    4890:	c9 01       	movw	r24, r18
    4892:	f8 01       	movw	r30, r16
    4894:	80 83       	st	Z, r24
    4896:	91 83       	std	Z+1, r25	; 0x01
    4898:	a2 83       	std	Z+2, r26	; 0x02
    489a:	b3 83       	std	Z+3, r27	; 0x03
}while(copy_u32Num>0);
    489c:	fe 01       	movw	r30, r28
    489e:	e0 5c       	subi	r30, 0xC0	; 192
    48a0:	ff 4f       	sbci	r31, 0xFF	; 255
    48a2:	80 81       	ld	r24, Z
    48a4:	91 81       	ldd	r25, Z+1	; 0x01
    48a6:	a2 81       	ldd	r26, Z+2	; 0x02
    48a8:	b3 81       	ldd	r27, Z+3	; 0x03
    48aa:	18 16       	cp	r1, r24
    48ac:	19 06       	cpc	r1, r25
    48ae:	1a 06       	cpc	r1, r26
    48b0:	1b 06       	cpc	r1, r27
    48b2:	0c f4       	brge	.+2      	; 0x48b6 <HLCD_sendIntNum+0x136>
    48b4:	b2 cf       	rjmp	.-156    	; 0x481a <HLCD_sendIntNum+0x9a>

if(negativeFlag==1)
    48b6:	89 81       	ldd	r24, Y+1	; 0x01
    48b8:	9a 81       	ldd	r25, Y+2	; 0x02
    48ba:	ab 81       	ldd	r26, Y+3	; 0x03
    48bc:	bc 81       	ldd	r27, Y+4	; 0x04
    48be:	81 30       	cpi	r24, 0x01	; 1
    48c0:	91 05       	cpc	r25, r1
    48c2:	a1 05       	cpc	r26, r1
    48c4:	b1 05       	cpc	r27, r1
    48c6:	b9 f4       	brne	.+46     	; 0x48f6 <HLCD_sendIntNum+0x176>
{
str[i++]='-';
    48c8:	89 85       	ldd	r24, Y+9	; 0x09
    48ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    48cc:	ab 85       	ldd	r26, Y+11	; 0x0b
    48ce:	bc 85       	ldd	r27, Y+12	; 0x0c
    48d0:	9e 01       	movw	r18, r28
    48d2:	22 5f       	subi	r18, 0xF2	; 242
    48d4:	3f 4f       	sbci	r19, 0xFF	; 255
    48d6:	f9 01       	movw	r30, r18
    48d8:	e8 0f       	add	r30, r24
    48da:	f9 1f       	adc	r31, r25
    48dc:	8d e2       	ldi	r24, 0x2D	; 45
    48de:	80 83       	st	Z, r24
    48e0:	89 85       	ldd	r24, Y+9	; 0x09
    48e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    48e4:	ab 85       	ldd	r26, Y+11	; 0x0b
    48e6:	bc 85       	ldd	r27, Y+12	; 0x0c
    48e8:	01 96       	adiw	r24, 0x01	; 1
    48ea:	a1 1d       	adc	r26, r1
    48ec:	b1 1d       	adc	r27, r1
    48ee:	89 87       	std	Y+9, r24	; 0x09
    48f0:	9a 87       	std	Y+10, r25	; 0x0a
    48f2:	ab 87       	std	Y+11, r26	; 0x0b
    48f4:	bc 87       	std	Y+12, r27	; 0x0c
}

str[i]='\0';//null
    48f6:	89 85       	ldd	r24, Y+9	; 0x09
    48f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    48fa:	ab 85       	ldd	r26, Y+11	; 0x0b
    48fc:	bc 85       	ldd	r27, Y+12	; 0x0c
    48fe:	9e 01       	movw	r18, r28
    4900:	22 5f       	subi	r18, 0xF2	; 242
    4902:	3f 4f       	sbci	r19, 0xFF	; 255
    4904:	f9 01       	movw	r30, r18
    4906:	e8 0f       	add	r30, r24
    4908:	f9 1f       	adc	r31, r25
    490a:	10 82       	st	Z, r1
for(j=0;j<i/2;j++)
    490c:	1d 82       	std	Y+5, r1	; 0x05
    490e:	1e 82       	std	Y+6, r1	; 0x06
    4910:	1f 82       	std	Y+7, r1	; 0x07
    4912:	18 86       	std	Y+8, r1	; 0x08
    4914:	56 c0       	rjmp	.+172    	; 0x49c2 <HLCD_sendIntNum+0x242>
{
	temp=str[j];
    4916:	8d 81       	ldd	r24, Y+5	; 0x05
    4918:	9e 81       	ldd	r25, Y+6	; 0x06
    491a:	af 81       	ldd	r26, Y+7	; 0x07
    491c:	b8 85       	ldd	r27, Y+8	; 0x08
    491e:	9e 01       	movw	r18, r28
    4920:	22 5f       	subi	r18, 0xF2	; 242
    4922:	3f 4f       	sbci	r19, 0xFF	; 255
    4924:	f9 01       	movw	r30, r18
    4926:	e8 0f       	add	r30, r24
    4928:	f9 1f       	adc	r31, r25
    492a:	80 81       	ld	r24, Z
    492c:	8d 87       	std	Y+13, r24	; 0x0d
	str[j]=str[i-j-1];
    492e:	ed 80       	ldd	r14, Y+5	; 0x05
    4930:	fe 80       	ldd	r15, Y+6	; 0x06
    4932:	0f 81       	ldd	r16, Y+7	; 0x07
    4934:	18 85       	ldd	r17, Y+8	; 0x08
    4936:	29 85       	ldd	r18, Y+9	; 0x09
    4938:	3a 85       	ldd	r19, Y+10	; 0x0a
    493a:	4b 85       	ldd	r20, Y+11	; 0x0b
    493c:	5c 85       	ldd	r21, Y+12	; 0x0c
    493e:	8d 81       	ldd	r24, Y+5	; 0x05
    4940:	9e 81       	ldd	r25, Y+6	; 0x06
    4942:	af 81       	ldd	r26, Y+7	; 0x07
    4944:	b8 85       	ldd	r27, Y+8	; 0x08
    4946:	59 01       	movw	r10, r18
    4948:	6a 01       	movw	r12, r20
    494a:	a8 1a       	sub	r10, r24
    494c:	b9 0a       	sbc	r11, r25
    494e:	ca 0a       	sbc	r12, r26
    4950:	db 0a       	sbc	r13, r27
    4952:	d6 01       	movw	r26, r12
    4954:	c5 01       	movw	r24, r10
    4956:	01 97       	sbiw	r24, 0x01	; 1
    4958:	a1 09       	sbc	r26, r1
    495a:	b1 09       	sbc	r27, r1
    495c:	9e 01       	movw	r18, r28
    495e:	22 5f       	subi	r18, 0xF2	; 242
    4960:	3f 4f       	sbci	r19, 0xFF	; 255
    4962:	f9 01       	movw	r30, r18
    4964:	e8 0f       	add	r30, r24
    4966:	f9 1f       	adc	r31, r25
    4968:	20 81       	ld	r18, Z
    496a:	ce 01       	movw	r24, r28
    496c:	0e 96       	adiw	r24, 0x0e	; 14
    496e:	fc 01       	movw	r30, r24
    4970:	ee 0d       	add	r30, r14
    4972:	ff 1d       	adc	r31, r15
    4974:	20 83       	st	Z, r18
	str[i-j-1]=temp;
    4976:	29 85       	ldd	r18, Y+9	; 0x09
    4978:	3a 85       	ldd	r19, Y+10	; 0x0a
    497a:	4b 85       	ldd	r20, Y+11	; 0x0b
    497c:	5c 85       	ldd	r21, Y+12	; 0x0c
    497e:	8d 81       	ldd	r24, Y+5	; 0x05
    4980:	9e 81       	ldd	r25, Y+6	; 0x06
    4982:	af 81       	ldd	r26, Y+7	; 0x07
    4984:	b8 85       	ldd	r27, Y+8	; 0x08
    4986:	69 01       	movw	r12, r18
    4988:	7a 01       	movw	r14, r20
    498a:	c8 1a       	sub	r12, r24
    498c:	d9 0a       	sbc	r13, r25
    498e:	ea 0a       	sbc	r14, r26
    4990:	fb 0a       	sbc	r15, r27
    4992:	d7 01       	movw	r26, r14
    4994:	c6 01       	movw	r24, r12
    4996:	01 97       	sbiw	r24, 0x01	; 1
    4998:	a1 09       	sbc	r26, r1
    499a:	b1 09       	sbc	r27, r1
    499c:	9e 01       	movw	r18, r28
    499e:	22 5f       	subi	r18, 0xF2	; 242
    49a0:	3f 4f       	sbci	r19, 0xFF	; 255
    49a2:	f9 01       	movw	r30, r18
    49a4:	e8 0f       	add	r30, r24
    49a6:	f9 1f       	adc	r31, r25
    49a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    49aa:	80 83       	st	Z, r24
{
str[i++]='-';
}

str[i]='\0';//null
for(j=0;j<i/2;j++)
    49ac:	8d 81       	ldd	r24, Y+5	; 0x05
    49ae:	9e 81       	ldd	r25, Y+6	; 0x06
    49b0:	af 81       	ldd	r26, Y+7	; 0x07
    49b2:	b8 85       	ldd	r27, Y+8	; 0x08
    49b4:	01 96       	adiw	r24, 0x01	; 1
    49b6:	a1 1d       	adc	r26, r1
    49b8:	b1 1d       	adc	r27, r1
    49ba:	8d 83       	std	Y+5, r24	; 0x05
    49bc:	9e 83       	std	Y+6, r25	; 0x06
    49be:	af 83       	std	Y+7, r26	; 0x07
    49c0:	b8 87       	std	Y+8, r27	; 0x08
    49c2:	89 85       	ldd	r24, Y+9	; 0x09
    49c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    49c6:	ab 85       	ldd	r26, Y+11	; 0x0b
    49c8:	bc 85       	ldd	r27, Y+12	; 0x0c
    49ca:	22 e0       	ldi	r18, 0x02	; 2
    49cc:	30 e0       	ldi	r19, 0x00	; 0
    49ce:	40 e0       	ldi	r20, 0x00	; 0
    49d0:	50 e0       	ldi	r21, 0x00	; 0
    49d2:	bc 01       	movw	r22, r24
    49d4:	cd 01       	movw	r24, r26
    49d6:	0e 94 75 3a 	call	0x74ea	; 0x74ea <__divmodsi4>
    49da:	da 01       	movw	r26, r20
    49dc:	c9 01       	movw	r24, r18
    49de:	9c 01       	movw	r18, r24
    49e0:	ad 01       	movw	r20, r26
    49e2:	8d 81       	ldd	r24, Y+5	; 0x05
    49e4:	9e 81       	ldd	r25, Y+6	; 0x06
    49e6:	af 81       	ldd	r26, Y+7	; 0x07
    49e8:	b8 85       	ldd	r27, Y+8	; 0x08
    49ea:	82 17       	cp	r24, r18
    49ec:	93 07       	cpc	r25, r19
    49ee:	a4 07       	cpc	r26, r20
    49f0:	b5 07       	cpc	r27, r21
    49f2:	0c f4       	brge	.+2      	; 0x49f6 <HLCD_sendIntNum+0x276>
    49f4:	90 cf       	rjmp	.-224    	; 0x4916 <HLCD_sendIntNum+0x196>
{
	temp=str[j];
	str[j]=str[i-j-1];
	str[i-j-1]=temp;
}
HLCD_SendString(str);
    49f6:	ce 01       	movw	r24, r28
    49f8:	0e 96       	adiw	r24, 0x0e	; 14
    49fa:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>

return SUCCES;
    49fe:	82 e0       	ldi	r24, 0x02	; 2
}
    4a00:	cd 5b       	subi	r28, 0xBD	; 189
    4a02:	df 4f       	sbci	r29, 0xFF	; 255
    4a04:	0f b6       	in	r0, 0x3f	; 63
    4a06:	f8 94       	cli
    4a08:	de bf       	out	0x3e, r29	; 62
    4a0a:	0f be       	out	0x3f, r0	; 63
    4a0c:	cd bf       	out	0x3d, r28	; 61
    4a0e:	cf 91       	pop	r28
    4a10:	df 91       	pop	r29
    4a12:	1f 91       	pop	r17
    4a14:	0f 91       	pop	r16
    4a16:	ff 90       	pop	r15
    4a18:	ef 90       	pop	r14
    4a1a:	df 90       	pop	r13
    4a1c:	cf 90       	pop	r12
    4a1e:	bf 90       	pop	r11
    4a20:	af 90       	pop	r10
    4a22:	08 95       	ret

00004a24 <HLCD_gotoXY>:

ErrorState_t HLCD_gotoXY(u8 copy_u8Row,u8 copy_u8Column)
{
    4a24:	df 93       	push	r29
    4a26:	cf 93       	push	r28
    4a28:	00 d0       	rcall	.+0      	; 0x4a2a <HLCD_gotoXY+0x6>
    4a2a:	00 d0       	rcall	.+0      	; 0x4a2c <HLCD_gotoXY+0x8>
    4a2c:	cd b7       	in	r28, 0x3d	; 61
    4a2e:	de b7       	in	r29, 0x3e	; 62
    4a30:	89 83       	std	Y+1, r24	; 0x01
    4a32:	6a 83       	std	Y+2, r22	; 0x02
switch(copy_u8Row)
    4a34:	89 81       	ldd	r24, Y+1	; 0x01
    4a36:	28 2f       	mov	r18, r24
    4a38:	30 e0       	ldi	r19, 0x00	; 0
    4a3a:	3c 83       	std	Y+4, r19	; 0x04
    4a3c:	2b 83       	std	Y+3, r18	; 0x03
    4a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    4a40:	9c 81       	ldd	r25, Y+4	; 0x04
    4a42:	81 30       	cpi	r24, 0x01	; 1
    4a44:	91 05       	cpc	r25, r1
    4a46:	31 f0       	breq	.+12     	; 0x4a54 <HLCD_gotoXY+0x30>
    4a48:	2b 81       	ldd	r18, Y+3	; 0x03
    4a4a:	3c 81       	ldd	r19, Y+4	; 0x04
    4a4c:	22 30       	cpi	r18, 0x02	; 2
    4a4e:	31 05       	cpc	r19, r1
    4a50:	31 f0       	breq	.+12     	; 0x4a5e <HLCD_gotoXY+0x3a>
    4a52:	0a c0       	rjmp	.+20     	; 0x4a68 <HLCD_gotoXY+0x44>
{
case ROW_1:HLCD_SendCommand(HLCD_SET_ROW1+(copy_u8Column-1));
    4a54:	8a 81       	ldd	r24, Y+2	; 0x02
    4a56:	81 58       	subi	r24, 0x81	; 129
    4a58:	0e 94 86 23 	call	0x470c	; 0x470c <HLCD_SendCommand>
    4a5c:	08 c0       	rjmp	.+16     	; 0x4a6e <HLCD_gotoXY+0x4a>
break;
case ROW_2:HLCD_SendCommand(HLCD_SET_ROW2+(copy_u8Column-1));
    4a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    4a60:	81 54       	subi	r24, 0x41	; 65
    4a62:	0e 94 86 23 	call	0x470c	; 0x470c <HLCD_SendCommand>
    4a66:	03 c0       	rjmp	.+6      	; 0x4a6e <HLCD_gotoXY+0x4a>
break;
default:
	HLCD_SendCommand(HLCD_SET_ROW1);
    4a68:	80 e8       	ldi	r24, 0x80	; 128
    4a6a:	0e 94 86 23 	call	0x470c	; 0x470c <HLCD_SendCommand>
}

	return SUCCES;
    4a6e:	82 e0       	ldi	r24, 0x02	; 2
}
    4a70:	0f 90       	pop	r0
    4a72:	0f 90       	pop	r0
    4a74:	0f 90       	pop	r0
    4a76:	0f 90       	pop	r0
    4a78:	cf 91       	pop	r28
    4a7a:	df 91       	pop	r29
    4a7c:	08 95       	ret

00004a7e <HLCD_SendCustomChar>:

ErrorState_t HLCD_SendCustomChar(u8 copy_u8CharCode,u8 * ptrPatterCode)
{
    4a7e:	df 93       	push	r29
    4a80:	cf 93       	push	r28
    4a82:	00 d0       	rcall	.+0      	; 0x4a84 <HLCD_SendCustomChar+0x6>
    4a84:	00 d0       	rcall	.+0      	; 0x4a86 <HLCD_SendCustomChar+0x8>
    4a86:	cd b7       	in	r28, 0x3d	; 61
    4a88:	de b7       	in	r29, 0x3e	; 62
    4a8a:	8a 83       	std	Y+2, r24	; 0x02
    4a8c:	7c 83       	std	Y+4, r23	; 0x04
    4a8e:	6b 83       	std	Y+3, r22	; 0x03
	u8 i=0;
    4a90:	19 82       	std	Y+1, r1	; 0x01
	if(copy_u8CharCode<8&&copy_u8CharCode>=0)
    4a92:	8a 81       	ldd	r24, Y+2	; 0x02
    4a94:	88 30       	cpi	r24, 0x08	; 8
    4a96:	f8 f4       	brcc	.+62     	; 0x4ad6 <HLCD_SendCustomChar+0x58>
	{
		HLCD_SendCommand(HLCD_GCRAM_SET+(copy_u8CharCode* GCRAM_ROW_INC));
    4a98:	8a 81       	ldd	r24, Y+2	; 0x02
    4a9a:	88 2f       	mov	r24, r24
    4a9c:	90 e0       	ldi	r25, 0x00	; 0
    4a9e:	08 96       	adiw	r24, 0x08	; 8
    4aa0:	88 0f       	add	r24, r24
    4aa2:	99 1f       	adc	r25, r25
    4aa4:	88 0f       	add	r24, r24
    4aa6:	99 1f       	adc	r25, r25
    4aa8:	88 0f       	add	r24, r24
    4aaa:	99 1f       	adc	r25, r25
    4aac:	0e 94 86 23 	call	0x470c	; 0x470c <HLCD_SendCommand>
		for(i=0;i<8;i++)
    4ab0:	19 82       	std	Y+1, r1	; 0x01
    4ab2:	0e c0       	rjmp	.+28     	; 0x4ad0 <HLCD_SendCustomChar+0x52>
		{
			HLCD_SendData(ptrPatterCode[i]);
    4ab4:	89 81       	ldd	r24, Y+1	; 0x01
    4ab6:	28 2f       	mov	r18, r24
    4ab8:	30 e0       	ldi	r19, 0x00	; 0
    4aba:	8b 81       	ldd	r24, Y+3	; 0x03
    4abc:	9c 81       	ldd	r25, Y+4	; 0x04
    4abe:	fc 01       	movw	r30, r24
    4ac0:	e2 0f       	add	r30, r18
    4ac2:	f3 1f       	adc	r31, r19
    4ac4:	80 81       	ld	r24, Z
    4ac6:	0e 94 74 23 	call	0x46e8	; 0x46e8 <HLCD_SendData>
{
	u8 i=0;
	if(copy_u8CharCode<8&&copy_u8CharCode>=0)
	{
		HLCD_SendCommand(HLCD_GCRAM_SET+(copy_u8CharCode* GCRAM_ROW_INC));
		for(i=0;i<8;i++)
    4aca:	89 81       	ldd	r24, Y+1	; 0x01
    4acc:	8f 5f       	subi	r24, 0xFF	; 255
    4ace:	89 83       	std	Y+1, r24	; 0x01
    4ad0:	89 81       	ldd	r24, Y+1	; 0x01
    4ad2:	88 30       	cpi	r24, 0x08	; 8
    4ad4:	78 f3       	brcs	.-34     	; 0x4ab4 <HLCD_SendCustomChar+0x36>
			HLCD_SendData(ptrPatterCode[i]);
		}

	}

	return SUCCES;
    4ad6:	82 e0       	ldi	r24, 0x02	; 2
}
    4ad8:	0f 90       	pop	r0
    4ada:	0f 90       	pop	r0
    4adc:	0f 90       	pop	r0
    4ade:	0f 90       	pop	r0
    4ae0:	cf 91       	pop	r28
    4ae2:	df 91       	pop	r29
    4ae4:	08 95       	ret

00004ae6 <HLCD_DisplayCustomeChar>:
ErrorState_t HLCD_DisplayCustomeChar(u8 copy_u8CharCode)
{
    4ae6:	df 93       	push	r29
    4ae8:	cf 93       	push	r28
    4aea:	0f 92       	push	r0
    4aec:	cd b7       	in	r28, 0x3d	; 61
    4aee:	de b7       	in	r29, 0x3e	; 62
    4af0:	89 83       	std	Y+1, r24	; 0x01
	HLCD_SendData(copy_u8CharCode);
    4af2:	89 81       	ldd	r24, Y+1	; 0x01
    4af4:	0e 94 74 23 	call	0x46e8	; 0x46e8 <HLCD_SendData>
	return SUCCES;
    4af8:	82 e0       	ldi	r24, 0x02	; 2
}
    4afa:	0f 90       	pop	r0
    4afc:	cf 91       	pop	r28
    4afe:	df 91       	pop	r29
    4b00:	08 95       	ret

00004b02 <HKEYPAD_enInt>:
#include "HKEY_PAD_init.h"
#include <avr/delay.h>


ErrorState_t HKEYPAD_enInt(void)
{
    4b02:	df 93       	push	r29
    4b04:	cf 93       	push	r28
    4b06:	cd b7       	in	r28, 0x3d	; 61
    4b08:	de b7       	in	r29, 0x3e	; 62
// config rows to be output
MDIO_SetPinDirection(HKEYPAD_R0_PIN, OUTPUT);
    4b0a:	88 e1       	ldi	r24, 0x18	; 24
    4b0c:	61 e0       	ldi	r22, 0x01	; 1
    4b0e:	0e 94 de 11 	call	0x23bc	; 0x23bc <MDIO_SetPinDirection>

MDIO_SetPinDirection(HKEYPAD_R1_PIN, OUTPUT);
    4b12:	89 e1       	ldi	r24, 0x19	; 25
    4b14:	61 e0       	ldi	r22, 0x01	; 1
    4b16:	0e 94 de 11 	call	0x23bc	; 0x23bc <MDIO_SetPinDirection>
MDIO_SetPinDirection(HKEYPAD_R2_PIN, OUTPUT);
    4b1a:	8a e1       	ldi	r24, 0x1A	; 26
    4b1c:	61 e0       	ldi	r22, 0x01	; 1
    4b1e:	0e 94 de 11 	call	0x23bc	; 0x23bc <MDIO_SetPinDirection>
MDIO_SetPinDirection(HKEYPAD_R3_PIN, OUTPUT);
    4b22:	8b e1       	ldi	r24, 0x1B	; 27
    4b24:	61 e0       	ldi	r22, 0x01	; 1
    4b26:	0e 94 de 11 	call	0x23bc	; 0x23bc <MDIO_SetPinDirection>


	//config columns to be input
MDIO_SetPinDirection(HKEYPAD_C0_PIN, INPUT);
    4b2a:	8a e2       	ldi	r24, 0x2A	; 42
    4b2c:	60 e0       	ldi	r22, 0x00	; 0
    4b2e:	0e 94 de 11 	call	0x23bc	; 0x23bc <MDIO_SetPinDirection>
MDIO_SetPinDirection(HKEYPAD_C1_PIN, INPUT);
    4b32:	8b e2       	ldi	r24, 0x2B	; 43
    4b34:	60 e0       	ldi	r22, 0x00	; 0
    4b36:	0e 94 de 11 	call	0x23bc	; 0x23bc <MDIO_SetPinDirection>
MDIO_SetPinDirection(HKEYPAD_C2_PIN, INPUT);
    4b3a:	8c e2       	ldi	r24, 0x2C	; 44
    4b3c:	60 e0       	ldi	r22, 0x00	; 0
    4b3e:	0e 94 de 11 	call	0x23bc	; 0x23bc <MDIO_SetPinDirection>
MDIO_SetPinDirection(HKEYPAD_C3_PIN, INPUT);
    4b42:	8d e2       	ldi	r24, 0x2D	; 45
    4b44:	60 e0       	ldi	r22, 0x00	; 0
    4b46:	0e 94 de 11 	call	0x23bc	; 0x23bc <MDIO_SetPinDirection>
//initial output rows(HIGH)  cause rows are the ground
MDIO_voidSetPinValue(HKEYPAD_R0_PIN, HIGH);
    4b4a:	88 e1       	ldi	r24, 0x18	; 24
    4b4c:	61 e0       	ldi	r22, 0x01	; 1
    4b4e:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
MDIO_voidSetPinValue(HKEYPAD_R1_PIN, HIGH);
    4b52:	89 e1       	ldi	r24, 0x19	; 25
    4b54:	61 e0       	ldi	r22, 0x01	; 1
    4b56:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
MDIO_voidSetPinValue(HKEYPAD_R2_PIN, HIGH);
    4b5a:	8a e1       	ldi	r24, 0x1A	; 26
    4b5c:	61 e0       	ldi	r22, 0x01	; 1
    4b5e:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
MDIO_voidSetPinValue(HKEYPAD_R3_PIN, HIGH);
    4b62:	8b e1       	ldi	r24, 0x1B	; 27
    4b64:	61 e0       	ldi	r22, 0x01	; 1
    4b66:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>

#if(KIT_TYPE==SIM_KIT)
MDIO_voidSetPinValue(HKEYPAD_C0_PIN, HIGH);
    4b6a:	8a e2       	ldi	r24, 0x2A	; 42
    4b6c:	61 e0       	ldi	r22, 0x01	; 1
    4b6e:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
MDIO_voidSetPinValue(HKEYPAD_C1_PIN, HIGH);
    4b72:	8b e2       	ldi	r24, 0x2B	; 43
    4b74:	61 e0       	ldi	r22, 0x01	; 1
    4b76:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
MDIO_voidSetPinValue(HKEYPAD_C2_PIN, HIGH);
    4b7a:	8c e2       	ldi	r24, 0x2C	; 44
    4b7c:	61 e0       	ldi	r22, 0x01	; 1
    4b7e:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
MDIO_voidSetPinValue(HKEYPAD_C3_PIN, HIGH);
    4b82:	8d e2       	ldi	r24, 0x2D	; 45
    4b84:	61 e0       	ldi	r22, 0x01	; 1
    4b86:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
#endif
return SUCCES;
    4b8a:	82 e0       	ldi	r24, 0x02	; 2
}
    4b8c:	cf 91       	pop	r28
    4b8e:	df 91       	pop	r29
    4b90:	08 95       	ret

00004b92 <HKEYPAD_enGetPressedKey>:


ErrorState_t HKEYPAD_enGetPressedKey(u8 * ptrKey)
{
    4b92:	df 93       	push	r29
    4b94:	cf 93       	push	r28
    4b96:	cd b7       	in	r28, 0x3d	; 61
    4b98:	de b7       	in	r29, 0x3e	; 62
    4b9a:	e2 97       	sbiw	r28, 0x32	; 50
    4b9c:	0f b6       	in	r0, 0x3f	; 63
    4b9e:	f8 94       	cli
    4ba0:	de bf       	out	0x3e, r29	; 62
    4ba2:	0f be       	out	0x3f, r0	; 63
    4ba4:	cd bf       	out	0x3d, r28	; 61
    4ba6:	9d a7       	std	Y+45, r25	; 0x2d
    4ba8:	8c a7       	std	Y+44, r24	; 0x2c
		BKEY_STATE_PRESS,
		BKEY_STATE_REALESE

	}Bkeypad_Stat_t;

	u8 Local_u8PressedKey=HKEYPAD_NO_PRESSED_KEY;
    4baa:	8f ef       	ldi	r24, 0xFF	; 255
    4bac:	8a 8b       	std	Y+18, r24	; 0x12
u8 Local_u8PinRead;
u8	row_index;
u8	col_index;
u8 Local_u8ArrKeys[4][4]=HKEYPAD_KEYS;
    4bae:	ce 01       	movw	r24, r28
    4bb0:	44 96       	adiw	r24, 0x14	; 20
    4bb2:	9f a7       	std	Y+47, r25	; 0x2f
    4bb4:	8e a7       	std	Y+46, r24	; 0x2e
    4bb6:	e2 e0       	ldi	r30, 0x02	; 2
    4bb8:	f3 e0       	ldi	r31, 0x03	; 3
    4bba:	f9 ab       	std	Y+49, r31	; 0x31
    4bbc:	e8 ab       	std	Y+48, r30	; 0x30
    4bbe:	f0 e1       	ldi	r31, 0x10	; 16
    4bc0:	fa ab       	std	Y+50, r31	; 0x32
    4bc2:	e8 a9       	ldd	r30, Y+48	; 0x30
    4bc4:	f9 a9       	ldd	r31, Y+49	; 0x31
    4bc6:	00 80       	ld	r0, Z
    4bc8:	88 a9       	ldd	r24, Y+48	; 0x30
    4bca:	99 a9       	ldd	r25, Y+49	; 0x31
    4bcc:	01 96       	adiw	r24, 0x01	; 1
    4bce:	99 ab       	std	Y+49, r25	; 0x31
    4bd0:	88 ab       	std	Y+48, r24	; 0x30
    4bd2:	ee a5       	ldd	r30, Y+46	; 0x2e
    4bd4:	ff a5       	ldd	r31, Y+47	; 0x2f
    4bd6:	00 82       	st	Z, r0
    4bd8:	8e a5       	ldd	r24, Y+46	; 0x2e
    4bda:	9f a5       	ldd	r25, Y+47	; 0x2f
    4bdc:	01 96       	adiw	r24, 0x01	; 1
    4bde:	9f a7       	std	Y+47, r25	; 0x2f
    4be0:	8e a7       	std	Y+46, r24	; 0x2e
    4be2:	9a a9       	ldd	r25, Y+50	; 0x32
    4be4:	91 50       	subi	r25, 0x01	; 1
    4be6:	9a ab       	std	Y+50, r25	; 0x32
    4be8:	ea a9       	ldd	r30, Y+50	; 0x32
    4bea:	ee 23       	and	r30, r30
    4bec:	51 f7       	brne	.-44     	; 0x4bc2 <HKEYPAD_enGetPressedKey+0x30>
u8 flag=0;
    4bee:	1f 86       	std	Y+15, r1	; 0x0f
//cause the ports were in  sequence we can start and end the for by r0 till r3
//to make it generic

u8 rowArr[]={HKEYPAD_R0_PIN,HKEYPAD_R1_PIN,HKEYPAD_R2_PIN,HKEYPAD_R3_PIN};
    4bf0:	88 e1       	ldi	r24, 0x18	; 24
    4bf2:	8c a3       	std	Y+36, r24	; 0x24
    4bf4:	89 e1       	ldi	r24, 0x19	; 25
    4bf6:	8d a3       	std	Y+37, r24	; 0x25
    4bf8:	8a e1       	ldi	r24, 0x1A	; 26
    4bfa:	8e a3       	std	Y+38, r24	; 0x26
    4bfc:	8b e1       	ldi	r24, 0x1B	; 27
    4bfe:	8f a3       	std	Y+39, r24	; 0x27
u8 colArr[]={HKEYPAD_C0_PIN,HKEYPAD_C1_PIN,HKEYPAD_C2_PIN,HKEYPAD_C3_PIN};
    4c00:	8a e2       	ldi	r24, 0x2A	; 42
    4c02:	88 a7       	std	Y+40, r24	; 0x28
    4c04:	8b e2       	ldi	r24, 0x2B	; 43
    4c06:	89 a7       	std	Y+41, r24	; 0x29
    4c08:	8c e2       	ldi	r24, 0x2C	; 44
    4c0a:	8a a7       	std	Y+42, r24	; 0x2a
    4c0c:	8d e2       	ldi	r24, 0x2D	; 45
    4c0e:	8b a7       	std	Y+43, r24	; 0x2b
for(row_index=0 ;row_index<=3&&flag==0 ;row_index++)
    4c10:	19 8a       	std	Y+17, r1	; 0x11
    4c12:	e5 c0       	rjmp	.+458    	; 0x4dde <HKEYPAD_enGetPressedKey+0x24c>
{	//output 0(ground) on row
	MDIO_voidSetPinValue(rowArr[row_index],LOW);
    4c14:	89 89       	ldd	r24, Y+17	; 0x11
    4c16:	28 2f       	mov	r18, r24
    4c18:	30 e0       	ldi	r19, 0x00	; 0
    4c1a:	ce 01       	movw	r24, r28
    4c1c:	84 96       	adiw	r24, 0x24	; 36
    4c1e:	fc 01       	movw	r30, r24
    4c20:	e2 0f       	add	r30, r18
    4c22:	f3 1f       	adc	r31, r19
    4c24:	80 81       	ld	r24, Z
    4c26:	60 e0       	ldi	r22, 0x00	; 0
    4c28:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	for(col_index=0;col_index<=3 ;col_index++)
    4c2c:	18 8a       	std	Y+16, r1	; 0x10
    4c2e:	c4 c0       	rjmp	.+392    	; 0x4db8 <HKEYPAD_enGetPressedKey+0x226>
	{//read the colimn
		MDIO_voidGetPinValue(colArr[col_index],&Local_u8PinRead);
    4c30:	88 89       	ldd	r24, Y+16	; 0x10
    4c32:	28 2f       	mov	r18, r24
    4c34:	30 e0       	ldi	r19, 0x00	; 0
    4c36:	ce 01       	movw	r24, r28
    4c38:	88 96       	adiw	r24, 0x28	; 40
    4c3a:	fc 01       	movw	r30, r24
    4c3c:	e2 0f       	add	r30, r18
    4c3e:	f3 1f       	adc	r31, r19
    4c40:	80 81       	ld	r24, Z
    4c42:	9e 01       	movw	r18, r28
    4c44:	2d 5e       	subi	r18, 0xED	; 237
    4c46:	3f 4f       	sbci	r19, 0xFF	; 255
    4c48:	b9 01       	movw	r22, r18
    4c4a:	0e 94 66 14 	call	0x28cc	; 0x28cc <MDIO_voidGetPinValue>

		if(Local_u8PinRead== HKEYPAD_KEY_PRESSED )
    4c4e:	8b 89       	ldd	r24, Y+19	; 0x13
    4c50:	88 23       	and	r24, r24
    4c52:	09 f0       	breq	.+2      	; 0x4c56 <HKEYPAD_enGetPressedKey+0xc4>
    4c54:	ae c0       	rjmp	.+348    	; 0x4db2 <HKEYPAD_enGetPressedKey+0x220>
    4c56:	80 e0       	ldi	r24, 0x00	; 0
    4c58:	90 e0       	ldi	r25, 0x00	; 0
    4c5a:	a8 e4       	ldi	r26, 0x48	; 72
    4c5c:	b2 e4       	ldi	r27, 0x42	; 66
    4c5e:	8b 87       	std	Y+11, r24	; 0x0b
    4c60:	9c 87       	std	Y+12, r25	; 0x0c
    4c62:	ad 87       	std	Y+13, r26	; 0x0d
    4c64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c66:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c68:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c6e:	20 e0       	ldi	r18, 0x00	; 0
    4c70:	30 e0       	ldi	r19, 0x00	; 0
    4c72:	4a e7       	ldi	r20, 0x7A	; 122
    4c74:	55 e4       	ldi	r21, 0x45	; 69
    4c76:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    4c7a:	dc 01       	movw	r26, r24
    4c7c:	cb 01       	movw	r24, r22
    4c7e:	8f 83       	std	Y+7, r24	; 0x07
    4c80:	98 87       	std	Y+8, r25	; 0x08
    4c82:	a9 87       	std	Y+9, r26	; 0x09
    4c84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c86:	6f 81       	ldd	r22, Y+7	; 0x07
    4c88:	78 85       	ldd	r23, Y+8	; 0x08
    4c8a:	89 85       	ldd	r24, Y+9	; 0x09
    4c8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c8e:	20 e0       	ldi	r18, 0x00	; 0
    4c90:	30 e0       	ldi	r19, 0x00	; 0
    4c92:	40 e8       	ldi	r20, 0x80	; 128
    4c94:	5f e3       	ldi	r21, 0x3F	; 63
    4c96:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    4c9a:	88 23       	and	r24, r24
    4c9c:	2c f4       	brge	.+10     	; 0x4ca8 <HKEYPAD_enGetPressedKey+0x116>
		__ticks = 1;
    4c9e:	81 e0       	ldi	r24, 0x01	; 1
    4ca0:	90 e0       	ldi	r25, 0x00	; 0
    4ca2:	9e 83       	std	Y+6, r25	; 0x06
    4ca4:	8d 83       	std	Y+5, r24	; 0x05
    4ca6:	3f c0       	rjmp	.+126    	; 0x4d26 <HKEYPAD_enGetPressedKey+0x194>
	else if (__tmp > 65535)
    4ca8:	6f 81       	ldd	r22, Y+7	; 0x07
    4caa:	78 85       	ldd	r23, Y+8	; 0x08
    4cac:	89 85       	ldd	r24, Y+9	; 0x09
    4cae:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cb0:	20 e0       	ldi	r18, 0x00	; 0
    4cb2:	3f ef       	ldi	r19, 0xFF	; 255
    4cb4:	4f e7       	ldi	r20, 0x7F	; 127
    4cb6:	57 e4       	ldi	r21, 0x47	; 71
    4cb8:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    4cbc:	18 16       	cp	r1, r24
    4cbe:	4c f5       	brge	.+82     	; 0x4d12 <HKEYPAD_enGetPressedKey+0x180>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    4cc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    4cc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4cc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    4cc8:	20 e0       	ldi	r18, 0x00	; 0
    4cca:	30 e0       	ldi	r19, 0x00	; 0
    4ccc:	40 e2       	ldi	r20, 0x20	; 32
    4cce:	51 e4       	ldi	r21, 0x41	; 65
    4cd0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    4cd4:	dc 01       	movw	r26, r24
    4cd6:	cb 01       	movw	r24, r22
    4cd8:	bc 01       	movw	r22, r24
    4cda:	cd 01       	movw	r24, r26
    4cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ce0:	dc 01       	movw	r26, r24
    4ce2:	cb 01       	movw	r24, r22
    4ce4:	9e 83       	std	Y+6, r25	; 0x06
    4ce6:	8d 83       	std	Y+5, r24	; 0x05
    4ce8:	0f c0       	rjmp	.+30     	; 0x4d08 <HKEYPAD_enGetPressedKey+0x176>
    4cea:	80 e9       	ldi	r24, 0x90	; 144
    4cec:	91 e0       	ldi	r25, 0x01	; 1
    4cee:	9c 83       	std	Y+4, r25	; 0x04
    4cf0:	8b 83       	std	Y+3, r24	; 0x03
    4cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    4cf4:	9c 81       	ldd	r25, Y+4	; 0x04
    4cf6:	01 97       	sbiw	r24, 0x01	; 1
    4cf8:	f1 f7       	brne	.-4      	; 0x4cf6 <HKEYPAD_enGetPressedKey+0x164>
    4cfa:	9c 83       	std	Y+4, r25	; 0x04
    4cfc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    4d00:	9e 81       	ldd	r25, Y+6	; 0x06
    4d02:	01 97       	sbiw	r24, 0x01	; 1
    4d04:	9e 83       	std	Y+6, r25	; 0x06
    4d06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d08:	8d 81       	ldd	r24, Y+5	; 0x05
    4d0a:	9e 81       	ldd	r25, Y+6	; 0x06
    4d0c:	00 97       	sbiw	r24, 0x00	; 0
    4d0e:	69 f7       	brne	.-38     	; 0x4cea <HKEYPAD_enGetPressedKey+0x158>
    4d10:	14 c0       	rjmp	.+40     	; 0x4d3a <HKEYPAD_enGetPressedKey+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d12:	6f 81       	ldd	r22, Y+7	; 0x07
    4d14:	78 85       	ldd	r23, Y+8	; 0x08
    4d16:	89 85       	ldd	r24, Y+9	; 0x09
    4d18:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d1e:	dc 01       	movw	r26, r24
    4d20:	cb 01       	movw	r24, r22
    4d22:	9e 83       	std	Y+6, r25	; 0x06
    4d24:	8d 83       	std	Y+5, r24	; 0x05
    4d26:	8d 81       	ldd	r24, Y+5	; 0x05
    4d28:	9e 81       	ldd	r25, Y+6	; 0x06
    4d2a:	9a 83       	std	Y+2, r25	; 0x02
    4d2c:	89 83       	std	Y+1, r24	; 0x01
    4d2e:	89 81       	ldd	r24, Y+1	; 0x01
    4d30:	9a 81       	ldd	r25, Y+2	; 0x02
    4d32:	01 97       	sbiw	r24, 0x01	; 1
    4d34:	f1 f7       	brne	.-4      	; 0x4d32 <HKEYPAD_enGetPressedKey+0x1a0>
    4d36:	9a 83       	std	Y+2, r25	; 0x02
    4d38:	89 83       	std	Y+1, r24	; 0x01
		{//for debpuncing
			_delay_ms(50);
			//socend read
			MDIO_voidGetPinValue(colArr[col_index],&Local_u8PinRead);
    4d3a:	88 89       	ldd	r24, Y+16	; 0x10
    4d3c:	28 2f       	mov	r18, r24
    4d3e:	30 e0       	ldi	r19, 0x00	; 0
    4d40:	ce 01       	movw	r24, r28
    4d42:	88 96       	adiw	r24, 0x28	; 40
    4d44:	fc 01       	movw	r30, r24
    4d46:	e2 0f       	add	r30, r18
    4d48:	f3 1f       	adc	r31, r19
    4d4a:	80 81       	ld	r24, Z
    4d4c:	9e 01       	movw	r18, r28
    4d4e:	2d 5e       	subi	r18, 0xED	; 237
    4d50:	3f 4f       	sbci	r19, 0xFF	; 255
    4d52:	b9 01       	movw	r22, r18
    4d54:	0e 94 66 14 	call	0x28cc	; 0x28cc <MDIO_voidGetPinValue>
			if(Local_u8PinRead== HKEYPAD_KEY_PRESSED )
    4d58:	8b 89       	ldd	r24, Y+19	; 0x13
    4d5a:	88 23       	and	r24, r24
    4d5c:	51 f5       	brne	.+84     	; 0x4db2 <HKEYPAD_enGetPressedKey+0x220>
    4d5e:	0f c0       	rjmp	.+30     	; 0x4d7e <HKEYPAD_enGetPressedKey+0x1ec>

				}//end switch case
			}//end while*/
				while(Local_u8PinRead== HKEYPAD_KEY_PRESSED )
				{
					MDIO_voidGetPinValue(colArr[col_index],&Local_u8PinRead);
    4d60:	88 89       	ldd	r24, Y+16	; 0x10
    4d62:	28 2f       	mov	r18, r24
    4d64:	30 e0       	ldi	r19, 0x00	; 0
    4d66:	ce 01       	movw	r24, r28
    4d68:	88 96       	adiw	r24, 0x28	; 40
    4d6a:	fc 01       	movw	r30, r24
    4d6c:	e2 0f       	add	r30, r18
    4d6e:	f3 1f       	adc	r31, r19
    4d70:	80 81       	ld	r24, Z
    4d72:	9e 01       	movw	r18, r28
    4d74:	2d 5e       	subi	r18, 0xED	; 237
    4d76:	3f 4f       	sbci	r19, 0xFF	; 255
    4d78:	b9 01       	movw	r22, r18
    4d7a:	0e 94 66 14 	call	0x28cc	; 0x28cc <MDIO_voidGetPinValue>
					break;


				}//end switch case
			}//end while*/
				while(Local_u8PinRead== HKEYPAD_KEY_PRESSED )
    4d7e:	8b 89       	ldd	r24, Y+19	; 0x13
    4d80:	88 23       	and	r24, r24
    4d82:	71 f3       	breq	.-36     	; 0x4d60 <HKEYPAD_enGetPressedKey+0x1ce>
				{
					MDIO_voidGetPinValue(colArr[col_index],&Local_u8PinRead);
					//check if the button is still pressed or not

				}//end while
				Local_u8PressedKey=Local_u8ArrKeys[row_index][col_index];
    4d84:	89 89       	ldd	r24, Y+17	; 0x11
    4d86:	28 2f       	mov	r18, r24
    4d88:	30 e0       	ldi	r19, 0x00	; 0
    4d8a:	88 89       	ldd	r24, Y+16	; 0x10
    4d8c:	48 2f       	mov	r20, r24
    4d8e:	50 e0       	ldi	r21, 0x00	; 0
    4d90:	22 0f       	add	r18, r18
    4d92:	33 1f       	adc	r19, r19
    4d94:	22 0f       	add	r18, r18
    4d96:	33 1f       	adc	r19, r19
    4d98:	ce 01       	movw	r24, r28
    4d9a:	01 96       	adiw	r24, 0x01	; 1
    4d9c:	82 0f       	add	r24, r18
    4d9e:	93 1f       	adc	r25, r19
    4da0:	84 0f       	add	r24, r20
    4da2:	95 1f       	adc	r25, r21
    4da4:	fc 01       	movw	r30, r24
    4da6:	73 96       	adiw	r30, 0x13	; 19
    4da8:	80 81       	ld	r24, Z
    4daa:	8a 8b       	std	Y+18, r24	; 0x12
				flag++;//flag for not intering the socend loop an return with the last update,
    4dac:	8f 85       	ldd	r24, Y+15	; 0x0f
    4dae:	8f 5f       	subi	r24, 0xFF	; 255
    4db0:	8f 87       	std	Y+15, r24	; 0x0f
u8 rowArr[]={HKEYPAD_R0_PIN,HKEYPAD_R1_PIN,HKEYPAD_R2_PIN,HKEYPAD_R3_PIN};
u8 colArr[]={HKEYPAD_C0_PIN,HKEYPAD_C1_PIN,HKEYPAD_C2_PIN,HKEYPAD_C3_PIN};
for(row_index=0 ;row_index<=3&&flag==0 ;row_index++)
{	//output 0(ground) on row
	MDIO_voidSetPinValue(rowArr[row_index],LOW);
	for(col_index=0;col_index<=3 ;col_index++)
    4db2:	88 89       	ldd	r24, Y+16	; 0x10
    4db4:	8f 5f       	subi	r24, 0xFF	; 255
    4db6:	88 8b       	std	Y+16, r24	; 0x10
    4db8:	88 89       	ldd	r24, Y+16	; 0x10
    4dba:	84 30       	cpi	r24, 0x04	; 4
    4dbc:	08 f4       	brcc	.+2      	; 0x4dc0 <HKEYPAD_enGetPressedKey+0x22e>
    4dbe:	38 cf       	rjmp	.-400    	; 0x4c30 <HKEYPAD_enGetPressedKey+0x9e>

//break;

	}//inner for

	MDIO_voidSetPinValue(rowArr[row_index], HIGH);
    4dc0:	89 89       	ldd	r24, Y+17	; 0x11
    4dc2:	28 2f       	mov	r18, r24
    4dc4:	30 e0       	ldi	r19, 0x00	; 0
    4dc6:	ce 01       	movw	r24, r28
    4dc8:	84 96       	adiw	r24, 0x24	; 36
    4dca:	fc 01       	movw	r30, r24
    4dcc:	e2 0f       	add	r30, r18
    4dce:	f3 1f       	adc	r31, r19
    4dd0:	80 81       	ld	r24, Z
    4dd2:	61 e0       	ldi	r22, 0x01	; 1
    4dd4:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
//cause the ports were in  sequence we can start and end the for by r0 till r3
//to make it generic

u8 rowArr[]={HKEYPAD_R0_PIN,HKEYPAD_R1_PIN,HKEYPAD_R2_PIN,HKEYPAD_R3_PIN};
u8 colArr[]={HKEYPAD_C0_PIN,HKEYPAD_C1_PIN,HKEYPAD_C2_PIN,HKEYPAD_C3_PIN};
for(row_index=0 ;row_index<=3&&flag==0 ;row_index++)
    4dd8:	89 89       	ldd	r24, Y+17	; 0x11
    4dda:	8f 5f       	subi	r24, 0xFF	; 255
    4ddc:	89 8b       	std	Y+17, r24	; 0x11
    4dde:	89 89       	ldd	r24, Y+17	; 0x11
    4de0:	84 30       	cpi	r24, 0x04	; 4
    4de2:	20 f4       	brcc	.+8      	; 0x4dec <HKEYPAD_enGetPressedKey+0x25a>
    4de4:	8f 85       	ldd	r24, Y+15	; 0x0f
    4de6:	88 23       	and	r24, r24
    4de8:	09 f4       	brne	.+2      	; 0x4dec <HKEYPAD_enGetPressedKey+0x25a>
    4dea:	14 cf       	rjmp	.-472    	; 0x4c14 <HKEYPAD_enGetPressedKey+0x82>
	}//inner for

	MDIO_voidSetPinValue(rowArr[row_index], HIGH);

}//outer for
*ptrKey=Local_u8PressedKey;
    4dec:	ec a5       	ldd	r30, Y+44	; 0x2c
    4dee:	fd a5       	ldd	r31, Y+45	; 0x2d
    4df0:	8a 89       	ldd	r24, Y+18	; 0x12
    4df2:	80 83       	st	Z, r24
return SUCCES;
    4df4:	82 e0       	ldi	r24, 0x02	; 2
}
    4df6:	e2 96       	adiw	r28, 0x32	; 50
    4df8:	0f b6       	in	r0, 0x3f	; 63
    4dfa:	f8 94       	cli
    4dfc:	de bf       	out	0x3e, r29	; 62
    4dfe:	0f be       	out	0x3f, r0	; 63
    4e00:	cd bf       	out	0x3d, r28	; 61
    4e02:	cf 91       	pop	r28
    4e04:	df 91       	pop	r29
    4e06:	08 95       	ret

00004e08 <HEEPROM_enInit>:
#include "MTWI_int.h"
#include "HEEPROM_config.h"
#include "HEEPROM_int.h"

ErrorState_t HEEPROM_enInit(void)
{
    4e08:	df 93       	push	r29
    4e0a:	cf 93       	push	r28
    4e0c:	cd b7       	in	r28, 0x3d	; 61
    4e0e:	de b7       	in	r29, 0x3e	; 62
	// init TWI
	MTWI_enInit();
    4e10:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <MTWI_enInit>
	return SUCCES;
    4e14:	82 e0       	ldi	r24, 0x02	; 2
}
    4e16:	cf 91       	pop	r28
    4e18:	df 91       	pop	r29
    4e1a:	08 95       	ret

00004e1c <HEEPROM_enWriteByte>:

ErrorState_t HEEPROM_enWriteByte(u16 copy_u16Address, u8 copy_u8DByte)
{
    4e1c:	df 93       	push	r29
    4e1e:	cf 93       	push	r28
    4e20:	00 d0       	rcall	.+0      	; 0x4e22 <HEEPROM_enWriteByte+0x6>
    4e22:	00 d0       	rcall	.+0      	; 0x4e24 <HEEPROM_enWriteByte+0x8>
    4e24:	0f 92       	push	r0
    4e26:	cd b7       	in	r28, 0x3d	; 61
    4e28:	de b7       	in	r29, 0x3e	; 62
    4e2a:	9b 83       	std	Y+3, r25	; 0x03
    4e2c:	8a 83       	std	Y+2, r24	; 0x02
    4e2e:	6c 83       	std	Y+4, r22	; 0x04
	u8 Status;
	// Step 1 : Send Start
	MTWI_enSendStart();
    4e30:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <MTWI_enSendStart>
	// Step 2 : Check Status
	MTWI_enReadStatus(&Status);
    4e34:	ce 01       	movw	r24, r28
    4e36:	01 96       	adiw	r24, 0x01	; 1
    4e38:	0e 94 31 10 	call	0x2062	; 0x2062 <MTWI_enReadStatus>
	if(Status != MTWI_MT_START_SUCCESS)
    4e3c:	89 81       	ldd	r24, Y+1	; 0x01
    4e3e:	88 30       	cpi	r24, 0x08	; 8
    4e40:	19 f0       	breq	.+6      	; 0x4e48 <HEEPROM_enWriteByte+0x2c>
	{
		return FAILIUR;
    4e42:	83 e0       	ldi	r24, 0x03	; 3
    4e44:	8d 83       	std	Y+5, r24	; 0x05
    4e46:	3b c0       	rjmp	.+118    	; 0x4ebe <HEEPROM_enWriteByte+0xa2>
	}

	// Step 3 : Send Address 1010 + A10 A9 A8 + W (W = 0)
//	u8 _3MSB = (u8)((copy_u16Address & 0x0700) >> 7);
	//MTWI_enSendByte(_3MSB| 0xA0);
MTWI_enSendByte(0xA0);
    4e48:	80 ea       	ldi	r24, 0xA0	; 160
    4e4a:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <MTWI_enSendByte>
	// Step 4 : Check Status
	MTWI_enReadStatus(&Status);
    4e4e:	ce 01       	movw	r24, r28
    4e50:	01 96       	adiw	r24, 0x01	; 1
    4e52:	0e 94 31 10 	call	0x2062	; 0x2062 <MTWI_enReadStatus>
	if(Status != MTWI_MT_SLA_W_ACK)
    4e56:	89 81       	ldd	r24, Y+1	; 0x01
    4e58:	88 31       	cpi	r24, 0x18	; 24
    4e5a:	19 f0       	breq	.+6      	; 0x4e62 <HEEPROM_enWriteByte+0x46>
	{
		return FAILIUR;
    4e5c:	83 e0       	ldi	r24, 0x03	; 3
    4e5e:	8d 83       	std	Y+5, r24	; 0x05
    4e60:	2e c0       	rjmp	.+92     	; 0x4ebe <HEEPROM_enWriteByte+0xa2>
	}

	// Step 5 : Send rest of Byte address as data A7 ... A0
	MTWI_enSendByte((u8) (copy_u16Address>>8));
    4e62:	8a 81       	ldd	r24, Y+2	; 0x02
    4e64:	9b 81       	ldd	r25, Y+3	; 0x03
    4e66:	89 2f       	mov	r24, r25
    4e68:	99 27       	eor	r25, r25
    4e6a:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <MTWI_enSendByte>

	// Step 6 : Check Status
	MTWI_enReadStatus(&Status);
    4e6e:	ce 01       	movw	r24, r28
    4e70:	01 96       	adiw	r24, 0x01	; 1
    4e72:	0e 94 31 10 	call	0x2062	; 0x2062 <MTWI_enReadStatus>
	if(Status != MTWI_MT_DATA_ACK)
    4e76:	89 81       	ldd	r24, Y+1	; 0x01
    4e78:	88 32       	cpi	r24, 0x28	; 40
    4e7a:	19 f0       	breq	.+6      	; 0x4e82 <HEEPROM_enWriteByte+0x66>
	{
		return FAILIUR;
    4e7c:	83 e0       	ldi	r24, 0x03	; 3
    4e7e:	8d 83       	std	Y+5, r24	; 0x05
    4e80:	1e c0       	rjmp	.+60     	; 0x4ebe <HEEPROM_enWriteByte+0xa2>
	}
	MTWI_enSendByte((u8) copy_u16Address);
    4e82:	8a 81       	ldd	r24, Y+2	; 0x02
    4e84:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <MTWI_enSendByte>

	// Step 6 : Check Status
	MTWI_enReadStatus(&Status);
    4e88:	ce 01       	movw	r24, r28
    4e8a:	01 96       	adiw	r24, 0x01	; 1
    4e8c:	0e 94 31 10 	call	0x2062	; 0x2062 <MTWI_enReadStatus>
	if(Status != MTWI_MT_DATA_ACK)
    4e90:	89 81       	ldd	r24, Y+1	; 0x01
    4e92:	88 32       	cpi	r24, 0x28	; 40
    4e94:	19 f0       	breq	.+6      	; 0x4e9c <HEEPROM_enWriteByte+0x80>
	{
		return FAILIUR;
    4e96:	83 e0       	ldi	r24, 0x03	; 3
    4e98:	8d 83       	std	Y+5, r24	; 0x05
    4e9a:	11 c0       	rjmp	.+34     	; 0x4ebe <HEEPROM_enWriteByte+0xa2>
	}

	// Step 7 : Send Byte to be written
	MTWI_enSendByte((u8) copy_u8DByte);
    4e9c:	8c 81       	ldd	r24, Y+4	; 0x04
    4e9e:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <MTWI_enSendByte>

	// Step 8 : Check Status
	MTWI_enReadStatus(&Status);
    4ea2:	ce 01       	movw	r24, r28
    4ea4:	01 96       	adiw	r24, 0x01	; 1
    4ea6:	0e 94 31 10 	call	0x2062	; 0x2062 <MTWI_enReadStatus>
	if(Status != MTWI_MT_DATA_ACK)
    4eaa:	89 81       	ldd	r24, Y+1	; 0x01
    4eac:	88 32       	cpi	r24, 0x28	; 40
    4eae:	19 f0       	breq	.+6      	; 0x4eb6 <HEEPROM_enWriteByte+0x9a>
	{
		return FAILIUR;
    4eb0:	83 e0       	ldi	r24, 0x03	; 3
    4eb2:	8d 83       	std	Y+5, r24	; 0x05
    4eb4:	04 c0       	rjmp	.+8      	; 0x4ebe <HEEPROM_enWriteByte+0xa2>
	}

	// Step 9 : Send Stop
	MTWI_enSendStop();
    4eb6:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <MTWI_enSendStop>

	return SUCCES;
    4eba:	82 e0       	ldi	r24, 0x02	; 2
    4ebc:	8d 83       	std	Y+5, r24	; 0x05
    4ebe:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4ec0:	0f 90       	pop	r0
    4ec2:	0f 90       	pop	r0
    4ec4:	0f 90       	pop	r0
    4ec6:	0f 90       	pop	r0
    4ec8:	0f 90       	pop	r0
    4eca:	cf 91       	pop	r28
    4ecc:	df 91       	pop	r29
    4ece:	08 95       	ret

00004ed0 <HEEPROM_enReadByte>:

ErrorState_t HEEPROM_enReadByte(u16 copy_u16Address, u8 *PtrRecData)
{
    4ed0:	df 93       	push	r29
    4ed2:	cf 93       	push	r28
    4ed4:	00 d0       	rcall	.+0      	; 0x4ed6 <HEEPROM_enReadByte+0x6>
    4ed6:	00 d0       	rcall	.+0      	; 0x4ed8 <HEEPROM_enReadByte+0x8>
    4ed8:	00 d0       	rcall	.+0      	; 0x4eda <HEEPROM_enReadByte+0xa>
    4eda:	cd b7       	in	r28, 0x3d	; 61
    4edc:	de b7       	in	r29, 0x3e	; 62
    4ede:	9b 83       	std	Y+3, r25	; 0x03
    4ee0:	8a 83       	std	Y+2, r24	; 0x02
    4ee2:	7d 83       	std	Y+5, r23	; 0x05
    4ee4:	6c 83       	std	Y+4, r22	; 0x04
	u8 Status;
		// Step 1 : Send Start
		MTWI_enSendStart();
    4ee6:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <MTWI_enSendStart>
		// Step 2 : Check Status
		MTWI_enReadStatus(&Status);
    4eea:	ce 01       	movw	r24, r28
    4eec:	01 96       	adiw	r24, 0x01	; 1
    4eee:	0e 94 31 10 	call	0x2062	; 0x2062 <MTWI_enReadStatus>
		if(Status != MTWI_MT_START_SUCCESS)
    4ef2:	89 81       	ldd	r24, Y+1	; 0x01
    4ef4:	88 30       	cpi	r24, 0x08	; 8
    4ef6:	19 f0       	breq	.+6      	; 0x4efe <HEEPROM_enReadByte+0x2e>
		{
			return FAILIUR;
    4ef8:	83 e0       	ldi	r24, 0x03	; 3
    4efa:	8e 83       	std	Y+6, r24	; 0x06
    4efc:	58 c0       	rjmp	.+176    	; 0x4fae <HEEPROM_enReadByte+0xde>
		//MTWI_enSendByte(_3MSB| 0xA0);



		// Step 4 : Check Status
		MTWI_enSendByte(0xA0);
    4efe:	80 ea       	ldi	r24, 0xA0	; 160
    4f00:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <MTWI_enSendByte>
			// Step 4 : Check Status
			MTWI_enReadStatus(&Status);
    4f04:	ce 01       	movw	r24, r28
    4f06:	01 96       	adiw	r24, 0x01	; 1
    4f08:	0e 94 31 10 	call	0x2062	; 0x2062 <MTWI_enReadStatus>
			if(Status != MTWI_MT_SLA_W_ACK)
    4f0c:	89 81       	ldd	r24, Y+1	; 0x01
    4f0e:	88 31       	cpi	r24, 0x18	; 24
    4f10:	19 f0       	breq	.+6      	; 0x4f18 <HEEPROM_enReadByte+0x48>
			{
				return FAILIUR;
    4f12:	83 e0       	ldi	r24, 0x03	; 3
    4f14:	8e 83       	std	Y+6, r24	; 0x06
    4f16:	4b c0       	rjmp	.+150    	; 0x4fae <HEEPROM_enReadByte+0xde>
			}

			// Step 5 : Send rest of Byte address as data A7 ... A0
			MTWI_enSendByte((u8) (copy_u16Address>>8));
    4f18:	8a 81       	ldd	r24, Y+2	; 0x02
    4f1a:	9b 81       	ldd	r25, Y+3	; 0x03
    4f1c:	89 2f       	mov	r24, r25
    4f1e:	99 27       	eor	r25, r25
    4f20:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <MTWI_enSendByte>

			// Step 6 : Check Status
			MTWI_enReadStatus(&Status);
    4f24:	ce 01       	movw	r24, r28
    4f26:	01 96       	adiw	r24, 0x01	; 1
    4f28:	0e 94 31 10 	call	0x2062	; 0x2062 <MTWI_enReadStatus>
			if(Status != MTWI_MT_DATA_ACK)
    4f2c:	89 81       	ldd	r24, Y+1	; 0x01
    4f2e:	88 32       	cpi	r24, 0x28	; 40
    4f30:	19 f0       	breq	.+6      	; 0x4f38 <HEEPROM_enReadByte+0x68>
			{
				return FAILIUR;
    4f32:	83 e0       	ldi	r24, 0x03	; 3
    4f34:	8e 83       	std	Y+6, r24	; 0x06
    4f36:	3b c0       	rjmp	.+118    	; 0x4fae <HEEPROM_enReadByte+0xde>
			}
			MTWI_enSendByte((u8) copy_u16Address);
    4f38:	8a 81       	ldd	r24, Y+2	; 0x02
    4f3a:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <MTWI_enSendByte>

		// Step 5 : Send rest of Byte address as data A7 ... A0
		MTWI_enSendByte((u8) copy_u16Address);
    4f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    4f40:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <MTWI_enSendByte>

		// Step 6 : Check Status
		MTWI_enReadStatus(&Status);
    4f44:	ce 01       	movw	r24, r28
    4f46:	01 96       	adiw	r24, 0x01	; 1
    4f48:	0e 94 31 10 	call	0x2062	; 0x2062 <MTWI_enReadStatus>
		if(Status != MTWI_MT_DATA_ACK)
    4f4c:	89 81       	ldd	r24, Y+1	; 0x01
    4f4e:	88 32       	cpi	r24, 0x28	; 40
    4f50:	19 f0       	breq	.+6      	; 0x4f58 <HEEPROM_enReadByte+0x88>
		{
			return FAILIUR;
    4f52:	83 e0       	ldi	r24, 0x03	; 3
    4f54:	8e 83       	std	Y+6, r24	; 0x06
    4f56:	2b c0       	rjmp	.+86     	; 0x4fae <HEEPROM_enReadByte+0xde>
		}
		//Step 7 : Send Repeated Start
		MTWI_enSendStart();
    4f58:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <MTWI_enSendStart>

		// Step 8 : Check Status
		MTWI_enReadStatus(&Status);
    4f5c:	ce 01       	movw	r24, r28
    4f5e:	01 96       	adiw	r24, 0x01	; 1
    4f60:	0e 94 31 10 	call	0x2062	; 0x2062 <MTWI_enReadStatus>
		if(Status != MTWI_MR_REPEATED_START_SUCCESS)
    4f64:	89 81       	ldd	r24, Y+1	; 0x01
    4f66:	80 31       	cpi	r24, 0x10	; 16
    4f68:	19 f0       	breq	.+6      	; 0x4f70 <HEEPROM_enReadByte+0xa0>
		{
			return FAILIUR;
    4f6a:	83 e0       	ldi	r24, 0x03	; 3
    4f6c:	8e 83       	std	Y+6, r24	; 0x06
    4f6e:	1f c0       	rjmp	.+62     	; 0x4fae <HEEPROM_enReadByte+0xde>
		}

		// Step 9 : Send Address 1010 + 000 + R
		MTWI_enSendByte(0xA0 | 0x01);
    4f70:	81 ea       	ldi	r24, 0xA1	; 161
    4f72:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <MTWI_enSendByte>

		// Step 10 : Check Status
		MTWI_enReadStatus(&Status);
    4f76:	ce 01       	movw	r24, r28
    4f78:	01 96       	adiw	r24, 0x01	; 1
    4f7a:	0e 94 31 10 	call	0x2062	; 0x2062 <MTWI_enReadStatus>
		if(Status != MTWI_MR_SLA_R_ACK)
    4f7e:	89 81       	ldd	r24, Y+1	; 0x01
    4f80:	80 34       	cpi	r24, 0x40	; 64
    4f82:	19 f0       	breq	.+6      	; 0x4f8a <HEEPROM_enReadByte+0xba>
		{
			return FAILIUR;
    4f84:	83 e0       	ldi	r24, 0x03	; 3
    4f86:	8e 83       	std	Y+6, r24	; 0x06
    4f88:	12 c0       	rjmp	.+36     	; 0x4fae <HEEPROM_enReadByte+0xde>
		}

		//Step 11 : Read Data
		MTWI_enRecByteAck(PtrRecData);
    4f8a:	8c 81       	ldd	r24, Y+4	; 0x04
    4f8c:	9d 81       	ldd	r25, Y+5	; 0x05
    4f8e:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <MTWI_enRecByteAck>

		// Step 12 : Check Status
		MTWI_enReadStatus(&Status);
    4f92:	ce 01       	movw	r24, r28
    4f94:	01 96       	adiw	r24, 0x01	; 1
    4f96:	0e 94 31 10 	call	0x2062	; 0x2062 <MTWI_enReadStatus>
		if(Status != MTWI_MR_DATA_ACK)
    4f9a:	89 81       	ldd	r24, Y+1	; 0x01
    4f9c:	80 35       	cpi	r24, 0x50	; 80
    4f9e:	19 f0       	breq	.+6      	; 0x4fa6 <HEEPROM_enReadByte+0xd6>
		{
			return FAILIUR;
    4fa0:	83 e0       	ldi	r24, 0x03	; 3
    4fa2:	8e 83       	std	Y+6, r24	; 0x06
    4fa4:	04 c0       	rjmp	.+8      	; 0x4fae <HEEPROM_enReadByte+0xde>
		}

		// Step 13 : Send Stop
		MTWI_enSendStop();
    4fa6:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <MTWI_enSendStop>
	return SUCCES;
    4faa:	82 e0       	ldi	r24, 0x02	; 2
    4fac:	8e 83       	std	Y+6, r24	; 0x06
    4fae:	8e 81       	ldd	r24, Y+6	; 0x06
}
    4fb0:	26 96       	adiw	r28, 0x06	; 6
    4fb2:	0f b6       	in	r0, 0x3f	; 63
    4fb4:	f8 94       	cli
    4fb6:	de bf       	out	0x3e, r29	; 62
    4fb8:	0f be       	out	0x3f, r0	; 63
    4fba:	cd bf       	out	0x3d, r28	; 61
    4fbc:	cf 91       	pop	r28
    4fbe:	df 91       	pop	r29
    4fc0:	08 95       	ret

00004fc2 <HDCM_enInit>:
#include "MTIMER0_int.h"
#include "HDC_MOTOR_priv.h"
#include "HDC_MOTOR_config.h"
#include "HDC_MOTOR_init.h"

ErrorState_t HDCM_enInit(void){
    4fc2:	df 93       	push	r29
    4fc4:	cf 93       	push	r28
    4fc6:	cd b7       	in	r28, 0x3d	; 61
    4fc8:	de b7       	in	r29, 0x3e	; 62

	MDIO_SetPinDirection(PB3,OUTPUT);
    4fca:	87 e1       	ldi	r24, 0x17	; 23
    4fcc:	61 e0       	ldi	r22, 0x01	; 1
    4fce:	0e 94 de 11 	call	0x23bc	; 0x23bc <MDIO_SetPinDirection>
	MDIO_SetPinDirection(PD7,OUTPUT);
    4fd2:	8f e2       	ldi	r24, 0x2F	; 47
    4fd4:	61 e0       	ldi	r22, 0x01	; 1
    4fd6:	0e 94 de 11 	call	0x23bc	; 0x23bc <MDIO_SetPinDirection>
#if (HBRIDGE_MODE==MOTOR_WITH_EN)
	MDIO_SetPinDirection(PD6,OUTPUT);
#endif
	MTIMER0_enInit();
    4fda:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <MTIMER0_enInit>
	MTIMER0_enSetFastPWM(0);
    4fde:	80 e0       	ldi	r24, 0x00	; 0
    4fe0:	0e 94 4a 0a 	call	0x1494	; 0x1494 <MTIMER0_enSetFastPWM>
	MTIMER0_enStart();
    4fe4:	0e 94 f5 08 	call	0x11ea	; 0x11ea <MTIMER0_enStart>
return SUCCES;
    4fe8:	82 e0       	ldi	r24, 0x02	; 2
}
    4fea:	cf 91       	pop	r28
    4fec:	df 91       	pop	r29
    4fee:	08 95       	ret

00004ff0 <HDCM_enStart>:
ErrorState_t HDCM_enStart(direction_t copy_enDirection,u8 copy_u8Duty)
{
    4ff0:	df 93       	push	r29
    4ff2:	cf 93       	push	r28
    4ff4:	00 d0       	rcall	.+0      	; 0x4ff6 <HDCM_enStart+0x6>
    4ff6:	00 d0       	rcall	.+0      	; 0x4ff8 <HDCM_enStart+0x8>
    4ff8:	0f 92       	push	r0
    4ffa:	cd b7       	in	r28, 0x3d	; 61
    4ffc:	de b7       	in	r29, 0x3e	; 62
    4ffe:	8a 83       	std	Y+2, r24	; 0x02
    5000:	6b 83       	std	Y+3, r22	; 0x03
ErrorState_t Local_enStauts=SUCCES;
    5002:	82 e0       	ldi	r24, 0x02	; 2
    5004:	89 83       	std	Y+1, r24	; 0x01

if(copy_u8Duty<=100&&copy_u8Duty>=0)
    5006:	8b 81       	ldd	r24, Y+3	; 0x03
    5008:	85 36       	cpi	r24, 0x65	; 101
    500a:	18 f5       	brcc	.+70     	; 0x5052 <HDCM_enStart+0x62>
{
#if (HBRIDGE_MODE==MOTOR_WITHOUT_EN)
	switch(copy_enDirection){
    500c:	8a 81       	ldd	r24, Y+2	; 0x02
    500e:	28 2f       	mov	r18, r24
    5010:	30 e0       	ldi	r19, 0x00	; 0
    5012:	3d 83       	std	Y+5, r19	; 0x05
    5014:	2c 83       	std	Y+4, r18	; 0x04
    5016:	8c 81       	ldd	r24, Y+4	; 0x04
    5018:	9d 81       	ldd	r25, Y+5	; 0x05
    501a:	00 97       	sbiw	r24, 0x00	; 0
    501c:	31 f0       	breq	.+12     	; 0x502a <HDCM_enStart+0x3a>
    501e:	2c 81       	ldd	r18, Y+4	; 0x04
    5020:	3d 81       	ldd	r19, Y+5	; 0x05
    5022:	21 30       	cpi	r18, 0x01	; 1
    5024:	31 05       	cpc	r19, r1
    5026:	49 f0       	breq	.+18     	; 0x503a <HDCM_enStart+0x4a>
    5028:	12 c0       	rjmp	.+36     	; 0x504e <HDCM_enStart+0x5e>
	case forward:
		MTIMER0_enSetFastPWM(copy_u8Duty);
    502a:	8b 81       	ldd	r24, Y+3	; 0x03
    502c:	0e 94 4a 0a 	call	0x1494	; 0x1494 <MTIMER0_enSetFastPWM>
		MDIO_voidSetPinValue(PD7, LOW);
    5030:	8f e2       	ldi	r24, 0x2F	; 47
    5032:	60 e0       	ldi	r22, 0x00	; 0
    5034:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
    5038:	0d c0       	rjmp	.+26     	; 0x5054 <HDCM_enStart+0x64>
		break;
	case reverse:
				MTIMER0_enSetFastPWM(100-copy_u8Duty);
    503a:	84 e6       	ldi	r24, 0x64	; 100
    503c:	9b 81       	ldd	r25, Y+3	; 0x03
    503e:	89 1b       	sub	r24, r25
    5040:	0e 94 4a 0a 	call	0x1494	; 0x1494 <MTIMER0_enSetFastPWM>
				MDIO_voidSetPinValue(PD7, HIGH);
    5044:	8f e2       	ldi	r24, 0x2F	; 47
    5046:	61 e0       	ldi	r22, 0x01	; 1
    5048:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
    504c:	03 c0       	rjmp	.+6      	; 0x5054 <HDCM_enStart+0x64>
				break;
	default:
		Local_enStauts=OUT_OF_RANGE;
    504e:	19 82       	std	Y+1, r1	; 0x01
    5050:	01 c0       	rjmp	.+2      	; 0x5054 <HDCM_enStart+0x64>
			}
#endif
}
else
{
	Local_enStauts=OUT_OF_RANGE;
    5052:	19 82       	std	Y+1, r1	; 0x01
}
return Local_enStauts;
    5054:	89 81       	ldd	r24, Y+1	; 0x01
}
    5056:	0f 90       	pop	r0
    5058:	0f 90       	pop	r0
    505a:	0f 90       	pop	r0
    505c:	0f 90       	pop	r0
    505e:	0f 90       	pop	r0
    5060:	cf 91       	pop	r28
    5062:	df 91       	pop	r29
    5064:	08 95       	ret

00005066 <HDCM_enStop>:
ErrorState_t HDCM_enStop(void)
{
    5066:	df 93       	push	r29
    5068:	cf 93       	push	r28
    506a:	cd b7       	in	r28, 0x3d	; 61
    506c:	de b7       	in	r29, 0x3e	; 62

	MTIMER0_enSetFastPWM(0);
    506e:	80 e0       	ldi	r24, 0x00	; 0
    5070:	0e 94 4a 0a 	call	0x1494	; 0x1494 <MTIMER0_enSetFastPWM>
	MDIO_voidSetPinValue(PD7, LOW);
    5074:	8f e2       	ldi	r24, 0x2F	; 47
    5076:	60 e0       	ldi	r22, 0x00	; 0
    5078:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
return SUCCES;
    507c:	82 e0       	ldi	r24, 0x02	; 2
}
    507e:	cf 91       	pop	r28
    5080:	df 91       	pop	r29
    5082:	08 95       	ret

00005084 <HBUZ_voidInit>:
#include "HBUZ_priv.h"
#include "HBUZ_config.h"
#include "HBUZ_init.h"

void HBUZ_voidInit(void)
{
    5084:	df 93       	push	r29
    5086:	cf 93       	push	r28
    5088:	cd b7       	in	r28, 0x3d	; 61
    508a:	de b7       	in	r29, 0x3e	; 62

	MDIO_SetPinDirection(HBUZ_PIN,OUTPUT);
    508c:	83 e2       	ldi	r24, 0x23	; 35
    508e:	61 e0       	ldi	r22, 0x01	; 1
    5090:	0e 94 de 11 	call	0x23bc	; 0x23bc <MDIO_SetPinDirection>
}
    5094:	cf 91       	pop	r28
    5096:	df 91       	pop	r29
    5098:	08 95       	ret

0000509a <HBUZ_enOn>:

ErrorState_t HBUZ_enOn(void)
{
    509a:	df 93       	push	r29
    509c:	cf 93       	push	r28
    509e:	0f 92       	push	r0
    50a0:	cd b7       	in	r28, 0x3d	; 61
    50a2:	de b7       	in	r29, 0x3e	; 62
ErrorState_t Local_State=SUCCES;
    50a4:	82 e0       	ldi	r24, 0x02	; 2
    50a6:	89 83       	std	Y+1, r24	; 0x01
MDIO_voidSetPinValue(HBUZ_PIN, HIGH);
    50a8:	83 e2       	ldi	r24, 0x23	; 35
    50aa:	61 e0       	ldi	r22, 0x01	; 1
    50ac:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
return Local_State;
    50b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    50b2:	0f 90       	pop	r0
    50b4:	cf 91       	pop	r28
    50b6:	df 91       	pop	r29
    50b8:	08 95       	ret

000050ba <HBUZ_enOff>:

ErrorState_t HBUZ_enOff(void)
{
    50ba:	df 93       	push	r29
    50bc:	cf 93       	push	r28
    50be:	0f 92       	push	r0
    50c0:	cd b7       	in	r28, 0x3d	; 61
    50c2:	de b7       	in	r29, 0x3e	; 62
ErrorState_t Local_State=SUCCES;
    50c4:	82 e0       	ldi	r24, 0x02	; 2
    50c6:	89 83       	std	Y+1, r24	; 0x01
MDIO_voidSetPinValue(HBUZ_PIN, LOW);
    50c8:	83 e2       	ldi	r24, 0x23	; 35
    50ca:	60 e0       	ldi	r22, 0x00	; 0
    50cc:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
return Local_State;
    50d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    50d2:	0f 90       	pop	r0
    50d4:	cf 91       	pop	r28
    50d6:	df 91       	pop	r29
    50d8:	08 95       	ret

000050da <HBUZ_enOnce>:

ErrorState_t HBUZ_enOnce(u64 copy_u64BuzzPeriod)
{ErrorState_t Local_State=SUCCES;
    50da:	df 93       	push	r29
    50dc:	cf 93       	push	r28
    50de:	cd b7       	in	r28, 0x3d	; 61
    50e0:	de b7       	in	r29, 0x3e	; 62
    50e2:	a5 97       	sbiw	r28, 0x25	; 37
    50e4:	0f b6       	in	r0, 0x3f	; 63
    50e6:	f8 94       	cli
    50e8:	de bf       	out	0x3e, r29	; 62
    50ea:	0f be       	out	0x3f, r0	; 63
    50ec:	cd bf       	out	0x3d, r28	; 61
    50ee:	2e 8f       	std	Y+30, r18	; 0x1e
    50f0:	3f 8f       	std	Y+31, r19	; 0x1f
    50f2:	48 a3       	std	Y+32, r20	; 0x20
    50f4:	59 a3       	std	Y+33, r21	; 0x21
    50f6:	6a a3       	std	Y+34, r22	; 0x22
    50f8:	7b a3       	std	Y+35, r23	; 0x23
    50fa:	8c a3       	std	Y+36, r24	; 0x24
    50fc:	9d a3       	std	Y+37, r25	; 0x25
    50fe:	82 e0       	ldi	r24, 0x02	; 2
    5100:	8d 8f       	std	Y+29, r24	; 0x1d
	MDIO_voidSetPinValue(HBUZ_PIN, HIGH);
    5102:	83 e2       	ldi	r24, 0x23	; 35
    5104:	61 e0       	ldi	r22, 0x01	; 1
    5106:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	_delay_ms(copy_u64BuzzPeriod);
    510a:	2e 8d       	ldd	r18, Y+30	; 0x1e
    510c:	3f 8d       	ldd	r19, Y+31	; 0x1f
    510e:	48 a1       	ldd	r20, Y+32	; 0x20
    5110:	59 a1       	ldd	r21, Y+33	; 0x21
    5112:	6a a1       	ldd	r22, Y+34	; 0x22
    5114:	7b a1       	ldd	r23, Y+35	; 0x23
    5116:	8c a1       	ldd	r24, Y+36	; 0x24
    5118:	9d a1       	ldd	r25, Y+37	; 0x25
    511a:	0e 94 75 00 	call	0xea	; 0xea <__floatundisf>
    511e:	dc 01       	movw	r26, r24
    5120:	cb 01       	movw	r24, r22
    5122:	89 8f       	std	Y+25, r24	; 0x19
    5124:	9a 8f       	std	Y+26, r25	; 0x1a
    5126:	ab 8f       	std	Y+27, r26	; 0x1b
    5128:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    512a:	69 8d       	ldd	r22, Y+25	; 0x19
    512c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    512e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5130:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5132:	20 e0       	ldi	r18, 0x00	; 0
    5134:	30 e0       	ldi	r19, 0x00	; 0
    5136:	4a e7       	ldi	r20, 0x7A	; 122
    5138:	55 e4       	ldi	r21, 0x45	; 69
    513a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    513e:	dc 01       	movw	r26, r24
    5140:	cb 01       	movw	r24, r22
    5142:	8d 8b       	std	Y+21, r24	; 0x15
    5144:	9e 8b       	std	Y+22, r25	; 0x16
    5146:	af 8b       	std	Y+23, r26	; 0x17
    5148:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    514a:	6d 89       	ldd	r22, Y+21	; 0x15
    514c:	7e 89       	ldd	r23, Y+22	; 0x16
    514e:	8f 89       	ldd	r24, Y+23	; 0x17
    5150:	98 8d       	ldd	r25, Y+24	; 0x18
    5152:	20 e0       	ldi	r18, 0x00	; 0
    5154:	30 e0       	ldi	r19, 0x00	; 0
    5156:	40 e8       	ldi	r20, 0x80	; 128
    5158:	5f e3       	ldi	r21, 0x3F	; 63
    515a:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    515e:	88 23       	and	r24, r24
    5160:	2c f4       	brge	.+10     	; 0x516c <HBUZ_enOnce+0x92>
		__ticks = 1;
    5162:	81 e0       	ldi	r24, 0x01	; 1
    5164:	90 e0       	ldi	r25, 0x00	; 0
    5166:	9c 8b       	std	Y+20, r25	; 0x14
    5168:	8b 8b       	std	Y+19, r24	; 0x13
    516a:	3f c0       	rjmp	.+126    	; 0x51ea <HBUZ_enOnce+0x110>
	else if (__tmp > 65535)
    516c:	6d 89       	ldd	r22, Y+21	; 0x15
    516e:	7e 89       	ldd	r23, Y+22	; 0x16
    5170:	8f 89       	ldd	r24, Y+23	; 0x17
    5172:	98 8d       	ldd	r25, Y+24	; 0x18
    5174:	20 e0       	ldi	r18, 0x00	; 0
    5176:	3f ef       	ldi	r19, 0xFF	; 255
    5178:	4f e7       	ldi	r20, 0x7F	; 127
    517a:	57 e4       	ldi	r21, 0x47	; 71
    517c:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    5180:	18 16       	cp	r1, r24
    5182:	4c f5       	brge	.+82     	; 0x51d6 <HBUZ_enOnce+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5184:	69 8d       	ldd	r22, Y+25	; 0x19
    5186:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5188:	8b 8d       	ldd	r24, Y+27	; 0x1b
    518a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    518c:	20 e0       	ldi	r18, 0x00	; 0
    518e:	30 e0       	ldi	r19, 0x00	; 0
    5190:	40 e2       	ldi	r20, 0x20	; 32
    5192:	51 e4       	ldi	r21, 0x41	; 65
    5194:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    5198:	dc 01       	movw	r26, r24
    519a:	cb 01       	movw	r24, r22
    519c:	bc 01       	movw	r22, r24
    519e:	cd 01       	movw	r24, r26
    51a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51a4:	dc 01       	movw	r26, r24
    51a6:	cb 01       	movw	r24, r22
    51a8:	9c 8b       	std	Y+20, r25	; 0x14
    51aa:	8b 8b       	std	Y+19, r24	; 0x13
    51ac:	0f c0       	rjmp	.+30     	; 0x51cc <HBUZ_enOnce+0xf2>
    51ae:	80 e9       	ldi	r24, 0x90	; 144
    51b0:	91 e0       	ldi	r25, 0x01	; 1
    51b2:	9a 8b       	std	Y+18, r25	; 0x12
    51b4:	89 8b       	std	Y+17, r24	; 0x11
    51b6:	89 89       	ldd	r24, Y+17	; 0x11
    51b8:	9a 89       	ldd	r25, Y+18	; 0x12
    51ba:	01 97       	sbiw	r24, 0x01	; 1
    51bc:	f1 f7       	brne	.-4      	; 0x51ba <HBUZ_enOnce+0xe0>
    51be:	9a 8b       	std	Y+18, r25	; 0x12
    51c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51c2:	8b 89       	ldd	r24, Y+19	; 0x13
    51c4:	9c 89       	ldd	r25, Y+20	; 0x14
    51c6:	01 97       	sbiw	r24, 0x01	; 1
    51c8:	9c 8b       	std	Y+20, r25	; 0x14
    51ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51cc:	8b 89       	ldd	r24, Y+19	; 0x13
    51ce:	9c 89       	ldd	r25, Y+20	; 0x14
    51d0:	00 97       	sbiw	r24, 0x00	; 0
    51d2:	69 f7       	brne	.-38     	; 0x51ae <HBUZ_enOnce+0xd4>
    51d4:	14 c0       	rjmp	.+40     	; 0x51fe <HBUZ_enOnce+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51d6:	6d 89       	ldd	r22, Y+21	; 0x15
    51d8:	7e 89       	ldd	r23, Y+22	; 0x16
    51da:	8f 89       	ldd	r24, Y+23	; 0x17
    51dc:	98 8d       	ldd	r25, Y+24	; 0x18
    51de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51e2:	dc 01       	movw	r26, r24
    51e4:	cb 01       	movw	r24, r22
    51e6:	9c 8b       	std	Y+20, r25	; 0x14
    51e8:	8b 8b       	std	Y+19, r24	; 0x13
    51ea:	8b 89       	ldd	r24, Y+19	; 0x13
    51ec:	9c 89       	ldd	r25, Y+20	; 0x14
    51ee:	98 8b       	std	Y+16, r25	; 0x10
    51f0:	8f 87       	std	Y+15, r24	; 0x0f
    51f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    51f4:	98 89       	ldd	r25, Y+16	; 0x10
    51f6:	01 97       	sbiw	r24, 0x01	; 1
    51f8:	f1 f7       	brne	.-4      	; 0x51f6 <HBUZ_enOnce+0x11c>
    51fa:	98 8b       	std	Y+16, r25	; 0x10
    51fc:	8f 87       	std	Y+15, r24	; 0x0f
	MDIO_voidSetPinValue(HBUZ_PIN, LOW);
    51fe:	83 e2       	ldi	r24, 0x23	; 35
    5200:	60 e0       	ldi	r22, 0x00	; 0
    5202:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	_delay_ms(copy_u64BuzzPeriod);
    5206:	2e 8d       	ldd	r18, Y+30	; 0x1e
    5208:	3f 8d       	ldd	r19, Y+31	; 0x1f
    520a:	48 a1       	ldd	r20, Y+32	; 0x20
    520c:	59 a1       	ldd	r21, Y+33	; 0x21
    520e:	6a a1       	ldd	r22, Y+34	; 0x22
    5210:	7b a1       	ldd	r23, Y+35	; 0x23
    5212:	8c a1       	ldd	r24, Y+36	; 0x24
    5214:	9d a1       	ldd	r25, Y+37	; 0x25
    5216:	0e 94 75 00 	call	0xea	; 0xea <__floatundisf>
    521a:	dc 01       	movw	r26, r24
    521c:	cb 01       	movw	r24, r22
    521e:	8b 87       	std	Y+11, r24	; 0x0b
    5220:	9c 87       	std	Y+12, r25	; 0x0c
    5222:	ad 87       	std	Y+13, r26	; 0x0d
    5224:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5226:	6b 85       	ldd	r22, Y+11	; 0x0b
    5228:	7c 85       	ldd	r23, Y+12	; 0x0c
    522a:	8d 85       	ldd	r24, Y+13	; 0x0d
    522c:	9e 85       	ldd	r25, Y+14	; 0x0e
    522e:	20 e0       	ldi	r18, 0x00	; 0
    5230:	30 e0       	ldi	r19, 0x00	; 0
    5232:	4a e7       	ldi	r20, 0x7A	; 122
    5234:	55 e4       	ldi	r21, 0x45	; 69
    5236:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    523a:	dc 01       	movw	r26, r24
    523c:	cb 01       	movw	r24, r22
    523e:	8f 83       	std	Y+7, r24	; 0x07
    5240:	98 87       	std	Y+8, r25	; 0x08
    5242:	a9 87       	std	Y+9, r26	; 0x09
    5244:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5246:	6f 81       	ldd	r22, Y+7	; 0x07
    5248:	78 85       	ldd	r23, Y+8	; 0x08
    524a:	89 85       	ldd	r24, Y+9	; 0x09
    524c:	9a 85       	ldd	r25, Y+10	; 0x0a
    524e:	20 e0       	ldi	r18, 0x00	; 0
    5250:	30 e0       	ldi	r19, 0x00	; 0
    5252:	40 e8       	ldi	r20, 0x80	; 128
    5254:	5f e3       	ldi	r21, 0x3F	; 63
    5256:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    525a:	88 23       	and	r24, r24
    525c:	2c f4       	brge	.+10     	; 0x5268 <HBUZ_enOnce+0x18e>
		__ticks = 1;
    525e:	81 e0       	ldi	r24, 0x01	; 1
    5260:	90 e0       	ldi	r25, 0x00	; 0
    5262:	9e 83       	std	Y+6, r25	; 0x06
    5264:	8d 83       	std	Y+5, r24	; 0x05
    5266:	3f c0       	rjmp	.+126    	; 0x52e6 <HBUZ_enOnce+0x20c>
	else if (__tmp > 65535)
    5268:	6f 81       	ldd	r22, Y+7	; 0x07
    526a:	78 85       	ldd	r23, Y+8	; 0x08
    526c:	89 85       	ldd	r24, Y+9	; 0x09
    526e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5270:	20 e0       	ldi	r18, 0x00	; 0
    5272:	3f ef       	ldi	r19, 0xFF	; 255
    5274:	4f e7       	ldi	r20, 0x7F	; 127
    5276:	57 e4       	ldi	r21, 0x47	; 71
    5278:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    527c:	18 16       	cp	r1, r24
    527e:	4c f5       	brge	.+82     	; 0x52d2 <HBUZ_enOnce+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5280:	6b 85       	ldd	r22, Y+11	; 0x0b
    5282:	7c 85       	ldd	r23, Y+12	; 0x0c
    5284:	8d 85       	ldd	r24, Y+13	; 0x0d
    5286:	9e 85       	ldd	r25, Y+14	; 0x0e
    5288:	20 e0       	ldi	r18, 0x00	; 0
    528a:	30 e0       	ldi	r19, 0x00	; 0
    528c:	40 e2       	ldi	r20, 0x20	; 32
    528e:	51 e4       	ldi	r21, 0x41	; 65
    5290:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    5294:	dc 01       	movw	r26, r24
    5296:	cb 01       	movw	r24, r22
    5298:	bc 01       	movw	r22, r24
    529a:	cd 01       	movw	r24, r26
    529c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52a0:	dc 01       	movw	r26, r24
    52a2:	cb 01       	movw	r24, r22
    52a4:	9e 83       	std	Y+6, r25	; 0x06
    52a6:	8d 83       	std	Y+5, r24	; 0x05
    52a8:	0f c0       	rjmp	.+30     	; 0x52c8 <HBUZ_enOnce+0x1ee>
    52aa:	80 e9       	ldi	r24, 0x90	; 144
    52ac:	91 e0       	ldi	r25, 0x01	; 1
    52ae:	9c 83       	std	Y+4, r25	; 0x04
    52b0:	8b 83       	std	Y+3, r24	; 0x03
    52b2:	8b 81       	ldd	r24, Y+3	; 0x03
    52b4:	9c 81       	ldd	r25, Y+4	; 0x04
    52b6:	01 97       	sbiw	r24, 0x01	; 1
    52b8:	f1 f7       	brne	.-4      	; 0x52b6 <HBUZ_enOnce+0x1dc>
    52ba:	9c 83       	std	Y+4, r25	; 0x04
    52bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52be:	8d 81       	ldd	r24, Y+5	; 0x05
    52c0:	9e 81       	ldd	r25, Y+6	; 0x06
    52c2:	01 97       	sbiw	r24, 0x01	; 1
    52c4:	9e 83       	std	Y+6, r25	; 0x06
    52c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52c8:	8d 81       	ldd	r24, Y+5	; 0x05
    52ca:	9e 81       	ldd	r25, Y+6	; 0x06
    52cc:	00 97       	sbiw	r24, 0x00	; 0
    52ce:	69 f7       	brne	.-38     	; 0x52aa <HBUZ_enOnce+0x1d0>
    52d0:	14 c0       	rjmp	.+40     	; 0x52fa <HBUZ_enOnce+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52d2:	6f 81       	ldd	r22, Y+7	; 0x07
    52d4:	78 85       	ldd	r23, Y+8	; 0x08
    52d6:	89 85       	ldd	r24, Y+9	; 0x09
    52d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    52da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52de:	dc 01       	movw	r26, r24
    52e0:	cb 01       	movw	r24, r22
    52e2:	9e 83       	std	Y+6, r25	; 0x06
    52e4:	8d 83       	std	Y+5, r24	; 0x05
    52e6:	8d 81       	ldd	r24, Y+5	; 0x05
    52e8:	9e 81       	ldd	r25, Y+6	; 0x06
    52ea:	9a 83       	std	Y+2, r25	; 0x02
    52ec:	89 83       	std	Y+1, r24	; 0x01
    52ee:	89 81       	ldd	r24, Y+1	; 0x01
    52f0:	9a 81       	ldd	r25, Y+2	; 0x02
    52f2:	01 97       	sbiw	r24, 0x01	; 1
    52f4:	f1 f7       	brne	.-4      	; 0x52f2 <HBUZ_enOnce+0x218>
    52f6:	9a 83       	std	Y+2, r25	; 0x02
    52f8:	89 83       	std	Y+1, r24	; 0x01
	return Local_State;
    52fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    52fc:	a5 96       	adiw	r28, 0x25	; 37
    52fe:	0f b6       	in	r0, 0x3f	; 63
    5300:	f8 94       	cli
    5302:	de bf       	out	0x3e, r29	; 62
    5304:	0f be       	out	0x3f, r0	; 63
    5306:	cd bf       	out	0x3d, r28	; 61
    5308:	cf 91       	pop	r28
    530a:	df 91       	pop	r29
    530c:	08 95       	ret

0000530e <HBUZ_enTwice>:

ErrorState_t HBUZ_enTwice(u64 copy_u64BuzzPeriod)
{ErrorState_t Local_State=SUCCES;
    530e:	df 93       	push	r29
    5310:	cf 93       	push	r28
    5312:	cd b7       	in	r28, 0x3d	; 61
    5314:	de b7       	in	r29, 0x3e	; 62
    5316:	c1 54       	subi	r28, 0x41	; 65
    5318:	d0 40       	sbci	r29, 0x00	; 0
    531a:	0f b6       	in	r0, 0x3f	; 63
    531c:	f8 94       	cli
    531e:	de bf       	out	0x3e, r29	; 62
    5320:	0f be       	out	0x3f, r0	; 63
    5322:	cd bf       	out	0x3d, r28	; 61
    5324:	fe 01       	movw	r30, r28
    5326:	fa 96       	adiw	r30, 0x3a	; 58
    5328:	20 83       	st	Z, r18
    532a:	31 83       	std	Z+1, r19	; 0x01
    532c:	42 83       	std	Z+2, r20	; 0x02
    532e:	53 83       	std	Z+3, r21	; 0x03
    5330:	64 83       	std	Z+4, r22	; 0x04
    5332:	75 83       	std	Z+5, r23	; 0x05
    5334:	86 83       	std	Z+6, r24	; 0x06
    5336:	97 83       	std	Z+7, r25	; 0x07
    5338:	82 e0       	ldi	r24, 0x02	; 2
    533a:	89 af       	std	Y+57, r24	; 0x39
	MDIO_voidSetPinValue(HBUZ_PIN, HIGH);
    533c:	83 e2       	ldi	r24, 0x23	; 35
    533e:	61 e0       	ldi	r22, 0x01	; 1
    5340:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	_delay_ms(copy_u64BuzzPeriod);
    5344:	fe 01       	movw	r30, r28
    5346:	fa 96       	adiw	r30, 0x3a	; 58
    5348:	20 81       	ld	r18, Z
    534a:	31 81       	ldd	r19, Z+1	; 0x01
    534c:	42 81       	ldd	r20, Z+2	; 0x02
    534e:	53 81       	ldd	r21, Z+3	; 0x03
    5350:	64 81       	ldd	r22, Z+4	; 0x04
    5352:	75 81       	ldd	r23, Z+5	; 0x05
    5354:	86 81       	ldd	r24, Z+6	; 0x06
    5356:	97 81       	ldd	r25, Z+7	; 0x07
    5358:	0e 94 75 00 	call	0xea	; 0xea <__floatundisf>
    535c:	dc 01       	movw	r26, r24
    535e:	cb 01       	movw	r24, r22
    5360:	8d ab       	std	Y+53, r24	; 0x35
    5362:	9e ab       	std	Y+54, r25	; 0x36
    5364:	af ab       	std	Y+55, r26	; 0x37
    5366:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5368:	6d a9       	ldd	r22, Y+53	; 0x35
    536a:	7e a9       	ldd	r23, Y+54	; 0x36
    536c:	8f a9       	ldd	r24, Y+55	; 0x37
    536e:	98 ad       	ldd	r25, Y+56	; 0x38
    5370:	20 e0       	ldi	r18, 0x00	; 0
    5372:	30 e0       	ldi	r19, 0x00	; 0
    5374:	4a e7       	ldi	r20, 0x7A	; 122
    5376:	55 e4       	ldi	r21, 0x45	; 69
    5378:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    537c:	dc 01       	movw	r26, r24
    537e:	cb 01       	movw	r24, r22
    5380:	89 ab       	std	Y+49, r24	; 0x31
    5382:	9a ab       	std	Y+50, r25	; 0x32
    5384:	ab ab       	std	Y+51, r26	; 0x33
    5386:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5388:	69 a9       	ldd	r22, Y+49	; 0x31
    538a:	7a a9       	ldd	r23, Y+50	; 0x32
    538c:	8b a9       	ldd	r24, Y+51	; 0x33
    538e:	9c a9       	ldd	r25, Y+52	; 0x34
    5390:	20 e0       	ldi	r18, 0x00	; 0
    5392:	30 e0       	ldi	r19, 0x00	; 0
    5394:	40 e8       	ldi	r20, 0x80	; 128
    5396:	5f e3       	ldi	r21, 0x3F	; 63
    5398:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    539c:	88 23       	and	r24, r24
    539e:	2c f4       	brge	.+10     	; 0x53aa <HBUZ_enTwice+0x9c>
		__ticks = 1;
    53a0:	81 e0       	ldi	r24, 0x01	; 1
    53a2:	90 e0       	ldi	r25, 0x00	; 0
    53a4:	98 ab       	std	Y+48, r25	; 0x30
    53a6:	8f a7       	std	Y+47, r24	; 0x2f
    53a8:	3f c0       	rjmp	.+126    	; 0x5428 <HBUZ_enTwice+0x11a>
	else if (__tmp > 65535)
    53aa:	69 a9       	ldd	r22, Y+49	; 0x31
    53ac:	7a a9       	ldd	r23, Y+50	; 0x32
    53ae:	8b a9       	ldd	r24, Y+51	; 0x33
    53b0:	9c a9       	ldd	r25, Y+52	; 0x34
    53b2:	20 e0       	ldi	r18, 0x00	; 0
    53b4:	3f ef       	ldi	r19, 0xFF	; 255
    53b6:	4f e7       	ldi	r20, 0x7F	; 127
    53b8:	57 e4       	ldi	r21, 0x47	; 71
    53ba:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    53be:	18 16       	cp	r1, r24
    53c0:	4c f5       	brge	.+82     	; 0x5414 <HBUZ_enTwice+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53c2:	6d a9       	ldd	r22, Y+53	; 0x35
    53c4:	7e a9       	ldd	r23, Y+54	; 0x36
    53c6:	8f a9       	ldd	r24, Y+55	; 0x37
    53c8:	98 ad       	ldd	r25, Y+56	; 0x38
    53ca:	20 e0       	ldi	r18, 0x00	; 0
    53cc:	30 e0       	ldi	r19, 0x00	; 0
    53ce:	40 e2       	ldi	r20, 0x20	; 32
    53d0:	51 e4       	ldi	r21, 0x41	; 65
    53d2:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    53d6:	dc 01       	movw	r26, r24
    53d8:	cb 01       	movw	r24, r22
    53da:	bc 01       	movw	r22, r24
    53dc:	cd 01       	movw	r24, r26
    53de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53e2:	dc 01       	movw	r26, r24
    53e4:	cb 01       	movw	r24, r22
    53e6:	98 ab       	std	Y+48, r25	; 0x30
    53e8:	8f a7       	std	Y+47, r24	; 0x2f
    53ea:	0f c0       	rjmp	.+30     	; 0x540a <HBUZ_enTwice+0xfc>
    53ec:	80 e9       	ldi	r24, 0x90	; 144
    53ee:	91 e0       	ldi	r25, 0x01	; 1
    53f0:	9e a7       	std	Y+46, r25	; 0x2e
    53f2:	8d a7       	std	Y+45, r24	; 0x2d
    53f4:	8d a5       	ldd	r24, Y+45	; 0x2d
    53f6:	9e a5       	ldd	r25, Y+46	; 0x2e
    53f8:	01 97       	sbiw	r24, 0x01	; 1
    53fa:	f1 f7       	brne	.-4      	; 0x53f8 <HBUZ_enTwice+0xea>
    53fc:	9e a7       	std	Y+46, r25	; 0x2e
    53fe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5400:	8f a5       	ldd	r24, Y+47	; 0x2f
    5402:	98 a9       	ldd	r25, Y+48	; 0x30
    5404:	01 97       	sbiw	r24, 0x01	; 1
    5406:	98 ab       	std	Y+48, r25	; 0x30
    5408:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    540a:	8f a5       	ldd	r24, Y+47	; 0x2f
    540c:	98 a9       	ldd	r25, Y+48	; 0x30
    540e:	00 97       	sbiw	r24, 0x00	; 0
    5410:	69 f7       	brne	.-38     	; 0x53ec <HBUZ_enTwice+0xde>
    5412:	14 c0       	rjmp	.+40     	; 0x543c <HBUZ_enTwice+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5414:	69 a9       	ldd	r22, Y+49	; 0x31
    5416:	7a a9       	ldd	r23, Y+50	; 0x32
    5418:	8b a9       	ldd	r24, Y+51	; 0x33
    541a:	9c a9       	ldd	r25, Y+52	; 0x34
    541c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5420:	dc 01       	movw	r26, r24
    5422:	cb 01       	movw	r24, r22
    5424:	98 ab       	std	Y+48, r25	; 0x30
    5426:	8f a7       	std	Y+47, r24	; 0x2f
    5428:	8f a5       	ldd	r24, Y+47	; 0x2f
    542a:	98 a9       	ldd	r25, Y+48	; 0x30
    542c:	9c a7       	std	Y+44, r25	; 0x2c
    542e:	8b a7       	std	Y+43, r24	; 0x2b
    5430:	8b a5       	ldd	r24, Y+43	; 0x2b
    5432:	9c a5       	ldd	r25, Y+44	; 0x2c
    5434:	01 97       	sbiw	r24, 0x01	; 1
    5436:	f1 f7       	brne	.-4      	; 0x5434 <HBUZ_enTwice+0x126>
    5438:	9c a7       	std	Y+44, r25	; 0x2c
    543a:	8b a7       	std	Y+43, r24	; 0x2b
	MDIO_voidSetPinValue(HBUZ_PIN, LOW);
    543c:	83 e2       	ldi	r24, 0x23	; 35
    543e:	60 e0       	ldi	r22, 0x00	; 0
    5440:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
    5444:	80 e0       	ldi	r24, 0x00	; 0
    5446:	90 e0       	ldi	r25, 0x00	; 0
    5448:	a8 ec       	ldi	r26, 0xC8	; 200
    544a:	b2 e4       	ldi	r27, 0x42	; 66
    544c:	8f a3       	std	Y+39, r24	; 0x27
    544e:	98 a7       	std	Y+40, r25	; 0x28
    5450:	a9 a7       	std	Y+41, r26	; 0x29
    5452:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5454:	6f a1       	ldd	r22, Y+39	; 0x27
    5456:	78 a5       	ldd	r23, Y+40	; 0x28
    5458:	89 a5       	ldd	r24, Y+41	; 0x29
    545a:	9a a5       	ldd	r25, Y+42	; 0x2a
    545c:	20 e0       	ldi	r18, 0x00	; 0
    545e:	30 e0       	ldi	r19, 0x00	; 0
    5460:	4a e7       	ldi	r20, 0x7A	; 122
    5462:	55 e4       	ldi	r21, 0x45	; 69
    5464:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    5468:	dc 01       	movw	r26, r24
    546a:	cb 01       	movw	r24, r22
    546c:	8b a3       	std	Y+35, r24	; 0x23
    546e:	9c a3       	std	Y+36, r25	; 0x24
    5470:	ad a3       	std	Y+37, r26	; 0x25
    5472:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5474:	6b a1       	ldd	r22, Y+35	; 0x23
    5476:	7c a1       	ldd	r23, Y+36	; 0x24
    5478:	8d a1       	ldd	r24, Y+37	; 0x25
    547a:	9e a1       	ldd	r25, Y+38	; 0x26
    547c:	20 e0       	ldi	r18, 0x00	; 0
    547e:	30 e0       	ldi	r19, 0x00	; 0
    5480:	40 e8       	ldi	r20, 0x80	; 128
    5482:	5f e3       	ldi	r21, 0x3F	; 63
    5484:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    5488:	88 23       	and	r24, r24
    548a:	2c f4       	brge	.+10     	; 0x5496 <HBUZ_enTwice+0x188>
		__ticks = 1;
    548c:	81 e0       	ldi	r24, 0x01	; 1
    548e:	90 e0       	ldi	r25, 0x00	; 0
    5490:	9a a3       	std	Y+34, r25	; 0x22
    5492:	89 a3       	std	Y+33, r24	; 0x21
    5494:	3f c0       	rjmp	.+126    	; 0x5514 <HBUZ_enTwice+0x206>
	else if (__tmp > 65535)
    5496:	6b a1       	ldd	r22, Y+35	; 0x23
    5498:	7c a1       	ldd	r23, Y+36	; 0x24
    549a:	8d a1       	ldd	r24, Y+37	; 0x25
    549c:	9e a1       	ldd	r25, Y+38	; 0x26
    549e:	20 e0       	ldi	r18, 0x00	; 0
    54a0:	3f ef       	ldi	r19, 0xFF	; 255
    54a2:	4f e7       	ldi	r20, 0x7F	; 127
    54a4:	57 e4       	ldi	r21, 0x47	; 71
    54a6:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    54aa:	18 16       	cp	r1, r24
    54ac:	4c f5       	brge	.+82     	; 0x5500 <HBUZ_enTwice+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54ae:	6f a1       	ldd	r22, Y+39	; 0x27
    54b0:	78 a5       	ldd	r23, Y+40	; 0x28
    54b2:	89 a5       	ldd	r24, Y+41	; 0x29
    54b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    54b6:	20 e0       	ldi	r18, 0x00	; 0
    54b8:	30 e0       	ldi	r19, 0x00	; 0
    54ba:	40 e2       	ldi	r20, 0x20	; 32
    54bc:	51 e4       	ldi	r21, 0x41	; 65
    54be:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    54c2:	dc 01       	movw	r26, r24
    54c4:	cb 01       	movw	r24, r22
    54c6:	bc 01       	movw	r22, r24
    54c8:	cd 01       	movw	r24, r26
    54ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54ce:	dc 01       	movw	r26, r24
    54d0:	cb 01       	movw	r24, r22
    54d2:	9a a3       	std	Y+34, r25	; 0x22
    54d4:	89 a3       	std	Y+33, r24	; 0x21
    54d6:	0f c0       	rjmp	.+30     	; 0x54f6 <HBUZ_enTwice+0x1e8>
    54d8:	80 e9       	ldi	r24, 0x90	; 144
    54da:	91 e0       	ldi	r25, 0x01	; 1
    54dc:	98 a3       	std	Y+32, r25	; 0x20
    54de:	8f 8f       	std	Y+31, r24	; 0x1f
    54e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    54e2:	98 a1       	ldd	r25, Y+32	; 0x20
    54e4:	01 97       	sbiw	r24, 0x01	; 1
    54e6:	f1 f7       	brne	.-4      	; 0x54e4 <HBUZ_enTwice+0x1d6>
    54e8:	98 a3       	std	Y+32, r25	; 0x20
    54ea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54ec:	89 a1       	ldd	r24, Y+33	; 0x21
    54ee:	9a a1       	ldd	r25, Y+34	; 0x22
    54f0:	01 97       	sbiw	r24, 0x01	; 1
    54f2:	9a a3       	std	Y+34, r25	; 0x22
    54f4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54f6:	89 a1       	ldd	r24, Y+33	; 0x21
    54f8:	9a a1       	ldd	r25, Y+34	; 0x22
    54fa:	00 97       	sbiw	r24, 0x00	; 0
    54fc:	69 f7       	brne	.-38     	; 0x54d8 <HBUZ_enTwice+0x1ca>
    54fe:	14 c0       	rjmp	.+40     	; 0x5528 <HBUZ_enTwice+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5500:	6b a1       	ldd	r22, Y+35	; 0x23
    5502:	7c a1       	ldd	r23, Y+36	; 0x24
    5504:	8d a1       	ldd	r24, Y+37	; 0x25
    5506:	9e a1       	ldd	r25, Y+38	; 0x26
    5508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    550c:	dc 01       	movw	r26, r24
    550e:	cb 01       	movw	r24, r22
    5510:	9a a3       	std	Y+34, r25	; 0x22
    5512:	89 a3       	std	Y+33, r24	; 0x21
    5514:	89 a1       	ldd	r24, Y+33	; 0x21
    5516:	9a a1       	ldd	r25, Y+34	; 0x22
    5518:	9e 8f       	std	Y+30, r25	; 0x1e
    551a:	8d 8f       	std	Y+29, r24	; 0x1d
    551c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    551e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5520:	01 97       	sbiw	r24, 0x01	; 1
    5522:	f1 f7       	brne	.-4      	; 0x5520 <HBUZ_enTwice+0x212>
    5524:	9e 8f       	std	Y+30, r25	; 0x1e
    5526:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(100);
	MDIO_voidSetPinValue(HBUZ_PIN, HIGH);
    5528:	83 e2       	ldi	r24, 0x23	; 35
    552a:	61 e0       	ldi	r22, 0x01	; 1
    552c:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	_delay_ms(copy_u64BuzzPeriod);
    5530:	fe 01       	movw	r30, r28
    5532:	fa 96       	adiw	r30, 0x3a	; 58
    5534:	20 81       	ld	r18, Z
    5536:	31 81       	ldd	r19, Z+1	; 0x01
    5538:	42 81       	ldd	r20, Z+2	; 0x02
    553a:	53 81       	ldd	r21, Z+3	; 0x03
    553c:	64 81       	ldd	r22, Z+4	; 0x04
    553e:	75 81       	ldd	r23, Z+5	; 0x05
    5540:	86 81       	ldd	r24, Z+6	; 0x06
    5542:	97 81       	ldd	r25, Z+7	; 0x07
    5544:	0e 94 75 00 	call	0xea	; 0xea <__floatundisf>
    5548:	dc 01       	movw	r26, r24
    554a:	cb 01       	movw	r24, r22
    554c:	89 8f       	std	Y+25, r24	; 0x19
    554e:	9a 8f       	std	Y+26, r25	; 0x1a
    5550:	ab 8f       	std	Y+27, r26	; 0x1b
    5552:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5554:	69 8d       	ldd	r22, Y+25	; 0x19
    5556:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5558:	8b 8d       	ldd	r24, Y+27	; 0x1b
    555a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    555c:	20 e0       	ldi	r18, 0x00	; 0
    555e:	30 e0       	ldi	r19, 0x00	; 0
    5560:	4a e7       	ldi	r20, 0x7A	; 122
    5562:	55 e4       	ldi	r21, 0x45	; 69
    5564:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    5568:	dc 01       	movw	r26, r24
    556a:	cb 01       	movw	r24, r22
    556c:	8d 8b       	std	Y+21, r24	; 0x15
    556e:	9e 8b       	std	Y+22, r25	; 0x16
    5570:	af 8b       	std	Y+23, r26	; 0x17
    5572:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5574:	6d 89       	ldd	r22, Y+21	; 0x15
    5576:	7e 89       	ldd	r23, Y+22	; 0x16
    5578:	8f 89       	ldd	r24, Y+23	; 0x17
    557a:	98 8d       	ldd	r25, Y+24	; 0x18
    557c:	20 e0       	ldi	r18, 0x00	; 0
    557e:	30 e0       	ldi	r19, 0x00	; 0
    5580:	40 e8       	ldi	r20, 0x80	; 128
    5582:	5f e3       	ldi	r21, 0x3F	; 63
    5584:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    5588:	88 23       	and	r24, r24
    558a:	2c f4       	brge	.+10     	; 0x5596 <HBUZ_enTwice+0x288>
		__ticks = 1;
    558c:	81 e0       	ldi	r24, 0x01	; 1
    558e:	90 e0       	ldi	r25, 0x00	; 0
    5590:	9c 8b       	std	Y+20, r25	; 0x14
    5592:	8b 8b       	std	Y+19, r24	; 0x13
    5594:	3f c0       	rjmp	.+126    	; 0x5614 <HBUZ_enTwice+0x306>
	else if (__tmp > 65535)
    5596:	6d 89       	ldd	r22, Y+21	; 0x15
    5598:	7e 89       	ldd	r23, Y+22	; 0x16
    559a:	8f 89       	ldd	r24, Y+23	; 0x17
    559c:	98 8d       	ldd	r25, Y+24	; 0x18
    559e:	20 e0       	ldi	r18, 0x00	; 0
    55a0:	3f ef       	ldi	r19, 0xFF	; 255
    55a2:	4f e7       	ldi	r20, 0x7F	; 127
    55a4:	57 e4       	ldi	r21, 0x47	; 71
    55a6:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    55aa:	18 16       	cp	r1, r24
    55ac:	4c f5       	brge	.+82     	; 0x5600 <HBUZ_enTwice+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55ae:	69 8d       	ldd	r22, Y+25	; 0x19
    55b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    55b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    55b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    55b6:	20 e0       	ldi	r18, 0x00	; 0
    55b8:	30 e0       	ldi	r19, 0x00	; 0
    55ba:	40 e2       	ldi	r20, 0x20	; 32
    55bc:	51 e4       	ldi	r21, 0x41	; 65
    55be:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    55c2:	dc 01       	movw	r26, r24
    55c4:	cb 01       	movw	r24, r22
    55c6:	bc 01       	movw	r22, r24
    55c8:	cd 01       	movw	r24, r26
    55ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55ce:	dc 01       	movw	r26, r24
    55d0:	cb 01       	movw	r24, r22
    55d2:	9c 8b       	std	Y+20, r25	; 0x14
    55d4:	8b 8b       	std	Y+19, r24	; 0x13
    55d6:	0f c0       	rjmp	.+30     	; 0x55f6 <HBUZ_enTwice+0x2e8>
    55d8:	80 e9       	ldi	r24, 0x90	; 144
    55da:	91 e0       	ldi	r25, 0x01	; 1
    55dc:	9a 8b       	std	Y+18, r25	; 0x12
    55de:	89 8b       	std	Y+17, r24	; 0x11
    55e0:	89 89       	ldd	r24, Y+17	; 0x11
    55e2:	9a 89       	ldd	r25, Y+18	; 0x12
    55e4:	01 97       	sbiw	r24, 0x01	; 1
    55e6:	f1 f7       	brne	.-4      	; 0x55e4 <HBUZ_enTwice+0x2d6>
    55e8:	9a 8b       	std	Y+18, r25	; 0x12
    55ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55ec:	8b 89       	ldd	r24, Y+19	; 0x13
    55ee:	9c 89       	ldd	r25, Y+20	; 0x14
    55f0:	01 97       	sbiw	r24, 0x01	; 1
    55f2:	9c 8b       	std	Y+20, r25	; 0x14
    55f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55f6:	8b 89       	ldd	r24, Y+19	; 0x13
    55f8:	9c 89       	ldd	r25, Y+20	; 0x14
    55fa:	00 97       	sbiw	r24, 0x00	; 0
    55fc:	69 f7       	brne	.-38     	; 0x55d8 <HBUZ_enTwice+0x2ca>
    55fe:	14 c0       	rjmp	.+40     	; 0x5628 <HBUZ_enTwice+0x31a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5600:	6d 89       	ldd	r22, Y+21	; 0x15
    5602:	7e 89       	ldd	r23, Y+22	; 0x16
    5604:	8f 89       	ldd	r24, Y+23	; 0x17
    5606:	98 8d       	ldd	r25, Y+24	; 0x18
    5608:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    560c:	dc 01       	movw	r26, r24
    560e:	cb 01       	movw	r24, r22
    5610:	9c 8b       	std	Y+20, r25	; 0x14
    5612:	8b 8b       	std	Y+19, r24	; 0x13
    5614:	8b 89       	ldd	r24, Y+19	; 0x13
    5616:	9c 89       	ldd	r25, Y+20	; 0x14
    5618:	98 8b       	std	Y+16, r25	; 0x10
    561a:	8f 87       	std	Y+15, r24	; 0x0f
    561c:	8f 85       	ldd	r24, Y+15	; 0x0f
    561e:	98 89       	ldd	r25, Y+16	; 0x10
    5620:	01 97       	sbiw	r24, 0x01	; 1
    5622:	f1 f7       	brne	.-4      	; 0x5620 <HBUZ_enTwice+0x312>
    5624:	98 8b       	std	Y+16, r25	; 0x10
    5626:	8f 87       	std	Y+15, r24	; 0x0f
	MDIO_voidSetPinValue(HBUZ_PIN, LOW);
    5628:	83 e2       	ldi	r24, 0x23	; 35
    562a:	60 e0       	ldi	r22, 0x00	; 0
    562c:	0e 94 02 13 	call	0x2604	; 0x2604 <MDIO_voidSetPinValue>
	_delay_ms(copy_u64BuzzPeriod);
    5630:	fe 01       	movw	r30, r28
    5632:	fa 96       	adiw	r30, 0x3a	; 58
    5634:	20 81       	ld	r18, Z
    5636:	31 81       	ldd	r19, Z+1	; 0x01
    5638:	42 81       	ldd	r20, Z+2	; 0x02
    563a:	53 81       	ldd	r21, Z+3	; 0x03
    563c:	64 81       	ldd	r22, Z+4	; 0x04
    563e:	75 81       	ldd	r23, Z+5	; 0x05
    5640:	86 81       	ldd	r24, Z+6	; 0x06
    5642:	97 81       	ldd	r25, Z+7	; 0x07
    5644:	0e 94 75 00 	call	0xea	; 0xea <__floatundisf>
    5648:	dc 01       	movw	r26, r24
    564a:	cb 01       	movw	r24, r22
    564c:	8b 87       	std	Y+11, r24	; 0x0b
    564e:	9c 87       	std	Y+12, r25	; 0x0c
    5650:	ad 87       	std	Y+13, r26	; 0x0d
    5652:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5654:	6b 85       	ldd	r22, Y+11	; 0x0b
    5656:	7c 85       	ldd	r23, Y+12	; 0x0c
    5658:	8d 85       	ldd	r24, Y+13	; 0x0d
    565a:	9e 85       	ldd	r25, Y+14	; 0x0e
    565c:	20 e0       	ldi	r18, 0x00	; 0
    565e:	30 e0       	ldi	r19, 0x00	; 0
    5660:	4a e7       	ldi	r20, 0x7A	; 122
    5662:	55 e4       	ldi	r21, 0x45	; 69
    5664:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    5668:	dc 01       	movw	r26, r24
    566a:	cb 01       	movw	r24, r22
    566c:	8f 83       	std	Y+7, r24	; 0x07
    566e:	98 87       	std	Y+8, r25	; 0x08
    5670:	a9 87       	std	Y+9, r26	; 0x09
    5672:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5674:	6f 81       	ldd	r22, Y+7	; 0x07
    5676:	78 85       	ldd	r23, Y+8	; 0x08
    5678:	89 85       	ldd	r24, Y+9	; 0x09
    567a:	9a 85       	ldd	r25, Y+10	; 0x0a
    567c:	20 e0       	ldi	r18, 0x00	; 0
    567e:	30 e0       	ldi	r19, 0x00	; 0
    5680:	40 e8       	ldi	r20, 0x80	; 128
    5682:	5f e3       	ldi	r21, 0x3F	; 63
    5684:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    5688:	88 23       	and	r24, r24
    568a:	2c f4       	brge	.+10     	; 0x5696 <HBUZ_enTwice+0x388>
		__ticks = 1;
    568c:	81 e0       	ldi	r24, 0x01	; 1
    568e:	90 e0       	ldi	r25, 0x00	; 0
    5690:	9e 83       	std	Y+6, r25	; 0x06
    5692:	8d 83       	std	Y+5, r24	; 0x05
    5694:	3f c0       	rjmp	.+126    	; 0x5714 <HBUZ_enTwice+0x406>
	else if (__tmp > 65535)
    5696:	6f 81       	ldd	r22, Y+7	; 0x07
    5698:	78 85       	ldd	r23, Y+8	; 0x08
    569a:	89 85       	ldd	r24, Y+9	; 0x09
    569c:	9a 85       	ldd	r25, Y+10	; 0x0a
    569e:	20 e0       	ldi	r18, 0x00	; 0
    56a0:	3f ef       	ldi	r19, 0xFF	; 255
    56a2:	4f e7       	ldi	r20, 0x7F	; 127
    56a4:	57 e4       	ldi	r21, 0x47	; 71
    56a6:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    56aa:	18 16       	cp	r1, r24
    56ac:	4c f5       	brge	.+82     	; 0x5700 <HBUZ_enTwice+0x3f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    56b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    56b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    56b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    56b6:	20 e0       	ldi	r18, 0x00	; 0
    56b8:	30 e0       	ldi	r19, 0x00	; 0
    56ba:	40 e2       	ldi	r20, 0x20	; 32
    56bc:	51 e4       	ldi	r21, 0x41	; 65
    56be:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    56c2:	dc 01       	movw	r26, r24
    56c4:	cb 01       	movw	r24, r22
    56c6:	bc 01       	movw	r22, r24
    56c8:	cd 01       	movw	r24, r26
    56ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56ce:	dc 01       	movw	r26, r24
    56d0:	cb 01       	movw	r24, r22
    56d2:	9e 83       	std	Y+6, r25	; 0x06
    56d4:	8d 83       	std	Y+5, r24	; 0x05
    56d6:	0f c0       	rjmp	.+30     	; 0x56f6 <HBUZ_enTwice+0x3e8>
    56d8:	80 e9       	ldi	r24, 0x90	; 144
    56da:	91 e0       	ldi	r25, 0x01	; 1
    56dc:	9c 83       	std	Y+4, r25	; 0x04
    56de:	8b 83       	std	Y+3, r24	; 0x03
    56e0:	8b 81       	ldd	r24, Y+3	; 0x03
    56e2:	9c 81       	ldd	r25, Y+4	; 0x04
    56e4:	01 97       	sbiw	r24, 0x01	; 1
    56e6:	f1 f7       	brne	.-4      	; 0x56e4 <HBUZ_enTwice+0x3d6>
    56e8:	9c 83       	std	Y+4, r25	; 0x04
    56ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56ec:	8d 81       	ldd	r24, Y+5	; 0x05
    56ee:	9e 81       	ldd	r25, Y+6	; 0x06
    56f0:	01 97       	sbiw	r24, 0x01	; 1
    56f2:	9e 83       	std	Y+6, r25	; 0x06
    56f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56f6:	8d 81       	ldd	r24, Y+5	; 0x05
    56f8:	9e 81       	ldd	r25, Y+6	; 0x06
    56fa:	00 97       	sbiw	r24, 0x00	; 0
    56fc:	69 f7       	brne	.-38     	; 0x56d8 <HBUZ_enTwice+0x3ca>
    56fe:	14 c0       	rjmp	.+40     	; 0x5728 <HBUZ_enTwice+0x41a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5700:	6f 81       	ldd	r22, Y+7	; 0x07
    5702:	78 85       	ldd	r23, Y+8	; 0x08
    5704:	89 85       	ldd	r24, Y+9	; 0x09
    5706:	9a 85       	ldd	r25, Y+10	; 0x0a
    5708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    570c:	dc 01       	movw	r26, r24
    570e:	cb 01       	movw	r24, r22
    5710:	9e 83       	std	Y+6, r25	; 0x06
    5712:	8d 83       	std	Y+5, r24	; 0x05
    5714:	8d 81       	ldd	r24, Y+5	; 0x05
    5716:	9e 81       	ldd	r25, Y+6	; 0x06
    5718:	9a 83       	std	Y+2, r25	; 0x02
    571a:	89 83       	std	Y+1, r24	; 0x01
    571c:	89 81       	ldd	r24, Y+1	; 0x01
    571e:	9a 81       	ldd	r25, Y+2	; 0x02
    5720:	01 97       	sbiw	r24, 0x01	; 1
    5722:	f1 f7       	brne	.-4      	; 0x5720 <HBUZ_enTwice+0x412>
    5724:	9a 83       	std	Y+2, r25	; 0x02
    5726:	89 83       	std	Y+1, r24	; 0x01
	return Local_State;
    5728:	89 ad       	ldd	r24, Y+57	; 0x39
}
    572a:	cf 5b       	subi	r28, 0xBF	; 191
    572c:	df 4f       	sbci	r29, 0xFF	; 255
    572e:	0f b6       	in	r0, 0x3f	; 63
    5730:	f8 94       	cli
    5732:	de bf       	out	0x3e, r29	; 62
    5734:	0f be       	out	0x3f, r0	; 63
    5736:	cd bf       	out	0x3d, r28	; 61
    5738:	cf 91       	pop	r28
    573a:	df 91       	pop	r29
    573c:	08 95       	ret

0000573e <CreatPassward>:
/*
 * First time set passward
 *
 */
void CreatPassward(void)
{
    573e:	df 93       	push	r29
    5740:	cf 93       	push	r28
    5742:	cd b7       	in	r28, 0x3d	; 61
    5744:	de b7       	in	r29, 0x3e	; 62
    5746:	e8 97       	sbiw	r28, 0x38	; 56
    5748:	0f b6       	in	r0, 0x3f	; 63
    574a:	f8 94       	cli
    574c:	de bf       	out	0x3e, r29	; 62
    574e:	0f be       	out	0x3f, r0	; 63
    5750:	cd bf       	out	0x3d, r28	; 61


	HEEPROM_enWriteByte(1, 0); // SET the initialization password
    5752:	81 e0       	ldi	r24, 0x01	; 1
    5754:	90 e0       	ldi	r25, 0x00	; 0
    5756:	60 e0       	ldi	r22, 0x00	; 0
    5758:	0e 94 0e 27 	call	0x4e1c	; 0x4e1c <HEEPROM_enWriteByte>
    575c:	80 e0       	ldi	r24, 0x00	; 0
    575e:	90 e0       	ldi	r25, 0x00	; 0
    5760:	a0 ef       	ldi	r26, 0xF0	; 240
    5762:	b1 e4       	ldi	r27, 0x41	; 65
    5764:	8d ab       	std	Y+53, r24	; 0x35
    5766:	9e ab       	std	Y+54, r25	; 0x36
    5768:	af ab       	std	Y+55, r26	; 0x37
    576a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    576c:	6d a9       	ldd	r22, Y+53	; 0x35
    576e:	7e a9       	ldd	r23, Y+54	; 0x36
    5770:	8f a9       	ldd	r24, Y+55	; 0x37
    5772:	98 ad       	ldd	r25, Y+56	; 0x38
    5774:	20 e0       	ldi	r18, 0x00	; 0
    5776:	30 e0       	ldi	r19, 0x00	; 0
    5778:	4a e7       	ldi	r20, 0x7A	; 122
    577a:	55 e4       	ldi	r21, 0x45	; 69
    577c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    5780:	dc 01       	movw	r26, r24
    5782:	cb 01       	movw	r24, r22
    5784:	89 ab       	std	Y+49, r24	; 0x31
    5786:	9a ab       	std	Y+50, r25	; 0x32
    5788:	ab ab       	std	Y+51, r26	; 0x33
    578a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    578c:	69 a9       	ldd	r22, Y+49	; 0x31
    578e:	7a a9       	ldd	r23, Y+50	; 0x32
    5790:	8b a9       	ldd	r24, Y+51	; 0x33
    5792:	9c a9       	ldd	r25, Y+52	; 0x34
    5794:	20 e0       	ldi	r18, 0x00	; 0
    5796:	30 e0       	ldi	r19, 0x00	; 0
    5798:	40 e8       	ldi	r20, 0x80	; 128
    579a:	5f e3       	ldi	r21, 0x3F	; 63
    579c:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    57a0:	88 23       	and	r24, r24
    57a2:	2c f4       	brge	.+10     	; 0x57ae <CreatPassward+0x70>
		__ticks = 1;
    57a4:	81 e0       	ldi	r24, 0x01	; 1
    57a6:	90 e0       	ldi	r25, 0x00	; 0
    57a8:	98 ab       	std	Y+48, r25	; 0x30
    57aa:	8f a7       	std	Y+47, r24	; 0x2f
    57ac:	3f c0       	rjmp	.+126    	; 0x582c <CreatPassward+0xee>
	else if (__tmp > 65535)
    57ae:	69 a9       	ldd	r22, Y+49	; 0x31
    57b0:	7a a9       	ldd	r23, Y+50	; 0x32
    57b2:	8b a9       	ldd	r24, Y+51	; 0x33
    57b4:	9c a9       	ldd	r25, Y+52	; 0x34
    57b6:	20 e0       	ldi	r18, 0x00	; 0
    57b8:	3f ef       	ldi	r19, 0xFF	; 255
    57ba:	4f e7       	ldi	r20, 0x7F	; 127
    57bc:	57 e4       	ldi	r21, 0x47	; 71
    57be:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    57c2:	18 16       	cp	r1, r24
    57c4:	4c f5       	brge	.+82     	; 0x5818 <CreatPassward+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57c6:	6d a9       	ldd	r22, Y+53	; 0x35
    57c8:	7e a9       	ldd	r23, Y+54	; 0x36
    57ca:	8f a9       	ldd	r24, Y+55	; 0x37
    57cc:	98 ad       	ldd	r25, Y+56	; 0x38
    57ce:	20 e0       	ldi	r18, 0x00	; 0
    57d0:	30 e0       	ldi	r19, 0x00	; 0
    57d2:	40 e2       	ldi	r20, 0x20	; 32
    57d4:	51 e4       	ldi	r21, 0x41	; 65
    57d6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    57da:	dc 01       	movw	r26, r24
    57dc:	cb 01       	movw	r24, r22
    57de:	bc 01       	movw	r22, r24
    57e0:	cd 01       	movw	r24, r26
    57e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57e6:	dc 01       	movw	r26, r24
    57e8:	cb 01       	movw	r24, r22
    57ea:	98 ab       	std	Y+48, r25	; 0x30
    57ec:	8f a7       	std	Y+47, r24	; 0x2f
    57ee:	0f c0       	rjmp	.+30     	; 0x580e <CreatPassward+0xd0>
    57f0:	80 e9       	ldi	r24, 0x90	; 144
    57f2:	91 e0       	ldi	r25, 0x01	; 1
    57f4:	9e a7       	std	Y+46, r25	; 0x2e
    57f6:	8d a7       	std	Y+45, r24	; 0x2d
    57f8:	8d a5       	ldd	r24, Y+45	; 0x2d
    57fa:	9e a5       	ldd	r25, Y+46	; 0x2e
    57fc:	01 97       	sbiw	r24, 0x01	; 1
    57fe:	f1 f7       	brne	.-4      	; 0x57fc <CreatPassward+0xbe>
    5800:	9e a7       	std	Y+46, r25	; 0x2e
    5802:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5804:	8f a5       	ldd	r24, Y+47	; 0x2f
    5806:	98 a9       	ldd	r25, Y+48	; 0x30
    5808:	01 97       	sbiw	r24, 0x01	; 1
    580a:	98 ab       	std	Y+48, r25	; 0x30
    580c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    580e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5810:	98 a9       	ldd	r25, Y+48	; 0x30
    5812:	00 97       	sbiw	r24, 0x00	; 0
    5814:	69 f7       	brne	.-38     	; 0x57f0 <CreatPassward+0xb2>
    5816:	14 c0       	rjmp	.+40     	; 0x5840 <CreatPassward+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5818:	69 a9       	ldd	r22, Y+49	; 0x31
    581a:	7a a9       	ldd	r23, Y+50	; 0x32
    581c:	8b a9       	ldd	r24, Y+51	; 0x33
    581e:	9c a9       	ldd	r25, Y+52	; 0x34
    5820:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5824:	dc 01       	movw	r26, r24
    5826:	cb 01       	movw	r24, r22
    5828:	98 ab       	std	Y+48, r25	; 0x30
    582a:	8f a7       	std	Y+47, r24	; 0x2f
    582c:	8f a5       	ldd	r24, Y+47	; 0x2f
    582e:	98 a9       	ldd	r25, Y+48	; 0x30
    5830:	9c a7       	std	Y+44, r25	; 0x2c
    5832:	8b a7       	std	Y+43, r24	; 0x2b
    5834:	8b a5       	ldd	r24, Y+43	; 0x2b
    5836:	9c a5       	ldd	r25, Y+44	; 0x2c
    5838:	01 97       	sbiw	r24, 0x01	; 1
    583a:	f1 f7       	brne	.-4      	; 0x5838 <CreatPassward+0xfa>
    583c:	9c a7       	std	Y+44, r25	; 0x2c
    583e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(30);

	HLCD_SendString("Please Login");
    5840:	80 e6       	ldi	r24, 0x60	; 96
    5842:	90 e0       	ldi	r25, 0x00	; 0
    5844:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
	HLCD_gotoXY(2, 1);
    5848:	82 e0       	ldi	r24, 0x02	; 2
    584a:	61 e0       	ldi	r22, 0x01	; 1
    584c:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
	HLCD_SendString("First time..");
    5850:	8d e6       	ldi	r24, 0x6D	; 109
    5852:	90 e0       	ldi	r25, 0x00	; 0
    5854:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
    5858:	80 e0       	ldi	r24, 0x00	; 0
    585a:	90 e0       	ldi	r25, 0x00	; 0
    585c:	aa ef       	ldi	r26, 0xFA	; 250
    585e:	b3 e4       	ldi	r27, 0x43	; 67
    5860:	8f a3       	std	Y+39, r24	; 0x27
    5862:	98 a7       	std	Y+40, r25	; 0x28
    5864:	a9 a7       	std	Y+41, r26	; 0x29
    5866:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5868:	6f a1       	ldd	r22, Y+39	; 0x27
    586a:	78 a5       	ldd	r23, Y+40	; 0x28
    586c:	89 a5       	ldd	r24, Y+41	; 0x29
    586e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5870:	20 e0       	ldi	r18, 0x00	; 0
    5872:	30 e0       	ldi	r19, 0x00	; 0
    5874:	4a e7       	ldi	r20, 0x7A	; 122
    5876:	55 e4       	ldi	r21, 0x45	; 69
    5878:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    587c:	dc 01       	movw	r26, r24
    587e:	cb 01       	movw	r24, r22
    5880:	8b a3       	std	Y+35, r24	; 0x23
    5882:	9c a3       	std	Y+36, r25	; 0x24
    5884:	ad a3       	std	Y+37, r26	; 0x25
    5886:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5888:	6b a1       	ldd	r22, Y+35	; 0x23
    588a:	7c a1       	ldd	r23, Y+36	; 0x24
    588c:	8d a1       	ldd	r24, Y+37	; 0x25
    588e:	9e a1       	ldd	r25, Y+38	; 0x26
    5890:	20 e0       	ldi	r18, 0x00	; 0
    5892:	30 e0       	ldi	r19, 0x00	; 0
    5894:	40 e8       	ldi	r20, 0x80	; 128
    5896:	5f e3       	ldi	r21, 0x3F	; 63
    5898:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    589c:	88 23       	and	r24, r24
    589e:	2c f4       	brge	.+10     	; 0x58aa <CreatPassward+0x16c>
		__ticks = 1;
    58a0:	81 e0       	ldi	r24, 0x01	; 1
    58a2:	90 e0       	ldi	r25, 0x00	; 0
    58a4:	9a a3       	std	Y+34, r25	; 0x22
    58a6:	89 a3       	std	Y+33, r24	; 0x21
    58a8:	3f c0       	rjmp	.+126    	; 0x5928 <CreatPassward+0x1ea>
	else if (__tmp > 65535)
    58aa:	6b a1       	ldd	r22, Y+35	; 0x23
    58ac:	7c a1       	ldd	r23, Y+36	; 0x24
    58ae:	8d a1       	ldd	r24, Y+37	; 0x25
    58b0:	9e a1       	ldd	r25, Y+38	; 0x26
    58b2:	20 e0       	ldi	r18, 0x00	; 0
    58b4:	3f ef       	ldi	r19, 0xFF	; 255
    58b6:	4f e7       	ldi	r20, 0x7F	; 127
    58b8:	57 e4       	ldi	r21, 0x47	; 71
    58ba:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    58be:	18 16       	cp	r1, r24
    58c0:	4c f5       	brge	.+82     	; 0x5914 <CreatPassward+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58c2:	6f a1       	ldd	r22, Y+39	; 0x27
    58c4:	78 a5       	ldd	r23, Y+40	; 0x28
    58c6:	89 a5       	ldd	r24, Y+41	; 0x29
    58c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    58ca:	20 e0       	ldi	r18, 0x00	; 0
    58cc:	30 e0       	ldi	r19, 0x00	; 0
    58ce:	40 e2       	ldi	r20, 0x20	; 32
    58d0:	51 e4       	ldi	r21, 0x41	; 65
    58d2:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    58d6:	dc 01       	movw	r26, r24
    58d8:	cb 01       	movw	r24, r22
    58da:	bc 01       	movw	r22, r24
    58dc:	cd 01       	movw	r24, r26
    58de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58e2:	dc 01       	movw	r26, r24
    58e4:	cb 01       	movw	r24, r22
    58e6:	9a a3       	std	Y+34, r25	; 0x22
    58e8:	89 a3       	std	Y+33, r24	; 0x21
    58ea:	0f c0       	rjmp	.+30     	; 0x590a <CreatPassward+0x1cc>
    58ec:	80 e9       	ldi	r24, 0x90	; 144
    58ee:	91 e0       	ldi	r25, 0x01	; 1
    58f0:	98 a3       	std	Y+32, r25	; 0x20
    58f2:	8f 8f       	std	Y+31, r24	; 0x1f
    58f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    58f6:	98 a1       	ldd	r25, Y+32	; 0x20
    58f8:	01 97       	sbiw	r24, 0x01	; 1
    58fa:	f1 f7       	brne	.-4      	; 0x58f8 <CreatPassward+0x1ba>
    58fc:	98 a3       	std	Y+32, r25	; 0x20
    58fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5900:	89 a1       	ldd	r24, Y+33	; 0x21
    5902:	9a a1       	ldd	r25, Y+34	; 0x22
    5904:	01 97       	sbiw	r24, 0x01	; 1
    5906:	9a a3       	std	Y+34, r25	; 0x22
    5908:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    590a:	89 a1       	ldd	r24, Y+33	; 0x21
    590c:	9a a1       	ldd	r25, Y+34	; 0x22
    590e:	00 97       	sbiw	r24, 0x00	; 0
    5910:	69 f7       	brne	.-38     	; 0x58ec <CreatPassward+0x1ae>
    5912:	14 c0       	rjmp	.+40     	; 0x593c <CreatPassward+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5914:	6b a1       	ldd	r22, Y+35	; 0x23
    5916:	7c a1       	ldd	r23, Y+36	; 0x24
    5918:	8d a1       	ldd	r24, Y+37	; 0x25
    591a:	9e a1       	ldd	r25, Y+38	; 0x26
    591c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5920:	dc 01       	movw	r26, r24
    5922:	cb 01       	movw	r24, r22
    5924:	9a a3       	std	Y+34, r25	; 0x22
    5926:	89 a3       	std	Y+33, r24	; 0x21
    5928:	89 a1       	ldd	r24, Y+33	; 0x21
    592a:	9a a1       	ldd	r25, Y+34	; 0x22
    592c:	9e 8f       	std	Y+30, r25	; 0x1e
    592e:	8d 8f       	std	Y+29, r24	; 0x1d
    5930:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5932:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5934:	01 97       	sbiw	r24, 0x01	; 1
    5936:	f1 f7       	brne	.-4      	; 0x5934 <CreatPassward+0x1f6>
    5938:	9e 8f       	std	Y+30, r25	; 0x1e
    593a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500);
	HLCD_ClearDisplay();
    593c:	0e 94 b5 23 	call	0x476a	; 0x476a <HLCD_ClearDisplay>

/******************* SETTING ADMIN PASSWORD ********************/

	HLCD_SendString("SET ADMIN PASS..");
    5940:	8a e7       	ldi	r24, 0x7A	; 122
    5942:	90 e0       	ldi	r25, 0x00	; 0
    5944:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
	HLCD_gotoXY(2, 1);
    5948:	82 e0       	ldi	r24, 0x02	; 2
    594a:	61 e0       	ldi	r22, 0x01	; 1
    594c:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
	HLCD_SendString("Admin Pass: ");
    5950:	8b e8       	ldi	r24, 0x8B	; 139
    5952:	90 e0       	ldi	r25, 0x00	; 0
    5954:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
	 i = 2;
    5958:	82 e0       	ldi	r24, 0x02	; 2
    595a:	80 93 59 03 	sts	0x0359, r24
    595e:	4a c0       	rjmp	.+148    	; 0x59f4 <CreatPassward+0x2b6>
	while (i <= 5)
	{
		temp = i * 2;
    5960:	80 91 59 03 	lds	r24, 0x0359
    5964:	88 2f       	mov	r24, r24
    5966:	90 e0       	ldi	r25, 0x00	; 0
    5968:	88 0f       	add	r24, r24
    596a:	99 1f       	adc	r25, r25
    596c:	80 93 64 03 	sts	0x0364, r24
		HKEYPAD_enGetPressedKey(&key);
    5970:	8c ee       	ldi	r24, 0xEC	; 236
    5972:	92 e0       	ldi	r25, 0x02	; 2
    5974:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <HKEYPAD_enGetPressedKey>
		if (key != HKEYPAD_NO_PRESSED_KEY)
    5978:	80 91 ec 02 	lds	r24, 0x02EC
    597c:	8f 3f       	cpi	r24, 0xFF	; 255
    597e:	d1 f1       	breq	.+116    	; 0x59f4 <CreatPassward+0x2b6>
		{
			 if (key == 'c')
    5980:	80 91 ec 02 	lds	r24, 0x02EC
    5984:	83 36       	cpi	r24, 0x63	; 99
    5986:	91 f4       	brne	.+36     	; 0x59ac <CreatPassward+0x26e>
			 {
				 HLCD_gotoXY(2, 10+i); // 12 13 14 15
    5988:	80 91 59 03 	lds	r24, 0x0359
    598c:	98 2f       	mov	r25, r24
    598e:	96 5f       	subi	r25, 0xF6	; 246
    5990:	82 e0       	ldi	r24, 0x02	; 2
    5992:	69 2f       	mov	r22, r25
    5994:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
				 HLCD_SendString(" ");
    5998:	88 e9       	ldi	r24, 0x98	; 152
    599a:	90 e0       	ldi	r25, 0x00	; 0
    599c:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
				 i--;
    59a0:	80 91 59 03 	lds	r24, 0x0359
    59a4:	81 50       	subi	r24, 0x01	; 1
    59a6:	80 93 59 03 	sts	0x0359, r24
    59aa:	24 c0       	rjmp	.+72     	; 0x59f4 <CreatPassward+0x2b6>
			 }
			 else
			 {
				 HEEPROM_enWriteByte(temp, key);
    59ac:	80 91 64 03 	lds	r24, 0x0364
    59b0:	88 2f       	mov	r24, r24
    59b2:	90 e0       	ldi	r25, 0x00	; 0
    59b4:	20 91 ec 02 	lds	r18, 0x02EC
    59b8:	62 2f       	mov	r22, r18
    59ba:	0e 94 0e 27 	call	0x4e1c	; 0x4e1c <HEEPROM_enWriteByte>
				 HLCD_sendIntNum(key);
    59be:	80 91 ec 02 	lds	r24, 0x02EC
    59c2:	88 2f       	mov	r24, r24
    59c4:	90 e0       	ldi	r25, 0x00	; 0
    59c6:	a0 e0       	ldi	r26, 0x00	; 0
    59c8:	b0 e0       	ldi	r27, 0x00	; 0
    59ca:	bc 01       	movw	r22, r24
    59cc:	cd 01       	movw	r24, r26
    59ce:	0e 94 c0 23 	call	0x4780	; 0x4780 <HLCD_sendIntNum>
				 HLCD_gotoXY(2, 11+i); // 12 13 14 15
    59d2:	80 91 59 03 	lds	r24, 0x0359
    59d6:	98 2f       	mov	r25, r24
    59d8:	95 5f       	subi	r25, 0xF5	; 245
    59da:	82 e0       	ldi	r24, 0x02	; 2
    59dc:	69 2f       	mov	r22, r25
    59de:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
				 HLCD_SendString("*");
    59e2:	8a e9       	ldi	r24, 0x9A	; 154
    59e4:	90 e0       	ldi	r25, 0x00	; 0
    59e6:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
				 i++;
    59ea:	80 91 59 03 	lds	r24, 0x0359
    59ee:	8f 5f       	subi	r24, 0xFF	; 255
    59f0:	80 93 59 03 	sts	0x0359, r24

	HLCD_SendString("SET ADMIN PASS..");
	HLCD_gotoXY(2, 1);
	HLCD_SendString("Admin Pass: ");
	 i = 2;
	while (i <= 5)
    59f4:	80 91 59 03 	lds	r24, 0x0359
    59f8:	86 30       	cpi	r24, 0x06	; 6
    59fa:	08 f4       	brcc	.+2      	; 0x59fe <CreatPassward+0x2c0>
    59fc:	b1 cf       	rjmp	.-158    	; 0x5960 <CreatPassward+0x222>
				 HLCD_SendString("*");
				 i++;
			 }
		}
	}
	HLCD_ClearDisplay();
    59fe:	0e 94 b5 23 	call	0x476a	; 0x476a <HLCD_ClearDisplay>
	HLCD_gotoXY(1, 6);
    5a02:	81 e0       	ldi	r24, 0x01	; 1
    5a04:	66 e0       	ldi	r22, 0x06	; 6
    5a06:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
	HLCD_SendString("Done");
    5a0a:	8c e9       	ldi	r24, 0x9C	; 156
    5a0c:	90 e0       	ldi	r25, 0x00	; 0
    5a0e:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
	HLCD_gotoXY(2, 3);
    5a12:	82 e0       	ldi	r24, 0x02	; 2
    5a14:	63 e0       	ldi	r22, 0x03	; 3
    5a16:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
	HLCD_SendString("Pass Saved");
    5a1a:	81 ea       	ldi	r24, 0xA1	; 161
    5a1c:	90 e0       	ldi	r25, 0x00	; 0
    5a1e:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
    5a22:	80 e0       	ldi	r24, 0x00	; 0
    5a24:	90 e0       	ldi	r25, 0x00	; 0
    5a26:	aa ef       	ldi	r26, 0xFA	; 250
    5a28:	b3 e4       	ldi	r27, 0x43	; 67
    5a2a:	89 8f       	std	Y+25, r24	; 0x19
    5a2c:	9a 8f       	std	Y+26, r25	; 0x1a
    5a2e:	ab 8f       	std	Y+27, r26	; 0x1b
    5a30:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a32:	69 8d       	ldd	r22, Y+25	; 0x19
    5a34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5a36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5a38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5a3a:	20 e0       	ldi	r18, 0x00	; 0
    5a3c:	30 e0       	ldi	r19, 0x00	; 0
    5a3e:	4a e7       	ldi	r20, 0x7A	; 122
    5a40:	55 e4       	ldi	r21, 0x45	; 69
    5a42:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    5a46:	dc 01       	movw	r26, r24
    5a48:	cb 01       	movw	r24, r22
    5a4a:	8d 8b       	std	Y+21, r24	; 0x15
    5a4c:	9e 8b       	std	Y+22, r25	; 0x16
    5a4e:	af 8b       	std	Y+23, r26	; 0x17
    5a50:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5a52:	6d 89       	ldd	r22, Y+21	; 0x15
    5a54:	7e 89       	ldd	r23, Y+22	; 0x16
    5a56:	8f 89       	ldd	r24, Y+23	; 0x17
    5a58:	98 8d       	ldd	r25, Y+24	; 0x18
    5a5a:	20 e0       	ldi	r18, 0x00	; 0
    5a5c:	30 e0       	ldi	r19, 0x00	; 0
    5a5e:	40 e8       	ldi	r20, 0x80	; 128
    5a60:	5f e3       	ldi	r21, 0x3F	; 63
    5a62:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    5a66:	88 23       	and	r24, r24
    5a68:	2c f4       	brge	.+10     	; 0x5a74 <CreatPassward+0x336>
		__ticks = 1;
    5a6a:	81 e0       	ldi	r24, 0x01	; 1
    5a6c:	90 e0       	ldi	r25, 0x00	; 0
    5a6e:	9c 8b       	std	Y+20, r25	; 0x14
    5a70:	8b 8b       	std	Y+19, r24	; 0x13
    5a72:	3f c0       	rjmp	.+126    	; 0x5af2 <CreatPassward+0x3b4>
	else if (__tmp > 65535)
    5a74:	6d 89       	ldd	r22, Y+21	; 0x15
    5a76:	7e 89       	ldd	r23, Y+22	; 0x16
    5a78:	8f 89       	ldd	r24, Y+23	; 0x17
    5a7a:	98 8d       	ldd	r25, Y+24	; 0x18
    5a7c:	20 e0       	ldi	r18, 0x00	; 0
    5a7e:	3f ef       	ldi	r19, 0xFF	; 255
    5a80:	4f e7       	ldi	r20, 0x7F	; 127
    5a82:	57 e4       	ldi	r21, 0x47	; 71
    5a84:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    5a88:	18 16       	cp	r1, r24
    5a8a:	4c f5       	brge	.+82     	; 0x5ade <CreatPassward+0x3a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a8c:	69 8d       	ldd	r22, Y+25	; 0x19
    5a8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5a90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5a92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5a94:	20 e0       	ldi	r18, 0x00	; 0
    5a96:	30 e0       	ldi	r19, 0x00	; 0
    5a98:	40 e2       	ldi	r20, 0x20	; 32
    5a9a:	51 e4       	ldi	r21, 0x41	; 65
    5a9c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    5aa0:	dc 01       	movw	r26, r24
    5aa2:	cb 01       	movw	r24, r22
    5aa4:	bc 01       	movw	r22, r24
    5aa6:	cd 01       	movw	r24, r26
    5aa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5aac:	dc 01       	movw	r26, r24
    5aae:	cb 01       	movw	r24, r22
    5ab0:	9c 8b       	std	Y+20, r25	; 0x14
    5ab2:	8b 8b       	std	Y+19, r24	; 0x13
    5ab4:	0f c0       	rjmp	.+30     	; 0x5ad4 <CreatPassward+0x396>
    5ab6:	80 e9       	ldi	r24, 0x90	; 144
    5ab8:	91 e0       	ldi	r25, 0x01	; 1
    5aba:	9a 8b       	std	Y+18, r25	; 0x12
    5abc:	89 8b       	std	Y+17, r24	; 0x11
    5abe:	89 89       	ldd	r24, Y+17	; 0x11
    5ac0:	9a 89       	ldd	r25, Y+18	; 0x12
    5ac2:	01 97       	sbiw	r24, 0x01	; 1
    5ac4:	f1 f7       	brne	.-4      	; 0x5ac2 <CreatPassward+0x384>
    5ac6:	9a 8b       	std	Y+18, r25	; 0x12
    5ac8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5aca:	8b 89       	ldd	r24, Y+19	; 0x13
    5acc:	9c 89       	ldd	r25, Y+20	; 0x14
    5ace:	01 97       	sbiw	r24, 0x01	; 1
    5ad0:	9c 8b       	std	Y+20, r25	; 0x14
    5ad2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ad4:	8b 89       	ldd	r24, Y+19	; 0x13
    5ad6:	9c 89       	ldd	r25, Y+20	; 0x14
    5ad8:	00 97       	sbiw	r24, 0x00	; 0
    5ada:	69 f7       	brne	.-38     	; 0x5ab6 <CreatPassward+0x378>
    5adc:	14 c0       	rjmp	.+40     	; 0x5b06 <CreatPassward+0x3c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ade:	6d 89       	ldd	r22, Y+21	; 0x15
    5ae0:	7e 89       	ldd	r23, Y+22	; 0x16
    5ae2:	8f 89       	ldd	r24, Y+23	; 0x17
    5ae4:	98 8d       	ldd	r25, Y+24	; 0x18
    5ae6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5aea:	dc 01       	movw	r26, r24
    5aec:	cb 01       	movw	r24, r22
    5aee:	9c 8b       	std	Y+20, r25	; 0x14
    5af0:	8b 8b       	std	Y+19, r24	; 0x13
    5af2:	8b 89       	ldd	r24, Y+19	; 0x13
    5af4:	9c 89       	ldd	r25, Y+20	; 0x14
    5af6:	98 8b       	std	Y+16, r25	; 0x10
    5af8:	8f 87       	std	Y+15, r24	; 0x0f
    5afa:	8f 85       	ldd	r24, Y+15	; 0x0f
    5afc:	98 89       	ldd	r25, Y+16	; 0x10
    5afe:	01 97       	sbiw	r24, 0x01	; 1
    5b00:	f1 f7       	brne	.-4      	; 0x5afe <CreatPassward+0x3c0>
    5b02:	98 8b       	std	Y+16, r25	; 0x10
    5b04:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	HLCD_ClearDisplay();
    5b06:	0e 94 b5 23 	call	0x476a	; 0x476a <HLCD_ClearDisplay>

/******************* SETTING GUEST PASSWORD ********************/

	HLCD_SendString("SET GUEST PASS..");
    5b0a:	8c ea       	ldi	r24, 0xAC	; 172
    5b0c:	90 e0       	ldi	r25, 0x00	; 0
    5b0e:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
	HLCD_gotoXY(2, 1);
    5b12:	82 e0       	ldi	r24, 0x02	; 2
    5b14:	61 e0       	ldi	r22, 0x01	; 1
    5b16:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
	HLCD_SendString("Guest Pass: ");
    5b1a:	8d eb       	ldi	r24, 0xBD	; 189
    5b1c:	90 e0       	ldi	r25, 0x00	; 0
    5b1e:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
	i = 2;
    5b22:	82 e0       	ldi	r24, 0x02	; 2
    5b24:	80 93 59 03 	sts	0x0359, r24
    5b28:	4b c0       	rjmp	.+150    	; 0x5bc0 <CreatPassward+0x482>
	while (i <= 5)
	{

		temp = i * 2;
    5b2a:	80 91 59 03 	lds	r24, 0x0359
    5b2e:	88 2f       	mov	r24, r24
    5b30:	90 e0       	ldi	r25, 0x00	; 0
    5b32:	88 0f       	add	r24, r24
    5b34:	99 1f       	adc	r25, r25
    5b36:	80 93 64 03 	sts	0x0364, r24
		HKEYPAD_enGetPressedKey(&key);
    5b3a:	8c ee       	ldi	r24, 0xEC	; 236
    5b3c:	92 e0       	ldi	r25, 0x02	; 2
    5b3e:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <HKEYPAD_enGetPressedKey>
		if (key != HKEYPAD_NO_PRESSED_KEY)
    5b42:	80 91 ec 02 	lds	r24, 0x02EC
    5b46:	8f 3f       	cpi	r24, 0xFF	; 255
    5b48:	d9 f1       	breq	.+118    	; 0x5bc0 <CreatPassward+0x482>
		{
			 if (key == 'c')
    5b4a:	80 91 ec 02 	lds	r24, 0x02EC
    5b4e:	83 36       	cpi	r24, 0x63	; 99
    5b50:	91 f4       	brne	.+36     	; 0x5b76 <CreatPassward+0x438>
			 {
				 HLCD_gotoXY(2, 10+i); // 13 14 15 16
    5b52:	80 91 59 03 	lds	r24, 0x0359
    5b56:	98 2f       	mov	r25, r24
    5b58:	96 5f       	subi	r25, 0xF6	; 246
    5b5a:	82 e0       	ldi	r24, 0x02	; 2
    5b5c:	69 2f       	mov	r22, r25
    5b5e:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
				 HLCD_SendString(" ");
    5b62:	88 e9       	ldi	r24, 0x98	; 152
    5b64:	90 e0       	ldi	r25, 0x00	; 0
    5b66:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
				 i--;
    5b6a:	80 91 59 03 	lds	r24, 0x0359
    5b6e:	81 50       	subi	r24, 0x01	; 1
    5b70:	80 93 59 03 	sts	0x0359, r24
    5b74:	25 c0       	rjmp	.+74     	; 0x5bc0 <CreatPassward+0x482>
			 }
			 else
			 {
				HEEPROM_enWriteByte(temp + 8, key);
    5b76:	80 91 64 03 	lds	r24, 0x0364
    5b7a:	88 2f       	mov	r24, r24
    5b7c:	90 e0       	ldi	r25, 0x00	; 0
    5b7e:	08 96       	adiw	r24, 0x08	; 8
    5b80:	20 91 ec 02 	lds	r18, 0x02EC
    5b84:	62 2f       	mov	r22, r18
    5b86:	0e 94 0e 27 	call	0x4e1c	; 0x4e1c <HEEPROM_enWriteByte>

				HLCD_sendIntNum(key);
    5b8a:	80 91 ec 02 	lds	r24, 0x02EC
    5b8e:	88 2f       	mov	r24, r24
    5b90:	90 e0       	ldi	r25, 0x00	; 0
    5b92:	a0 e0       	ldi	r26, 0x00	; 0
    5b94:	b0 e0       	ldi	r27, 0x00	; 0
    5b96:	bc 01       	movw	r22, r24
    5b98:	cd 01       	movw	r24, r26
    5b9a:	0e 94 c0 23 	call	0x4780	; 0x4780 <HLCD_sendIntNum>
				HLCD_gotoXY(2, 11+i); // 12 13 14 15
    5b9e:	80 91 59 03 	lds	r24, 0x0359
    5ba2:	98 2f       	mov	r25, r24
    5ba4:	95 5f       	subi	r25, 0xF5	; 245
    5ba6:	82 e0       	ldi	r24, 0x02	; 2
    5ba8:	69 2f       	mov	r22, r25
    5baa:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
				HLCD_SendString("*");
    5bae:	8a e9       	ldi	r24, 0x9A	; 154
    5bb0:	90 e0       	ldi	r25, 0x00	; 0
    5bb2:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
				i++;
    5bb6:	80 91 59 03 	lds	r24, 0x0359
    5bba:	8f 5f       	subi	r24, 0xFF	; 255
    5bbc:	80 93 59 03 	sts	0x0359, r24

	HLCD_SendString("SET GUEST PASS..");
	HLCD_gotoXY(2, 1);
	HLCD_SendString("Guest Pass: ");
	i = 2;
	while (i <= 5)
    5bc0:	80 91 59 03 	lds	r24, 0x0359
    5bc4:	86 30       	cpi	r24, 0x06	; 6
    5bc6:	08 f4       	brcc	.+2      	; 0x5bca <CreatPassward+0x48c>
    5bc8:	b0 cf       	rjmp	.-160    	; 0x5b2a <CreatPassward+0x3ec>
				HLCD_SendString("*");
				i++;
			 }
		}
	}
	HLCD_ClearDisplay();
    5bca:	0e 94 b5 23 	call	0x476a	; 0x476a <HLCD_ClearDisplay>
	HLCD_gotoXY(1, 6);
    5bce:	81 e0       	ldi	r24, 0x01	; 1
    5bd0:	66 e0       	ldi	r22, 0x06	; 6
    5bd2:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
	HLCD_SendString("Done");
    5bd6:	8c e9       	ldi	r24, 0x9C	; 156
    5bd8:	90 e0       	ldi	r25, 0x00	; 0
    5bda:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
	HLCD_gotoXY(2, 3);
    5bde:	82 e0       	ldi	r24, 0x02	; 2
    5be0:	63 e0       	ldi	r22, 0x03	; 3
    5be2:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
	HLCD_SendString("Pass Saved");
    5be6:	81 ea       	ldi	r24, 0xA1	; 161
    5be8:	90 e0       	ldi	r25, 0x00	; 0
    5bea:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
    5bee:	80 e0       	ldi	r24, 0x00	; 0
    5bf0:	90 e0       	ldi	r25, 0x00	; 0
    5bf2:	aa ef       	ldi	r26, 0xFA	; 250
    5bf4:	b3 e4       	ldi	r27, 0x43	; 67
    5bf6:	8b 87       	std	Y+11, r24	; 0x0b
    5bf8:	9c 87       	std	Y+12, r25	; 0x0c
    5bfa:	ad 87       	std	Y+13, r26	; 0x0d
    5bfc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5bfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c00:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c02:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c04:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c06:	20 e0       	ldi	r18, 0x00	; 0
    5c08:	30 e0       	ldi	r19, 0x00	; 0
    5c0a:	4a e7       	ldi	r20, 0x7A	; 122
    5c0c:	55 e4       	ldi	r21, 0x45	; 69
    5c0e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    5c12:	dc 01       	movw	r26, r24
    5c14:	cb 01       	movw	r24, r22
    5c16:	8f 83       	std	Y+7, r24	; 0x07
    5c18:	98 87       	std	Y+8, r25	; 0x08
    5c1a:	a9 87       	std	Y+9, r26	; 0x09
    5c1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5c1e:	6f 81       	ldd	r22, Y+7	; 0x07
    5c20:	78 85       	ldd	r23, Y+8	; 0x08
    5c22:	89 85       	ldd	r24, Y+9	; 0x09
    5c24:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c26:	20 e0       	ldi	r18, 0x00	; 0
    5c28:	30 e0       	ldi	r19, 0x00	; 0
    5c2a:	40 e8       	ldi	r20, 0x80	; 128
    5c2c:	5f e3       	ldi	r21, 0x3F	; 63
    5c2e:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    5c32:	88 23       	and	r24, r24
    5c34:	2c f4       	brge	.+10     	; 0x5c40 <CreatPassward+0x502>
		__ticks = 1;
    5c36:	81 e0       	ldi	r24, 0x01	; 1
    5c38:	90 e0       	ldi	r25, 0x00	; 0
    5c3a:	9e 83       	std	Y+6, r25	; 0x06
    5c3c:	8d 83       	std	Y+5, r24	; 0x05
    5c3e:	3f c0       	rjmp	.+126    	; 0x5cbe <CreatPassward+0x580>
	else if (__tmp > 65535)
    5c40:	6f 81       	ldd	r22, Y+7	; 0x07
    5c42:	78 85       	ldd	r23, Y+8	; 0x08
    5c44:	89 85       	ldd	r24, Y+9	; 0x09
    5c46:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c48:	20 e0       	ldi	r18, 0x00	; 0
    5c4a:	3f ef       	ldi	r19, 0xFF	; 255
    5c4c:	4f e7       	ldi	r20, 0x7F	; 127
    5c4e:	57 e4       	ldi	r21, 0x47	; 71
    5c50:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    5c54:	18 16       	cp	r1, r24
    5c56:	4c f5       	brge	.+82     	; 0x5caa <CreatPassward+0x56c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c58:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c60:	20 e0       	ldi	r18, 0x00	; 0
    5c62:	30 e0       	ldi	r19, 0x00	; 0
    5c64:	40 e2       	ldi	r20, 0x20	; 32
    5c66:	51 e4       	ldi	r21, 0x41	; 65
    5c68:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    5c6c:	dc 01       	movw	r26, r24
    5c6e:	cb 01       	movw	r24, r22
    5c70:	bc 01       	movw	r22, r24
    5c72:	cd 01       	movw	r24, r26
    5c74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c78:	dc 01       	movw	r26, r24
    5c7a:	cb 01       	movw	r24, r22
    5c7c:	9e 83       	std	Y+6, r25	; 0x06
    5c7e:	8d 83       	std	Y+5, r24	; 0x05
    5c80:	0f c0       	rjmp	.+30     	; 0x5ca0 <CreatPassward+0x562>
    5c82:	80 e9       	ldi	r24, 0x90	; 144
    5c84:	91 e0       	ldi	r25, 0x01	; 1
    5c86:	9c 83       	std	Y+4, r25	; 0x04
    5c88:	8b 83       	std	Y+3, r24	; 0x03
    5c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    5c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    5c8e:	01 97       	sbiw	r24, 0x01	; 1
    5c90:	f1 f7       	brne	.-4      	; 0x5c8e <CreatPassward+0x550>
    5c92:	9c 83       	std	Y+4, r25	; 0x04
    5c94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c96:	8d 81       	ldd	r24, Y+5	; 0x05
    5c98:	9e 81       	ldd	r25, Y+6	; 0x06
    5c9a:	01 97       	sbiw	r24, 0x01	; 1
    5c9c:	9e 83       	std	Y+6, r25	; 0x06
    5c9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    5ca2:	9e 81       	ldd	r25, Y+6	; 0x06
    5ca4:	00 97       	sbiw	r24, 0x00	; 0
    5ca6:	69 f7       	brne	.-38     	; 0x5c82 <CreatPassward+0x544>
    5ca8:	14 c0       	rjmp	.+40     	; 0x5cd2 <CreatPassward+0x594>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5caa:	6f 81       	ldd	r22, Y+7	; 0x07
    5cac:	78 85       	ldd	r23, Y+8	; 0x08
    5cae:	89 85       	ldd	r24, Y+9	; 0x09
    5cb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    5cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cb6:	dc 01       	movw	r26, r24
    5cb8:	cb 01       	movw	r24, r22
    5cba:	9e 83       	std	Y+6, r25	; 0x06
    5cbc:	8d 83       	std	Y+5, r24	; 0x05
    5cbe:	8d 81       	ldd	r24, Y+5	; 0x05
    5cc0:	9e 81       	ldd	r25, Y+6	; 0x06
    5cc2:	9a 83       	std	Y+2, r25	; 0x02
    5cc4:	89 83       	std	Y+1, r24	; 0x01
    5cc6:	89 81       	ldd	r24, Y+1	; 0x01
    5cc8:	9a 81       	ldd	r25, Y+2	; 0x02
    5cca:	01 97       	sbiw	r24, 0x01	; 1
    5ccc:	f1 f7       	brne	.-4      	; 0x5cca <CreatPassward+0x58c>
    5cce:	9a 83       	std	Y+2, r25	; 0x02
    5cd0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	HLCD_ClearDisplay();
    5cd2:	0e 94 b5 23 	call	0x476a	; 0x476a <HLCD_ClearDisplay>


}
    5cd6:	e8 96       	adiw	r28, 0x38	; 56
    5cd8:	0f b6       	in	r0, 0x3f	; 63
    5cda:	f8 94       	cli
    5cdc:	de bf       	out	0x3e, r29	; 62
    5cde:	0f be       	out	0x3f, r0	; 63
    5ce0:	cd bf       	out	0x3d, r28	; 61
    5ce2:	cf 91       	pop	r28
    5ce4:	df 91       	pop	r29
    5ce6:	08 95       	ret

00005ce8 <SessionTime_INT>:

/*
 * Function to raise timeout_flag
 */
void SessionTime_INT(void)
{
    5ce8:	df 93       	push	r29
    5cea:	cf 93       	push	r28
    5cec:	cd b7       	in	r28, 0x3d	; 61
    5cee:	de b7       	in	r29, 0x3e	; 62
	timeout_flag = 1;
    5cf0:	81 e0       	ldi	r24, 0x01	; 1
    5cf2:	80 93 50 03 	sts	0x0350, r24
}
    5cf6:	cf 91       	pop	r28
    5cf8:	df 91       	pop	r29
    5cfa:	08 95       	ret

00005cfc <SessionTime_TASK>:

/*
 * Function to take the Action of timeout_flag
 */
void SessionTime_TASK(void)
{
    5cfc:	df 93       	push	r29
    5cfe:	cf 93       	push	r28
    5d00:	cd b7       	in	r28, 0x3d	; 61
    5d02:	de b7       	in	r29, 0x3e	; 62
    5d04:	2e 97       	sbiw	r28, 0x0e	; 14
    5d06:	0f b6       	in	r0, 0x3f	; 63
    5d08:	f8 94       	cli
    5d0a:	de bf       	out	0x3e, r29	; 62
    5d0c:	0f be       	out	0x3f, r0	; 63
    5d0e:	cd bf       	out	0x3d, r28	; 61
	HLCD_ClearDisplay();
    5d10:	0e 94 b5 23 	call	0x476a	; 0x476a <HLCD_ClearDisplay>
	HLCD_gotoXY(1, 1);
    5d14:	81 e0       	ldi	r24, 0x01	; 1
    5d16:	61 e0       	ldi	r22, 0x01	; 1
    5d18:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
	HLCD_SendString("Session Timeout");
    5d1c:	8a ec       	ldi	r24, 0xCA	; 202
    5d1e:	90 e0       	ldi	r25, 0x00	; 0
    5d20:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
    5d24:	80 e0       	ldi	r24, 0x00	; 0
    5d26:	90 e0       	ldi	r25, 0x00	; 0
    5d28:	aa e7       	ldi	r26, 0x7A	; 122
    5d2a:	b4 e4       	ldi	r27, 0x44	; 68
    5d2c:	8b 87       	std	Y+11, r24	; 0x0b
    5d2e:	9c 87       	std	Y+12, r25	; 0x0c
    5d30:	ad 87       	std	Y+13, r26	; 0x0d
    5d32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d34:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d36:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d38:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d3c:	20 e0       	ldi	r18, 0x00	; 0
    5d3e:	30 e0       	ldi	r19, 0x00	; 0
    5d40:	4a e7       	ldi	r20, 0x7A	; 122
    5d42:	55 e4       	ldi	r21, 0x45	; 69
    5d44:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    5d48:	dc 01       	movw	r26, r24
    5d4a:	cb 01       	movw	r24, r22
    5d4c:	8f 83       	std	Y+7, r24	; 0x07
    5d4e:	98 87       	std	Y+8, r25	; 0x08
    5d50:	a9 87       	std	Y+9, r26	; 0x09
    5d52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5d54:	6f 81       	ldd	r22, Y+7	; 0x07
    5d56:	78 85       	ldd	r23, Y+8	; 0x08
    5d58:	89 85       	ldd	r24, Y+9	; 0x09
    5d5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d5c:	20 e0       	ldi	r18, 0x00	; 0
    5d5e:	30 e0       	ldi	r19, 0x00	; 0
    5d60:	40 e8       	ldi	r20, 0x80	; 128
    5d62:	5f e3       	ldi	r21, 0x3F	; 63
    5d64:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    5d68:	88 23       	and	r24, r24
    5d6a:	2c f4       	brge	.+10     	; 0x5d76 <SessionTime_TASK+0x7a>
		__ticks = 1;
    5d6c:	81 e0       	ldi	r24, 0x01	; 1
    5d6e:	90 e0       	ldi	r25, 0x00	; 0
    5d70:	9e 83       	std	Y+6, r25	; 0x06
    5d72:	8d 83       	std	Y+5, r24	; 0x05
    5d74:	3f c0       	rjmp	.+126    	; 0x5df4 <SessionTime_TASK+0xf8>
	else if (__tmp > 65535)
    5d76:	6f 81       	ldd	r22, Y+7	; 0x07
    5d78:	78 85       	ldd	r23, Y+8	; 0x08
    5d7a:	89 85       	ldd	r24, Y+9	; 0x09
    5d7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d7e:	20 e0       	ldi	r18, 0x00	; 0
    5d80:	3f ef       	ldi	r19, 0xFF	; 255
    5d82:	4f e7       	ldi	r20, 0x7F	; 127
    5d84:	57 e4       	ldi	r21, 0x47	; 71
    5d86:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    5d8a:	18 16       	cp	r1, r24
    5d8c:	4c f5       	brge	.+82     	; 0x5de0 <SessionTime_TASK+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d90:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d92:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d94:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d96:	20 e0       	ldi	r18, 0x00	; 0
    5d98:	30 e0       	ldi	r19, 0x00	; 0
    5d9a:	40 e2       	ldi	r20, 0x20	; 32
    5d9c:	51 e4       	ldi	r21, 0x41	; 65
    5d9e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    5da2:	dc 01       	movw	r26, r24
    5da4:	cb 01       	movw	r24, r22
    5da6:	bc 01       	movw	r22, r24
    5da8:	cd 01       	movw	r24, r26
    5daa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5dae:	dc 01       	movw	r26, r24
    5db0:	cb 01       	movw	r24, r22
    5db2:	9e 83       	std	Y+6, r25	; 0x06
    5db4:	8d 83       	std	Y+5, r24	; 0x05
    5db6:	0f c0       	rjmp	.+30     	; 0x5dd6 <SessionTime_TASK+0xda>
    5db8:	80 e9       	ldi	r24, 0x90	; 144
    5dba:	91 e0       	ldi	r25, 0x01	; 1
    5dbc:	9c 83       	std	Y+4, r25	; 0x04
    5dbe:	8b 83       	std	Y+3, r24	; 0x03
    5dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    5dc2:	9c 81       	ldd	r25, Y+4	; 0x04
    5dc4:	01 97       	sbiw	r24, 0x01	; 1
    5dc6:	f1 f7       	brne	.-4      	; 0x5dc4 <SessionTime_TASK+0xc8>
    5dc8:	9c 83       	std	Y+4, r25	; 0x04
    5dca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5dcc:	8d 81       	ldd	r24, Y+5	; 0x05
    5dce:	9e 81       	ldd	r25, Y+6	; 0x06
    5dd0:	01 97       	sbiw	r24, 0x01	; 1
    5dd2:	9e 83       	std	Y+6, r25	; 0x06
    5dd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5dd6:	8d 81       	ldd	r24, Y+5	; 0x05
    5dd8:	9e 81       	ldd	r25, Y+6	; 0x06
    5dda:	00 97       	sbiw	r24, 0x00	; 0
    5ddc:	69 f7       	brne	.-38     	; 0x5db8 <SessionTime_TASK+0xbc>
    5dde:	14 c0       	rjmp	.+40     	; 0x5e08 <SessionTime_TASK+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5de0:	6f 81       	ldd	r22, Y+7	; 0x07
    5de2:	78 85       	ldd	r23, Y+8	; 0x08
    5de4:	89 85       	ldd	r24, Y+9	; 0x09
    5de6:	9a 85       	ldd	r25, Y+10	; 0x0a
    5de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5dec:	dc 01       	movw	r26, r24
    5dee:	cb 01       	movw	r24, r22
    5df0:	9e 83       	std	Y+6, r25	; 0x06
    5df2:	8d 83       	std	Y+5, r24	; 0x05
    5df4:	8d 81       	ldd	r24, Y+5	; 0x05
    5df6:	9e 81       	ldd	r25, Y+6	; 0x06
    5df8:	9a 83       	std	Y+2, r25	; 0x02
    5dfa:	89 83       	std	Y+1, r24	; 0x01
    5dfc:	89 81       	ldd	r24, Y+1	; 0x01
    5dfe:	9a 81       	ldd	r25, Y+2	; 0x02
    5e00:	01 97       	sbiw	r24, 0x01	; 1
    5e02:	f1 f7       	brne	.-4      	; 0x5e00 <SessionTime_TASK+0x104>
    5e04:	9a 83       	std	Y+2, r25	; 0x02
    5e06:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	HLCD_ClearDisplay();
    5e08:	0e 94 b5 23 	call	0x476a	; 0x476a <HLCD_ClearDisplay>
}
    5e0c:	2e 96       	adiw	r28, 0x0e	; 14
    5e0e:	0f b6       	in	r0, 0x3f	; 63
    5e10:	f8 94       	cli
    5e12:	de bf       	out	0x3e, r29	; 62
    5e14:	0f be       	out	0x3f, r0	; 63
    5e16:	cd bf       	out	0x3d, r28	; 61
    5e18:	cf 91       	pop	r28
    5e1a:	df 91       	pop	r29
    5e1c:	08 95       	ret

00005e1e <SelectMode>:
 * Function to Select the mode (Admin - Guest)
 * take actions based on Flags (AdminFlag, GuestFlag ,DefaultFlag )
 * take actions (System Blocked ) based on no. of (ErrFlag)
 */
u8 SelectMode(void)
{
    5e1e:	df 93       	push	r29
    5e20:	cf 93       	push	r28
    5e22:	cd b7       	in	r28, 0x3d	; 61
    5e24:	de b7       	in	r29, 0x3e	; 62
    5e26:	63 97       	sbiw	r28, 0x13	; 19
    5e28:	0f b6       	in	r0, 0x3f	; 63
    5e2a:	f8 94       	cli
    5e2c:	de bf       	out	0x3e, r29	; 62
    5e2e:	0f be       	out	0x3f, r0	; 63
    5e30:	cd bf       	out	0x3d, r28	; 61
	u8 CheckRet;
	HLCD_SendString("Select Mode :");
    5e32:	8a ed       	ldi	r24, 0xDA	; 218
    5e34:	90 e0       	ldi	r25, 0x00	; 0
    5e36:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
	HLCD_gotoXY(2, 1);
    5e3a:	82 e0       	ldi	r24, 0x02	; 2
    5e3c:	61 e0       	ldi	r22, 0x01	; 1
    5e3e:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
	HLCD_SendString("0:Admin 1:Guest");
    5e42:	88 ee       	ldi	r24, 0xE8	; 232
    5e44:	90 e0       	ldi	r25, 0x00	; 0
    5e46:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
	key=HKEYPAD_NO_PRESSED_KEY;
    5e4a:	8f ef       	ldi	r24, 0xFF	; 255
    5e4c:	80 93 ec 02 	sts	0x02EC, r24
    5e50:	1d c0       	rjmp	.+58     	; 0x5e8c <SelectMode+0x6e>
	while(key == HKEYPAD_NO_PRESSED_KEY)
	{
		HUltrasonic_enStartReading(TRIGG_PIN, &Distance);
    5e52:	21 e5       	ldi	r18, 0x51	; 81
    5e54:	33 e0       	ldi	r19, 0x03	; 3
    5e56:	85 e2       	ldi	r24, 0x25	; 37
    5e58:	b9 01       	movw	r22, r18
    5e5a:	0e 94 6d 17 	call	0x2eda	; 0x2eda <HUltrasonic_enStartReading>

		if((timeout_flag == 1)||(Distance > 30))
    5e5e:	80 91 50 03 	lds	r24, 0x0350
    5e62:	81 30       	cpi	r24, 0x01	; 1
    5e64:	69 f0       	breq	.+26     	; 0x5e80 <SelectMode+0x62>
    5e66:	80 91 51 03 	lds	r24, 0x0351
    5e6a:	90 91 52 03 	lds	r25, 0x0352
    5e6e:	a0 91 53 03 	lds	r26, 0x0353
    5e72:	b0 91 54 03 	lds	r27, 0x0354
    5e76:	8f 31       	cpi	r24, 0x1F	; 31
    5e78:	91 05       	cpc	r25, r1
    5e7a:	a1 05       	cpc	r26, r1
    5e7c:	b1 05       	cpc	r27, r1
    5e7e:	10 f0       	brcs	.+4      	; 0x5e84 <SelectMode+0x66>
		{
			return 0;
    5e80:	1b 8a       	std	Y+19, r1	; 0x13
    5e82:	f2 c1       	rjmp	.+996    	; 0x6268 <SelectMode+0x44a>
		}
		HKEYPAD_enGetPressedKey(&key);
    5e84:	8c ee       	ldi	r24, 0xEC	; 236
    5e86:	92 e0       	ldi	r25, 0x02	; 2
    5e88:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <HKEYPAD_enGetPressedKey>
	u8 CheckRet;
	HLCD_SendString("Select Mode :");
	HLCD_gotoXY(2, 1);
	HLCD_SendString("0:Admin 1:Guest");
	key=HKEYPAD_NO_PRESSED_KEY;
	while(key == HKEYPAD_NO_PRESSED_KEY)
    5e8c:	80 91 ec 02 	lds	r24, 0x02EC
    5e90:	8f 3f       	cpi	r24, 0xFF	; 255
    5e92:	f9 f2       	breq	.-66     	; 0x5e52 <SelectMode+0x34>
			return 0;
		}
		HKEYPAD_enGetPressedKey(&key);
	}

	HLCD_ClearDisplay();
    5e94:	0e 94 b5 23 	call	0x476a	; 0x476a <HLCD_ClearDisplay>
	if (key != HKEYPAD_NO_PRESSED_KEY)
    5e98:	80 91 ec 02 	lds	r24, 0x02EC
    5e9c:	8f 3f       	cpi	r24, 0xFF	; 255
    5e9e:	09 f4       	brne	.+2      	; 0x5ea2 <SelectMode+0x84>
    5ea0:	fb c0       	rjmp	.+502    	; 0x6098 <SelectMode+0x27a>
	{
		CheckRet = CheckPass(key);
    5ea2:	80 91 ec 02 	lds	r24, 0x02EC
    5ea6:	0e 94 3e 31 	call	0x627c	; 0x627c <CheckPass>
    5eaa:	88 8b       	std	Y+16, r24	; 0x10
		if (CheckRet == 0)
    5eac:	88 89       	ldd	r24, Y+16	; 0x10
    5eae:	88 23       	and	r24, r24
    5eb0:	09 f0       	breq	.+2      	; 0x5eb4 <SelectMode+0x96>
    5eb2:	f2 c0       	rjmp	.+484    	; 0x6098 <SelectMode+0x27a>
		{
			return 0;
    5eb4:	1b 8a       	std	Y+19, r1	; 0x13
    5eb6:	d8 c1       	rjmp	.+944    	; 0x6268 <SelectMode+0x44a>
		}
	}

	while(Errflag < 2)
	{
		if((AdminFlag == 1) || (GuestFlag == 1))
    5eb8:	80 91 55 03 	lds	r24, 0x0355
    5ebc:	81 30       	cpi	r24, 0x01	; 1
    5ebe:	29 f0       	breq	.+10     	; 0x5eca <SelectMode+0xac>
    5ec0:	80 91 56 03 	lds	r24, 0x0356
    5ec4:	81 30       	cpi	r24, 0x01	; 1
    5ec6:	09 f0       	breq	.+2      	; 0x5eca <SelectMode+0xac>
    5ec8:	7c c0       	rjmp	.+248    	; 0x5fc2 <SelectMode+0x1a4>
		{
			//HRELAY_enOn();
			if(AdminFlag == 1)
    5eca:	80 91 55 03 	lds	r24, 0x0355
    5ece:	81 30       	cpi	r24, 0x01	; 1
    5ed0:	09 f0       	breq	.+2      	; 0x5ed4 <SelectMode+0xb6>
    5ed2:	74 c0       	rjmp	.+232    	; 0x5fbc <SelectMode+0x19e>
			{
				HLCD_ClearDisplay();
    5ed4:	0e 94 b5 23 	call	0x476a	; 0x476a <HLCD_ClearDisplay>
				HLCD_SendString("[C]EXIT[0]OPEN");
    5ed8:	88 ef       	ldi	r24, 0xF8	; 248
    5eda:	90 e0       	ldi	r25, 0x00	; 0
    5edc:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
				HLCD_gotoXY(2, 1);
    5ee0:	82 e0       	ldi	r24, 0x02	; 2
    5ee2:	61 e0       	ldi	r22, 0x01	; 1
    5ee4:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
				HLCD_SendString("[1]CLOSE");
    5ee8:	87 e0       	ldi	r24, 0x07	; 7
    5eea:	91 e0       	ldi	r25, 0x01	; 1
    5eec:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
				key=HKEYPAD_NO_PRESSED_KEY;
    5ef0:	8f ef       	ldi	r24, 0xFF	; 255
    5ef2:	80 93 ec 02 	sts	0x02EC, r24
    5ef6:	5b c0       	rjmp	.+182    	; 0x5fae <SelectMode+0x190>
				while(key!='c')
				{
					HUltrasonic_enStartReading(TRIGG_PIN, &Distance);
    5ef8:	21 e5       	ldi	r18, 0x51	; 81
    5efa:	33 e0       	ldi	r19, 0x03	; 3
    5efc:	85 e2       	ldi	r24, 0x25	; 37
    5efe:	b9 01       	movw	r22, r18
    5f00:	0e 94 6d 17 	call	0x2eda	; 0x2eda <HUltrasonic_enStartReading>
					if((timeout_flag == 1)||(Distance > 30))
    5f04:	80 91 50 03 	lds	r24, 0x0350
    5f08:	81 30       	cpi	r24, 0x01	; 1
    5f0a:	69 f0       	breq	.+26     	; 0x5f26 <SelectMode+0x108>
    5f0c:	80 91 51 03 	lds	r24, 0x0351
    5f10:	90 91 52 03 	lds	r25, 0x0352
    5f14:	a0 91 53 03 	lds	r26, 0x0353
    5f18:	b0 91 54 03 	lds	r27, 0x0354
    5f1c:	8f 31       	cpi	r24, 0x1F	; 31
    5f1e:	91 05       	cpc	r25, r1
    5f20:	a1 05       	cpc	r26, r1
    5f22:	b1 05       	cpc	r27, r1
    5f24:	10 f0       	brcs	.+4      	; 0x5f2a <SelectMode+0x10c>
					{
						return 0;
    5f26:	1b 8a       	std	Y+19, r1	; 0x13
    5f28:	9f c1       	rjmp	.+830    	; 0x6268 <SelectMode+0x44a>
					}

					HKEYPAD_enGetPressedKey(&key);
    5f2a:	8c ee       	ldi	r24, 0xEC	; 236
    5f2c:	92 e0       	ldi	r25, 0x02	; 2
    5f2e:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <HKEYPAD_enGetPressedKey>
					if(key!=HKEYPAD_NO_PRESSED_KEY){
    5f32:	80 91 ec 02 	lds	r24, 0x02EC
    5f36:	8f 3f       	cpi	r24, 0xFF	; 255
    5f38:	d1 f1       	breq	.+116    	; 0x5fae <SelectMode+0x190>
					switch(key)
    5f3a:	80 91 ec 02 	lds	r24, 0x02EC
    5f3e:	28 2f       	mov	r18, r24
    5f40:	30 e0       	ldi	r19, 0x00	; 0
    5f42:	3a 8b       	std	Y+18, r19	; 0x12
    5f44:	29 8b       	std	Y+17, r18	; 0x11
    5f46:	89 89       	ldd	r24, Y+17	; 0x11
    5f48:	9a 89       	ldd	r25, Y+18	; 0x12
    5f4a:	00 97       	sbiw	r24, 0x00	; 0
    5f4c:	31 f0       	breq	.+12     	; 0x5f5a <SelectMode+0x13c>
    5f4e:	29 89       	ldd	r18, Y+17	; 0x11
    5f50:	3a 89       	ldd	r19, Y+18	; 0x12
    5f52:	21 30       	cpi	r18, 0x01	; 1
    5f54:	31 05       	cpc	r19, r1
    5f56:	91 f0       	breq	.+36     	; 0x5f7c <SelectMode+0x15e>
    5f58:	22 c0       	rjmp	.+68     	; 0x5f9e <SelectMode+0x180>
					{
					case 0:
						MUART_enSendByteSync('o');
    5f5a:	8f e6       	ldi	r24, 0x6F	; 111
    5f5c:	0e 94 8b 0b 	call	0x1716	; 0x1716 <MUART_enSendByteSync>
						MDIO_voidTogglePinValue(SIGNAL_PIN);
    5f60:	81 e1       	ldi	r24, 0x11	; 17
    5f62:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <MDIO_voidTogglePinValue>
						HRELAY_enOn();
    5f66:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <HRELAY_enOn>
						HLCD_gotoXY(2, 15);
    5f6a:	82 e0       	ldi	r24, 0x02	; 2
    5f6c:	6f e0       	ldi	r22, 0x0F	; 15
    5f6e:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
						HLCD_SendData(key);
    5f72:	80 91 ec 02 	lds	r24, 0x02EC
    5f76:	0e 94 74 23 	call	0x46e8	; 0x46e8 <HLCD_SendData>
    5f7a:	19 c0       	rjmp	.+50     	; 0x5fae <SelectMode+0x190>
					break;
					case 1:
						MUART_enSendByteSync('f');
    5f7c:	86 e6       	ldi	r24, 0x66	; 102
    5f7e:	0e 94 8b 0b 	call	0x1716	; 0x1716 <MUART_enSendByteSync>
						MDIO_voidTogglePinValue(SIGNAL_PIN);
    5f82:	81 e1       	ldi	r24, 0x11	; 17
    5f84:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <MDIO_voidTogglePinValue>
						HRELAY_enOFF();
    5f88:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <HRELAY_enOFF>
						HLCD_gotoXY(2, 15);
    5f8c:	82 e0       	ldi	r24, 0x02	; 2
    5f8e:	6f e0       	ldi	r22, 0x0F	; 15
    5f90:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
						HLCD_SendData(key);
    5f94:	80 91 ec 02 	lds	r24, 0x02EC
    5f98:	0e 94 74 23 	call	0x46e8	; 0x46e8 <HLCD_SendData>
    5f9c:	08 c0       	rjmp	.+16     	; 0x5fae <SelectMode+0x190>
					break;
					default:
						HLCD_gotoXY(2, 15);
    5f9e:	82 e0       	ldi	r24, 0x02	; 2
    5fa0:	6f e0       	ldi	r22, 0x0F	; 15
    5fa2:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
						HLCD_SendString("X");
    5fa6:	80 e1       	ldi	r24, 0x10	; 16
    5fa8:	91 e0       	ldi	r25, 0x01	; 1
    5faa:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
				HLCD_ClearDisplay();
				HLCD_SendString("[C]EXIT[0]OPEN");
				HLCD_gotoXY(2, 1);
				HLCD_SendString("[1]CLOSE");
				key=HKEYPAD_NO_PRESSED_KEY;
				while(key!='c')
    5fae:	80 91 ec 02 	lds	r24, 0x02EC
    5fb2:	83 36       	cpi	r24, 0x63	; 99
    5fb4:	09 f0       	breq	.+2      	; 0x5fb8 <SelectMode+0x19a>
    5fb6:	a0 cf       	rjmp	.-192    	; 0x5ef8 <SelectMode+0xda>
					break;

					}
					}
				}
				HLCD_ClearDisplay();
    5fb8:	0e 94 b5 23 	call	0x476a	; 0x476a <HLCD_ClearDisplay>
				//MDIO_voidSetPinValue(SIGNAL_PIN, HIGH);
			}
			Errflag = 0;
    5fbc:	10 92 58 03 	sts	0x0358, r1
    5fc0:	70 c0       	rjmp	.+224    	; 0x60a2 <SelectMode+0x284>
			break;
		}
		else if(DefaultFlag == 1)
    5fc2:	80 91 57 03 	lds	r24, 0x0357
    5fc6:	81 30       	cpi	r24, 0x01	; 1
    5fc8:	09 f0       	breq	.+2      	; 0x5fcc <SelectMode+0x1ae>
    5fca:	43 c0       	rjmp	.+134    	; 0x6052 <SelectMode+0x234>
		{
			key = HKEYPAD_NO_PRESSED_KEY;
    5fcc:	8f ef       	ldi	r24, 0xFF	; 255
    5fce:	80 93 ec 02 	sts	0x02EC, r24
			HLCD_ClearDisplay();
    5fd2:	0e 94 b5 23 	call	0x476a	; 0x476a <HLCD_ClearDisplay>
			HLCD_SendString("Select Mode :");
    5fd6:	8a ed       	ldi	r24, 0xDA	; 218
    5fd8:	90 e0       	ldi	r25, 0x00	; 0
    5fda:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
			HLCD_gotoXY(2, 1);
    5fde:	82 e0       	ldi	r24, 0x02	; 2
    5fe0:	61 e0       	ldi	r22, 0x01	; 1
    5fe2:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
			HLCD_SendString("0:Admin 1:Guest");
    5fe6:	88 ee       	ldi	r24, 0xE8	; 232
    5fe8:	90 e0       	ldi	r25, 0x00	; 0
    5fea:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
    5fee:	1d c0       	rjmp	.+58     	; 0x602a <SelectMode+0x20c>

			while(key == HKEYPAD_NO_PRESSED_KEY)
			{
				HUltrasonic_enStartReading(TRIGG_PIN, &Distance);
    5ff0:	21 e5       	ldi	r18, 0x51	; 81
    5ff2:	33 e0       	ldi	r19, 0x03	; 3
    5ff4:	85 e2       	ldi	r24, 0x25	; 37
    5ff6:	b9 01       	movw	r22, r18
    5ff8:	0e 94 6d 17 	call	0x2eda	; 0x2eda <HUltrasonic_enStartReading>

				if((timeout_flag == 1)||(Distance > 30))
    5ffc:	80 91 50 03 	lds	r24, 0x0350
    6000:	81 30       	cpi	r24, 0x01	; 1
    6002:	69 f0       	breq	.+26     	; 0x601e <SelectMode+0x200>
    6004:	80 91 51 03 	lds	r24, 0x0351
    6008:	90 91 52 03 	lds	r25, 0x0352
    600c:	a0 91 53 03 	lds	r26, 0x0353
    6010:	b0 91 54 03 	lds	r27, 0x0354
    6014:	8f 31       	cpi	r24, 0x1F	; 31
    6016:	91 05       	cpc	r25, r1
    6018:	a1 05       	cpc	r26, r1
    601a:	b1 05       	cpc	r27, r1
    601c:	10 f0       	brcs	.+4      	; 0x6022 <SelectMode+0x204>
				{
					return 0;
    601e:	1b 8a       	std	Y+19, r1	; 0x13
    6020:	23 c1       	rjmp	.+582    	; 0x6268 <SelectMode+0x44a>
				}
				HKEYPAD_enGetPressedKey(&key);
    6022:	8c ee       	ldi	r24, 0xEC	; 236
    6024:	92 e0       	ldi	r25, 0x02	; 2
    6026:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <HKEYPAD_enGetPressedKey>
			HLCD_ClearDisplay();
			HLCD_SendString("Select Mode :");
			HLCD_gotoXY(2, 1);
			HLCD_SendString("0:Admin 1:Guest");

			while(key == HKEYPAD_NO_PRESSED_KEY)
    602a:	80 91 ec 02 	lds	r24, 0x02EC
    602e:	8f 3f       	cpi	r24, 0xFF	; 255
    6030:	f9 f2       	breq	.-66     	; 0x5ff0 <SelectMode+0x1d2>
					return 0;
				}
				HKEYPAD_enGetPressedKey(&key);
			}

			HLCD_ClearDisplay();
    6032:	0e 94 b5 23 	call	0x476a	; 0x476a <HLCD_ClearDisplay>
			if (key != HKEYPAD_NO_PRESSED_KEY)
    6036:	80 91 ec 02 	lds	r24, 0x02EC
    603a:	8f 3f       	cpi	r24, 0xFF	; 255
    603c:	69 f1       	breq	.+90     	; 0x6098 <SelectMode+0x27a>
			{

				CheckRet = CheckPass(key);
    603e:	80 91 ec 02 	lds	r24, 0x02EC
    6042:	0e 94 3e 31 	call	0x627c	; 0x627c <CheckPass>
    6046:	88 8b       	std	Y+16, r24	; 0x10
				if (CheckRet == 0)
    6048:	88 89       	ldd	r24, Y+16	; 0x10
    604a:	88 23       	and	r24, r24
    604c:	29 f5       	brne	.+74     	; 0x6098 <SelectMode+0x27a>
				{
					return 0;
    604e:	1b 8a       	std	Y+19, r1	; 0x13
    6050:	0b c1       	rjmp	.+534    	; 0x6268 <SelectMode+0x44a>
				}
			}
		}
		else
		{
			HLCD_ClearDisplay();
    6052:	0e 94 b5 23 	call	0x476a	; 0x476a <HLCD_ClearDisplay>
			HLCD_gotoXY(1, 2);
    6056:	81 e0       	ldi	r24, 0x01	; 1
    6058:	62 e0       	ldi	r22, 0x02	; 2
    605a:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
			HLCD_SendString("Wrong Password");
    605e:	82 e1       	ldi	r24, 0x12	; 18
    6060:	91 e0       	ldi	r25, 0x01	; 1
    6062:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
			HLCD_gotoXY(2, 1);
    6066:	82 e0       	ldi	r24, 0x02	; 2
    6068:	61 e0       	ldi	r22, 0x01	; 1
    606a:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
			HLCD_SendString("Please Try Again");
    606e:	81 e2       	ldi	r24, 0x21	; 33
    6070:	91 e0       	ldi	r25, 0x01	; 1
    6072:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
			HLCD_ClearDisplay();
    6076:	0e 94 b5 23 	call	0x476a	; 0x476a <HLCD_ClearDisplay>
			CheckRet = CheckPass(key);
    607a:	80 91 ec 02 	lds	r24, 0x02EC
    607e:	0e 94 3e 31 	call	0x627c	; 0x627c <CheckPass>
    6082:	88 8b       	std	Y+16, r24	; 0x10
			if (CheckRet == 0)
    6084:	88 89       	ldd	r24, Y+16	; 0x10
    6086:	88 23       	and	r24, r24
    6088:	11 f4       	brne	.+4      	; 0x608e <SelectMode+0x270>
			{
				return 0;
    608a:	1b 8a       	std	Y+19, r1	; 0x13
    608c:	ed c0       	rjmp	.+474    	; 0x6268 <SelectMode+0x44a>
			}
			Errflag++;
    608e:	80 91 58 03 	lds	r24, 0x0358
    6092:	8f 5f       	subi	r24, 0xFF	; 255
    6094:	80 93 58 03 	sts	0x0358, r24
		{
			return 0;
		}
	}

	while(Errflag < 2)
    6098:	80 91 58 03 	lds	r24, 0x0358
    609c:	82 30       	cpi	r24, 0x02	; 2
    609e:	08 f4       	brcc	.+2      	; 0x60a2 <SelectMode+0x284>
    60a0:	0b cf       	rjmp	.-490    	; 0x5eb8 <SelectMode+0x9a>
			Errflag++;
		}

	}

	if(Errflag == 2)
    60a2:	80 91 58 03 	lds	r24, 0x0358
    60a6:	82 30       	cpi	r24, 0x02	; 2
    60a8:	09 f0       	breq	.+2      	; 0x60ac <SelectMode+0x28e>
    60aa:	dc c0       	rjmp	.+440    	; 0x6264 <SelectMode+0x446>
	{
		s8 time =12;
    60ac:	8c e0       	ldi	r24, 0x0C	; 12
    60ae:	8f 87       	std	Y+15, r24	; 0x0f
		HLCD_ClearDisplay();
    60b0:	0e 94 b5 23 	call	0x476a	; 0x476a <HLCD_ClearDisplay>
		HLCD_gotoXY(1, 2);
    60b4:	81 e0       	ldi	r24, 0x01	; 1
    60b6:	62 e0       	ldi	r22, 0x02	; 2
    60b8:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
		HLCD_SendString("Wrong Password");
    60bc:	82 e1       	ldi	r24, 0x12	; 18
    60be:	91 e0       	ldi	r25, 0x01	; 1
    60c0:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
		HLCD_ClearDisplay();
    60c4:	0e 94 b5 23 	call	0x476a	; 0x476a <HLCD_ClearDisplay>

		// BLOCK SYSTEM (30 Sec)
		HLCD_SendString("SYSTM IS BLOCKED");
    60c8:	82 e3       	ldi	r24, 0x32	; 50
    60ca:	91 e0       	ldi	r25, 0x01	; 1
    60cc:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
		HLCD_gotoXY(2, 1);
    60d0:	82 e0       	ldi	r24, 0x02	; 2
    60d2:	61 e0       	ldi	r22, 0x01	; 1
    60d4:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
		HLCD_SendString("Unlock in");
    60d8:	83 e4       	ldi	r24, 0x43	; 67
    60da:	91 e0       	ldi	r25, 0x01	; 1
    60dc:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
		HLCD_gotoXY(2, 11);
    60e0:	82 e0       	ldi	r24, 0x02	; 2
    60e2:	6b e0       	ldi	r22, 0x0B	; 11
    60e4:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
		HLCD_sendIntNum(time);
    60e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    60ea:	99 27       	eor	r25, r25
    60ec:	87 fd       	sbrc	r24, 7
    60ee:	90 95       	com	r25
    60f0:	a9 2f       	mov	r26, r25
    60f2:	b9 2f       	mov	r27, r25
    60f4:	bc 01       	movw	r22, r24
    60f6:	cd 01       	movw	r24, r26
    60f8:	0e 94 c0 23 	call	0x4780	; 0x4780 <HLCD_sendIntNum>
		HLCD_gotoXY(2, 14);
    60fc:	82 e0       	ldi	r24, 0x02	; 2
    60fe:	6e e0       	ldi	r22, 0x0E	; 14
    6100:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
		HLCD_SendString("SEC");
    6104:	8d e4       	ldi	r24, 0x4D	; 77
    6106:	91 e0       	ldi	r25, 0x01	; 1
    6108:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
    610c:	9f c0       	rjmp	.+318    	; 0x624c <SelectMode+0x42e>
		while(time > 0)
    610e:	80 e0       	ldi	r24, 0x00	; 0
    6110:	90 e0       	ldi	r25, 0x00	; 0
    6112:	aa ef       	ldi	r26, 0xFA	; 250
    6114:	b3 e4       	ldi	r27, 0x43	; 67
    6116:	8b 87       	std	Y+11, r24	; 0x0b
    6118:	9c 87       	std	Y+12, r25	; 0x0c
    611a:	ad 87       	std	Y+13, r26	; 0x0d
    611c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    611e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6120:	7c 85       	ldd	r23, Y+12	; 0x0c
    6122:	8d 85       	ldd	r24, Y+13	; 0x0d
    6124:	9e 85       	ldd	r25, Y+14	; 0x0e
    6126:	20 e0       	ldi	r18, 0x00	; 0
    6128:	30 e0       	ldi	r19, 0x00	; 0
    612a:	4a e7       	ldi	r20, 0x7A	; 122
    612c:	55 e4       	ldi	r21, 0x45	; 69
    612e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    6132:	dc 01       	movw	r26, r24
    6134:	cb 01       	movw	r24, r22
    6136:	8f 83       	std	Y+7, r24	; 0x07
    6138:	98 87       	std	Y+8, r25	; 0x08
    613a:	a9 87       	std	Y+9, r26	; 0x09
    613c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    613e:	6f 81       	ldd	r22, Y+7	; 0x07
    6140:	78 85       	ldd	r23, Y+8	; 0x08
    6142:	89 85       	ldd	r24, Y+9	; 0x09
    6144:	9a 85       	ldd	r25, Y+10	; 0x0a
    6146:	20 e0       	ldi	r18, 0x00	; 0
    6148:	30 e0       	ldi	r19, 0x00	; 0
    614a:	40 e8       	ldi	r20, 0x80	; 128
    614c:	5f e3       	ldi	r21, 0x3F	; 63
    614e:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    6152:	88 23       	and	r24, r24
    6154:	2c f4       	brge	.+10     	; 0x6160 <SelectMode+0x342>
		__ticks = 1;
    6156:	81 e0       	ldi	r24, 0x01	; 1
    6158:	90 e0       	ldi	r25, 0x00	; 0
    615a:	9e 83       	std	Y+6, r25	; 0x06
    615c:	8d 83       	std	Y+5, r24	; 0x05
    615e:	3f c0       	rjmp	.+126    	; 0x61de <SelectMode+0x3c0>
	else if (__tmp > 65535)
    6160:	6f 81       	ldd	r22, Y+7	; 0x07
    6162:	78 85       	ldd	r23, Y+8	; 0x08
    6164:	89 85       	ldd	r24, Y+9	; 0x09
    6166:	9a 85       	ldd	r25, Y+10	; 0x0a
    6168:	20 e0       	ldi	r18, 0x00	; 0
    616a:	3f ef       	ldi	r19, 0xFF	; 255
    616c:	4f e7       	ldi	r20, 0x7F	; 127
    616e:	57 e4       	ldi	r21, 0x47	; 71
    6170:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    6174:	18 16       	cp	r1, r24
    6176:	4c f5       	brge	.+82     	; 0x61ca <SelectMode+0x3ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6178:	6b 85       	ldd	r22, Y+11	; 0x0b
    617a:	7c 85       	ldd	r23, Y+12	; 0x0c
    617c:	8d 85       	ldd	r24, Y+13	; 0x0d
    617e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6180:	20 e0       	ldi	r18, 0x00	; 0
    6182:	30 e0       	ldi	r19, 0x00	; 0
    6184:	40 e2       	ldi	r20, 0x20	; 32
    6186:	51 e4       	ldi	r21, 0x41	; 65
    6188:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    618c:	dc 01       	movw	r26, r24
    618e:	cb 01       	movw	r24, r22
    6190:	bc 01       	movw	r22, r24
    6192:	cd 01       	movw	r24, r26
    6194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6198:	dc 01       	movw	r26, r24
    619a:	cb 01       	movw	r24, r22
    619c:	9e 83       	std	Y+6, r25	; 0x06
    619e:	8d 83       	std	Y+5, r24	; 0x05
    61a0:	0f c0       	rjmp	.+30     	; 0x61c0 <SelectMode+0x3a2>
    61a2:	80 e9       	ldi	r24, 0x90	; 144
    61a4:	91 e0       	ldi	r25, 0x01	; 1
    61a6:	9c 83       	std	Y+4, r25	; 0x04
    61a8:	8b 83       	std	Y+3, r24	; 0x03
    61aa:	8b 81       	ldd	r24, Y+3	; 0x03
    61ac:	9c 81       	ldd	r25, Y+4	; 0x04
    61ae:	01 97       	sbiw	r24, 0x01	; 1
    61b0:	f1 f7       	brne	.-4      	; 0x61ae <SelectMode+0x390>
    61b2:	9c 83       	std	Y+4, r25	; 0x04
    61b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    61b6:	8d 81       	ldd	r24, Y+5	; 0x05
    61b8:	9e 81       	ldd	r25, Y+6	; 0x06
    61ba:	01 97       	sbiw	r24, 0x01	; 1
    61bc:	9e 83       	std	Y+6, r25	; 0x06
    61be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    61c0:	8d 81       	ldd	r24, Y+5	; 0x05
    61c2:	9e 81       	ldd	r25, Y+6	; 0x06
    61c4:	00 97       	sbiw	r24, 0x00	; 0
    61c6:	69 f7       	brne	.-38     	; 0x61a2 <SelectMode+0x384>
    61c8:	14 c0       	rjmp	.+40     	; 0x61f2 <SelectMode+0x3d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    61ca:	6f 81       	ldd	r22, Y+7	; 0x07
    61cc:	78 85       	ldd	r23, Y+8	; 0x08
    61ce:	89 85       	ldd	r24, Y+9	; 0x09
    61d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    61d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    61d6:	dc 01       	movw	r26, r24
    61d8:	cb 01       	movw	r24, r22
    61da:	9e 83       	std	Y+6, r25	; 0x06
    61dc:	8d 83       	std	Y+5, r24	; 0x05
    61de:	8d 81       	ldd	r24, Y+5	; 0x05
    61e0:	9e 81       	ldd	r25, Y+6	; 0x06
    61e2:	9a 83       	std	Y+2, r25	; 0x02
    61e4:	89 83       	std	Y+1, r24	; 0x01
    61e6:	89 81       	ldd	r24, Y+1	; 0x01
    61e8:	9a 81       	ldd	r25, Y+2	; 0x02
    61ea:	01 97       	sbiw	r24, 0x01	; 1
    61ec:	f1 f7       	brne	.-4      	; 0x61ea <SelectMode+0x3cc>
    61ee:	9a 83       	std	Y+2, r25	; 0x02
    61f0:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(500);
			time--;
    61f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    61f4:	81 50       	subi	r24, 0x01	; 1
    61f6:	8f 87       	std	Y+15, r24	; 0x0f
			if(time < 10)
    61f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    61fa:	8a 30       	cpi	r24, 0x0A	; 10
    61fc:	cc f4       	brge	.+50     	; 0x6230 <SelectMode+0x412>
			{
				HLCD_gotoXY(2, 11);
    61fe:	82 e0       	ldi	r24, 0x02	; 2
    6200:	6b e0       	ldi	r22, 0x0B	; 11
    6202:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
				HLCD_sendIntNum(0);
    6206:	60 e0       	ldi	r22, 0x00	; 0
    6208:	70 e0       	ldi	r23, 0x00	; 0
    620a:	80 e0       	ldi	r24, 0x00	; 0
    620c:	90 e0       	ldi	r25, 0x00	; 0
    620e:	0e 94 c0 23 	call	0x4780	; 0x4780 <HLCD_sendIntNum>
				HLCD_gotoXY(2, 12);
    6212:	82 e0       	ldi	r24, 0x02	; 2
    6214:	6c e0       	ldi	r22, 0x0C	; 12
    6216:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
				HLCD_sendIntNum(time);
    621a:	8f 85       	ldd	r24, Y+15	; 0x0f
    621c:	99 27       	eor	r25, r25
    621e:	87 fd       	sbrc	r24, 7
    6220:	90 95       	com	r25
    6222:	a9 2f       	mov	r26, r25
    6224:	b9 2f       	mov	r27, r25
    6226:	bc 01       	movw	r22, r24
    6228:	cd 01       	movw	r24, r26
    622a:	0e 94 c0 23 	call	0x4780	; 0x4780 <HLCD_sendIntNum>
    622e:	0e c0       	rjmp	.+28     	; 0x624c <SelectMode+0x42e>
			}
			else
			{
				HLCD_gotoXY(2, 11);
    6230:	82 e0       	ldi	r24, 0x02	; 2
    6232:	6b e0       	ldi	r22, 0x0B	; 11
    6234:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
				HLCD_sendIntNum(time);
    6238:	8f 85       	ldd	r24, Y+15	; 0x0f
    623a:	99 27       	eor	r25, r25
    623c:	87 fd       	sbrc	r24, 7
    623e:	90 95       	com	r25
    6240:	a9 2f       	mov	r26, r25
    6242:	b9 2f       	mov	r27, r25
    6244:	bc 01       	movw	r22, r24
    6246:	cd 01       	movw	r24, r26
    6248:	0e 94 c0 23 	call	0x4780	; 0x4780 <HLCD_sendIntNum>
		HLCD_SendString("Unlock in");
		HLCD_gotoXY(2, 11);
		HLCD_sendIntNum(time);
		HLCD_gotoXY(2, 14);
		HLCD_SendString("SEC");
		while(time > 0)
    624c:	8f 85       	ldd	r24, Y+15	; 0x0f
    624e:	18 16       	cp	r1, r24
    6250:	0c f4       	brge	.+2      	; 0x6254 <SelectMode+0x436>
    6252:	5d cf       	rjmp	.-326    	; 0x610e <SelectMode+0x2f0>
				HLCD_gotoXY(2, 11);
				HLCD_sendIntNum(time);
			}

		}
		Errflag = 0;
    6254:	10 92 58 03 	sts	0x0358, r1
		HLCD_ClearDisplay();
    6258:	0e 94 b5 23 	call	0x476a	; 0x476a <HLCD_ClearDisplay>
		HLCD_SendString("SESTEM UNLOCKED");
    625c:	81 e5       	ldi	r24, 0x51	; 81
    625e:	91 e0       	ldi	r25, 0x01	; 1
    6260:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
	}
	return 1;
    6264:	31 e0       	ldi	r19, 0x01	; 1
    6266:	3b 8b       	std	Y+19, r19	; 0x13
    6268:	8b 89       	ldd	r24, Y+19	; 0x13
}
    626a:	63 96       	adiw	r28, 0x13	; 19
    626c:	0f b6       	in	r0, 0x3f	; 63
    626e:	f8 94       	cli
    6270:	de bf       	out	0x3e, r29	; 62
    6272:	0f be       	out	0x3f, r0	; 63
    6274:	cd bf       	out	0x3d, r28	; 61
    6276:	cf 91       	pop	r28
    6278:	df 91       	pop	r29
    627a:	08 95       	ret

0000627c <CheckPass>:
/*
 * Function to take the password from user
 * and check this password with the one in data base
 */
u8 CheckPass(u8 key)
{
    627c:	df 93       	push	r29
    627e:	cf 93       	push	r28
    6280:	cd b7       	in	r28, 0x3d	; 61
    6282:	de b7       	in	r29, 0x3e	; 62
    6284:	a1 97       	sbiw	r28, 0x21	; 33
    6286:	0f b6       	in	r0, 0x3f	; 63
    6288:	f8 94       	cli
    628a:	de bf       	out	0x3e, r29	; 62
    628c:	0f be       	out	0x3f, r0	; 63
    628e:	cd bf       	out	0x3d, r28	; 61
    6290:	8e 8f       	std	Y+30, r24	; 0x1e
	AdminPass = 0;
    6292:	10 92 66 03 	sts	0x0366, r1
    6296:	10 92 65 03 	sts	0x0365, r1
	GuestPass = 0;
    629a:	10 92 68 03 	sts	0x0368, r1
    629e:	10 92 67 03 	sts	0x0367, r1
	AdminFlag = 0;
    62a2:	10 92 55 03 	sts	0x0355, r1
	GuestFlag = 0;
    62a6:	10 92 56 03 	sts	0x0356, r1
	DefaultFlag = 0;
    62aa:	10 92 57 03 	sts	0x0357, r1
	/****** SET PASSWORDS ******/
	switch (key)
    62ae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    62b0:	28 2f       	mov	r18, r24
    62b2:	30 e0       	ldi	r19, 0x00	; 0
    62b4:	39 a3       	std	Y+33, r19	; 0x21
    62b6:	28 a3       	std	Y+32, r18	; 0x20
    62b8:	48 a1       	ldd	r20, Y+32	; 0x20
    62ba:	59 a1       	ldd	r21, Y+33	; 0x21
    62bc:	41 15       	cp	r20, r1
    62be:	51 05       	cpc	r21, r1
    62c0:	39 f0       	breq	.+14     	; 0x62d0 <CheckPass+0x54>
    62c2:	88 a1       	ldd	r24, Y+32	; 0x20
    62c4:	99 a1       	ldd	r25, Y+33	; 0x21
    62c6:	81 30       	cpi	r24, 0x01	; 1
    62c8:	91 05       	cpc	r25, r1
    62ca:	09 f4       	brne	.+2      	; 0x62ce <CheckPass+0x52>
    62cc:	2b c1       	rjmp	.+598    	; 0x6524 <CheckPass+0x2a8>
    62ce:	5b c2       	rjmp	.+1206   	; 0x6786 <CheckPass+0x50a>
	{
	u8 i;
		case ADMIN_MODE:
			HLCD_SendString("Admin Mode :");
    62d0:	81 e6       	ldi	r24, 0x61	; 97
    62d2:	91 e0       	ldi	r25, 0x01	; 1
    62d4:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
			HLCD_gotoXY(2, 1);
    62d8:	82 e0       	ldi	r24, 0x02	; 2
    62da:	61 e0       	ldi	r22, 0x01	; 1
    62dc:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
			HLCD_SendString("Enter Pass: ");
    62e0:	8e e6       	ldi	r24, 0x6E	; 110
    62e2:	91 e0       	ldi	r25, 0x01	; 1
    62e4:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
			i = 2;
    62e8:	82 e0       	ldi	r24, 0x02	; 2
    62ea:	8d 8f       	std	Y+29, r24	; 0x1d
    62ec:	81 c0       	rjmp	.+258    	; 0x63f0 <CheckPass+0x174>

			while (i <= 5)
			{
				HUltrasonic_enStartReading(TRIGG_PIN, &Distance);
    62ee:	21 e5       	ldi	r18, 0x51	; 81
    62f0:	33 e0       	ldi	r19, 0x03	; 3
    62f2:	85 e2       	ldi	r24, 0x25	; 37
    62f4:	b9 01       	movw	r22, r18
    62f6:	0e 94 6d 17 	call	0x2eda	; 0x2eda <HUltrasonic_enStartReading>

				if((timeout_flag == 1)||(Distance > 30))
    62fa:	80 91 50 03 	lds	r24, 0x0350
    62fe:	81 30       	cpi	r24, 0x01	; 1
    6300:	69 f0       	breq	.+26     	; 0x631c <CheckPass+0xa0>
    6302:	80 91 51 03 	lds	r24, 0x0351
    6306:	90 91 52 03 	lds	r25, 0x0352
    630a:	a0 91 53 03 	lds	r26, 0x0353
    630e:	b0 91 54 03 	lds	r27, 0x0354
    6312:	8f 31       	cpi	r24, 0x1F	; 31
    6314:	91 05       	cpc	r25, r1
    6316:	a1 05       	cpc	r26, r1
    6318:	b1 05       	cpc	r27, r1
    631a:	10 f0       	brcs	.+4      	; 0x6320 <CheckPass+0xa4>
				{
					return 0;
    631c:	1f 8e       	std	Y+31, r1	; 0x1f
    631e:	3c c2       	rjmp	.+1144   	; 0x6798 <CheckPass+0x51c>
				}
				HKEYPAD_enGetPressedKey(&key);
    6320:	ce 01       	movw	r24, r28
    6322:	4e 96       	adiw	r24, 0x1e	; 30
    6324:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <HKEYPAD_enGetPressedKey>
				if (key != HKEYPAD_NO_PRESSED_KEY)
    6328:	8e 8d       	ldd	r24, Y+30	; 0x1e
    632a:	8f 3f       	cpi	r24, 0xFF	; 255
    632c:	09 f4       	brne	.+2      	; 0x6330 <CheckPass+0xb4>
    632e:	60 c0       	rjmp	.+192    	; 0x63f0 <CheckPass+0x174>
				{
					 if (key == 'c')
    6330:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6332:	83 36       	cpi	r24, 0x63	; 99
    6334:	61 f5       	brne	.+88     	; 0x638e <CheckPass+0x112>
					 {
						 AdminPass = (AdminPass -temp) / 10;
    6336:	20 91 65 03 	lds	r18, 0x0365
    633a:	30 91 66 03 	lds	r19, 0x0366
    633e:	80 91 64 03 	lds	r24, 0x0364
    6342:	88 2f       	mov	r24, r24
    6344:	90 e0       	ldi	r25, 0x00	; 0
    6346:	a9 01       	movw	r20, r18
    6348:	48 1b       	sub	r20, r24
    634a:	59 0b       	sbc	r21, r25
    634c:	ca 01       	movw	r24, r20
    634e:	2a e0       	ldi	r18, 0x0A	; 10
    6350:	30 e0       	ldi	r19, 0x00	; 0
    6352:	b9 01       	movw	r22, r18
    6354:	0e 94 2c 3a 	call	0x7458	; 0x7458 <__udivmodhi4>
    6358:	cb 01       	movw	r24, r22
    635a:	90 93 66 03 	sts	0x0366, r25
    635e:	80 93 65 03 	sts	0x0365, r24
						 HLCD_gotoXY(2, 10+i); // 12 13 14 15
    6362:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6364:	98 2f       	mov	r25, r24
    6366:	96 5f       	subi	r25, 0xF6	; 246
    6368:	82 e0       	ldi	r24, 0x02	; 2
    636a:	69 2f       	mov	r22, r25
    636c:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
						 HLCD_SendString(" ");
    6370:	88 e9       	ldi	r24, 0x98	; 152
    6372:	90 e0       	ldi	r25, 0x00	; 0
    6374:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
						 HLCD_gotoXY(2, 10+i);
    6378:	8d 8d       	ldd	r24, Y+29	; 0x1d
    637a:	98 2f       	mov	r25, r24
    637c:	96 5f       	subi	r25, 0xF6	; 246
    637e:	82 e0       	ldi	r24, 0x02	; 2
    6380:	69 2f       	mov	r22, r25
    6382:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
						 i--;
    6386:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6388:	81 50       	subi	r24, 0x01	; 1
    638a:	8d 8f       	std	Y+29, r24	; 0x1d
    638c:	31 c0       	rjmp	.+98     	; 0x63f0 <CheckPass+0x174>
					 }
					 else
					 {
						temp = key;
    638e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6390:	80 93 64 03 	sts	0x0364, r24
						HLCD_sendIntNum(key);
    6394:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6396:	88 2f       	mov	r24, r24
    6398:	90 e0       	ldi	r25, 0x00	; 0
    639a:	a0 e0       	ldi	r26, 0x00	; 0
    639c:	b0 e0       	ldi	r27, 0x00	; 0
    639e:	bc 01       	movw	r22, r24
    63a0:	cd 01       	movw	r24, r26
    63a2:	0e 94 c0 23 	call	0x4780	; 0x4780 <HLCD_sendIntNum>
						 HLCD_gotoXY(2, 11+i); // 12 13 14 15
    63a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    63a8:	98 2f       	mov	r25, r24
    63aa:	95 5f       	subi	r25, 0xF5	; 245
    63ac:	82 e0       	ldi	r24, 0x02	; 2
    63ae:	69 2f       	mov	r22, r25
    63b0:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
						 HLCD_SendString("*");
    63b4:	8a e9       	ldi	r24, 0x9A	; 154
    63b6:	90 e0       	ldi	r25, 0x00	; 0
    63b8:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
						AdminPass = (AdminPass * 10) + key;
    63bc:	80 91 65 03 	lds	r24, 0x0365
    63c0:	90 91 66 03 	lds	r25, 0x0366
    63c4:	9c 01       	movw	r18, r24
    63c6:	22 0f       	add	r18, r18
    63c8:	33 1f       	adc	r19, r19
    63ca:	c9 01       	movw	r24, r18
    63cc:	88 0f       	add	r24, r24
    63ce:	99 1f       	adc	r25, r25
    63d0:	88 0f       	add	r24, r24
    63d2:	99 1f       	adc	r25, r25
    63d4:	28 0f       	add	r18, r24
    63d6:	39 1f       	adc	r19, r25
    63d8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    63da:	88 2f       	mov	r24, r24
    63dc:	90 e0       	ldi	r25, 0x00	; 0
    63de:	82 0f       	add	r24, r18
    63e0:	93 1f       	adc	r25, r19
    63e2:	90 93 66 03 	sts	0x0366, r25
    63e6:	80 93 65 03 	sts	0x0365, r24
						i++;
    63ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    63ec:	8f 5f       	subi	r24, 0xFF	; 255
    63ee:	8d 8f       	std	Y+29, r24	; 0x1d
			HLCD_SendString("Admin Mode :");
			HLCD_gotoXY(2, 1);
			HLCD_SendString("Enter Pass: ");
			i = 2;

			while (i <= 5)
    63f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    63f2:	86 30       	cpi	r24, 0x06	; 6
    63f4:	08 f4       	brcc	.+2      	; 0x63f8 <CheckPass+0x17c>
    63f6:	7b cf       	rjmp	.-266    	; 0x62ee <CheckPass+0x72>
					 }
				}
			}

			/****** Check ADMIN PASSWORDS ******/
			if (AdminPass == AdminData)
    63f8:	20 91 65 03 	lds	r18, 0x0365
    63fc:	30 91 66 03 	lds	r19, 0x0366
    6400:	80 91 4c 03 	lds	r24, 0x034C
    6404:	90 91 4d 03 	lds	r25, 0x034D
    6408:	28 17       	cp	r18, r24
    640a:	39 07       	cpc	r19, r25
    640c:	09 f0       	breq	.+2      	; 0x6410 <CheckPass+0x194>
    640e:	c2 c1       	rjmp	.+900    	; 0x6794 <CheckPass+0x518>
			{
				HLCD_ClearDisplay();
    6410:	0e 94 b5 23 	call	0x476a	; 0x476a <HLCD_ClearDisplay>
				HLCD_gotoXY(1, 5);
    6414:	81 e0       	ldi	r24, 0x01	; 1
    6416:	65 e0       	ldi	r22, 0x05	; 5
    6418:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
				HLCD_SendString("WELCOME");
    641c:	8b e7       	ldi	r24, 0x7B	; 123
    641e:	91 e0       	ldi	r25, 0x01	; 1
    6420:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
				HLCD_gotoXY(2, 3);
    6424:	82 e0       	ldi	r24, 0x02	; 2
    6426:	63 e0       	ldi	r22, 0x03	; 3
    6428:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
				HLCD_SendString("Mr. Hegazy");
    642c:	83 e8       	ldi	r24, 0x83	; 131
    642e:	91 e0       	ldi	r25, 0x01	; 1
    6430:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
    6434:	80 e0       	ldi	r24, 0x00	; 0
    6436:	90 e0       	ldi	r25, 0x00	; 0
    6438:	aa ef       	ldi	r26, 0xFA	; 250
    643a:	b3 e4       	ldi	r27, 0x43	; 67
    643c:	89 8f       	std	Y+25, r24	; 0x19
    643e:	9a 8f       	std	Y+26, r25	; 0x1a
    6440:	ab 8f       	std	Y+27, r26	; 0x1b
    6442:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6444:	69 8d       	ldd	r22, Y+25	; 0x19
    6446:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6448:	8b 8d       	ldd	r24, Y+27	; 0x1b
    644a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    644c:	20 e0       	ldi	r18, 0x00	; 0
    644e:	30 e0       	ldi	r19, 0x00	; 0
    6450:	4a e7       	ldi	r20, 0x7A	; 122
    6452:	55 e4       	ldi	r21, 0x45	; 69
    6454:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    6458:	dc 01       	movw	r26, r24
    645a:	cb 01       	movw	r24, r22
    645c:	8d 8b       	std	Y+21, r24	; 0x15
    645e:	9e 8b       	std	Y+22, r25	; 0x16
    6460:	af 8b       	std	Y+23, r26	; 0x17
    6462:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6464:	6d 89       	ldd	r22, Y+21	; 0x15
    6466:	7e 89       	ldd	r23, Y+22	; 0x16
    6468:	8f 89       	ldd	r24, Y+23	; 0x17
    646a:	98 8d       	ldd	r25, Y+24	; 0x18
    646c:	20 e0       	ldi	r18, 0x00	; 0
    646e:	30 e0       	ldi	r19, 0x00	; 0
    6470:	40 e8       	ldi	r20, 0x80	; 128
    6472:	5f e3       	ldi	r21, 0x3F	; 63
    6474:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    6478:	88 23       	and	r24, r24
    647a:	2c f4       	brge	.+10     	; 0x6486 <CheckPass+0x20a>
		__ticks = 1;
    647c:	81 e0       	ldi	r24, 0x01	; 1
    647e:	90 e0       	ldi	r25, 0x00	; 0
    6480:	9c 8b       	std	Y+20, r25	; 0x14
    6482:	8b 8b       	std	Y+19, r24	; 0x13
    6484:	3f c0       	rjmp	.+126    	; 0x6504 <CheckPass+0x288>
	else if (__tmp > 65535)
    6486:	6d 89       	ldd	r22, Y+21	; 0x15
    6488:	7e 89       	ldd	r23, Y+22	; 0x16
    648a:	8f 89       	ldd	r24, Y+23	; 0x17
    648c:	98 8d       	ldd	r25, Y+24	; 0x18
    648e:	20 e0       	ldi	r18, 0x00	; 0
    6490:	3f ef       	ldi	r19, 0xFF	; 255
    6492:	4f e7       	ldi	r20, 0x7F	; 127
    6494:	57 e4       	ldi	r21, 0x47	; 71
    6496:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    649a:	18 16       	cp	r1, r24
    649c:	4c f5       	brge	.+82     	; 0x64f0 <CheckPass+0x274>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    649e:	69 8d       	ldd	r22, Y+25	; 0x19
    64a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    64a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    64a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    64a6:	20 e0       	ldi	r18, 0x00	; 0
    64a8:	30 e0       	ldi	r19, 0x00	; 0
    64aa:	40 e2       	ldi	r20, 0x20	; 32
    64ac:	51 e4       	ldi	r21, 0x41	; 65
    64ae:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    64b2:	dc 01       	movw	r26, r24
    64b4:	cb 01       	movw	r24, r22
    64b6:	bc 01       	movw	r22, r24
    64b8:	cd 01       	movw	r24, r26
    64ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    64be:	dc 01       	movw	r26, r24
    64c0:	cb 01       	movw	r24, r22
    64c2:	9c 8b       	std	Y+20, r25	; 0x14
    64c4:	8b 8b       	std	Y+19, r24	; 0x13
    64c6:	0f c0       	rjmp	.+30     	; 0x64e6 <CheckPass+0x26a>
    64c8:	80 e9       	ldi	r24, 0x90	; 144
    64ca:	91 e0       	ldi	r25, 0x01	; 1
    64cc:	9a 8b       	std	Y+18, r25	; 0x12
    64ce:	89 8b       	std	Y+17, r24	; 0x11
    64d0:	89 89       	ldd	r24, Y+17	; 0x11
    64d2:	9a 89       	ldd	r25, Y+18	; 0x12
    64d4:	01 97       	sbiw	r24, 0x01	; 1
    64d6:	f1 f7       	brne	.-4      	; 0x64d4 <CheckPass+0x258>
    64d8:	9a 8b       	std	Y+18, r25	; 0x12
    64da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    64dc:	8b 89       	ldd	r24, Y+19	; 0x13
    64de:	9c 89       	ldd	r25, Y+20	; 0x14
    64e0:	01 97       	sbiw	r24, 0x01	; 1
    64e2:	9c 8b       	std	Y+20, r25	; 0x14
    64e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    64e6:	8b 89       	ldd	r24, Y+19	; 0x13
    64e8:	9c 89       	ldd	r25, Y+20	; 0x14
    64ea:	00 97       	sbiw	r24, 0x00	; 0
    64ec:	69 f7       	brne	.-38     	; 0x64c8 <CheckPass+0x24c>
    64ee:	14 c0       	rjmp	.+40     	; 0x6518 <CheckPass+0x29c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    64f0:	6d 89       	ldd	r22, Y+21	; 0x15
    64f2:	7e 89       	ldd	r23, Y+22	; 0x16
    64f4:	8f 89       	ldd	r24, Y+23	; 0x17
    64f6:	98 8d       	ldd	r25, Y+24	; 0x18
    64f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    64fc:	dc 01       	movw	r26, r24
    64fe:	cb 01       	movw	r24, r22
    6500:	9c 8b       	std	Y+20, r25	; 0x14
    6502:	8b 8b       	std	Y+19, r24	; 0x13
    6504:	8b 89       	ldd	r24, Y+19	; 0x13
    6506:	9c 89       	ldd	r25, Y+20	; 0x14
    6508:	98 8b       	std	Y+16, r25	; 0x10
    650a:	8f 87       	std	Y+15, r24	; 0x0f
    650c:	8f 85       	ldd	r24, Y+15	; 0x0f
    650e:	98 89       	ldd	r25, Y+16	; 0x10
    6510:	01 97       	sbiw	r24, 0x01	; 1
    6512:	f1 f7       	brne	.-4      	; 0x6510 <CheckPass+0x294>
    6514:	98 8b       	std	Y+16, r25	; 0x10
    6516:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500);
				HLCD_ClearDisplay();
    6518:	0e 94 b5 23 	call	0x476a	; 0x476a <HLCD_ClearDisplay>
				AdminFlag = 1;
    651c:	81 e0       	ldi	r24, 0x01	; 1
    651e:	80 93 55 03 	sts	0x0355, r24
    6522:	38 c1       	rjmp	.+624    	; 0x6794 <CheckPass+0x518>
			}
			break;

		case GUEST_MODE:
			HLCD_SendString("Guest Mode :");
    6524:	8e e8       	ldi	r24, 0x8E	; 142
    6526:	91 e0       	ldi	r25, 0x01	; 1
    6528:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
			HLCD_gotoXY(2, 1);
    652c:	82 e0       	ldi	r24, 0x02	; 2
    652e:	61 e0       	ldi	r22, 0x01	; 1
    6530:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
			HLCD_SendString("Enter Pass: ");
    6534:	8e e6       	ldi	r24, 0x6E	; 110
    6536:	91 e0       	ldi	r25, 0x01	; 1
    6538:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
			i = 2;
    653c:	82 e0       	ldi	r24, 0x02	; 2
    653e:	8d 8f       	std	Y+29, r24	; 0x1d
    6540:	88 c0       	rjmp	.+272    	; 0x6652 <CheckPass+0x3d6>
			while (i <= 5)
			{
				HUltrasonic_enStartReading(TRIGG_PIN, &Distance);
    6542:	21 e5       	ldi	r18, 0x51	; 81
    6544:	33 e0       	ldi	r19, 0x03	; 3
    6546:	85 e2       	ldi	r24, 0x25	; 37
    6548:	b9 01       	movw	r22, r18
    654a:	0e 94 6d 17 	call	0x2eda	; 0x2eda <HUltrasonic_enStartReading>

				if((timeout_flag == 1)||(Distance > 30))
    654e:	80 91 50 03 	lds	r24, 0x0350
    6552:	81 30       	cpi	r24, 0x01	; 1
    6554:	69 f0       	breq	.+26     	; 0x6570 <CheckPass+0x2f4>
    6556:	80 91 51 03 	lds	r24, 0x0351
    655a:	90 91 52 03 	lds	r25, 0x0352
    655e:	a0 91 53 03 	lds	r26, 0x0353
    6562:	b0 91 54 03 	lds	r27, 0x0354
    6566:	8f 31       	cpi	r24, 0x1F	; 31
    6568:	91 05       	cpc	r25, r1
    656a:	a1 05       	cpc	r26, r1
    656c:	b1 05       	cpc	r27, r1
    656e:	10 f0       	brcs	.+4      	; 0x6574 <CheckPass+0x2f8>
				{
					return 0;
    6570:	1f 8e       	std	Y+31, r1	; 0x1f
    6572:	12 c1       	rjmp	.+548    	; 0x6798 <CheckPass+0x51c>
				}
				temp = i * 2;
    6574:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6576:	88 2f       	mov	r24, r24
    6578:	90 e0       	ldi	r25, 0x00	; 0
    657a:	88 0f       	add	r24, r24
    657c:	99 1f       	adc	r25, r25
    657e:	80 93 64 03 	sts	0x0364, r24
				HKEYPAD_enGetPressedKey(&key);
    6582:	ce 01       	movw	r24, r28
    6584:	4e 96       	adiw	r24, 0x1e	; 30
    6586:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <HKEYPAD_enGetPressedKey>
				if (key != HKEYPAD_NO_PRESSED_KEY)
    658a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    658c:	8f 3f       	cpi	r24, 0xFF	; 255
    658e:	09 f4       	brne	.+2      	; 0x6592 <CheckPass+0x316>
    6590:	60 c0       	rjmp	.+192    	; 0x6652 <CheckPass+0x3d6>
				{

					 if (key == 'c')
    6592:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6594:	83 36       	cpi	r24, 0x63	; 99
    6596:	61 f5       	brne	.+88     	; 0x65f0 <CheckPass+0x374>
					 {
						 GuestPass = (GuestPass -temp) / 10;
    6598:	20 91 67 03 	lds	r18, 0x0367
    659c:	30 91 68 03 	lds	r19, 0x0368
    65a0:	80 91 64 03 	lds	r24, 0x0364
    65a4:	88 2f       	mov	r24, r24
    65a6:	90 e0       	ldi	r25, 0x00	; 0
    65a8:	a9 01       	movw	r20, r18
    65aa:	48 1b       	sub	r20, r24
    65ac:	59 0b       	sbc	r21, r25
    65ae:	ca 01       	movw	r24, r20
    65b0:	2a e0       	ldi	r18, 0x0A	; 10
    65b2:	30 e0       	ldi	r19, 0x00	; 0
    65b4:	b9 01       	movw	r22, r18
    65b6:	0e 94 2c 3a 	call	0x7458	; 0x7458 <__udivmodhi4>
    65ba:	cb 01       	movw	r24, r22
    65bc:	90 93 68 03 	sts	0x0368, r25
    65c0:	80 93 67 03 	sts	0x0367, r24
						 HLCD_gotoXY(2, 10+i); // 12 13 14 15
    65c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    65c6:	98 2f       	mov	r25, r24
    65c8:	96 5f       	subi	r25, 0xF6	; 246
    65ca:	82 e0       	ldi	r24, 0x02	; 2
    65cc:	69 2f       	mov	r22, r25
    65ce:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
						 HLCD_SendString(" ");
    65d2:	88 e9       	ldi	r24, 0x98	; 152
    65d4:	90 e0       	ldi	r25, 0x00	; 0
    65d6:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
						 HLCD_gotoXY(2, 10+i);
    65da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    65dc:	98 2f       	mov	r25, r24
    65de:	96 5f       	subi	r25, 0xF6	; 246
    65e0:	82 e0       	ldi	r24, 0x02	; 2
    65e2:	69 2f       	mov	r22, r25
    65e4:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
						 i--;
    65e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    65ea:	81 50       	subi	r24, 0x01	; 1
    65ec:	8d 8f       	std	Y+29, r24	; 0x1d
    65ee:	31 c0       	rjmp	.+98     	; 0x6652 <CheckPass+0x3d6>
					 }
					 else
					 {
						temp = key;
    65f0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    65f2:	80 93 64 03 	sts	0x0364, r24
						HLCD_sendIntNum(key);
    65f6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    65f8:	88 2f       	mov	r24, r24
    65fa:	90 e0       	ldi	r25, 0x00	; 0
    65fc:	a0 e0       	ldi	r26, 0x00	; 0
    65fe:	b0 e0       	ldi	r27, 0x00	; 0
    6600:	bc 01       	movw	r22, r24
    6602:	cd 01       	movw	r24, r26
    6604:	0e 94 c0 23 	call	0x4780	; 0x4780 <HLCD_sendIntNum>
						HLCD_gotoXY(2, 11+i); // 12 13 14 15
    6608:	8d 8d       	ldd	r24, Y+29	; 0x1d
    660a:	98 2f       	mov	r25, r24
    660c:	95 5f       	subi	r25, 0xF5	; 245
    660e:	82 e0       	ldi	r24, 0x02	; 2
    6610:	69 2f       	mov	r22, r25
    6612:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
						HLCD_SendString("*");
    6616:	8a e9       	ldi	r24, 0x9A	; 154
    6618:	90 e0       	ldi	r25, 0x00	; 0
    661a:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
						GuestPass = (GuestPass * 10) + key;
    661e:	80 91 67 03 	lds	r24, 0x0367
    6622:	90 91 68 03 	lds	r25, 0x0368
    6626:	9c 01       	movw	r18, r24
    6628:	22 0f       	add	r18, r18
    662a:	33 1f       	adc	r19, r19
    662c:	c9 01       	movw	r24, r18
    662e:	88 0f       	add	r24, r24
    6630:	99 1f       	adc	r25, r25
    6632:	88 0f       	add	r24, r24
    6634:	99 1f       	adc	r25, r25
    6636:	28 0f       	add	r18, r24
    6638:	39 1f       	adc	r19, r25
    663a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    663c:	88 2f       	mov	r24, r24
    663e:	90 e0       	ldi	r25, 0x00	; 0
    6640:	82 0f       	add	r24, r18
    6642:	93 1f       	adc	r25, r19
    6644:	90 93 68 03 	sts	0x0368, r25
    6648:	80 93 67 03 	sts	0x0367, r24
						i++;
    664c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    664e:	8f 5f       	subi	r24, 0xFF	; 255
    6650:	8d 8f       	std	Y+29, r24	; 0x1d
		case GUEST_MODE:
			HLCD_SendString("Guest Mode :");
			HLCD_gotoXY(2, 1);
			HLCD_SendString("Enter Pass: ");
			i = 2;
			while (i <= 5)
    6652:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6654:	86 30       	cpi	r24, 0x06	; 6
    6656:	08 f4       	brcc	.+2      	; 0x665a <CheckPass+0x3de>
    6658:	74 cf       	rjmp	.-280    	; 0x6542 <CheckPass+0x2c6>
						i++;
					 }
				}
			}
			/****** Check GUEST PASSWORDS ******/
			if (GuestPass == GuestData)
    665a:	20 91 67 03 	lds	r18, 0x0367
    665e:	30 91 68 03 	lds	r19, 0x0368
    6662:	80 91 4e 03 	lds	r24, 0x034E
    6666:	90 91 4f 03 	lds	r25, 0x034F
    666a:	28 17       	cp	r18, r24
    666c:	39 07       	cpc	r19, r25
    666e:	09 f0       	breq	.+2      	; 0x6672 <CheckPass+0x3f6>
    6670:	91 c0       	rjmp	.+290    	; 0x6794 <CheckPass+0x518>
			{
				HLCD_ClearDisplay();
    6672:	0e 94 b5 23 	call	0x476a	; 0x476a <HLCD_ClearDisplay>
				HLCD_gotoXY(1, 5);
    6676:	81 e0       	ldi	r24, 0x01	; 1
    6678:	65 e0       	ldi	r22, 0x05	; 5
    667a:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
				HLCD_SendString("WELCOME");
    667e:	8b e7       	ldi	r24, 0x7B	; 123
    6680:	91 e0       	ldi	r25, 0x01	; 1
    6682:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
				HLCD_gotoXY(2, 4);
    6686:	82 e0       	ldi	r24, 0x02	; 2
    6688:	64 e0       	ldi	r22, 0x04	; 4
    668a:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
				HLCD_SendString("Mr. Boody");
    668e:	8b e9       	ldi	r24, 0x9B	; 155
    6690:	91 e0       	ldi	r25, 0x01	; 1
    6692:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
    6696:	80 e0       	ldi	r24, 0x00	; 0
    6698:	90 e0       	ldi	r25, 0x00	; 0
    669a:	aa ef       	ldi	r26, 0xFA	; 250
    669c:	b3 e4       	ldi	r27, 0x43	; 67
    669e:	8b 87       	std	Y+11, r24	; 0x0b
    66a0:	9c 87       	std	Y+12, r25	; 0x0c
    66a2:	ad 87       	std	Y+13, r26	; 0x0d
    66a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    66a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    66a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    66aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    66ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    66ae:	20 e0       	ldi	r18, 0x00	; 0
    66b0:	30 e0       	ldi	r19, 0x00	; 0
    66b2:	4a e7       	ldi	r20, 0x7A	; 122
    66b4:	55 e4       	ldi	r21, 0x45	; 69
    66b6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    66ba:	dc 01       	movw	r26, r24
    66bc:	cb 01       	movw	r24, r22
    66be:	8f 83       	std	Y+7, r24	; 0x07
    66c0:	98 87       	std	Y+8, r25	; 0x08
    66c2:	a9 87       	std	Y+9, r26	; 0x09
    66c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    66c6:	6f 81       	ldd	r22, Y+7	; 0x07
    66c8:	78 85       	ldd	r23, Y+8	; 0x08
    66ca:	89 85       	ldd	r24, Y+9	; 0x09
    66cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    66ce:	20 e0       	ldi	r18, 0x00	; 0
    66d0:	30 e0       	ldi	r19, 0x00	; 0
    66d2:	40 e8       	ldi	r20, 0x80	; 128
    66d4:	5f e3       	ldi	r21, 0x3F	; 63
    66d6:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    66da:	88 23       	and	r24, r24
    66dc:	2c f4       	brge	.+10     	; 0x66e8 <CheckPass+0x46c>
		__ticks = 1;
    66de:	81 e0       	ldi	r24, 0x01	; 1
    66e0:	90 e0       	ldi	r25, 0x00	; 0
    66e2:	9e 83       	std	Y+6, r25	; 0x06
    66e4:	8d 83       	std	Y+5, r24	; 0x05
    66e6:	3f c0       	rjmp	.+126    	; 0x6766 <CheckPass+0x4ea>
	else if (__tmp > 65535)
    66e8:	6f 81       	ldd	r22, Y+7	; 0x07
    66ea:	78 85       	ldd	r23, Y+8	; 0x08
    66ec:	89 85       	ldd	r24, Y+9	; 0x09
    66ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    66f0:	20 e0       	ldi	r18, 0x00	; 0
    66f2:	3f ef       	ldi	r19, 0xFF	; 255
    66f4:	4f e7       	ldi	r20, 0x7F	; 127
    66f6:	57 e4       	ldi	r21, 0x47	; 71
    66f8:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    66fc:	18 16       	cp	r1, r24
    66fe:	4c f5       	brge	.+82     	; 0x6752 <CheckPass+0x4d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6700:	6b 85       	ldd	r22, Y+11	; 0x0b
    6702:	7c 85       	ldd	r23, Y+12	; 0x0c
    6704:	8d 85       	ldd	r24, Y+13	; 0x0d
    6706:	9e 85       	ldd	r25, Y+14	; 0x0e
    6708:	20 e0       	ldi	r18, 0x00	; 0
    670a:	30 e0       	ldi	r19, 0x00	; 0
    670c:	40 e2       	ldi	r20, 0x20	; 32
    670e:	51 e4       	ldi	r21, 0x41	; 65
    6710:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    6714:	dc 01       	movw	r26, r24
    6716:	cb 01       	movw	r24, r22
    6718:	bc 01       	movw	r22, r24
    671a:	cd 01       	movw	r24, r26
    671c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6720:	dc 01       	movw	r26, r24
    6722:	cb 01       	movw	r24, r22
    6724:	9e 83       	std	Y+6, r25	; 0x06
    6726:	8d 83       	std	Y+5, r24	; 0x05
    6728:	0f c0       	rjmp	.+30     	; 0x6748 <CheckPass+0x4cc>
    672a:	80 e9       	ldi	r24, 0x90	; 144
    672c:	91 e0       	ldi	r25, 0x01	; 1
    672e:	9c 83       	std	Y+4, r25	; 0x04
    6730:	8b 83       	std	Y+3, r24	; 0x03
    6732:	8b 81       	ldd	r24, Y+3	; 0x03
    6734:	9c 81       	ldd	r25, Y+4	; 0x04
    6736:	01 97       	sbiw	r24, 0x01	; 1
    6738:	f1 f7       	brne	.-4      	; 0x6736 <CheckPass+0x4ba>
    673a:	9c 83       	std	Y+4, r25	; 0x04
    673c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    673e:	8d 81       	ldd	r24, Y+5	; 0x05
    6740:	9e 81       	ldd	r25, Y+6	; 0x06
    6742:	01 97       	sbiw	r24, 0x01	; 1
    6744:	9e 83       	std	Y+6, r25	; 0x06
    6746:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6748:	8d 81       	ldd	r24, Y+5	; 0x05
    674a:	9e 81       	ldd	r25, Y+6	; 0x06
    674c:	00 97       	sbiw	r24, 0x00	; 0
    674e:	69 f7       	brne	.-38     	; 0x672a <CheckPass+0x4ae>
    6750:	14 c0       	rjmp	.+40     	; 0x677a <CheckPass+0x4fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6752:	6f 81       	ldd	r22, Y+7	; 0x07
    6754:	78 85       	ldd	r23, Y+8	; 0x08
    6756:	89 85       	ldd	r24, Y+9	; 0x09
    6758:	9a 85       	ldd	r25, Y+10	; 0x0a
    675a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    675e:	dc 01       	movw	r26, r24
    6760:	cb 01       	movw	r24, r22
    6762:	9e 83       	std	Y+6, r25	; 0x06
    6764:	8d 83       	std	Y+5, r24	; 0x05
    6766:	8d 81       	ldd	r24, Y+5	; 0x05
    6768:	9e 81       	ldd	r25, Y+6	; 0x06
    676a:	9a 83       	std	Y+2, r25	; 0x02
    676c:	89 83       	std	Y+1, r24	; 0x01
    676e:	89 81       	ldd	r24, Y+1	; 0x01
    6770:	9a 81       	ldd	r25, Y+2	; 0x02
    6772:	01 97       	sbiw	r24, 0x01	; 1
    6774:	f1 f7       	brne	.-4      	; 0x6772 <CheckPass+0x4f6>
    6776:	9a 83       	std	Y+2, r25	; 0x02
    6778:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);
				HLCD_ClearDisplay();
    677a:	0e 94 b5 23 	call	0x476a	; 0x476a <HLCD_ClearDisplay>
				GuestFlag = 1;
    677e:	81 e0       	ldi	r24, 0x01	; 1
    6780:	80 93 56 03 	sts	0x0356, r24
    6784:	07 c0       	rjmp	.+14     	; 0x6794 <CheckPass+0x518>
			}
			break;

		default:
			HLCD_SendString("Wrong Input !!");
    6786:	85 ea       	ldi	r24, 0xA5	; 165
    6788:	91 e0       	ldi	r25, 0x01	; 1
    678a:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
			DefaultFlag = 1;
    678e:	81 e0       	ldi	r24, 0x01	; 1
    6790:	80 93 57 03 	sts	0x0357, r24
			break;
	}
	return 1;
    6794:	51 e0       	ldi	r21, 0x01	; 1
    6796:	5f 8f       	std	Y+31, r21	; 0x1f
    6798:	8f 8d       	ldd	r24, Y+31	; 0x1f
}
    679a:	a1 96       	adiw	r28, 0x21	; 33
    679c:	0f b6       	in	r0, 0x3f	; 63
    679e:	f8 94       	cli
    67a0:	de bf       	out	0x3e, r29	; 62
    67a2:	0f be       	out	0x3f, r0	; 63
    67a4:	cd bf       	out	0x3d, r28	; 61
    67a6:	cf 91       	pop	r28
    67a8:	df 91       	pop	r29
    67aa:	08 95       	ret

000067ac <main>:
 * GRAD Project
 */


void main(void)
{
    67ac:	0f 93       	push	r16
    67ae:	1f 93       	push	r17
    67b0:	df 93       	push	r29
    67b2:	cf 93       	push	r28
    67b4:	cd b7       	in	r28, 0x3d	; 61
    67b6:	de b7       	in	r29, 0x3e	; 62
    67b8:	c8 57       	subi	r28, 0x78	; 120
    67ba:	d0 40       	sbci	r29, 0x00	; 0
    67bc:	0f b6       	in	r0, 0x3f	; 63
    67be:	f8 94       	cli
    67c0:	de bf       	out	0x3e, r29	; 62
    67c2:	0f be       	out	0x3f, r0	; 63
    67c4:	cd bf       	out	0x3d, r28	; 61
/****************************** LOCAL VARIABLES *******************************/

	u8 Init_Adderss, AData_Adress, GData_Adress; //for EEPROM SAVED DATA
	u8 i, temp;
	u8 returnValue;
	u8 EEPROM_state=EMPTY_EEPROM;
    67c6:	fe 01       	movw	r30, r28
    67c8:	ee 58       	subi	r30, 0x8E	; 142
    67ca:	ff 4f       	sbci	r31, 0xFF	; 255
    67cc:	10 82       	st	Z, r1
	u8 welcome_flag=0;
    67ce:	fe 01       	movw	r30, r28
    67d0:	ef 58       	subi	r30, 0x8F	; 143
    67d2:	ff 4f       	sbci	r31, 0xFF	; 255
    67d4:	10 82       	st	Z, r1
/****************************** INITIALIZATION ********************************/

	/* initialize The HAL Drivers*/
	HUltrasonic_enInit(TRIGG_PIN);
    67d6:	85 e2       	ldi	r24, 0x25	; 37
    67d8:	0e 94 42 17 	call	0x2e84	; 0x2e84 <HUltrasonic_enInit>
	HLED_enInit(HLED_RED_ID);
    67dc:	81 e0       	ldi	r24, 0x01	; 1
    67de:	0e 94 29 16 	call	0x2c52	; 0x2c52 <HLED_enInit>
	HLCD_Init();
    67e2:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <HLCD_Init>
	HKEYPAD_enInt();
    67e6:	0e 94 81 25 	call	0x4b02	; 0x4b02 <HKEYPAD_enInt>
	HEEPROM_enInit();
    67ea:	0e 94 04 27 	call	0x4e08	; 0x4e08 <HEEPROM_enInit>
	HRELAY_enInit();
    67ee:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <HRELAY_enInit>
	/* initialize The MCAL Drivers*/
	MTIMER0_enInit();
    67f2:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <MTIMER0_enInit>
	MTWI_enInit();
    67f6:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <MTWI_enInit>
	MUART_enInit();
    67fa:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <MUART_enInit>

	MDIO_SetPinDirection(SIGNAL_PIN, OUTPUT);
    67fe:	81 e1       	ldi	r24, 0x11	; 17
    6800:	61 e0       	ldi	r22, 0x01	; 1
    6802:	0e 94 de 11 	call	0x23bc	; 0x23bc <MDIO_SetPinDirection>
/****************************** SMART HOME CODE *******************************/


		/** Check for first time **/

		HEEPROM_enReadByte(1, &Init_Adderss);
    6806:	9e 01       	movw	r18, r28
    6808:	2a 58       	subi	r18, 0x8A	; 138
    680a:	3f 4f       	sbci	r19, 0xFF	; 255
    680c:	81 e0       	ldi	r24, 0x01	; 1
    680e:	90 e0       	ldi	r25, 0x00	; 0
    6810:	b9 01       	movw	r22, r18
    6812:	0e 94 68 27 	call	0x4ed0	; 0x4ed0 <HEEPROM_enReadByte>
    6816:	fe 01       	movw	r30, r28
    6818:	e3 59       	subi	r30, 0x93	; 147
    681a:	ff 4f       	sbci	r31, 0xFF	; 255
    681c:	80 e0       	ldi	r24, 0x00	; 0
    681e:	90 e0       	ldi	r25, 0x00	; 0
    6820:	a0 ef       	ldi	r26, 0xF0	; 240
    6822:	b1 e4       	ldi	r27, 0x41	; 65
    6824:	80 83       	st	Z, r24
    6826:	91 83       	std	Z+1, r25	; 0x01
    6828:	a2 83       	std	Z+2, r26	; 0x02
    682a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    682c:	8e 01       	movw	r16, r28
    682e:	07 59       	subi	r16, 0x97	; 151
    6830:	1f 4f       	sbci	r17, 0xFF	; 255
    6832:	fe 01       	movw	r30, r28
    6834:	e3 59       	subi	r30, 0x93	; 147
    6836:	ff 4f       	sbci	r31, 0xFF	; 255
    6838:	60 81       	ld	r22, Z
    683a:	71 81       	ldd	r23, Z+1	; 0x01
    683c:	82 81       	ldd	r24, Z+2	; 0x02
    683e:	93 81       	ldd	r25, Z+3	; 0x03
    6840:	20 e0       	ldi	r18, 0x00	; 0
    6842:	30 e0       	ldi	r19, 0x00	; 0
    6844:	4a e7       	ldi	r20, 0x7A	; 122
    6846:	55 e4       	ldi	r21, 0x45	; 69
    6848:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    684c:	dc 01       	movw	r26, r24
    684e:	cb 01       	movw	r24, r22
    6850:	f8 01       	movw	r30, r16
    6852:	80 83       	st	Z, r24
    6854:	91 83       	std	Z+1, r25	; 0x01
    6856:	a2 83       	std	Z+2, r26	; 0x02
    6858:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    685a:	fe 01       	movw	r30, r28
    685c:	e7 59       	subi	r30, 0x97	; 151
    685e:	ff 4f       	sbci	r31, 0xFF	; 255
    6860:	60 81       	ld	r22, Z
    6862:	71 81       	ldd	r23, Z+1	; 0x01
    6864:	82 81       	ldd	r24, Z+2	; 0x02
    6866:	93 81       	ldd	r25, Z+3	; 0x03
    6868:	20 e0       	ldi	r18, 0x00	; 0
    686a:	30 e0       	ldi	r19, 0x00	; 0
    686c:	40 e8       	ldi	r20, 0x80	; 128
    686e:	5f e3       	ldi	r21, 0x3F	; 63
    6870:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    6874:	88 23       	and	r24, r24
    6876:	44 f4       	brge	.+16     	; 0x6888 <main+0xdc>
		__ticks = 1;
    6878:	fe 01       	movw	r30, r28
    687a:	e9 59       	subi	r30, 0x99	; 153
    687c:	ff 4f       	sbci	r31, 0xFF	; 255
    687e:	81 e0       	ldi	r24, 0x01	; 1
    6880:	90 e0       	ldi	r25, 0x00	; 0
    6882:	91 83       	std	Z+1, r25	; 0x01
    6884:	80 83       	st	Z, r24
    6886:	64 c0       	rjmp	.+200    	; 0x6950 <main+0x1a4>
	else if (__tmp > 65535)
    6888:	fe 01       	movw	r30, r28
    688a:	e7 59       	subi	r30, 0x97	; 151
    688c:	ff 4f       	sbci	r31, 0xFF	; 255
    688e:	60 81       	ld	r22, Z
    6890:	71 81       	ldd	r23, Z+1	; 0x01
    6892:	82 81       	ldd	r24, Z+2	; 0x02
    6894:	93 81       	ldd	r25, Z+3	; 0x03
    6896:	20 e0       	ldi	r18, 0x00	; 0
    6898:	3f ef       	ldi	r19, 0xFF	; 255
    689a:	4f e7       	ldi	r20, 0x7F	; 127
    689c:	57 e4       	ldi	r21, 0x47	; 71
    689e:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    68a2:	18 16       	cp	r1, r24
    68a4:	0c f0       	brlt	.+2      	; 0x68a8 <main+0xfc>
    68a6:	43 c0       	rjmp	.+134    	; 0x692e <main+0x182>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    68a8:	fe 01       	movw	r30, r28
    68aa:	e3 59       	subi	r30, 0x93	; 147
    68ac:	ff 4f       	sbci	r31, 0xFF	; 255
    68ae:	60 81       	ld	r22, Z
    68b0:	71 81       	ldd	r23, Z+1	; 0x01
    68b2:	82 81       	ldd	r24, Z+2	; 0x02
    68b4:	93 81       	ldd	r25, Z+3	; 0x03
    68b6:	20 e0       	ldi	r18, 0x00	; 0
    68b8:	30 e0       	ldi	r19, 0x00	; 0
    68ba:	40 e2       	ldi	r20, 0x20	; 32
    68bc:	51 e4       	ldi	r21, 0x41	; 65
    68be:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    68c2:	dc 01       	movw	r26, r24
    68c4:	cb 01       	movw	r24, r22
    68c6:	8e 01       	movw	r16, r28
    68c8:	09 59       	subi	r16, 0x99	; 153
    68ca:	1f 4f       	sbci	r17, 0xFF	; 255
    68cc:	bc 01       	movw	r22, r24
    68ce:	cd 01       	movw	r24, r26
    68d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    68d4:	dc 01       	movw	r26, r24
    68d6:	cb 01       	movw	r24, r22
    68d8:	f8 01       	movw	r30, r16
    68da:	91 83       	std	Z+1, r25	; 0x01
    68dc:	80 83       	st	Z, r24
    68de:	1f c0       	rjmp	.+62     	; 0x691e <main+0x172>
    68e0:	fe 01       	movw	r30, r28
    68e2:	eb 59       	subi	r30, 0x9B	; 155
    68e4:	ff 4f       	sbci	r31, 0xFF	; 255
    68e6:	80 e9       	ldi	r24, 0x90	; 144
    68e8:	91 e0       	ldi	r25, 0x01	; 1
    68ea:	91 83       	std	Z+1, r25	; 0x01
    68ec:	80 83       	st	Z, r24
    68ee:	fe 01       	movw	r30, r28
    68f0:	eb 59       	subi	r30, 0x9B	; 155
    68f2:	ff 4f       	sbci	r31, 0xFF	; 255
    68f4:	80 81       	ld	r24, Z
    68f6:	91 81       	ldd	r25, Z+1	; 0x01
    68f8:	01 97       	sbiw	r24, 0x01	; 1
    68fa:	f1 f7       	brne	.-4      	; 0x68f8 <main+0x14c>
    68fc:	fe 01       	movw	r30, r28
    68fe:	eb 59       	subi	r30, 0x9B	; 155
    6900:	ff 4f       	sbci	r31, 0xFF	; 255
    6902:	91 83       	std	Z+1, r25	; 0x01
    6904:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6906:	de 01       	movw	r26, r28
    6908:	a9 59       	subi	r26, 0x99	; 153
    690a:	bf 4f       	sbci	r27, 0xFF	; 255
    690c:	fe 01       	movw	r30, r28
    690e:	e9 59       	subi	r30, 0x99	; 153
    6910:	ff 4f       	sbci	r31, 0xFF	; 255
    6912:	80 81       	ld	r24, Z
    6914:	91 81       	ldd	r25, Z+1	; 0x01
    6916:	01 97       	sbiw	r24, 0x01	; 1
    6918:	11 96       	adiw	r26, 0x01	; 1
    691a:	9c 93       	st	X, r25
    691c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    691e:	fe 01       	movw	r30, r28
    6920:	e9 59       	subi	r30, 0x99	; 153
    6922:	ff 4f       	sbci	r31, 0xFF	; 255
    6924:	80 81       	ld	r24, Z
    6926:	91 81       	ldd	r25, Z+1	; 0x01
    6928:	00 97       	sbiw	r24, 0x00	; 0
    692a:	d1 f6       	brne	.-76     	; 0x68e0 <main+0x134>
    692c:	28 c0       	rjmp	.+80     	; 0x697e <main+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    692e:	8e 01       	movw	r16, r28
    6930:	09 59       	subi	r16, 0x99	; 153
    6932:	1f 4f       	sbci	r17, 0xFF	; 255
    6934:	fe 01       	movw	r30, r28
    6936:	e7 59       	subi	r30, 0x97	; 151
    6938:	ff 4f       	sbci	r31, 0xFF	; 255
    693a:	60 81       	ld	r22, Z
    693c:	71 81       	ldd	r23, Z+1	; 0x01
    693e:	82 81       	ldd	r24, Z+2	; 0x02
    6940:	93 81       	ldd	r25, Z+3	; 0x03
    6942:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6946:	dc 01       	movw	r26, r24
    6948:	cb 01       	movw	r24, r22
    694a:	f8 01       	movw	r30, r16
    694c:	91 83       	std	Z+1, r25	; 0x01
    694e:	80 83       	st	Z, r24
    6950:	de 01       	movw	r26, r28
    6952:	ad 59       	subi	r26, 0x9D	; 157
    6954:	bf 4f       	sbci	r27, 0xFF	; 255
    6956:	fe 01       	movw	r30, r28
    6958:	e9 59       	subi	r30, 0x99	; 153
    695a:	ff 4f       	sbci	r31, 0xFF	; 255
    695c:	80 81       	ld	r24, Z
    695e:	91 81       	ldd	r25, Z+1	; 0x01
    6960:	11 96       	adiw	r26, 0x01	; 1
    6962:	9c 93       	st	X, r25
    6964:	8e 93       	st	-X, r24
    6966:	fe 01       	movw	r30, r28
    6968:	ed 59       	subi	r30, 0x9D	; 157
    696a:	ff 4f       	sbci	r31, 0xFF	; 255
    696c:	80 81       	ld	r24, Z
    696e:	91 81       	ldd	r25, Z+1	; 0x01
    6970:	01 97       	sbiw	r24, 0x01	; 1
    6972:	f1 f7       	brne	.-4      	; 0x6970 <main+0x1c4>
    6974:	fe 01       	movw	r30, r28
    6976:	ed 59       	subi	r30, 0x9D	; 157
    6978:	ff 4f       	sbci	r31, 0xFF	; 255
    697a:	91 83       	std	Z+1, r25	; 0x01
    697c:	80 83       	st	Z, r24
		_delay_ms(30);

		if (Init_Adderss != 0)
    697e:	fe 01       	movw	r30, r28
    6980:	ea 58       	subi	r30, 0x8A	; 138
    6982:	ff 4f       	sbci	r31, 0xFF	; 255
    6984:	80 81       	ld	r24, Z
    6986:	88 23       	and	r24, r24
    6988:	09 f4       	brne	.+2      	; 0x698c <main+0x1e0>
    698a:	a0 c1       	rjmp	.+832    	; 0x6ccc <main+0x520>
		{
			i = 2;
    698c:	fe 01       	movw	r30, r28
    698e:	eb 58       	subi	r30, 0x8B	; 139
    6990:	ff 4f       	sbci	r31, 0xFF	; 255
    6992:	82 e0       	ldi	r24, 0x02	; 2
    6994:	80 83       	st	Z, r24
    6996:	8e c1       	rjmp	.+796    	; 0x6cb4 <main+0x508>
			while (i <= 5)
			{
				temp = i * 2;
    6998:	fe 01       	movw	r30, r28
    699a:	eb 58       	subi	r30, 0x8B	; 139
    699c:	ff 4f       	sbci	r31, 0xFF	; 255
    699e:	80 81       	ld	r24, Z
    69a0:	88 2f       	mov	r24, r24
    69a2:	90 e0       	ldi	r25, 0x00	; 0
    69a4:	88 0f       	add	r24, r24
    69a6:	99 1f       	adc	r25, r25
    69a8:	fe 01       	movw	r30, r28
    69aa:	ec 58       	subi	r30, 0x8C	; 140
    69ac:	ff 4f       	sbci	r31, 0xFF	; 255
    69ae:	80 83       	st	Z, r24
				// first 4 byte for ADMIN
				HEEPROM_enWriteByte(temp, 0); //& 4 6 8 10
    69b0:	fe 01       	movw	r30, r28
    69b2:	ec 58       	subi	r30, 0x8C	; 140
    69b4:	ff 4f       	sbci	r31, 0xFF	; 255
    69b6:	80 81       	ld	r24, Z
    69b8:	88 2f       	mov	r24, r24
    69ba:	90 e0       	ldi	r25, 0x00	; 0
    69bc:	60 e0       	ldi	r22, 0x00	; 0
    69be:	0e 94 0e 27 	call	0x4e1c	; 0x4e1c <HEEPROM_enWriteByte>
    69c2:	fe 01       	movw	r30, r28
    69c4:	e1 5a       	subi	r30, 0xA1	; 161
    69c6:	ff 4f       	sbci	r31, 0xFF	; 255
    69c8:	80 e0       	ldi	r24, 0x00	; 0
    69ca:	90 e0       	ldi	r25, 0x00	; 0
    69cc:	a0 ef       	ldi	r26, 0xF0	; 240
    69ce:	b1 e4       	ldi	r27, 0x41	; 65
    69d0:	80 83       	st	Z, r24
    69d2:	91 83       	std	Z+1, r25	; 0x01
    69d4:	a2 83       	std	Z+2, r26	; 0x02
    69d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    69d8:	8e 01       	movw	r16, r28
    69da:	05 5a       	subi	r16, 0xA5	; 165
    69dc:	1f 4f       	sbci	r17, 0xFF	; 255
    69de:	fe 01       	movw	r30, r28
    69e0:	e1 5a       	subi	r30, 0xA1	; 161
    69e2:	ff 4f       	sbci	r31, 0xFF	; 255
    69e4:	60 81       	ld	r22, Z
    69e6:	71 81       	ldd	r23, Z+1	; 0x01
    69e8:	82 81       	ldd	r24, Z+2	; 0x02
    69ea:	93 81       	ldd	r25, Z+3	; 0x03
    69ec:	20 e0       	ldi	r18, 0x00	; 0
    69ee:	30 e0       	ldi	r19, 0x00	; 0
    69f0:	4a e7       	ldi	r20, 0x7A	; 122
    69f2:	55 e4       	ldi	r21, 0x45	; 69
    69f4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    69f8:	dc 01       	movw	r26, r24
    69fa:	cb 01       	movw	r24, r22
    69fc:	f8 01       	movw	r30, r16
    69fe:	80 83       	st	Z, r24
    6a00:	91 83       	std	Z+1, r25	; 0x01
    6a02:	a2 83       	std	Z+2, r26	; 0x02
    6a04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6a06:	fe 01       	movw	r30, r28
    6a08:	e5 5a       	subi	r30, 0xA5	; 165
    6a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    6a0c:	60 81       	ld	r22, Z
    6a0e:	71 81       	ldd	r23, Z+1	; 0x01
    6a10:	82 81       	ldd	r24, Z+2	; 0x02
    6a12:	93 81       	ldd	r25, Z+3	; 0x03
    6a14:	20 e0       	ldi	r18, 0x00	; 0
    6a16:	30 e0       	ldi	r19, 0x00	; 0
    6a18:	40 e8       	ldi	r20, 0x80	; 128
    6a1a:	5f e3       	ldi	r21, 0x3F	; 63
    6a1c:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    6a20:	88 23       	and	r24, r24
    6a22:	44 f4       	brge	.+16     	; 0x6a34 <main+0x288>
		__ticks = 1;
    6a24:	fe 01       	movw	r30, r28
    6a26:	e7 5a       	subi	r30, 0xA7	; 167
    6a28:	ff 4f       	sbci	r31, 0xFF	; 255
    6a2a:	81 e0       	ldi	r24, 0x01	; 1
    6a2c:	90 e0       	ldi	r25, 0x00	; 0
    6a2e:	91 83       	std	Z+1, r25	; 0x01
    6a30:	80 83       	st	Z, r24
    6a32:	64 c0       	rjmp	.+200    	; 0x6afc <main+0x350>
	else if (__tmp > 65535)
    6a34:	fe 01       	movw	r30, r28
    6a36:	e5 5a       	subi	r30, 0xA5	; 165
    6a38:	ff 4f       	sbci	r31, 0xFF	; 255
    6a3a:	60 81       	ld	r22, Z
    6a3c:	71 81       	ldd	r23, Z+1	; 0x01
    6a3e:	82 81       	ldd	r24, Z+2	; 0x02
    6a40:	93 81       	ldd	r25, Z+3	; 0x03
    6a42:	20 e0       	ldi	r18, 0x00	; 0
    6a44:	3f ef       	ldi	r19, 0xFF	; 255
    6a46:	4f e7       	ldi	r20, 0x7F	; 127
    6a48:	57 e4       	ldi	r21, 0x47	; 71
    6a4a:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    6a4e:	18 16       	cp	r1, r24
    6a50:	0c f0       	brlt	.+2      	; 0x6a54 <main+0x2a8>
    6a52:	43 c0       	rjmp	.+134    	; 0x6ada <main+0x32e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6a54:	fe 01       	movw	r30, r28
    6a56:	e1 5a       	subi	r30, 0xA1	; 161
    6a58:	ff 4f       	sbci	r31, 0xFF	; 255
    6a5a:	60 81       	ld	r22, Z
    6a5c:	71 81       	ldd	r23, Z+1	; 0x01
    6a5e:	82 81       	ldd	r24, Z+2	; 0x02
    6a60:	93 81       	ldd	r25, Z+3	; 0x03
    6a62:	20 e0       	ldi	r18, 0x00	; 0
    6a64:	30 e0       	ldi	r19, 0x00	; 0
    6a66:	40 e2       	ldi	r20, 0x20	; 32
    6a68:	51 e4       	ldi	r21, 0x41	; 65
    6a6a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    6a6e:	dc 01       	movw	r26, r24
    6a70:	cb 01       	movw	r24, r22
    6a72:	8e 01       	movw	r16, r28
    6a74:	07 5a       	subi	r16, 0xA7	; 167
    6a76:	1f 4f       	sbci	r17, 0xFF	; 255
    6a78:	bc 01       	movw	r22, r24
    6a7a:	cd 01       	movw	r24, r26
    6a7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a80:	dc 01       	movw	r26, r24
    6a82:	cb 01       	movw	r24, r22
    6a84:	f8 01       	movw	r30, r16
    6a86:	91 83       	std	Z+1, r25	; 0x01
    6a88:	80 83       	st	Z, r24
    6a8a:	1f c0       	rjmp	.+62     	; 0x6aca <main+0x31e>
    6a8c:	fe 01       	movw	r30, r28
    6a8e:	e9 5a       	subi	r30, 0xA9	; 169
    6a90:	ff 4f       	sbci	r31, 0xFF	; 255
    6a92:	80 e9       	ldi	r24, 0x90	; 144
    6a94:	91 e0       	ldi	r25, 0x01	; 1
    6a96:	91 83       	std	Z+1, r25	; 0x01
    6a98:	80 83       	st	Z, r24
    6a9a:	fe 01       	movw	r30, r28
    6a9c:	e9 5a       	subi	r30, 0xA9	; 169
    6a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    6aa0:	80 81       	ld	r24, Z
    6aa2:	91 81       	ldd	r25, Z+1	; 0x01
    6aa4:	01 97       	sbiw	r24, 0x01	; 1
    6aa6:	f1 f7       	brne	.-4      	; 0x6aa4 <main+0x2f8>
    6aa8:	fe 01       	movw	r30, r28
    6aaa:	e9 5a       	subi	r30, 0xA9	; 169
    6aac:	ff 4f       	sbci	r31, 0xFF	; 255
    6aae:	91 83       	std	Z+1, r25	; 0x01
    6ab0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6ab2:	de 01       	movw	r26, r28
    6ab4:	a7 5a       	subi	r26, 0xA7	; 167
    6ab6:	bf 4f       	sbci	r27, 0xFF	; 255
    6ab8:	fe 01       	movw	r30, r28
    6aba:	e7 5a       	subi	r30, 0xA7	; 167
    6abc:	ff 4f       	sbci	r31, 0xFF	; 255
    6abe:	80 81       	ld	r24, Z
    6ac0:	91 81       	ldd	r25, Z+1	; 0x01
    6ac2:	01 97       	sbiw	r24, 0x01	; 1
    6ac4:	11 96       	adiw	r26, 0x01	; 1
    6ac6:	9c 93       	st	X, r25
    6ac8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6aca:	fe 01       	movw	r30, r28
    6acc:	e7 5a       	subi	r30, 0xA7	; 167
    6ace:	ff 4f       	sbci	r31, 0xFF	; 255
    6ad0:	80 81       	ld	r24, Z
    6ad2:	91 81       	ldd	r25, Z+1	; 0x01
    6ad4:	00 97       	sbiw	r24, 0x00	; 0
    6ad6:	d1 f6       	brne	.-76     	; 0x6a8c <main+0x2e0>
    6ad8:	27 c0       	rjmp	.+78     	; 0x6b28 <main+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6ada:	8e 01       	movw	r16, r28
    6adc:	07 5a       	subi	r16, 0xA7	; 167
    6ade:	1f 4f       	sbci	r17, 0xFF	; 255
    6ae0:	fe 01       	movw	r30, r28
    6ae2:	e5 5a       	subi	r30, 0xA5	; 165
    6ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    6ae6:	60 81       	ld	r22, Z
    6ae8:	71 81       	ldd	r23, Z+1	; 0x01
    6aea:	82 81       	ldd	r24, Z+2	; 0x02
    6aec:	93 81       	ldd	r25, Z+3	; 0x03
    6aee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6af2:	dc 01       	movw	r26, r24
    6af4:	cb 01       	movw	r24, r22
    6af6:	f8 01       	movw	r30, r16
    6af8:	91 83       	std	Z+1, r25	; 0x01
    6afa:	80 83       	st	Z, r24
    6afc:	de 01       	movw	r26, r28
    6afe:	ab 5a       	subi	r26, 0xAB	; 171
    6b00:	bf 4f       	sbci	r27, 0xFF	; 255
    6b02:	fe 01       	movw	r30, r28
    6b04:	e7 5a       	subi	r30, 0xA7	; 167
    6b06:	ff 4f       	sbci	r31, 0xFF	; 255
    6b08:	80 81       	ld	r24, Z
    6b0a:	91 81       	ldd	r25, Z+1	; 0x01
    6b0c:	8d 93       	st	X+, r24
    6b0e:	9c 93       	st	X, r25
    6b10:	fe 01       	movw	r30, r28
    6b12:	eb 5a       	subi	r30, 0xAB	; 171
    6b14:	ff 4f       	sbci	r31, 0xFF	; 255
    6b16:	80 81       	ld	r24, Z
    6b18:	91 81       	ldd	r25, Z+1	; 0x01
    6b1a:	01 97       	sbiw	r24, 0x01	; 1
    6b1c:	f1 f7       	brne	.-4      	; 0x6b1a <main+0x36e>
    6b1e:	fe 01       	movw	r30, r28
    6b20:	eb 5a       	subi	r30, 0xAB	; 171
    6b22:	ff 4f       	sbci	r31, 0xFF	; 255
    6b24:	91 83       	std	Z+1, r25	; 0x01
    6b26:	80 83       	st	Z, r24
				_delay_ms(30);

				// Second 4 byte for GUEST
				HEEPROM_enWriteByte(temp + 8, 0); //& 12 13 14 16
    6b28:	fe 01       	movw	r30, r28
    6b2a:	ec 58       	subi	r30, 0x8C	; 140
    6b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    6b2e:	80 81       	ld	r24, Z
    6b30:	88 2f       	mov	r24, r24
    6b32:	90 e0       	ldi	r25, 0x00	; 0
    6b34:	08 96       	adiw	r24, 0x08	; 8
    6b36:	60 e0       	ldi	r22, 0x00	; 0
    6b38:	0e 94 0e 27 	call	0x4e1c	; 0x4e1c <HEEPROM_enWriteByte>
    6b3c:	fe 01       	movw	r30, r28
    6b3e:	ef 5a       	subi	r30, 0xAF	; 175
    6b40:	ff 4f       	sbci	r31, 0xFF	; 255
    6b42:	80 e0       	ldi	r24, 0x00	; 0
    6b44:	90 e0       	ldi	r25, 0x00	; 0
    6b46:	a0 ef       	ldi	r26, 0xF0	; 240
    6b48:	b1 e4       	ldi	r27, 0x41	; 65
    6b4a:	80 83       	st	Z, r24
    6b4c:	91 83       	std	Z+1, r25	; 0x01
    6b4e:	a2 83       	std	Z+2, r26	; 0x02
    6b50:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6b52:	8e 01       	movw	r16, r28
    6b54:	03 5b       	subi	r16, 0xB3	; 179
    6b56:	1f 4f       	sbci	r17, 0xFF	; 255
    6b58:	fe 01       	movw	r30, r28
    6b5a:	ef 5a       	subi	r30, 0xAF	; 175
    6b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    6b5e:	60 81       	ld	r22, Z
    6b60:	71 81       	ldd	r23, Z+1	; 0x01
    6b62:	82 81       	ldd	r24, Z+2	; 0x02
    6b64:	93 81       	ldd	r25, Z+3	; 0x03
    6b66:	20 e0       	ldi	r18, 0x00	; 0
    6b68:	30 e0       	ldi	r19, 0x00	; 0
    6b6a:	4a e7       	ldi	r20, 0x7A	; 122
    6b6c:	55 e4       	ldi	r21, 0x45	; 69
    6b6e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    6b72:	dc 01       	movw	r26, r24
    6b74:	cb 01       	movw	r24, r22
    6b76:	f8 01       	movw	r30, r16
    6b78:	80 83       	st	Z, r24
    6b7a:	91 83       	std	Z+1, r25	; 0x01
    6b7c:	a2 83       	std	Z+2, r26	; 0x02
    6b7e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6b80:	fe 01       	movw	r30, r28
    6b82:	e3 5b       	subi	r30, 0xB3	; 179
    6b84:	ff 4f       	sbci	r31, 0xFF	; 255
    6b86:	60 81       	ld	r22, Z
    6b88:	71 81       	ldd	r23, Z+1	; 0x01
    6b8a:	82 81       	ldd	r24, Z+2	; 0x02
    6b8c:	93 81       	ldd	r25, Z+3	; 0x03
    6b8e:	20 e0       	ldi	r18, 0x00	; 0
    6b90:	30 e0       	ldi	r19, 0x00	; 0
    6b92:	40 e8       	ldi	r20, 0x80	; 128
    6b94:	5f e3       	ldi	r21, 0x3F	; 63
    6b96:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    6b9a:	88 23       	and	r24, r24
    6b9c:	44 f4       	brge	.+16     	; 0x6bae <main+0x402>
		__ticks = 1;
    6b9e:	fe 01       	movw	r30, r28
    6ba0:	e5 5b       	subi	r30, 0xB5	; 181
    6ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    6ba4:	81 e0       	ldi	r24, 0x01	; 1
    6ba6:	90 e0       	ldi	r25, 0x00	; 0
    6ba8:	91 83       	std	Z+1, r25	; 0x01
    6baa:	80 83       	st	Z, r24
    6bac:	64 c0       	rjmp	.+200    	; 0x6c76 <main+0x4ca>
	else if (__tmp > 65535)
    6bae:	fe 01       	movw	r30, r28
    6bb0:	e3 5b       	subi	r30, 0xB3	; 179
    6bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    6bb4:	60 81       	ld	r22, Z
    6bb6:	71 81       	ldd	r23, Z+1	; 0x01
    6bb8:	82 81       	ldd	r24, Z+2	; 0x02
    6bba:	93 81       	ldd	r25, Z+3	; 0x03
    6bbc:	20 e0       	ldi	r18, 0x00	; 0
    6bbe:	3f ef       	ldi	r19, 0xFF	; 255
    6bc0:	4f e7       	ldi	r20, 0x7F	; 127
    6bc2:	57 e4       	ldi	r21, 0x47	; 71
    6bc4:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    6bc8:	18 16       	cp	r1, r24
    6bca:	0c f0       	brlt	.+2      	; 0x6bce <main+0x422>
    6bcc:	43 c0       	rjmp	.+134    	; 0x6c54 <main+0x4a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6bce:	fe 01       	movw	r30, r28
    6bd0:	ef 5a       	subi	r30, 0xAF	; 175
    6bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    6bd4:	60 81       	ld	r22, Z
    6bd6:	71 81       	ldd	r23, Z+1	; 0x01
    6bd8:	82 81       	ldd	r24, Z+2	; 0x02
    6bda:	93 81       	ldd	r25, Z+3	; 0x03
    6bdc:	20 e0       	ldi	r18, 0x00	; 0
    6bde:	30 e0       	ldi	r19, 0x00	; 0
    6be0:	40 e2       	ldi	r20, 0x20	; 32
    6be2:	51 e4       	ldi	r21, 0x41	; 65
    6be4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    6be8:	dc 01       	movw	r26, r24
    6bea:	cb 01       	movw	r24, r22
    6bec:	8e 01       	movw	r16, r28
    6bee:	05 5b       	subi	r16, 0xB5	; 181
    6bf0:	1f 4f       	sbci	r17, 0xFF	; 255
    6bf2:	bc 01       	movw	r22, r24
    6bf4:	cd 01       	movw	r24, r26
    6bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6bfa:	dc 01       	movw	r26, r24
    6bfc:	cb 01       	movw	r24, r22
    6bfe:	f8 01       	movw	r30, r16
    6c00:	91 83       	std	Z+1, r25	; 0x01
    6c02:	80 83       	st	Z, r24
    6c04:	1f c0       	rjmp	.+62     	; 0x6c44 <main+0x498>
    6c06:	fe 01       	movw	r30, r28
    6c08:	e7 5b       	subi	r30, 0xB7	; 183
    6c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    6c0c:	80 e9       	ldi	r24, 0x90	; 144
    6c0e:	91 e0       	ldi	r25, 0x01	; 1
    6c10:	91 83       	std	Z+1, r25	; 0x01
    6c12:	80 83       	st	Z, r24
    6c14:	fe 01       	movw	r30, r28
    6c16:	e7 5b       	subi	r30, 0xB7	; 183
    6c18:	ff 4f       	sbci	r31, 0xFF	; 255
    6c1a:	80 81       	ld	r24, Z
    6c1c:	91 81       	ldd	r25, Z+1	; 0x01
    6c1e:	01 97       	sbiw	r24, 0x01	; 1
    6c20:	f1 f7       	brne	.-4      	; 0x6c1e <main+0x472>
    6c22:	fe 01       	movw	r30, r28
    6c24:	e7 5b       	subi	r30, 0xB7	; 183
    6c26:	ff 4f       	sbci	r31, 0xFF	; 255
    6c28:	91 83       	std	Z+1, r25	; 0x01
    6c2a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6c2c:	de 01       	movw	r26, r28
    6c2e:	a5 5b       	subi	r26, 0xB5	; 181
    6c30:	bf 4f       	sbci	r27, 0xFF	; 255
    6c32:	fe 01       	movw	r30, r28
    6c34:	e5 5b       	subi	r30, 0xB5	; 181
    6c36:	ff 4f       	sbci	r31, 0xFF	; 255
    6c38:	80 81       	ld	r24, Z
    6c3a:	91 81       	ldd	r25, Z+1	; 0x01
    6c3c:	01 97       	sbiw	r24, 0x01	; 1
    6c3e:	11 96       	adiw	r26, 0x01	; 1
    6c40:	9c 93       	st	X, r25
    6c42:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6c44:	fe 01       	movw	r30, r28
    6c46:	e5 5b       	subi	r30, 0xB5	; 181
    6c48:	ff 4f       	sbci	r31, 0xFF	; 255
    6c4a:	80 81       	ld	r24, Z
    6c4c:	91 81       	ldd	r25, Z+1	; 0x01
    6c4e:	00 97       	sbiw	r24, 0x00	; 0
    6c50:	d1 f6       	brne	.-76     	; 0x6c06 <main+0x45a>
    6c52:	27 c0       	rjmp	.+78     	; 0x6ca2 <main+0x4f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6c54:	8e 01       	movw	r16, r28
    6c56:	05 5b       	subi	r16, 0xB5	; 181
    6c58:	1f 4f       	sbci	r17, 0xFF	; 255
    6c5a:	fe 01       	movw	r30, r28
    6c5c:	e3 5b       	subi	r30, 0xB3	; 179
    6c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    6c60:	60 81       	ld	r22, Z
    6c62:	71 81       	ldd	r23, Z+1	; 0x01
    6c64:	82 81       	ldd	r24, Z+2	; 0x02
    6c66:	93 81       	ldd	r25, Z+3	; 0x03
    6c68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6c6c:	dc 01       	movw	r26, r24
    6c6e:	cb 01       	movw	r24, r22
    6c70:	f8 01       	movw	r30, r16
    6c72:	91 83       	std	Z+1, r25	; 0x01
    6c74:	80 83       	st	Z, r24
    6c76:	de 01       	movw	r26, r28
    6c78:	a9 5b       	subi	r26, 0xB9	; 185
    6c7a:	bf 4f       	sbci	r27, 0xFF	; 255
    6c7c:	fe 01       	movw	r30, r28
    6c7e:	e5 5b       	subi	r30, 0xB5	; 181
    6c80:	ff 4f       	sbci	r31, 0xFF	; 255
    6c82:	80 81       	ld	r24, Z
    6c84:	91 81       	ldd	r25, Z+1	; 0x01
    6c86:	8d 93       	st	X+, r24
    6c88:	9c 93       	st	X, r25
    6c8a:	fe 01       	movw	r30, r28
    6c8c:	e9 5b       	subi	r30, 0xB9	; 185
    6c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    6c90:	80 81       	ld	r24, Z
    6c92:	91 81       	ldd	r25, Z+1	; 0x01
    6c94:	01 97       	sbiw	r24, 0x01	; 1
    6c96:	f1 f7       	brne	.-4      	; 0x6c94 <main+0x4e8>
    6c98:	fe 01       	movw	r30, r28
    6c9a:	e9 5b       	subi	r30, 0xB9	; 185
    6c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    6c9e:	91 83       	std	Z+1, r25	; 0x01
    6ca0:	80 83       	st	Z, r24
				_delay_ms(30);
				i++;
    6ca2:	de 01       	movw	r26, r28
    6ca4:	ab 58       	subi	r26, 0x8B	; 139
    6ca6:	bf 4f       	sbci	r27, 0xFF	; 255
    6ca8:	fe 01       	movw	r30, r28
    6caa:	eb 58       	subi	r30, 0x8B	; 139
    6cac:	ff 4f       	sbci	r31, 0xFF	; 255
    6cae:	80 81       	ld	r24, Z
    6cb0:	8f 5f       	subi	r24, 0xFF	; 255
    6cb2:	8c 93       	st	X, r24
		_delay_ms(30);

		if (Init_Adderss != 0)
		{
			i = 2;
			while (i <= 5)
    6cb4:	fe 01       	movw	r30, r28
    6cb6:	eb 58       	subi	r30, 0x8B	; 139
    6cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    6cba:	80 81       	ld	r24, Z
    6cbc:	86 30       	cpi	r24, 0x06	; 6
    6cbe:	08 f4       	brcc	.+2      	; 0x6cc2 <main+0x516>
    6cc0:	6b ce       	rjmp	.-810    	; 0x6998 <main+0x1ec>
				// Second 4 byte for GUEST
				HEEPROM_enWriteByte(temp + 8, 0); //& 12 13 14 16
				_delay_ms(30);
				i++;
			}
			EEPROM_state=EMPTY_EEPROM;
    6cc2:	fe 01       	movw	r30, r28
    6cc4:	ee 58       	subi	r30, 0x8E	; 142
    6cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    6cc8:	10 82       	st	Z, r1
    6cca:	05 c0       	rjmp	.+10     	; 0x6cd6 <main+0x52a>
		}
		else
		{
			EEPROM_state=NOT_EMPTY_EEPROM;
    6ccc:	fe 01       	movw	r30, r28
    6cce:	ee 58       	subi	r30, 0x8E	; 142
    6cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    6cd2:	81 e0       	ldi	r24, 0x01	; 1
    6cd4:	80 83       	st	Z, r24
		}

		/** Store data in variables **/

		i = 2;
    6cd6:	fe 01       	movw	r30, r28
    6cd8:	eb 58       	subi	r30, 0x8B	; 139
    6cda:	ff 4f       	sbci	r31, 0xFF	; 255
    6cdc:	82 e0       	ldi	r24, 0x02	; 2
    6cde:	80 83       	st	Z, r24
    6ce0:	59 c1       	rjmp	.+690    	; 0x6f94 <main+0x7e8>
		while (i <= 5)
		{
			temp = i * 2;
    6ce2:	fe 01       	movw	r30, r28
    6ce4:	eb 58       	subi	r30, 0x8B	; 139
    6ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    6ce8:	80 81       	ld	r24, Z
    6cea:	88 2f       	mov	r24, r24
    6cec:	90 e0       	ldi	r25, 0x00	; 0
    6cee:	88 0f       	add	r24, r24
    6cf0:	99 1f       	adc	r25, r25
    6cf2:	fe 01       	movw	r30, r28
    6cf4:	ec 58       	subi	r30, 0x8C	; 140
    6cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    6cf8:	80 83       	st	Z, r24
			// first 4 byte for ADMIN
			HEEPROM_enReadByte(temp, &AData_Adress); //& 4 6 8 10
    6cfa:	fe 01       	movw	r30, r28
    6cfc:	ec 58       	subi	r30, 0x8C	; 140
    6cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    6d00:	80 81       	ld	r24, Z
    6d02:	88 2f       	mov	r24, r24
    6d04:	90 e0       	ldi	r25, 0x00	; 0
    6d06:	9e 01       	movw	r18, r28
    6d08:	29 58       	subi	r18, 0x89	; 137
    6d0a:	3f 4f       	sbci	r19, 0xFF	; 255
    6d0c:	b9 01       	movw	r22, r18
    6d0e:	0e 94 68 27 	call	0x4ed0	; 0x4ed0 <HEEPROM_enReadByte>
    6d12:	fe 01       	movw	r30, r28
    6d14:	ed 5b       	subi	r30, 0xBD	; 189
    6d16:	ff 4f       	sbci	r31, 0xFF	; 255
    6d18:	80 e0       	ldi	r24, 0x00	; 0
    6d1a:	90 e0       	ldi	r25, 0x00	; 0
    6d1c:	a0 ef       	ldi	r26, 0xF0	; 240
    6d1e:	b1 e4       	ldi	r27, 0x41	; 65
    6d20:	80 83       	st	Z, r24
    6d22:	91 83       	std	Z+1, r25	; 0x01
    6d24:	a2 83       	std	Z+2, r26	; 0x02
    6d26:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6d28:	8e 01       	movw	r16, r28
    6d2a:	01 5c       	subi	r16, 0xC1	; 193
    6d2c:	1f 4f       	sbci	r17, 0xFF	; 255
    6d2e:	fe 01       	movw	r30, r28
    6d30:	ed 5b       	subi	r30, 0xBD	; 189
    6d32:	ff 4f       	sbci	r31, 0xFF	; 255
    6d34:	60 81       	ld	r22, Z
    6d36:	71 81       	ldd	r23, Z+1	; 0x01
    6d38:	82 81       	ldd	r24, Z+2	; 0x02
    6d3a:	93 81       	ldd	r25, Z+3	; 0x03
    6d3c:	20 e0       	ldi	r18, 0x00	; 0
    6d3e:	30 e0       	ldi	r19, 0x00	; 0
    6d40:	4a e7       	ldi	r20, 0x7A	; 122
    6d42:	55 e4       	ldi	r21, 0x45	; 69
    6d44:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    6d48:	dc 01       	movw	r26, r24
    6d4a:	cb 01       	movw	r24, r22
    6d4c:	f8 01       	movw	r30, r16
    6d4e:	80 83       	st	Z, r24
    6d50:	91 83       	std	Z+1, r25	; 0x01
    6d52:	a2 83       	std	Z+2, r26	; 0x02
    6d54:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6d56:	fe 01       	movw	r30, r28
    6d58:	ff 96       	adiw	r30, 0x3f	; 63
    6d5a:	60 81       	ld	r22, Z
    6d5c:	71 81       	ldd	r23, Z+1	; 0x01
    6d5e:	82 81       	ldd	r24, Z+2	; 0x02
    6d60:	93 81       	ldd	r25, Z+3	; 0x03
    6d62:	20 e0       	ldi	r18, 0x00	; 0
    6d64:	30 e0       	ldi	r19, 0x00	; 0
    6d66:	40 e8       	ldi	r20, 0x80	; 128
    6d68:	5f e3       	ldi	r21, 0x3F	; 63
    6d6a:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    6d6e:	88 23       	and	r24, r24
    6d70:	2c f4       	brge	.+10     	; 0x6d7c <main+0x5d0>
		__ticks = 1;
    6d72:	81 e0       	ldi	r24, 0x01	; 1
    6d74:	90 e0       	ldi	r25, 0x00	; 0
    6d76:	9e af       	std	Y+62, r25	; 0x3e
    6d78:	8d af       	std	Y+61, r24	; 0x3d
    6d7a:	46 c0       	rjmp	.+140    	; 0x6e08 <main+0x65c>
	else if (__tmp > 65535)
    6d7c:	fe 01       	movw	r30, r28
    6d7e:	ff 96       	adiw	r30, 0x3f	; 63
    6d80:	60 81       	ld	r22, Z
    6d82:	71 81       	ldd	r23, Z+1	; 0x01
    6d84:	82 81       	ldd	r24, Z+2	; 0x02
    6d86:	93 81       	ldd	r25, Z+3	; 0x03
    6d88:	20 e0       	ldi	r18, 0x00	; 0
    6d8a:	3f ef       	ldi	r19, 0xFF	; 255
    6d8c:	4f e7       	ldi	r20, 0x7F	; 127
    6d8e:	57 e4       	ldi	r21, 0x47	; 71
    6d90:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    6d94:	18 16       	cp	r1, r24
    6d96:	64 f5       	brge	.+88     	; 0x6df0 <main+0x644>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6d98:	fe 01       	movw	r30, r28
    6d9a:	ed 5b       	subi	r30, 0xBD	; 189
    6d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    6d9e:	60 81       	ld	r22, Z
    6da0:	71 81       	ldd	r23, Z+1	; 0x01
    6da2:	82 81       	ldd	r24, Z+2	; 0x02
    6da4:	93 81       	ldd	r25, Z+3	; 0x03
    6da6:	20 e0       	ldi	r18, 0x00	; 0
    6da8:	30 e0       	ldi	r19, 0x00	; 0
    6daa:	40 e2       	ldi	r20, 0x20	; 32
    6dac:	51 e4       	ldi	r21, 0x41	; 65
    6dae:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    6db2:	dc 01       	movw	r26, r24
    6db4:	cb 01       	movw	r24, r22
    6db6:	bc 01       	movw	r22, r24
    6db8:	cd 01       	movw	r24, r26
    6dba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6dbe:	dc 01       	movw	r26, r24
    6dc0:	cb 01       	movw	r24, r22
    6dc2:	9e af       	std	Y+62, r25	; 0x3e
    6dc4:	8d af       	std	Y+61, r24	; 0x3d
    6dc6:	0f c0       	rjmp	.+30     	; 0x6de6 <main+0x63a>
    6dc8:	80 e9       	ldi	r24, 0x90	; 144
    6dca:	91 e0       	ldi	r25, 0x01	; 1
    6dcc:	9c af       	std	Y+60, r25	; 0x3c
    6dce:	8b af       	std	Y+59, r24	; 0x3b
    6dd0:	8b ad       	ldd	r24, Y+59	; 0x3b
    6dd2:	9c ad       	ldd	r25, Y+60	; 0x3c
    6dd4:	01 97       	sbiw	r24, 0x01	; 1
    6dd6:	f1 f7       	brne	.-4      	; 0x6dd4 <main+0x628>
    6dd8:	9c af       	std	Y+60, r25	; 0x3c
    6dda:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6ddc:	8d ad       	ldd	r24, Y+61	; 0x3d
    6dde:	9e ad       	ldd	r25, Y+62	; 0x3e
    6de0:	01 97       	sbiw	r24, 0x01	; 1
    6de2:	9e af       	std	Y+62, r25	; 0x3e
    6de4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6de6:	8d ad       	ldd	r24, Y+61	; 0x3d
    6de8:	9e ad       	ldd	r25, Y+62	; 0x3e
    6dea:	00 97       	sbiw	r24, 0x00	; 0
    6dec:	69 f7       	brne	.-38     	; 0x6dc8 <main+0x61c>
    6dee:	16 c0       	rjmp	.+44     	; 0x6e1c <main+0x670>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6df0:	fe 01       	movw	r30, r28
    6df2:	ff 96       	adiw	r30, 0x3f	; 63
    6df4:	60 81       	ld	r22, Z
    6df6:	71 81       	ldd	r23, Z+1	; 0x01
    6df8:	82 81       	ldd	r24, Z+2	; 0x02
    6dfa:	93 81       	ldd	r25, Z+3	; 0x03
    6dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6e00:	dc 01       	movw	r26, r24
    6e02:	cb 01       	movw	r24, r22
    6e04:	9e af       	std	Y+62, r25	; 0x3e
    6e06:	8d af       	std	Y+61, r24	; 0x3d
    6e08:	8d ad       	ldd	r24, Y+61	; 0x3d
    6e0a:	9e ad       	ldd	r25, Y+62	; 0x3e
    6e0c:	9a af       	std	Y+58, r25	; 0x3a
    6e0e:	89 af       	std	Y+57, r24	; 0x39
    6e10:	89 ad       	ldd	r24, Y+57	; 0x39
    6e12:	9a ad       	ldd	r25, Y+58	; 0x3a
    6e14:	01 97       	sbiw	r24, 0x01	; 1
    6e16:	f1 f7       	brne	.-4      	; 0x6e14 <main+0x668>
    6e18:	9a af       	std	Y+58, r25	; 0x3a
    6e1a:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(30);
			AdminData = (AdminData * 10) + AData_Adress;
    6e1c:	80 91 4c 03 	lds	r24, 0x034C
    6e20:	90 91 4d 03 	lds	r25, 0x034D
    6e24:	9c 01       	movw	r18, r24
    6e26:	22 0f       	add	r18, r18
    6e28:	33 1f       	adc	r19, r19
    6e2a:	c9 01       	movw	r24, r18
    6e2c:	88 0f       	add	r24, r24
    6e2e:	99 1f       	adc	r25, r25
    6e30:	88 0f       	add	r24, r24
    6e32:	99 1f       	adc	r25, r25
    6e34:	28 0f       	add	r18, r24
    6e36:	39 1f       	adc	r19, r25
    6e38:	fe 01       	movw	r30, r28
    6e3a:	e9 58       	subi	r30, 0x89	; 137
    6e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    6e3e:	80 81       	ld	r24, Z
    6e40:	88 2f       	mov	r24, r24
    6e42:	90 e0       	ldi	r25, 0x00	; 0
    6e44:	82 0f       	add	r24, r18
    6e46:	93 1f       	adc	r25, r19
    6e48:	90 93 4d 03 	sts	0x034D, r25
    6e4c:	80 93 4c 03 	sts	0x034C, r24

			// Second 4 byte for GUEST
			HEEPROM_enReadByte(temp + 8, &GData_Adress); //& 12 13 14 16
    6e50:	fe 01       	movw	r30, r28
    6e52:	ec 58       	subi	r30, 0x8C	; 140
    6e54:	ff 4f       	sbci	r31, 0xFF	; 255
    6e56:	80 81       	ld	r24, Z
    6e58:	88 2f       	mov	r24, r24
    6e5a:	90 e0       	ldi	r25, 0x00	; 0
    6e5c:	08 96       	adiw	r24, 0x08	; 8
    6e5e:	9e 01       	movw	r18, r28
    6e60:	28 58       	subi	r18, 0x88	; 136
    6e62:	3f 4f       	sbci	r19, 0xFF	; 255
    6e64:	b9 01       	movw	r22, r18
    6e66:	0e 94 68 27 	call	0x4ed0	; 0x4ed0 <HEEPROM_enReadByte>
    6e6a:	80 e0       	ldi	r24, 0x00	; 0
    6e6c:	90 e0       	ldi	r25, 0x00	; 0
    6e6e:	a0 ef       	ldi	r26, 0xF0	; 240
    6e70:	b1 e4       	ldi	r27, 0x41	; 65
    6e72:	8d ab       	std	Y+53, r24	; 0x35
    6e74:	9e ab       	std	Y+54, r25	; 0x36
    6e76:	af ab       	std	Y+55, r26	; 0x37
    6e78:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6e7a:	6d a9       	ldd	r22, Y+53	; 0x35
    6e7c:	7e a9       	ldd	r23, Y+54	; 0x36
    6e7e:	8f a9       	ldd	r24, Y+55	; 0x37
    6e80:	98 ad       	ldd	r25, Y+56	; 0x38
    6e82:	20 e0       	ldi	r18, 0x00	; 0
    6e84:	30 e0       	ldi	r19, 0x00	; 0
    6e86:	4a e7       	ldi	r20, 0x7A	; 122
    6e88:	55 e4       	ldi	r21, 0x45	; 69
    6e8a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    6e8e:	dc 01       	movw	r26, r24
    6e90:	cb 01       	movw	r24, r22
    6e92:	89 ab       	std	Y+49, r24	; 0x31
    6e94:	9a ab       	std	Y+50, r25	; 0x32
    6e96:	ab ab       	std	Y+51, r26	; 0x33
    6e98:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    6e9a:	69 a9       	ldd	r22, Y+49	; 0x31
    6e9c:	7a a9       	ldd	r23, Y+50	; 0x32
    6e9e:	8b a9       	ldd	r24, Y+51	; 0x33
    6ea0:	9c a9       	ldd	r25, Y+52	; 0x34
    6ea2:	20 e0       	ldi	r18, 0x00	; 0
    6ea4:	30 e0       	ldi	r19, 0x00	; 0
    6ea6:	40 e8       	ldi	r20, 0x80	; 128
    6ea8:	5f e3       	ldi	r21, 0x3F	; 63
    6eaa:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    6eae:	88 23       	and	r24, r24
    6eb0:	2c f4       	brge	.+10     	; 0x6ebc <main+0x710>
		__ticks = 1;
    6eb2:	81 e0       	ldi	r24, 0x01	; 1
    6eb4:	90 e0       	ldi	r25, 0x00	; 0
    6eb6:	98 ab       	std	Y+48, r25	; 0x30
    6eb8:	8f a7       	std	Y+47, r24	; 0x2f
    6eba:	3f c0       	rjmp	.+126    	; 0x6f3a <main+0x78e>
	else if (__tmp > 65535)
    6ebc:	69 a9       	ldd	r22, Y+49	; 0x31
    6ebe:	7a a9       	ldd	r23, Y+50	; 0x32
    6ec0:	8b a9       	ldd	r24, Y+51	; 0x33
    6ec2:	9c a9       	ldd	r25, Y+52	; 0x34
    6ec4:	20 e0       	ldi	r18, 0x00	; 0
    6ec6:	3f ef       	ldi	r19, 0xFF	; 255
    6ec8:	4f e7       	ldi	r20, 0x7F	; 127
    6eca:	57 e4       	ldi	r21, 0x47	; 71
    6ecc:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    6ed0:	18 16       	cp	r1, r24
    6ed2:	4c f5       	brge	.+82     	; 0x6f26 <main+0x77a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6ed4:	6d a9       	ldd	r22, Y+53	; 0x35
    6ed6:	7e a9       	ldd	r23, Y+54	; 0x36
    6ed8:	8f a9       	ldd	r24, Y+55	; 0x37
    6eda:	98 ad       	ldd	r25, Y+56	; 0x38
    6edc:	20 e0       	ldi	r18, 0x00	; 0
    6ede:	30 e0       	ldi	r19, 0x00	; 0
    6ee0:	40 e2       	ldi	r20, 0x20	; 32
    6ee2:	51 e4       	ldi	r21, 0x41	; 65
    6ee4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    6ee8:	dc 01       	movw	r26, r24
    6eea:	cb 01       	movw	r24, r22
    6eec:	bc 01       	movw	r22, r24
    6eee:	cd 01       	movw	r24, r26
    6ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6ef4:	dc 01       	movw	r26, r24
    6ef6:	cb 01       	movw	r24, r22
    6ef8:	98 ab       	std	Y+48, r25	; 0x30
    6efa:	8f a7       	std	Y+47, r24	; 0x2f
    6efc:	0f c0       	rjmp	.+30     	; 0x6f1c <main+0x770>
    6efe:	80 e9       	ldi	r24, 0x90	; 144
    6f00:	91 e0       	ldi	r25, 0x01	; 1
    6f02:	9e a7       	std	Y+46, r25	; 0x2e
    6f04:	8d a7       	std	Y+45, r24	; 0x2d
    6f06:	8d a5       	ldd	r24, Y+45	; 0x2d
    6f08:	9e a5       	ldd	r25, Y+46	; 0x2e
    6f0a:	01 97       	sbiw	r24, 0x01	; 1
    6f0c:	f1 f7       	brne	.-4      	; 0x6f0a <main+0x75e>
    6f0e:	9e a7       	std	Y+46, r25	; 0x2e
    6f10:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6f12:	8f a5       	ldd	r24, Y+47	; 0x2f
    6f14:	98 a9       	ldd	r25, Y+48	; 0x30
    6f16:	01 97       	sbiw	r24, 0x01	; 1
    6f18:	98 ab       	std	Y+48, r25	; 0x30
    6f1a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6f1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    6f1e:	98 a9       	ldd	r25, Y+48	; 0x30
    6f20:	00 97       	sbiw	r24, 0x00	; 0
    6f22:	69 f7       	brne	.-38     	; 0x6efe <main+0x752>
    6f24:	14 c0       	rjmp	.+40     	; 0x6f4e <main+0x7a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6f26:	69 a9       	ldd	r22, Y+49	; 0x31
    6f28:	7a a9       	ldd	r23, Y+50	; 0x32
    6f2a:	8b a9       	ldd	r24, Y+51	; 0x33
    6f2c:	9c a9       	ldd	r25, Y+52	; 0x34
    6f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6f32:	dc 01       	movw	r26, r24
    6f34:	cb 01       	movw	r24, r22
    6f36:	98 ab       	std	Y+48, r25	; 0x30
    6f38:	8f a7       	std	Y+47, r24	; 0x2f
    6f3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    6f3c:	98 a9       	ldd	r25, Y+48	; 0x30
    6f3e:	9c a7       	std	Y+44, r25	; 0x2c
    6f40:	8b a7       	std	Y+43, r24	; 0x2b
    6f42:	8b a5       	ldd	r24, Y+43	; 0x2b
    6f44:	9c a5       	ldd	r25, Y+44	; 0x2c
    6f46:	01 97       	sbiw	r24, 0x01	; 1
    6f48:	f1 f7       	brne	.-4      	; 0x6f46 <main+0x79a>
    6f4a:	9c a7       	std	Y+44, r25	; 0x2c
    6f4c:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(30);
			GuestData = (GuestData * 10) + GData_Adress;
    6f4e:	80 91 4e 03 	lds	r24, 0x034E
    6f52:	90 91 4f 03 	lds	r25, 0x034F
    6f56:	9c 01       	movw	r18, r24
    6f58:	22 0f       	add	r18, r18
    6f5a:	33 1f       	adc	r19, r19
    6f5c:	c9 01       	movw	r24, r18
    6f5e:	88 0f       	add	r24, r24
    6f60:	99 1f       	adc	r25, r25
    6f62:	88 0f       	add	r24, r24
    6f64:	99 1f       	adc	r25, r25
    6f66:	28 0f       	add	r18, r24
    6f68:	39 1f       	adc	r19, r25
    6f6a:	fe 01       	movw	r30, r28
    6f6c:	e8 58       	subi	r30, 0x88	; 136
    6f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    6f70:	80 81       	ld	r24, Z
    6f72:	88 2f       	mov	r24, r24
    6f74:	90 e0       	ldi	r25, 0x00	; 0
    6f76:	82 0f       	add	r24, r18
    6f78:	93 1f       	adc	r25, r19
    6f7a:	90 93 4f 03 	sts	0x034F, r25
    6f7e:	80 93 4e 03 	sts	0x034E, r24
			i++;
    6f82:	de 01       	movw	r26, r28
    6f84:	ab 58       	subi	r26, 0x8B	; 139
    6f86:	bf 4f       	sbci	r27, 0xFF	; 255
    6f88:	fe 01       	movw	r30, r28
    6f8a:	eb 58       	subi	r30, 0x8B	; 139
    6f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    6f8e:	80 81       	ld	r24, Z
    6f90:	8f 5f       	subi	r24, 0xFF	; 255
    6f92:	8c 93       	st	X, r24
		}

		/** Store data in variables **/

		i = 2;
		while (i <= 5)
    6f94:	fe 01       	movw	r30, r28
    6f96:	eb 58       	subi	r30, 0x8B	; 139
    6f98:	ff 4f       	sbci	r31, 0xFF	; 255
    6f9a:	80 81       	ld	r24, Z
    6f9c:	86 30       	cpi	r24, 0x06	; 6
    6f9e:	08 f4       	brcc	.+2      	; 0x6fa2 <main+0x7f6>
    6fa0:	a0 ce       	rjmp	.-704    	; 0x6ce2 <main+0x536>

	/***************************** PERIODIC CODE *****************************/
	while(1)
	{
		/** Ultrasonic condition **/
		HUltrasonic_enStartReading(TRIGG_PIN, &Distance);
    6fa2:	21 e5       	ldi	r18, 0x51	; 81
    6fa4:	33 e0       	ldi	r19, 0x03	; 3
    6fa6:	85 e2       	ldi	r24, 0x25	; 37
    6fa8:	b9 01       	movw	r22, r18
    6faa:	0e 94 6d 17 	call	0x2eda	; 0x2eda <HUltrasonic_enStartReading>
		if (Distance <= 30)
    6fae:	80 91 51 03 	lds	r24, 0x0351
    6fb2:	90 91 52 03 	lds	r25, 0x0352
    6fb6:	a0 91 53 03 	lds	r26, 0x0353
    6fba:	b0 91 54 03 	lds	r27, 0x0354
    6fbe:	8f 31       	cpi	r24, 0x1F	; 31
    6fc0:	91 05       	cpc	r25, r1
    6fc2:	a1 05       	cpc	r26, r1
    6fc4:	b1 05       	cpc	r27, r1
    6fc6:	08 f0       	brcs	.+2      	; 0x6fca <main+0x81e>
    6fc8:	11 c2       	rjmp	.+1058   	; 0x73ec <main+0xc40>
		{
			HLCD_ClearDisplay();
    6fca:	0e 94 b5 23 	call	0x476a	; 0x476a <HLCD_ClearDisplay>
			if(welcome_flag==0)
    6fce:	fe 01       	movw	r30, r28
    6fd0:	ef 58       	subi	r30, 0x8F	; 143
    6fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    6fd4:	80 81       	ld	r24, Z
    6fd6:	88 23       	and	r24, r24
    6fd8:	09 f0       	breq	.+2      	; 0x6fdc <main+0x830>
    6fda:	85 c0       	rjmp	.+266    	; 0x70e6 <main+0x93a>
			{
		        /** Welcome screen **/
				HLCD_SendString("Welcome to smart");
    6fdc:	84 eb       	ldi	r24, 0xB4	; 180
    6fde:	91 e0       	ldi	r25, 0x01	; 1
    6fe0:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
				HLCD_gotoXY(2, 1);
    6fe4:	82 e0       	ldi	r24, 0x02	; 2
    6fe6:	61 e0       	ldi	r22, 0x01	; 1
    6fe8:	0e 94 12 25 	call	0x4a24	; 0x4a24 <HLCD_gotoXY>
				HLCD_SendString("home system");
    6fec:	85 ec       	ldi	r24, 0xC5	; 197
    6fee:	91 e0       	ldi	r25, 0x01	; 1
    6ff0:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>
    6ff4:	80 e0       	ldi	r24, 0x00	; 0
    6ff6:	90 e0       	ldi	r25, 0x00	; 0
    6ff8:	aa ef       	ldi	r26, 0xFA	; 250
    6ffa:	b3 e4       	ldi	r27, 0x43	; 67
    6ffc:	8f a3       	std	Y+39, r24	; 0x27
    6ffe:	98 a7       	std	Y+40, r25	; 0x28
    7000:	a9 a7       	std	Y+41, r26	; 0x29
    7002:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7004:	6f a1       	ldd	r22, Y+39	; 0x27
    7006:	78 a5       	ldd	r23, Y+40	; 0x28
    7008:	89 a5       	ldd	r24, Y+41	; 0x29
    700a:	9a a5       	ldd	r25, Y+42	; 0x2a
    700c:	20 e0       	ldi	r18, 0x00	; 0
    700e:	30 e0       	ldi	r19, 0x00	; 0
    7010:	4a e7       	ldi	r20, 0x7A	; 122
    7012:	55 e4       	ldi	r21, 0x45	; 69
    7014:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    7018:	dc 01       	movw	r26, r24
    701a:	cb 01       	movw	r24, r22
    701c:	8b a3       	std	Y+35, r24	; 0x23
    701e:	9c a3       	std	Y+36, r25	; 0x24
    7020:	ad a3       	std	Y+37, r26	; 0x25
    7022:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    7024:	6b a1       	ldd	r22, Y+35	; 0x23
    7026:	7c a1       	ldd	r23, Y+36	; 0x24
    7028:	8d a1       	ldd	r24, Y+37	; 0x25
    702a:	9e a1       	ldd	r25, Y+38	; 0x26
    702c:	20 e0       	ldi	r18, 0x00	; 0
    702e:	30 e0       	ldi	r19, 0x00	; 0
    7030:	40 e8       	ldi	r20, 0x80	; 128
    7032:	5f e3       	ldi	r21, 0x3F	; 63
    7034:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    7038:	88 23       	and	r24, r24
    703a:	2c f4       	brge	.+10     	; 0x7046 <main+0x89a>
		__ticks = 1;
    703c:	81 e0       	ldi	r24, 0x01	; 1
    703e:	90 e0       	ldi	r25, 0x00	; 0
    7040:	9a a3       	std	Y+34, r25	; 0x22
    7042:	89 a3       	std	Y+33, r24	; 0x21
    7044:	3f c0       	rjmp	.+126    	; 0x70c4 <main+0x918>
	else if (__tmp > 65535)
    7046:	6b a1       	ldd	r22, Y+35	; 0x23
    7048:	7c a1       	ldd	r23, Y+36	; 0x24
    704a:	8d a1       	ldd	r24, Y+37	; 0x25
    704c:	9e a1       	ldd	r25, Y+38	; 0x26
    704e:	20 e0       	ldi	r18, 0x00	; 0
    7050:	3f ef       	ldi	r19, 0xFF	; 255
    7052:	4f e7       	ldi	r20, 0x7F	; 127
    7054:	57 e4       	ldi	r21, 0x47	; 71
    7056:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    705a:	18 16       	cp	r1, r24
    705c:	4c f5       	brge	.+82     	; 0x70b0 <main+0x904>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    705e:	6f a1       	ldd	r22, Y+39	; 0x27
    7060:	78 a5       	ldd	r23, Y+40	; 0x28
    7062:	89 a5       	ldd	r24, Y+41	; 0x29
    7064:	9a a5       	ldd	r25, Y+42	; 0x2a
    7066:	20 e0       	ldi	r18, 0x00	; 0
    7068:	30 e0       	ldi	r19, 0x00	; 0
    706a:	40 e2       	ldi	r20, 0x20	; 32
    706c:	51 e4       	ldi	r21, 0x41	; 65
    706e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    7072:	dc 01       	movw	r26, r24
    7074:	cb 01       	movw	r24, r22
    7076:	bc 01       	movw	r22, r24
    7078:	cd 01       	movw	r24, r26
    707a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    707e:	dc 01       	movw	r26, r24
    7080:	cb 01       	movw	r24, r22
    7082:	9a a3       	std	Y+34, r25	; 0x22
    7084:	89 a3       	std	Y+33, r24	; 0x21
    7086:	0f c0       	rjmp	.+30     	; 0x70a6 <main+0x8fa>
    7088:	80 e9       	ldi	r24, 0x90	; 144
    708a:	91 e0       	ldi	r25, 0x01	; 1
    708c:	98 a3       	std	Y+32, r25	; 0x20
    708e:	8f 8f       	std	Y+31, r24	; 0x1f
    7090:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7092:	98 a1       	ldd	r25, Y+32	; 0x20
    7094:	01 97       	sbiw	r24, 0x01	; 1
    7096:	f1 f7       	brne	.-4      	; 0x7094 <main+0x8e8>
    7098:	98 a3       	std	Y+32, r25	; 0x20
    709a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    709c:	89 a1       	ldd	r24, Y+33	; 0x21
    709e:	9a a1       	ldd	r25, Y+34	; 0x22
    70a0:	01 97       	sbiw	r24, 0x01	; 1
    70a2:	9a a3       	std	Y+34, r25	; 0x22
    70a4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    70a6:	89 a1       	ldd	r24, Y+33	; 0x21
    70a8:	9a a1       	ldd	r25, Y+34	; 0x22
    70aa:	00 97       	sbiw	r24, 0x00	; 0
    70ac:	69 f7       	brne	.-38     	; 0x7088 <main+0x8dc>
    70ae:	14 c0       	rjmp	.+40     	; 0x70d8 <main+0x92c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    70b0:	6b a1       	ldd	r22, Y+35	; 0x23
    70b2:	7c a1       	ldd	r23, Y+36	; 0x24
    70b4:	8d a1       	ldd	r24, Y+37	; 0x25
    70b6:	9e a1       	ldd	r25, Y+38	; 0x26
    70b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    70bc:	dc 01       	movw	r26, r24
    70be:	cb 01       	movw	r24, r22
    70c0:	9a a3       	std	Y+34, r25	; 0x22
    70c2:	89 a3       	std	Y+33, r24	; 0x21
    70c4:	89 a1       	ldd	r24, Y+33	; 0x21
    70c6:	9a a1       	ldd	r25, Y+34	; 0x22
    70c8:	9e 8f       	std	Y+30, r25	; 0x1e
    70ca:	8d 8f       	std	Y+29, r24	; 0x1d
    70cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    70ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    70d0:	01 97       	sbiw	r24, 0x01	; 1
    70d2:	f1 f7       	brne	.-4      	; 0x70d0 <main+0x924>
    70d4:	9e 8f       	std	Y+30, r25	; 0x1e
    70d6:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(500);
				HLCD_ClearDisplay();
    70d8:	0e 94 b5 23 	call	0x476a	; 0x476a <HLCD_ClearDisplay>
				welcome_flag=1;
    70dc:	fe 01       	movw	r30, r28
    70de:	ef 58       	subi	r30, 0x8F	; 143
    70e0:	ff 4f       	sbci	r31, 0xFF	; 255
    70e2:	81 e0       	ldi	r24, 0x01	; 1
    70e4:	80 83       	st	Z, r24
			}

			if(EEPROM_state==EMPTY_EEPROM)
    70e6:	fe 01       	movw	r30, r28
    70e8:	ee 58       	subi	r30, 0x8E	; 142
    70ea:	ff 4f       	sbci	r31, 0xFF	; 255
    70ec:	80 81       	ld	r24, Z
    70ee:	88 23       	and	r24, r24
    70f0:	09 f0       	breq	.+2      	; 0x70f4 <main+0x948>
    70f2:	5b c1       	rjmp	.+694    	; 0x73aa <main+0xbfe>
			{
				/** First Time Case **/

				CreatPassward();
    70f4:	0e 94 9f 2b 	call	0x573e	; 0x573e <CreatPassward>
				i = 2;
    70f8:	fe 01       	movw	r30, r28
    70fa:	eb 58       	subi	r30, 0x8B	; 139
    70fc:	ff 4f       	sbci	r31, 0xFF	; 255
    70fe:	82 e0       	ldi	r24, 0x02	; 2
    7100:	80 83       	st	Z, r24
    7102:	46 c1       	rjmp	.+652    	; 0x7390 <main+0xbe4>
				while (i <= 5)
				{
					temp = i * 2;
    7104:	fe 01       	movw	r30, r28
    7106:	eb 58       	subi	r30, 0x8B	; 139
    7108:	ff 4f       	sbci	r31, 0xFF	; 255
    710a:	80 81       	ld	r24, Z
    710c:	88 2f       	mov	r24, r24
    710e:	90 e0       	ldi	r25, 0x00	; 0
    7110:	88 0f       	add	r24, r24
    7112:	99 1f       	adc	r25, r25
    7114:	fe 01       	movw	r30, r28
    7116:	ec 58       	subi	r30, 0x8C	; 140
    7118:	ff 4f       	sbci	r31, 0xFF	; 255
    711a:	80 83       	st	Z, r24
					// first 4 byte for ADMIN
					HEEPROM_enReadByte(temp, &AData_Adress); //& 4 6 8 10
    711c:	fe 01       	movw	r30, r28
    711e:	ec 58       	subi	r30, 0x8C	; 140
    7120:	ff 4f       	sbci	r31, 0xFF	; 255
    7122:	80 81       	ld	r24, Z
    7124:	88 2f       	mov	r24, r24
    7126:	90 e0       	ldi	r25, 0x00	; 0
    7128:	9e 01       	movw	r18, r28
    712a:	29 58       	subi	r18, 0x89	; 137
    712c:	3f 4f       	sbci	r19, 0xFF	; 255
    712e:	b9 01       	movw	r22, r18
    7130:	0e 94 68 27 	call	0x4ed0	; 0x4ed0 <HEEPROM_enReadByte>
    7134:	80 e0       	ldi	r24, 0x00	; 0
    7136:	90 e0       	ldi	r25, 0x00	; 0
    7138:	a0 ef       	ldi	r26, 0xF0	; 240
    713a:	b1 e4       	ldi	r27, 0x41	; 65
    713c:	89 8f       	std	Y+25, r24	; 0x19
    713e:	9a 8f       	std	Y+26, r25	; 0x1a
    7140:	ab 8f       	std	Y+27, r26	; 0x1b
    7142:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7144:	69 8d       	ldd	r22, Y+25	; 0x19
    7146:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7148:	8b 8d       	ldd	r24, Y+27	; 0x1b
    714a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    714c:	20 e0       	ldi	r18, 0x00	; 0
    714e:	30 e0       	ldi	r19, 0x00	; 0
    7150:	4a e7       	ldi	r20, 0x7A	; 122
    7152:	55 e4       	ldi	r21, 0x45	; 69
    7154:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    7158:	dc 01       	movw	r26, r24
    715a:	cb 01       	movw	r24, r22
    715c:	8d 8b       	std	Y+21, r24	; 0x15
    715e:	9e 8b       	std	Y+22, r25	; 0x16
    7160:	af 8b       	std	Y+23, r26	; 0x17
    7162:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    7164:	6d 89       	ldd	r22, Y+21	; 0x15
    7166:	7e 89       	ldd	r23, Y+22	; 0x16
    7168:	8f 89       	ldd	r24, Y+23	; 0x17
    716a:	98 8d       	ldd	r25, Y+24	; 0x18
    716c:	20 e0       	ldi	r18, 0x00	; 0
    716e:	30 e0       	ldi	r19, 0x00	; 0
    7170:	40 e8       	ldi	r20, 0x80	; 128
    7172:	5f e3       	ldi	r21, 0x3F	; 63
    7174:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    7178:	88 23       	and	r24, r24
    717a:	2c f4       	brge	.+10     	; 0x7186 <main+0x9da>
		__ticks = 1;
    717c:	81 e0       	ldi	r24, 0x01	; 1
    717e:	90 e0       	ldi	r25, 0x00	; 0
    7180:	9c 8b       	std	Y+20, r25	; 0x14
    7182:	8b 8b       	std	Y+19, r24	; 0x13
    7184:	3f c0       	rjmp	.+126    	; 0x7204 <main+0xa58>
	else if (__tmp > 65535)
    7186:	6d 89       	ldd	r22, Y+21	; 0x15
    7188:	7e 89       	ldd	r23, Y+22	; 0x16
    718a:	8f 89       	ldd	r24, Y+23	; 0x17
    718c:	98 8d       	ldd	r25, Y+24	; 0x18
    718e:	20 e0       	ldi	r18, 0x00	; 0
    7190:	3f ef       	ldi	r19, 0xFF	; 255
    7192:	4f e7       	ldi	r20, 0x7F	; 127
    7194:	57 e4       	ldi	r21, 0x47	; 71
    7196:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    719a:	18 16       	cp	r1, r24
    719c:	4c f5       	brge	.+82     	; 0x71f0 <main+0xa44>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    719e:	69 8d       	ldd	r22, Y+25	; 0x19
    71a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    71a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    71a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    71a6:	20 e0       	ldi	r18, 0x00	; 0
    71a8:	30 e0       	ldi	r19, 0x00	; 0
    71aa:	40 e2       	ldi	r20, 0x20	; 32
    71ac:	51 e4       	ldi	r21, 0x41	; 65
    71ae:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    71b2:	dc 01       	movw	r26, r24
    71b4:	cb 01       	movw	r24, r22
    71b6:	bc 01       	movw	r22, r24
    71b8:	cd 01       	movw	r24, r26
    71ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    71be:	dc 01       	movw	r26, r24
    71c0:	cb 01       	movw	r24, r22
    71c2:	9c 8b       	std	Y+20, r25	; 0x14
    71c4:	8b 8b       	std	Y+19, r24	; 0x13
    71c6:	0f c0       	rjmp	.+30     	; 0x71e6 <main+0xa3a>
    71c8:	80 e9       	ldi	r24, 0x90	; 144
    71ca:	91 e0       	ldi	r25, 0x01	; 1
    71cc:	9a 8b       	std	Y+18, r25	; 0x12
    71ce:	89 8b       	std	Y+17, r24	; 0x11
    71d0:	89 89       	ldd	r24, Y+17	; 0x11
    71d2:	9a 89       	ldd	r25, Y+18	; 0x12
    71d4:	01 97       	sbiw	r24, 0x01	; 1
    71d6:	f1 f7       	brne	.-4      	; 0x71d4 <main+0xa28>
    71d8:	9a 8b       	std	Y+18, r25	; 0x12
    71da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    71dc:	8b 89       	ldd	r24, Y+19	; 0x13
    71de:	9c 89       	ldd	r25, Y+20	; 0x14
    71e0:	01 97       	sbiw	r24, 0x01	; 1
    71e2:	9c 8b       	std	Y+20, r25	; 0x14
    71e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    71e6:	8b 89       	ldd	r24, Y+19	; 0x13
    71e8:	9c 89       	ldd	r25, Y+20	; 0x14
    71ea:	00 97       	sbiw	r24, 0x00	; 0
    71ec:	69 f7       	brne	.-38     	; 0x71c8 <main+0xa1c>
    71ee:	14 c0       	rjmp	.+40     	; 0x7218 <main+0xa6c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    71f0:	6d 89       	ldd	r22, Y+21	; 0x15
    71f2:	7e 89       	ldd	r23, Y+22	; 0x16
    71f4:	8f 89       	ldd	r24, Y+23	; 0x17
    71f6:	98 8d       	ldd	r25, Y+24	; 0x18
    71f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    71fc:	dc 01       	movw	r26, r24
    71fe:	cb 01       	movw	r24, r22
    7200:	9c 8b       	std	Y+20, r25	; 0x14
    7202:	8b 8b       	std	Y+19, r24	; 0x13
    7204:	8b 89       	ldd	r24, Y+19	; 0x13
    7206:	9c 89       	ldd	r25, Y+20	; 0x14
    7208:	98 8b       	std	Y+16, r25	; 0x10
    720a:	8f 87       	std	Y+15, r24	; 0x0f
    720c:	8f 85       	ldd	r24, Y+15	; 0x0f
    720e:	98 89       	ldd	r25, Y+16	; 0x10
    7210:	01 97       	sbiw	r24, 0x01	; 1
    7212:	f1 f7       	brne	.-4      	; 0x7210 <main+0xa64>
    7214:	98 8b       	std	Y+16, r25	; 0x10
    7216:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(30);
					AdminData = (AdminData * 10) + AData_Adress;
    7218:	80 91 4c 03 	lds	r24, 0x034C
    721c:	90 91 4d 03 	lds	r25, 0x034D
    7220:	9c 01       	movw	r18, r24
    7222:	22 0f       	add	r18, r18
    7224:	33 1f       	adc	r19, r19
    7226:	c9 01       	movw	r24, r18
    7228:	88 0f       	add	r24, r24
    722a:	99 1f       	adc	r25, r25
    722c:	88 0f       	add	r24, r24
    722e:	99 1f       	adc	r25, r25
    7230:	28 0f       	add	r18, r24
    7232:	39 1f       	adc	r19, r25
    7234:	fe 01       	movw	r30, r28
    7236:	e9 58       	subi	r30, 0x89	; 137
    7238:	ff 4f       	sbci	r31, 0xFF	; 255
    723a:	80 81       	ld	r24, Z
    723c:	88 2f       	mov	r24, r24
    723e:	90 e0       	ldi	r25, 0x00	; 0
    7240:	82 0f       	add	r24, r18
    7242:	93 1f       	adc	r25, r19
    7244:	90 93 4d 03 	sts	0x034D, r25
    7248:	80 93 4c 03 	sts	0x034C, r24

					// Second 4 byte for GUEST
					HEEPROM_enReadByte(temp + 8, &GData_Adress); //& 12 13 14 16
    724c:	fe 01       	movw	r30, r28
    724e:	ec 58       	subi	r30, 0x8C	; 140
    7250:	ff 4f       	sbci	r31, 0xFF	; 255
    7252:	80 81       	ld	r24, Z
    7254:	88 2f       	mov	r24, r24
    7256:	90 e0       	ldi	r25, 0x00	; 0
    7258:	08 96       	adiw	r24, 0x08	; 8
    725a:	9e 01       	movw	r18, r28
    725c:	28 58       	subi	r18, 0x88	; 136
    725e:	3f 4f       	sbci	r19, 0xFF	; 255
    7260:	b9 01       	movw	r22, r18
    7262:	0e 94 68 27 	call	0x4ed0	; 0x4ed0 <HEEPROM_enReadByte>
    7266:	80 e0       	ldi	r24, 0x00	; 0
    7268:	90 e0       	ldi	r25, 0x00	; 0
    726a:	a0 ef       	ldi	r26, 0xF0	; 240
    726c:	b1 e4       	ldi	r27, 0x41	; 65
    726e:	8b 87       	std	Y+11, r24	; 0x0b
    7270:	9c 87       	std	Y+12, r25	; 0x0c
    7272:	ad 87       	std	Y+13, r26	; 0x0d
    7274:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7276:	6b 85       	ldd	r22, Y+11	; 0x0b
    7278:	7c 85       	ldd	r23, Y+12	; 0x0c
    727a:	8d 85       	ldd	r24, Y+13	; 0x0d
    727c:	9e 85       	ldd	r25, Y+14	; 0x0e
    727e:	20 e0       	ldi	r18, 0x00	; 0
    7280:	30 e0       	ldi	r19, 0x00	; 0
    7282:	4a e7       	ldi	r20, 0x7A	; 122
    7284:	55 e4       	ldi	r21, 0x45	; 69
    7286:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    728a:	dc 01       	movw	r26, r24
    728c:	cb 01       	movw	r24, r22
    728e:	8f 83       	std	Y+7, r24	; 0x07
    7290:	98 87       	std	Y+8, r25	; 0x08
    7292:	a9 87       	std	Y+9, r26	; 0x09
    7294:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    7296:	6f 81       	ldd	r22, Y+7	; 0x07
    7298:	78 85       	ldd	r23, Y+8	; 0x08
    729a:	89 85       	ldd	r24, Y+9	; 0x09
    729c:	9a 85       	ldd	r25, Y+10	; 0x0a
    729e:	20 e0       	ldi	r18, 0x00	; 0
    72a0:	30 e0       	ldi	r19, 0x00	; 0
    72a2:	40 e8       	ldi	r20, 0x80	; 128
    72a4:	5f e3       	ldi	r21, 0x3F	; 63
    72a6:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    72aa:	88 23       	and	r24, r24
    72ac:	2c f4       	brge	.+10     	; 0x72b8 <main+0xb0c>
		__ticks = 1;
    72ae:	81 e0       	ldi	r24, 0x01	; 1
    72b0:	90 e0       	ldi	r25, 0x00	; 0
    72b2:	9e 83       	std	Y+6, r25	; 0x06
    72b4:	8d 83       	std	Y+5, r24	; 0x05
    72b6:	3f c0       	rjmp	.+126    	; 0x7336 <main+0xb8a>
	else if (__tmp > 65535)
    72b8:	6f 81       	ldd	r22, Y+7	; 0x07
    72ba:	78 85       	ldd	r23, Y+8	; 0x08
    72bc:	89 85       	ldd	r24, Y+9	; 0x09
    72be:	9a 85       	ldd	r25, Y+10	; 0x0a
    72c0:	20 e0       	ldi	r18, 0x00	; 0
    72c2:	3f ef       	ldi	r19, 0xFF	; 255
    72c4:	4f e7       	ldi	r20, 0x7F	; 127
    72c6:	57 e4       	ldi	r21, 0x47	; 71
    72c8:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    72cc:	18 16       	cp	r1, r24
    72ce:	4c f5       	brge	.+82     	; 0x7322 <main+0xb76>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    72d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    72d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    72d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    72d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    72d8:	20 e0       	ldi	r18, 0x00	; 0
    72da:	30 e0       	ldi	r19, 0x00	; 0
    72dc:	40 e2       	ldi	r20, 0x20	; 32
    72de:	51 e4       	ldi	r21, 0x41	; 65
    72e0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    72e4:	dc 01       	movw	r26, r24
    72e6:	cb 01       	movw	r24, r22
    72e8:	bc 01       	movw	r22, r24
    72ea:	cd 01       	movw	r24, r26
    72ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    72f0:	dc 01       	movw	r26, r24
    72f2:	cb 01       	movw	r24, r22
    72f4:	9e 83       	std	Y+6, r25	; 0x06
    72f6:	8d 83       	std	Y+5, r24	; 0x05
    72f8:	0f c0       	rjmp	.+30     	; 0x7318 <main+0xb6c>
    72fa:	80 e9       	ldi	r24, 0x90	; 144
    72fc:	91 e0       	ldi	r25, 0x01	; 1
    72fe:	9c 83       	std	Y+4, r25	; 0x04
    7300:	8b 83       	std	Y+3, r24	; 0x03
    7302:	8b 81       	ldd	r24, Y+3	; 0x03
    7304:	9c 81       	ldd	r25, Y+4	; 0x04
    7306:	01 97       	sbiw	r24, 0x01	; 1
    7308:	f1 f7       	brne	.-4      	; 0x7306 <main+0xb5a>
    730a:	9c 83       	std	Y+4, r25	; 0x04
    730c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    730e:	8d 81       	ldd	r24, Y+5	; 0x05
    7310:	9e 81       	ldd	r25, Y+6	; 0x06
    7312:	01 97       	sbiw	r24, 0x01	; 1
    7314:	9e 83       	std	Y+6, r25	; 0x06
    7316:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7318:	8d 81       	ldd	r24, Y+5	; 0x05
    731a:	9e 81       	ldd	r25, Y+6	; 0x06
    731c:	00 97       	sbiw	r24, 0x00	; 0
    731e:	69 f7       	brne	.-38     	; 0x72fa <main+0xb4e>
    7320:	14 c0       	rjmp	.+40     	; 0x734a <main+0xb9e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7322:	6f 81       	ldd	r22, Y+7	; 0x07
    7324:	78 85       	ldd	r23, Y+8	; 0x08
    7326:	89 85       	ldd	r24, Y+9	; 0x09
    7328:	9a 85       	ldd	r25, Y+10	; 0x0a
    732a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    732e:	dc 01       	movw	r26, r24
    7330:	cb 01       	movw	r24, r22
    7332:	9e 83       	std	Y+6, r25	; 0x06
    7334:	8d 83       	std	Y+5, r24	; 0x05
    7336:	8d 81       	ldd	r24, Y+5	; 0x05
    7338:	9e 81       	ldd	r25, Y+6	; 0x06
    733a:	9a 83       	std	Y+2, r25	; 0x02
    733c:	89 83       	std	Y+1, r24	; 0x01
    733e:	89 81       	ldd	r24, Y+1	; 0x01
    7340:	9a 81       	ldd	r25, Y+2	; 0x02
    7342:	01 97       	sbiw	r24, 0x01	; 1
    7344:	f1 f7       	brne	.-4      	; 0x7342 <main+0xb96>
    7346:	9a 83       	std	Y+2, r25	; 0x02
    7348:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(30);
					GuestData = (GuestData * 10) + GData_Adress;
    734a:	80 91 4e 03 	lds	r24, 0x034E
    734e:	90 91 4f 03 	lds	r25, 0x034F
    7352:	9c 01       	movw	r18, r24
    7354:	22 0f       	add	r18, r18
    7356:	33 1f       	adc	r19, r19
    7358:	c9 01       	movw	r24, r18
    735a:	88 0f       	add	r24, r24
    735c:	99 1f       	adc	r25, r25
    735e:	88 0f       	add	r24, r24
    7360:	99 1f       	adc	r25, r25
    7362:	28 0f       	add	r18, r24
    7364:	39 1f       	adc	r19, r25
    7366:	fe 01       	movw	r30, r28
    7368:	e8 58       	subi	r30, 0x88	; 136
    736a:	ff 4f       	sbci	r31, 0xFF	; 255
    736c:	80 81       	ld	r24, Z
    736e:	88 2f       	mov	r24, r24
    7370:	90 e0       	ldi	r25, 0x00	; 0
    7372:	82 0f       	add	r24, r18
    7374:	93 1f       	adc	r25, r19
    7376:	90 93 4f 03 	sts	0x034F, r25
    737a:	80 93 4e 03 	sts	0x034E, r24
					i++;
    737e:	de 01       	movw	r26, r28
    7380:	ab 58       	subi	r26, 0x8B	; 139
    7382:	bf 4f       	sbci	r27, 0xFF	; 255
    7384:	fe 01       	movw	r30, r28
    7386:	eb 58       	subi	r30, 0x8B	; 139
    7388:	ff 4f       	sbci	r31, 0xFF	; 255
    738a:	80 81       	ld	r24, Z
    738c:	8f 5f       	subi	r24, 0xFF	; 255
    738e:	8c 93       	st	X, r24
			{
				/** First Time Case **/

				CreatPassward();
				i = 2;
				while (i <= 5)
    7390:	fe 01       	movw	r30, r28
    7392:	eb 58       	subi	r30, 0x8B	; 139
    7394:	ff 4f       	sbci	r31, 0xFF	; 255
    7396:	80 81       	ld	r24, Z
    7398:	86 30       	cpi	r24, 0x06	; 6
    739a:	08 f4       	brcc	.+2      	; 0x739e <main+0xbf2>
    739c:	b3 ce       	rjmp	.-666    	; 0x7104 <main+0x958>
					HEEPROM_enReadByte(temp + 8, &GData_Adress); //& 12 13 14 16
					_delay_ms(30);
					GuestData = (GuestData * 10) + GData_Adress;
					i++;
				}
				EEPROM_state=NOT_EMPTY_EEPROM;
    739e:	fe 01       	movw	r30, r28
    73a0:	ee 58       	subi	r30, 0x8E	; 142
    73a2:	ff 4f       	sbci	r31, 0xFF	; 255
    73a4:	81 e0       	ldi	r24, 0x01	; 1
    73a6:	80 83       	st	Z, r24
    73a8:	fc cd       	rjmp	.-1032   	; 0x6fa2 <main+0x7f6>
			}
			else
			{
				/** Not First Time Case **/
				HLCD_ClearDisplay();
    73aa:	0e 94 b5 23 	call	0x476a	; 0x476a <HLCD_ClearDisplay>
				key = HKEYPAD_NO_PRESSED_KEY;
    73ae:	8f ef       	ldi	r24, 0xFF	; 255
    73b0:	80 93 ec 02 	sts	0x02EC, r24
				returnValue = 1;
    73b4:	fe 01       	movw	r30, r28
    73b6:	ed 58       	subi	r30, 0x8D	; 141
    73b8:	ff 4f       	sbci	r31, 0xFF	; 255
    73ba:	81 e0       	ldi	r24, 0x01	; 1
    73bc:	80 83       	st	Z, r24
    73be:	06 c0       	rjmp	.+12     	; 0x73cc <main+0xc20>
				while(returnValue != 0)
				{
					// /****** SELECT MODE ******
					//u8 ret = 1;
					returnValue = SelectMode();
    73c0:	0e 94 0f 2f 	call	0x5e1e	; 0x5e1e <SelectMode>
    73c4:	fe 01       	movw	r30, r28
    73c6:	ed 58       	subi	r30, 0x8D	; 141
    73c8:	ff 4f       	sbci	r31, 0xFF	; 255
    73ca:	80 83       	st	Z, r24
			{
				/** Not First Time Case **/
				HLCD_ClearDisplay();
				key = HKEYPAD_NO_PRESSED_KEY;
				returnValue = 1;
				while(returnValue != 0)
    73cc:	fe 01       	movw	r30, r28
    73ce:	ed 58       	subi	r30, 0x8D	; 141
    73d0:	ff 4f       	sbci	r31, 0xFF	; 255
    73d2:	80 81       	ld	r24, Z
    73d4:	88 23       	and	r24, r24
    73d6:	a1 f7       	brne	.-24     	; 0x73c0 <main+0xc14>
				{
					// /****** SELECT MODE ******
					//u8 ret = 1;
					returnValue = SelectMode();
				}
				if(timeout_flag == 1)
    73d8:	80 91 50 03 	lds	r24, 0x0350
    73dc:	81 30       	cpi	r24, 0x01	; 1
    73de:	09 f0       	breq	.+2      	; 0x73e2 <main+0xc36>
    73e0:	e0 cd       	rjmp	.-1088   	; 0x6fa2 <main+0x7f6>
				{
					SessionTime_TASK();
    73e2:	0e 94 7e 2e 	call	0x5cfc	; 0x5cfc <SessionTime_TASK>
					timeout_flag = 0;
    73e6:	10 92 50 03 	sts	0x0350, r1
    73ea:	db cd       	rjmp	.-1098   	; 0x6fa2 <main+0x7f6>


		}//if ultrasonice
		else
		{
			HLCD_ClearDisplay();
    73ec:	0e 94 b5 23 	call	0x476a	; 0x476a <HLCD_ClearDisplay>
			HLCD_SendString("SYSTEM IS OFF !!");
    73f0:	81 ed       	ldi	r24, 0xD1	; 209
    73f2:	91 e0       	ldi	r25, 0x01	; 1
    73f4:	0e 94 98 23 	call	0x4730	; 0x4730 <HLCD_SendString>

			welcome_flag=0;
    73f8:	fe 01       	movw	r30, r28
    73fa:	ef 58       	subi	r30, 0x8F	; 143
    73fc:	ff 4f       	sbci	r31, 0xFF	; 255
    73fe:	10 82       	st	Z, r1
    7400:	d0 cd       	rjmp	.-1120   	; 0x6fa2 <main+0x7f6>

00007402 <__mulsi3>:
    7402:	62 9f       	mul	r22, r18
    7404:	d0 01       	movw	r26, r0
    7406:	73 9f       	mul	r23, r19
    7408:	f0 01       	movw	r30, r0
    740a:	82 9f       	mul	r24, r18
    740c:	e0 0d       	add	r30, r0
    740e:	f1 1d       	adc	r31, r1
    7410:	64 9f       	mul	r22, r20
    7412:	e0 0d       	add	r30, r0
    7414:	f1 1d       	adc	r31, r1
    7416:	92 9f       	mul	r25, r18
    7418:	f0 0d       	add	r31, r0
    741a:	83 9f       	mul	r24, r19
    741c:	f0 0d       	add	r31, r0
    741e:	74 9f       	mul	r23, r20
    7420:	f0 0d       	add	r31, r0
    7422:	65 9f       	mul	r22, r21
    7424:	f0 0d       	add	r31, r0
    7426:	99 27       	eor	r25, r25
    7428:	72 9f       	mul	r23, r18
    742a:	b0 0d       	add	r27, r0
    742c:	e1 1d       	adc	r30, r1
    742e:	f9 1f       	adc	r31, r25
    7430:	63 9f       	mul	r22, r19
    7432:	b0 0d       	add	r27, r0
    7434:	e1 1d       	adc	r30, r1
    7436:	f9 1f       	adc	r31, r25
    7438:	bd 01       	movw	r22, r26
    743a:	cf 01       	movw	r24, r30
    743c:	11 24       	eor	r1, r1
    743e:	08 95       	ret

00007440 <__udivmodqi4>:
    7440:	99 1b       	sub	r25, r25
    7442:	79 e0       	ldi	r23, 0x09	; 9
    7444:	04 c0       	rjmp	.+8      	; 0x744e <__udivmodqi4_ep>

00007446 <__udivmodqi4_loop>:
    7446:	99 1f       	adc	r25, r25
    7448:	96 17       	cp	r25, r22
    744a:	08 f0       	brcs	.+2      	; 0x744e <__udivmodqi4_ep>
    744c:	96 1b       	sub	r25, r22

0000744e <__udivmodqi4_ep>:
    744e:	88 1f       	adc	r24, r24
    7450:	7a 95       	dec	r23
    7452:	c9 f7       	brne	.-14     	; 0x7446 <__udivmodqi4_loop>
    7454:	80 95       	com	r24
    7456:	08 95       	ret

00007458 <__udivmodhi4>:
    7458:	aa 1b       	sub	r26, r26
    745a:	bb 1b       	sub	r27, r27
    745c:	51 e1       	ldi	r21, 0x11	; 17
    745e:	07 c0       	rjmp	.+14     	; 0x746e <__udivmodhi4_ep>

00007460 <__udivmodhi4_loop>:
    7460:	aa 1f       	adc	r26, r26
    7462:	bb 1f       	adc	r27, r27
    7464:	a6 17       	cp	r26, r22
    7466:	b7 07       	cpc	r27, r23
    7468:	10 f0       	brcs	.+4      	; 0x746e <__udivmodhi4_ep>
    746a:	a6 1b       	sub	r26, r22
    746c:	b7 0b       	sbc	r27, r23

0000746e <__udivmodhi4_ep>:
    746e:	88 1f       	adc	r24, r24
    7470:	99 1f       	adc	r25, r25
    7472:	5a 95       	dec	r21
    7474:	a9 f7       	brne	.-22     	; 0x7460 <__udivmodhi4_loop>
    7476:	80 95       	com	r24
    7478:	90 95       	com	r25
    747a:	bc 01       	movw	r22, r24
    747c:	cd 01       	movw	r24, r26
    747e:	08 95       	ret

00007480 <__divmodhi4>:
    7480:	97 fb       	bst	r25, 7
    7482:	09 2e       	mov	r0, r25
    7484:	07 26       	eor	r0, r23
    7486:	0a d0       	rcall	.+20     	; 0x749c <__divmodhi4_neg1>
    7488:	77 fd       	sbrc	r23, 7
    748a:	04 d0       	rcall	.+8      	; 0x7494 <__divmodhi4_neg2>
    748c:	e5 df       	rcall	.-54     	; 0x7458 <__udivmodhi4>
    748e:	06 d0       	rcall	.+12     	; 0x749c <__divmodhi4_neg1>
    7490:	00 20       	and	r0, r0
    7492:	1a f4       	brpl	.+6      	; 0x749a <__divmodhi4_exit>

00007494 <__divmodhi4_neg2>:
    7494:	70 95       	com	r23
    7496:	61 95       	neg	r22
    7498:	7f 4f       	sbci	r23, 0xFF	; 255

0000749a <__divmodhi4_exit>:
    749a:	08 95       	ret

0000749c <__divmodhi4_neg1>:
    749c:	f6 f7       	brtc	.-4      	; 0x749a <__divmodhi4_exit>
    749e:	90 95       	com	r25
    74a0:	81 95       	neg	r24
    74a2:	9f 4f       	sbci	r25, 0xFF	; 255
    74a4:	08 95       	ret

000074a6 <__udivmodsi4>:
    74a6:	a1 e2       	ldi	r26, 0x21	; 33
    74a8:	1a 2e       	mov	r1, r26
    74aa:	aa 1b       	sub	r26, r26
    74ac:	bb 1b       	sub	r27, r27
    74ae:	fd 01       	movw	r30, r26
    74b0:	0d c0       	rjmp	.+26     	; 0x74cc <__udivmodsi4_ep>

000074b2 <__udivmodsi4_loop>:
    74b2:	aa 1f       	adc	r26, r26
    74b4:	bb 1f       	adc	r27, r27
    74b6:	ee 1f       	adc	r30, r30
    74b8:	ff 1f       	adc	r31, r31
    74ba:	a2 17       	cp	r26, r18
    74bc:	b3 07       	cpc	r27, r19
    74be:	e4 07       	cpc	r30, r20
    74c0:	f5 07       	cpc	r31, r21
    74c2:	20 f0       	brcs	.+8      	; 0x74cc <__udivmodsi4_ep>
    74c4:	a2 1b       	sub	r26, r18
    74c6:	b3 0b       	sbc	r27, r19
    74c8:	e4 0b       	sbc	r30, r20
    74ca:	f5 0b       	sbc	r31, r21

000074cc <__udivmodsi4_ep>:
    74cc:	66 1f       	adc	r22, r22
    74ce:	77 1f       	adc	r23, r23
    74d0:	88 1f       	adc	r24, r24
    74d2:	99 1f       	adc	r25, r25
    74d4:	1a 94       	dec	r1
    74d6:	69 f7       	brne	.-38     	; 0x74b2 <__udivmodsi4_loop>
    74d8:	60 95       	com	r22
    74da:	70 95       	com	r23
    74dc:	80 95       	com	r24
    74de:	90 95       	com	r25
    74e0:	9b 01       	movw	r18, r22
    74e2:	ac 01       	movw	r20, r24
    74e4:	bd 01       	movw	r22, r26
    74e6:	cf 01       	movw	r24, r30
    74e8:	08 95       	ret

000074ea <__divmodsi4>:
    74ea:	97 fb       	bst	r25, 7
    74ec:	09 2e       	mov	r0, r25
    74ee:	05 26       	eor	r0, r21
    74f0:	0e d0       	rcall	.+28     	; 0x750e <__divmodsi4_neg1>
    74f2:	57 fd       	sbrc	r21, 7
    74f4:	04 d0       	rcall	.+8      	; 0x74fe <__divmodsi4_neg2>
    74f6:	d7 df       	rcall	.-82     	; 0x74a6 <__udivmodsi4>
    74f8:	0a d0       	rcall	.+20     	; 0x750e <__divmodsi4_neg1>
    74fa:	00 1c       	adc	r0, r0
    74fc:	38 f4       	brcc	.+14     	; 0x750c <__divmodsi4_exit>

000074fe <__divmodsi4_neg2>:
    74fe:	50 95       	com	r21
    7500:	40 95       	com	r20
    7502:	30 95       	com	r19
    7504:	21 95       	neg	r18
    7506:	3f 4f       	sbci	r19, 0xFF	; 255
    7508:	4f 4f       	sbci	r20, 0xFF	; 255
    750a:	5f 4f       	sbci	r21, 0xFF	; 255

0000750c <__divmodsi4_exit>:
    750c:	08 95       	ret

0000750e <__divmodsi4_neg1>:
    750e:	f6 f7       	brtc	.-4      	; 0x750c <__divmodsi4_exit>
    7510:	90 95       	com	r25
    7512:	80 95       	com	r24
    7514:	70 95       	com	r23
    7516:	61 95       	neg	r22
    7518:	7f 4f       	sbci	r23, 0xFF	; 255
    751a:	8f 4f       	sbci	r24, 0xFF	; 255
    751c:	9f 4f       	sbci	r25, 0xFF	; 255
    751e:	08 95       	ret

00007520 <__prologue_saves__>:
    7520:	2f 92       	push	r2
    7522:	3f 92       	push	r3
    7524:	4f 92       	push	r4
    7526:	5f 92       	push	r5
    7528:	6f 92       	push	r6
    752a:	7f 92       	push	r7
    752c:	8f 92       	push	r8
    752e:	9f 92       	push	r9
    7530:	af 92       	push	r10
    7532:	bf 92       	push	r11
    7534:	cf 92       	push	r12
    7536:	df 92       	push	r13
    7538:	ef 92       	push	r14
    753a:	ff 92       	push	r15
    753c:	0f 93       	push	r16
    753e:	1f 93       	push	r17
    7540:	cf 93       	push	r28
    7542:	df 93       	push	r29
    7544:	cd b7       	in	r28, 0x3d	; 61
    7546:	de b7       	in	r29, 0x3e	; 62
    7548:	ca 1b       	sub	r28, r26
    754a:	db 0b       	sbc	r29, r27
    754c:	0f b6       	in	r0, 0x3f	; 63
    754e:	f8 94       	cli
    7550:	de bf       	out	0x3e, r29	; 62
    7552:	0f be       	out	0x3f, r0	; 63
    7554:	cd bf       	out	0x3d, r28	; 61
    7556:	09 94       	ijmp

00007558 <__epilogue_restores__>:
    7558:	2a 88       	ldd	r2, Y+18	; 0x12
    755a:	39 88       	ldd	r3, Y+17	; 0x11
    755c:	48 88       	ldd	r4, Y+16	; 0x10
    755e:	5f 84       	ldd	r5, Y+15	; 0x0f
    7560:	6e 84       	ldd	r6, Y+14	; 0x0e
    7562:	7d 84       	ldd	r7, Y+13	; 0x0d
    7564:	8c 84       	ldd	r8, Y+12	; 0x0c
    7566:	9b 84       	ldd	r9, Y+11	; 0x0b
    7568:	aa 84       	ldd	r10, Y+10	; 0x0a
    756a:	b9 84       	ldd	r11, Y+9	; 0x09
    756c:	c8 84       	ldd	r12, Y+8	; 0x08
    756e:	df 80       	ldd	r13, Y+7	; 0x07
    7570:	ee 80       	ldd	r14, Y+6	; 0x06
    7572:	fd 80       	ldd	r15, Y+5	; 0x05
    7574:	0c 81       	ldd	r16, Y+4	; 0x04
    7576:	1b 81       	ldd	r17, Y+3	; 0x03
    7578:	aa 81       	ldd	r26, Y+2	; 0x02
    757a:	b9 81       	ldd	r27, Y+1	; 0x01
    757c:	ce 0f       	add	r28, r30
    757e:	d1 1d       	adc	r29, r1
    7580:	0f b6       	in	r0, 0x3f	; 63
    7582:	f8 94       	cli
    7584:	de bf       	out	0x3e, r29	; 62
    7586:	0f be       	out	0x3f, r0	; 63
    7588:	cd bf       	out	0x3d, r28	; 61
    758a:	ed 01       	movw	r28, r26
    758c:	08 95       	ret

0000758e <ceil>:
    758e:	3b d0       	rcall	.+118    	; 0x7606 <__fp_trunc>
    7590:	80 f0       	brcs	.+32     	; 0x75b2 <ceil+0x24>
    7592:	9f 37       	cpi	r25, 0x7F	; 127
    7594:	40 f4       	brcc	.+16     	; 0x75a6 <ceil+0x18>
    7596:	91 11       	cpse	r25, r1
    7598:	0e f4       	brtc	.+2      	; 0x759c <ceil+0xe>
    759a:	4d c0       	rjmp	.+154    	; 0x7636 <__fp_szero>
    759c:	60 e0       	ldi	r22, 0x00	; 0
    759e:	70 e0       	ldi	r23, 0x00	; 0
    75a0:	80 e8       	ldi	r24, 0x80	; 128
    75a2:	9f e3       	ldi	r25, 0x3F	; 63
    75a4:	08 95       	ret
    75a6:	26 f0       	brts	.+8      	; 0x75b0 <ceil+0x22>
    75a8:	1b 16       	cp	r1, r27
    75aa:	61 1d       	adc	r22, r1
    75ac:	71 1d       	adc	r23, r1
    75ae:	81 1d       	adc	r24, r1
    75b0:	01 c0       	rjmp	.+2      	; 0x75b4 <__fp_mintl>
    75b2:	1b c0       	rjmp	.+54     	; 0x75ea <__fp_mpack>

000075b4 <__fp_mintl>:
    75b4:	88 23       	and	r24, r24
    75b6:	71 f4       	brne	.+28     	; 0x75d4 <__fp_mintl+0x20>
    75b8:	77 23       	and	r23, r23
    75ba:	21 f0       	breq	.+8      	; 0x75c4 <__fp_mintl+0x10>
    75bc:	98 50       	subi	r25, 0x08	; 8
    75be:	87 2b       	or	r24, r23
    75c0:	76 2f       	mov	r23, r22
    75c2:	07 c0       	rjmp	.+14     	; 0x75d2 <__fp_mintl+0x1e>
    75c4:	66 23       	and	r22, r22
    75c6:	11 f4       	brne	.+4      	; 0x75cc <__fp_mintl+0x18>
    75c8:	99 27       	eor	r25, r25
    75ca:	0d c0       	rjmp	.+26     	; 0x75e6 <__fp_mintl+0x32>
    75cc:	90 51       	subi	r25, 0x10	; 16
    75ce:	86 2b       	or	r24, r22
    75d0:	70 e0       	ldi	r23, 0x00	; 0
    75d2:	60 e0       	ldi	r22, 0x00	; 0
    75d4:	2a f0       	brmi	.+10     	; 0x75e0 <__fp_mintl+0x2c>
    75d6:	9a 95       	dec	r25
    75d8:	66 0f       	add	r22, r22
    75da:	77 1f       	adc	r23, r23
    75dc:	88 1f       	adc	r24, r24
    75de:	da f7       	brpl	.-10     	; 0x75d6 <__fp_mintl+0x22>
    75e0:	88 0f       	add	r24, r24
    75e2:	96 95       	lsr	r25
    75e4:	87 95       	ror	r24
    75e6:	97 f9       	bld	r25, 7
    75e8:	08 95       	ret

000075ea <__fp_mpack>:
    75ea:	9f 3f       	cpi	r25, 0xFF	; 255
    75ec:	31 f0       	breq	.+12     	; 0x75fa <__fp_mpack_finite+0xc>

000075ee <__fp_mpack_finite>:
    75ee:	91 50       	subi	r25, 0x01	; 1
    75f0:	20 f4       	brcc	.+8      	; 0x75fa <__fp_mpack_finite+0xc>
    75f2:	87 95       	ror	r24
    75f4:	77 95       	ror	r23
    75f6:	67 95       	ror	r22
    75f8:	b7 95       	ror	r27
    75fa:	88 0f       	add	r24, r24
    75fc:	91 1d       	adc	r25, r1
    75fe:	96 95       	lsr	r25
    7600:	87 95       	ror	r24
    7602:	97 f9       	bld	r25, 7
    7604:	08 95       	ret

00007606 <__fp_trunc>:
    7606:	25 d0       	rcall	.+74     	; 0x7652 <__fp_splitA>
    7608:	a0 f0       	brcs	.+40     	; 0x7632 <__fp_trunc+0x2c>
    760a:	be e7       	ldi	r27, 0x7E	; 126
    760c:	b9 17       	cp	r27, r25
    760e:	88 f4       	brcc	.+34     	; 0x7632 <__fp_trunc+0x2c>
    7610:	bb 27       	eor	r27, r27
    7612:	9f 38       	cpi	r25, 0x8F	; 143
    7614:	60 f4       	brcc	.+24     	; 0x762e <__fp_trunc+0x28>
    7616:	16 16       	cp	r1, r22
    7618:	b1 1d       	adc	r27, r1
    761a:	67 2f       	mov	r22, r23
    761c:	78 2f       	mov	r23, r24
    761e:	88 27       	eor	r24, r24
    7620:	98 5f       	subi	r25, 0xF8	; 248
    7622:	f7 cf       	rjmp	.-18     	; 0x7612 <__fp_trunc+0xc>
    7624:	86 95       	lsr	r24
    7626:	77 95       	ror	r23
    7628:	67 95       	ror	r22
    762a:	b1 1d       	adc	r27, r1
    762c:	93 95       	inc	r25
    762e:	96 39       	cpi	r25, 0x96	; 150
    7630:	c8 f3       	brcs	.-14     	; 0x7624 <__fp_trunc+0x1e>
    7632:	08 95       	ret

00007634 <__fp_zero>:
    7634:	e8 94       	clt

00007636 <__fp_szero>:
    7636:	bb 27       	eor	r27, r27
    7638:	66 27       	eor	r22, r22
    763a:	77 27       	eor	r23, r23
    763c:	cb 01       	movw	r24, r22
    763e:	97 f9       	bld	r25, 7
    7640:	08 95       	ret

00007642 <__fp_split3>:
    7642:	57 fd       	sbrc	r21, 7
    7644:	90 58       	subi	r25, 0x80	; 128
    7646:	44 0f       	add	r20, r20
    7648:	55 1f       	adc	r21, r21
    764a:	59 f0       	breq	.+22     	; 0x7662 <__fp_splitA+0x10>
    764c:	5f 3f       	cpi	r21, 0xFF	; 255
    764e:	71 f0       	breq	.+28     	; 0x766c <__fp_splitA+0x1a>
    7650:	47 95       	ror	r20

00007652 <__fp_splitA>:
    7652:	88 0f       	add	r24, r24
    7654:	97 fb       	bst	r25, 7
    7656:	99 1f       	adc	r25, r25
    7658:	61 f0       	breq	.+24     	; 0x7672 <__fp_splitA+0x20>
    765a:	9f 3f       	cpi	r25, 0xFF	; 255
    765c:	79 f0       	breq	.+30     	; 0x767c <__fp_splitA+0x2a>
    765e:	87 95       	ror	r24
    7660:	08 95       	ret
    7662:	12 16       	cp	r1, r18
    7664:	13 06       	cpc	r1, r19
    7666:	14 06       	cpc	r1, r20
    7668:	55 1f       	adc	r21, r21
    766a:	f2 cf       	rjmp	.-28     	; 0x7650 <__fp_split3+0xe>
    766c:	46 95       	lsr	r20
    766e:	f1 df       	rcall	.-30     	; 0x7652 <__fp_splitA>
    7670:	08 c0       	rjmp	.+16     	; 0x7682 <__fp_splitA+0x30>
    7672:	16 16       	cp	r1, r22
    7674:	17 06       	cpc	r1, r23
    7676:	18 06       	cpc	r1, r24
    7678:	99 1f       	adc	r25, r25
    767a:	f1 cf       	rjmp	.-30     	; 0x765e <__fp_splitA+0xc>
    767c:	86 95       	lsr	r24
    767e:	71 05       	cpc	r23, r1
    7680:	61 05       	cpc	r22, r1
    7682:	08 94       	sec
    7684:	08 95       	ret

00007686 <_exit>:
    7686:	f8 94       	cli

00007688 <__stop_program>:
    7688:	ff cf       	rjmp	.-2      	; 0x7688 <__stop_program>
