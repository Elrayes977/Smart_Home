
Final_project_MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006458  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000194  00800060  00006458  000064ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003b  008001f4  008001f4  00006680  2**0
                  ALLOC
  3 .stab         00007b24  00000000  00000000  00006680  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002ef7  00000000  00000000  0000e1a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  0001109b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000258  00000000  00000000  0001129b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000028f3  00000000  00000000  000114f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000168f  00000000  00000000  00013de6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000014df  00000000  00000000  00015475  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000220  00000000  00000000  00016954  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000357  00000000  00000000  00016b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000cfc  00000000  00000000  00016ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00017bc7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 48 11 	jmp	0x2290	; 0x2290 <__vector_1>
       8:	0c 94 7b 11 	jmp	0x22f6	; 0x22f6 <__vector_2>
       c:	0c 94 ae 11 	jmp	0x235c	; 0x235c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 cd 0e 	jmp	0x1d9a	; 0x1d9a <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 01 0f 	jmp	0x1e02	; 0x1e02 <__vector_9>
      28:	0c 94 f0 0a 	jmp	0x15e0	; 0x15e0 <__vector_10>
      2c:	0c 94 87 0a 	jmp	0x150e	; 0x150e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <__vector_13>
      38:	0c 94 57 0d 	jmp	0x1aae	; 0x1aae <__vector_14>
      3c:	0c 94 8a 0d 	jmp	0x1b14	; 0x1b14 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e5       	ldi	r30, 0x58	; 88
      68:	f4 e6       	ldi	r31, 0x64	; 100
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3f       	cpi	r26, 0xF4	; 244
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 ef       	ldi	r26, 0xF4	; 244
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 32       	cpi	r26, 0x2F	; 47
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 07 2c 	call	0x580e	; 0x580e <main>
      8a:	0c 94 2a 32 	jmp	0x6454	; 0x6454 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 9d 02 	call	0x53a	; 0x53a <__subsf3>
      be:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <__floatundisf>:
      ea:	a2 e0       	ldi	r26, 0x02	; 2
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 77 31 	jmp	0x62ee	; 0x62ee <__prologue_saves__>
      f6:	12 2f       	mov	r17, r18
      f8:	b3 2e       	mov	r11, r19
      fa:	a4 2e       	mov	r10, r20
      fc:	95 2e       	mov	r9, r21
      fe:	86 2e       	mov	r8, r22
     100:	37 2e       	mov	r3, r23
     102:	28 2e       	mov	r2, r24
     104:	9a 83       	std	Y+2, r25	; 0x02
     106:	c2 2e       	mov	r12, r18
     108:	d3 2e       	mov	r13, r19
     10a:	e4 2e       	mov	r14, r20
     10c:	f5 2e       	mov	r15, r21
     10e:	a7 01       	movw	r20, r14
     110:	96 01       	movw	r18, r12
     112:	60 e0       	ldi	r22, 0x00	; 0
     114:	70 e0       	ldi	r23, 0x00	; 0
     116:	80 e0       	ldi	r24, 0x00	; 0
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	21 17       	cp	r18, r17
     11c:	a1 f4       	brne	.+40     	; 0x146 <__floatundisf+0x5c>
     11e:	3b 15       	cp	r19, r11
     120:	91 f4       	brne	.+36     	; 0x146 <__floatundisf+0x5c>
     122:	4a 15       	cp	r20, r10
     124:	81 f4       	brne	.+32     	; 0x146 <__floatundisf+0x5c>
     126:	59 15       	cp	r21, r9
     128:	71 f4       	brne	.+28     	; 0x146 <__floatundisf+0x5c>
     12a:	68 15       	cp	r22, r8
     12c:	61 f4       	brne	.+24     	; 0x146 <__floatundisf+0x5c>
     12e:	73 15       	cp	r23, r3
     130:	51 f4       	brne	.+20     	; 0x146 <__floatundisf+0x5c>
     132:	82 15       	cp	r24, r2
     134:	41 f4       	brne	.+16     	; 0x146 <__floatundisf+0x5c>
     136:	aa 81       	ldd	r26, Y+2	; 0x02
     138:	9a 17       	cp	r25, r26
     13a:	29 f4       	brne	.+10     	; 0x146 <__floatundisf+0x5c>
     13c:	c7 01       	movw	r24, r14
     13e:	b6 01       	movw	r22, r12
     140:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatunsisf>
     144:	aa c0       	rjmp	.+340    	; 0x29a <__floatundisf+0x1b0>
     146:	21 2f       	mov	r18, r17
     148:	3b 2d       	mov	r19, r11
     14a:	4a 2d       	mov	r20, r10
     14c:	59 2d       	mov	r21, r9
     14e:	68 2d       	mov	r22, r8
     150:	73 2d       	mov	r23, r3
     152:	82 2d       	mov	r24, r2
     154:	9a 81       	ldd	r25, Y+2	; 0x02
     156:	00 e2       	ldi	r16, 0x20	; 32
     158:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__lshrdi3>
     15c:	c9 01       	movw	r24, r18
     15e:	da 01       	movw	r26, r20
     160:	80 30       	cpi	r24, 0x00	; 0
     162:	e0 e0       	ldi	r30, 0x00	; 0
     164:	9e 07       	cpc	r25, r30
     166:	e1 e0       	ldi	r30, 0x01	; 1
     168:	ae 07       	cpc	r26, r30
     16a:	e0 e0       	ldi	r30, 0x00	; 0
     16c:	be 07       	cpc	r27, r30
     16e:	80 f4       	brcc	.+32     	; 0x190 <__floatundisf+0xa6>
     170:	8f 3f       	cpi	r24, 0xFF	; 255
     172:	91 05       	cpc	r25, r1
     174:	a1 05       	cpc	r26, r1
     176:	b1 05       	cpc	r27, r1
     178:	31 f0       	breq	.+12     	; 0x186 <__floatundisf+0x9c>
     17a:	28 f0       	brcs	.+10     	; 0x186 <__floatundisf+0x9c>
     17c:	28 e0       	ldi	r18, 0x08	; 8
     17e:	30 e0       	ldi	r19, 0x00	; 0
     180:	40 e0       	ldi	r20, 0x00	; 0
     182:	50 e0       	ldi	r21, 0x00	; 0
     184:	16 c0       	rjmp	.+44     	; 0x1b2 <__floatundisf+0xc8>
     186:	20 e0       	ldi	r18, 0x00	; 0
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	40 e0       	ldi	r20, 0x00	; 0
     18c:	50 e0       	ldi	r21, 0x00	; 0
     18e:	11 c0       	rjmp	.+34     	; 0x1b2 <__floatundisf+0xc8>
     190:	80 30       	cpi	r24, 0x00	; 0
     192:	f0 e0       	ldi	r31, 0x00	; 0
     194:	9f 07       	cpc	r25, r31
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	af 07       	cpc	r26, r31
     19a:	f1 e0       	ldi	r31, 0x01	; 1
     19c:	bf 07       	cpc	r27, r31
     19e:	28 f0       	brcs	.+10     	; 0x1aa <__floatundisf+0xc0>
     1a0:	28 e1       	ldi	r18, 0x18	; 24
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	40 e0       	ldi	r20, 0x00	; 0
     1a6:	50 e0       	ldi	r21, 0x00	; 0
     1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <__floatundisf+0xc8>
     1aa:	20 e1       	ldi	r18, 0x10	; 16
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	40 e0       	ldi	r20, 0x00	; 0
     1b0:	50 e0       	ldi	r21, 0x00	; 0
     1b2:	02 2e       	mov	r0, r18
     1b4:	04 c0       	rjmp	.+8      	; 0x1be <__floatundisf+0xd4>
     1b6:	b6 95       	lsr	r27
     1b8:	a7 95       	ror	r26
     1ba:	97 95       	ror	r25
     1bc:	87 95       	ror	r24
     1be:	0a 94       	dec	r0
     1c0:	d2 f7       	brpl	.-12     	; 0x1b6 <__floatundisf+0xcc>
     1c2:	fc 01       	movw	r30, r24
     1c4:	eb 55       	subi	r30, 0x5B	; 91
     1c6:	ff 4f       	sbci	r31, 0xFF	; 255
     1c8:	80 81       	ld	r24, Z
     1ca:	29 01       	movw	r4, r18
     1cc:	3a 01       	movw	r6, r20
     1ce:	48 0e       	add	r4, r24
     1d0:	51 1c       	adc	r5, r1
     1d2:	61 1c       	adc	r6, r1
     1d4:	71 1c       	adc	r7, r1
     1d6:	49 82       	std	Y+1, r4	; 0x01
     1d8:	21 2f       	mov	r18, r17
     1da:	3b 2d       	mov	r19, r11
     1dc:	4a 2d       	mov	r20, r10
     1de:	59 2d       	mov	r21, r9
     1e0:	68 2d       	mov	r22, r8
     1e2:	73 2d       	mov	r23, r3
     1e4:	82 2d       	mov	r24, r2
     1e6:	9a 81       	ldd	r25, Y+2	; 0x02
     1e8:	04 2d       	mov	r16, r4
     1ea:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__lshrdi3>
     1ee:	c9 01       	movw	r24, r18
     1f0:	da 01       	movw	r26, r20
     1f2:	4c 01       	movw	r8, r24
     1f4:	5d 01       	movw	r10, r26
     1f6:	80 e2       	ldi	r24, 0x20	; 32
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	84 19       	sub	r24, r4
     1fc:	95 09       	sbc	r25, r5
     1fe:	04 c0       	rjmp	.+8      	; 0x208 <__floatundisf+0x11e>
     200:	cc 0c       	add	r12, r12
     202:	dd 1c       	adc	r13, r13
     204:	ee 1c       	adc	r14, r14
     206:	ff 1c       	adc	r15, r15
     208:	8a 95       	dec	r24
     20a:	d2 f7       	brpl	.-12     	; 0x200 <__floatundisf+0x116>
     20c:	c1 14       	cp	r12, r1
     20e:	d1 04       	cpc	r13, r1
     210:	e1 04       	cpc	r14, r1
     212:	f1 04       	cpc	r15, r1
     214:	41 f0       	breq	.+16     	; 0x226 <__floatundisf+0x13c>
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	a0 e0       	ldi	r26, 0x00	; 0
     21c:	b0 e0       	ldi	r27, 0x00	; 0
     21e:	88 2a       	or	r8, r24
     220:	99 2a       	or	r9, r25
     222:	aa 2a       	or	r10, r26
     224:	bb 2a       	or	r11, r27
     226:	90 e2       	ldi	r25, 0x20	; 32
     228:	49 16       	cp	r4, r25
     22a:	51 04       	cpc	r5, r1
     22c:	61 04       	cpc	r6, r1
     22e:	71 04       	cpc	r7, r1
     230:	59 f4       	brne	.+22     	; 0x248 <__floatundisf+0x15e>
     232:	0f 2e       	mov	r0, r31
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	ef 2e       	mov	r14, r31
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	ff 2e       	mov	r15, r31
     23c:	f0 e8       	ldi	r31, 0x80	; 128
     23e:	0f 2f       	mov	r16, r31
     240:	ff e4       	ldi	r31, 0x4F	; 79
     242:	1f 2f       	mov	r17, r31
     244:	f0 2d       	mov	r31, r0
     246:	21 c0       	rjmp	.+66     	; 0x28a <__floatundisf+0x1a0>
     248:	af e1       	ldi	r26, 0x1F	; 31
     24a:	4a 16       	cp	r4, r26
     24c:	51 04       	cpc	r5, r1
     24e:	61 04       	cpc	r6, r1
     250:	71 04       	cpc	r7, r1
     252:	59 f4       	brne	.+22     	; 0x26a <__floatundisf+0x180>
     254:	0f 2e       	mov	r0, r31
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	ef 2e       	mov	r14, r31
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	ff 2e       	mov	r15, r31
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	0f 2f       	mov	r16, r31
     262:	ff e4       	ldi	r31, 0x4F	; 79
     264:	1f 2f       	mov	r17, r31
     266:	f0 2d       	mov	r31, r0
     268:	10 c0       	rjmp	.+32     	; 0x28a <__floatundisf+0x1a0>
     26a:	61 e0       	ldi	r22, 0x01	; 1
     26c:	70 e0       	ldi	r23, 0x00	; 0
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	09 80       	ldd	r0, Y+1	; 0x01
     274:	04 c0       	rjmp	.+8      	; 0x27e <__floatundisf+0x194>
     276:	66 0f       	add	r22, r22
     278:	77 1f       	adc	r23, r23
     27a:	88 1f       	adc	r24, r24
     27c:	99 1f       	adc	r25, r25
     27e:	0a 94       	dec	r0
     280:	d2 f7       	brpl	.-12     	; 0x276 <__floatundisf+0x18c>
     282:	0e 94 31 05 	call	0xa62	; 0xa62 <__floatsisf>
     286:	7b 01       	movw	r14, r22
     288:	8c 01       	movw	r16, r24
     28a:	c5 01       	movw	r24, r10
     28c:	b4 01       	movw	r22, r8
     28e:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatunsisf>
     292:	a8 01       	movw	r20, r16
     294:	97 01       	movw	r18, r14
     296:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
     29a:	22 96       	adiw	r28, 0x02	; 2
     29c:	e2 e1       	ldi	r30, 0x12	; 18
     29e:	0c 94 93 31 	jmp	0x6326	; 0x6326 <__epilogue_restores__>

000002a2 <_fpadd_parts>:
     2a2:	a0 e0       	ldi	r26, 0x00	; 0
     2a4:	b0 e0       	ldi	r27, 0x00	; 0
     2a6:	e7 e5       	ldi	r30, 0x57	; 87
     2a8:	f1 e0       	ldi	r31, 0x01	; 1
     2aa:	0c 94 77 31 	jmp	0x62ee	; 0x62ee <__prologue_saves__>
     2ae:	dc 01       	movw	r26, r24
     2b0:	2b 01       	movw	r4, r22
     2b2:	fa 01       	movw	r30, r20
     2b4:	9c 91       	ld	r25, X
     2b6:	92 30       	cpi	r25, 0x02	; 2
     2b8:	08 f4       	brcc	.+2      	; 0x2bc <_fpadd_parts+0x1a>
     2ba:	39 c1       	rjmp	.+626    	; 0x52e <_fpadd_parts+0x28c>
     2bc:	eb 01       	movw	r28, r22
     2be:	88 81       	ld	r24, Y
     2c0:	82 30       	cpi	r24, 0x02	; 2
     2c2:	08 f4       	brcc	.+2      	; 0x2c6 <_fpadd_parts+0x24>
     2c4:	33 c1       	rjmp	.+614    	; 0x52c <_fpadd_parts+0x28a>
     2c6:	94 30       	cpi	r25, 0x04	; 4
     2c8:	69 f4       	brne	.+26     	; 0x2e4 <_fpadd_parts+0x42>
     2ca:	84 30       	cpi	r24, 0x04	; 4
     2cc:	09 f0       	breq	.+2      	; 0x2d0 <_fpadd_parts+0x2e>
     2ce:	2f c1       	rjmp	.+606    	; 0x52e <_fpadd_parts+0x28c>
     2d0:	11 96       	adiw	r26, 0x01	; 1
     2d2:	9c 91       	ld	r25, X
     2d4:	11 97       	sbiw	r26, 0x01	; 1
     2d6:	89 81       	ldd	r24, Y+1	; 0x01
     2d8:	98 17       	cp	r25, r24
     2da:	09 f4       	brne	.+2      	; 0x2de <_fpadd_parts+0x3c>
     2dc:	28 c1       	rjmp	.+592    	; 0x52e <_fpadd_parts+0x28c>
     2de:	ad e9       	ldi	r26, 0x9D	; 157
     2e0:	b0 e0       	ldi	r27, 0x00	; 0
     2e2:	25 c1       	rjmp	.+586    	; 0x52e <_fpadd_parts+0x28c>
     2e4:	84 30       	cpi	r24, 0x04	; 4
     2e6:	09 f4       	brne	.+2      	; 0x2ea <_fpadd_parts+0x48>
     2e8:	21 c1       	rjmp	.+578    	; 0x52c <_fpadd_parts+0x28a>
     2ea:	82 30       	cpi	r24, 0x02	; 2
     2ec:	a9 f4       	brne	.+42     	; 0x318 <_fpadd_parts+0x76>
     2ee:	92 30       	cpi	r25, 0x02	; 2
     2f0:	09 f0       	breq	.+2      	; 0x2f4 <_fpadd_parts+0x52>
     2f2:	1d c1       	rjmp	.+570    	; 0x52e <_fpadd_parts+0x28c>
     2f4:	9a 01       	movw	r18, r20
     2f6:	ad 01       	movw	r20, r26
     2f8:	88 e0       	ldi	r24, 0x08	; 8
     2fa:	ea 01       	movw	r28, r20
     2fc:	09 90       	ld	r0, Y+
     2fe:	ae 01       	movw	r20, r28
     300:	e9 01       	movw	r28, r18
     302:	09 92       	st	Y+, r0
     304:	9e 01       	movw	r18, r28
     306:	81 50       	subi	r24, 0x01	; 1
     308:	c1 f7       	brne	.-16     	; 0x2fa <_fpadd_parts+0x58>
     30a:	e2 01       	movw	r28, r4
     30c:	89 81       	ldd	r24, Y+1	; 0x01
     30e:	11 96       	adiw	r26, 0x01	; 1
     310:	9c 91       	ld	r25, X
     312:	89 23       	and	r24, r25
     314:	81 83       	std	Z+1, r24	; 0x01
     316:	08 c1       	rjmp	.+528    	; 0x528 <_fpadd_parts+0x286>
     318:	92 30       	cpi	r25, 0x02	; 2
     31a:	09 f4       	brne	.+2      	; 0x31e <_fpadd_parts+0x7c>
     31c:	07 c1       	rjmp	.+526    	; 0x52c <_fpadd_parts+0x28a>
     31e:	12 96       	adiw	r26, 0x02	; 2
     320:	2d 90       	ld	r2, X+
     322:	3c 90       	ld	r3, X
     324:	13 97       	sbiw	r26, 0x03	; 3
     326:	eb 01       	movw	r28, r22
     328:	8a 81       	ldd	r24, Y+2	; 0x02
     32a:	9b 81       	ldd	r25, Y+3	; 0x03
     32c:	14 96       	adiw	r26, 0x04	; 4
     32e:	ad 90       	ld	r10, X+
     330:	bd 90       	ld	r11, X+
     332:	cd 90       	ld	r12, X+
     334:	dc 90       	ld	r13, X
     336:	17 97       	sbiw	r26, 0x07	; 7
     338:	ec 80       	ldd	r14, Y+4	; 0x04
     33a:	fd 80       	ldd	r15, Y+5	; 0x05
     33c:	0e 81       	ldd	r16, Y+6	; 0x06
     33e:	1f 81       	ldd	r17, Y+7	; 0x07
     340:	91 01       	movw	r18, r2
     342:	28 1b       	sub	r18, r24
     344:	39 0b       	sbc	r19, r25
     346:	b9 01       	movw	r22, r18
     348:	37 ff       	sbrs	r19, 7
     34a:	04 c0       	rjmp	.+8      	; 0x354 <_fpadd_parts+0xb2>
     34c:	66 27       	eor	r22, r22
     34e:	77 27       	eor	r23, r23
     350:	62 1b       	sub	r22, r18
     352:	73 0b       	sbc	r23, r19
     354:	60 32       	cpi	r22, 0x20	; 32
     356:	71 05       	cpc	r23, r1
     358:	0c f0       	brlt	.+2      	; 0x35c <_fpadd_parts+0xba>
     35a:	61 c0       	rjmp	.+194    	; 0x41e <_fpadd_parts+0x17c>
     35c:	12 16       	cp	r1, r18
     35e:	13 06       	cpc	r1, r19
     360:	6c f5       	brge	.+90     	; 0x3bc <_fpadd_parts+0x11a>
     362:	37 01       	movw	r6, r14
     364:	48 01       	movw	r8, r16
     366:	06 2e       	mov	r0, r22
     368:	04 c0       	rjmp	.+8      	; 0x372 <_fpadd_parts+0xd0>
     36a:	96 94       	lsr	r9
     36c:	87 94       	ror	r8
     36e:	77 94       	ror	r7
     370:	67 94       	ror	r6
     372:	0a 94       	dec	r0
     374:	d2 f7       	brpl	.-12     	; 0x36a <_fpadd_parts+0xc8>
     376:	21 e0       	ldi	r18, 0x01	; 1
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	40 e0       	ldi	r20, 0x00	; 0
     37c:	50 e0       	ldi	r21, 0x00	; 0
     37e:	04 c0       	rjmp	.+8      	; 0x388 <_fpadd_parts+0xe6>
     380:	22 0f       	add	r18, r18
     382:	33 1f       	adc	r19, r19
     384:	44 1f       	adc	r20, r20
     386:	55 1f       	adc	r21, r21
     388:	6a 95       	dec	r22
     38a:	d2 f7       	brpl	.-12     	; 0x380 <_fpadd_parts+0xde>
     38c:	21 50       	subi	r18, 0x01	; 1
     38e:	30 40       	sbci	r19, 0x00	; 0
     390:	40 40       	sbci	r20, 0x00	; 0
     392:	50 40       	sbci	r21, 0x00	; 0
     394:	2e 21       	and	r18, r14
     396:	3f 21       	and	r19, r15
     398:	40 23       	and	r20, r16
     39a:	51 23       	and	r21, r17
     39c:	21 15       	cp	r18, r1
     39e:	31 05       	cpc	r19, r1
     3a0:	41 05       	cpc	r20, r1
     3a2:	51 05       	cpc	r21, r1
     3a4:	21 f0       	breq	.+8      	; 0x3ae <_fpadd_parts+0x10c>
     3a6:	21 e0       	ldi	r18, 0x01	; 1
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	40 e0       	ldi	r20, 0x00	; 0
     3ac:	50 e0       	ldi	r21, 0x00	; 0
     3ae:	79 01       	movw	r14, r18
     3b0:	8a 01       	movw	r16, r20
     3b2:	e6 28       	or	r14, r6
     3b4:	f7 28       	or	r15, r7
     3b6:	08 29       	or	r16, r8
     3b8:	19 29       	or	r17, r9
     3ba:	3c c0       	rjmp	.+120    	; 0x434 <_fpadd_parts+0x192>
     3bc:	23 2b       	or	r18, r19
     3be:	d1 f1       	breq	.+116    	; 0x434 <_fpadd_parts+0x192>
     3c0:	26 0e       	add	r2, r22
     3c2:	37 1e       	adc	r3, r23
     3c4:	35 01       	movw	r6, r10
     3c6:	46 01       	movw	r8, r12
     3c8:	06 2e       	mov	r0, r22
     3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <_fpadd_parts+0x132>
     3cc:	96 94       	lsr	r9
     3ce:	87 94       	ror	r8
     3d0:	77 94       	ror	r7
     3d2:	67 94       	ror	r6
     3d4:	0a 94       	dec	r0
     3d6:	d2 f7       	brpl	.-12     	; 0x3cc <_fpadd_parts+0x12a>
     3d8:	21 e0       	ldi	r18, 0x01	; 1
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	40 e0       	ldi	r20, 0x00	; 0
     3de:	50 e0       	ldi	r21, 0x00	; 0
     3e0:	04 c0       	rjmp	.+8      	; 0x3ea <_fpadd_parts+0x148>
     3e2:	22 0f       	add	r18, r18
     3e4:	33 1f       	adc	r19, r19
     3e6:	44 1f       	adc	r20, r20
     3e8:	55 1f       	adc	r21, r21
     3ea:	6a 95       	dec	r22
     3ec:	d2 f7       	brpl	.-12     	; 0x3e2 <_fpadd_parts+0x140>
     3ee:	21 50       	subi	r18, 0x01	; 1
     3f0:	30 40       	sbci	r19, 0x00	; 0
     3f2:	40 40       	sbci	r20, 0x00	; 0
     3f4:	50 40       	sbci	r21, 0x00	; 0
     3f6:	2a 21       	and	r18, r10
     3f8:	3b 21       	and	r19, r11
     3fa:	4c 21       	and	r20, r12
     3fc:	5d 21       	and	r21, r13
     3fe:	21 15       	cp	r18, r1
     400:	31 05       	cpc	r19, r1
     402:	41 05       	cpc	r20, r1
     404:	51 05       	cpc	r21, r1
     406:	21 f0       	breq	.+8      	; 0x410 <_fpadd_parts+0x16e>
     408:	21 e0       	ldi	r18, 0x01	; 1
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	40 e0       	ldi	r20, 0x00	; 0
     40e:	50 e0       	ldi	r21, 0x00	; 0
     410:	59 01       	movw	r10, r18
     412:	6a 01       	movw	r12, r20
     414:	a6 28       	or	r10, r6
     416:	b7 28       	or	r11, r7
     418:	c8 28       	or	r12, r8
     41a:	d9 28       	or	r13, r9
     41c:	0b c0       	rjmp	.+22     	; 0x434 <_fpadd_parts+0x192>
     41e:	82 15       	cp	r24, r2
     420:	93 05       	cpc	r25, r3
     422:	2c f0       	brlt	.+10     	; 0x42e <_fpadd_parts+0x18c>
     424:	1c 01       	movw	r2, r24
     426:	aa 24       	eor	r10, r10
     428:	bb 24       	eor	r11, r11
     42a:	65 01       	movw	r12, r10
     42c:	03 c0       	rjmp	.+6      	; 0x434 <_fpadd_parts+0x192>
     42e:	ee 24       	eor	r14, r14
     430:	ff 24       	eor	r15, r15
     432:	87 01       	movw	r16, r14
     434:	11 96       	adiw	r26, 0x01	; 1
     436:	9c 91       	ld	r25, X
     438:	d2 01       	movw	r26, r4
     43a:	11 96       	adiw	r26, 0x01	; 1
     43c:	8c 91       	ld	r24, X
     43e:	98 17       	cp	r25, r24
     440:	09 f4       	brne	.+2      	; 0x444 <_fpadd_parts+0x1a2>
     442:	45 c0       	rjmp	.+138    	; 0x4ce <_fpadd_parts+0x22c>
     444:	99 23       	and	r25, r25
     446:	39 f0       	breq	.+14     	; 0x456 <_fpadd_parts+0x1b4>
     448:	a8 01       	movw	r20, r16
     44a:	97 01       	movw	r18, r14
     44c:	2a 19       	sub	r18, r10
     44e:	3b 09       	sbc	r19, r11
     450:	4c 09       	sbc	r20, r12
     452:	5d 09       	sbc	r21, r13
     454:	06 c0       	rjmp	.+12     	; 0x462 <_fpadd_parts+0x1c0>
     456:	a6 01       	movw	r20, r12
     458:	95 01       	movw	r18, r10
     45a:	2e 19       	sub	r18, r14
     45c:	3f 09       	sbc	r19, r15
     45e:	40 0b       	sbc	r20, r16
     460:	51 0b       	sbc	r21, r17
     462:	57 fd       	sbrc	r21, 7
     464:	08 c0       	rjmp	.+16     	; 0x476 <_fpadd_parts+0x1d4>
     466:	11 82       	std	Z+1, r1	; 0x01
     468:	33 82       	std	Z+3, r3	; 0x03
     46a:	22 82       	std	Z+2, r2	; 0x02
     46c:	24 83       	std	Z+4, r18	; 0x04
     46e:	35 83       	std	Z+5, r19	; 0x05
     470:	46 83       	std	Z+6, r20	; 0x06
     472:	57 83       	std	Z+7, r21	; 0x07
     474:	1d c0       	rjmp	.+58     	; 0x4b0 <_fpadd_parts+0x20e>
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	81 83       	std	Z+1, r24	; 0x01
     47a:	33 82       	std	Z+3, r3	; 0x03
     47c:	22 82       	std	Z+2, r2	; 0x02
     47e:	88 27       	eor	r24, r24
     480:	99 27       	eor	r25, r25
     482:	dc 01       	movw	r26, r24
     484:	82 1b       	sub	r24, r18
     486:	93 0b       	sbc	r25, r19
     488:	a4 0b       	sbc	r26, r20
     48a:	b5 0b       	sbc	r27, r21
     48c:	84 83       	std	Z+4, r24	; 0x04
     48e:	95 83       	std	Z+5, r25	; 0x05
     490:	a6 83       	std	Z+6, r26	; 0x06
     492:	b7 83       	std	Z+7, r27	; 0x07
     494:	0d c0       	rjmp	.+26     	; 0x4b0 <_fpadd_parts+0x20e>
     496:	22 0f       	add	r18, r18
     498:	33 1f       	adc	r19, r19
     49a:	44 1f       	adc	r20, r20
     49c:	55 1f       	adc	r21, r21
     49e:	24 83       	std	Z+4, r18	; 0x04
     4a0:	35 83       	std	Z+5, r19	; 0x05
     4a2:	46 83       	std	Z+6, r20	; 0x06
     4a4:	57 83       	std	Z+7, r21	; 0x07
     4a6:	82 81       	ldd	r24, Z+2	; 0x02
     4a8:	93 81       	ldd	r25, Z+3	; 0x03
     4aa:	01 97       	sbiw	r24, 0x01	; 1
     4ac:	93 83       	std	Z+3, r25	; 0x03
     4ae:	82 83       	std	Z+2, r24	; 0x02
     4b0:	24 81       	ldd	r18, Z+4	; 0x04
     4b2:	35 81       	ldd	r19, Z+5	; 0x05
     4b4:	46 81       	ldd	r20, Z+6	; 0x06
     4b6:	57 81       	ldd	r21, Z+7	; 0x07
     4b8:	da 01       	movw	r26, r20
     4ba:	c9 01       	movw	r24, r18
     4bc:	01 97       	sbiw	r24, 0x01	; 1
     4be:	a1 09       	sbc	r26, r1
     4c0:	b1 09       	sbc	r27, r1
     4c2:	8f 5f       	subi	r24, 0xFF	; 255
     4c4:	9f 4f       	sbci	r25, 0xFF	; 255
     4c6:	af 4f       	sbci	r26, 0xFF	; 255
     4c8:	bf 43       	sbci	r27, 0x3F	; 63
     4ca:	28 f3       	brcs	.-54     	; 0x496 <_fpadd_parts+0x1f4>
     4cc:	0b c0       	rjmp	.+22     	; 0x4e4 <_fpadd_parts+0x242>
     4ce:	91 83       	std	Z+1, r25	; 0x01
     4d0:	33 82       	std	Z+3, r3	; 0x03
     4d2:	22 82       	std	Z+2, r2	; 0x02
     4d4:	ea 0c       	add	r14, r10
     4d6:	fb 1c       	adc	r15, r11
     4d8:	0c 1d       	adc	r16, r12
     4da:	1d 1d       	adc	r17, r13
     4dc:	e4 82       	std	Z+4, r14	; 0x04
     4de:	f5 82       	std	Z+5, r15	; 0x05
     4e0:	06 83       	std	Z+6, r16	; 0x06
     4e2:	17 83       	std	Z+7, r17	; 0x07
     4e4:	83 e0       	ldi	r24, 0x03	; 3
     4e6:	80 83       	st	Z, r24
     4e8:	24 81       	ldd	r18, Z+4	; 0x04
     4ea:	35 81       	ldd	r19, Z+5	; 0x05
     4ec:	46 81       	ldd	r20, Z+6	; 0x06
     4ee:	57 81       	ldd	r21, Z+7	; 0x07
     4f0:	57 ff       	sbrs	r21, 7
     4f2:	1a c0       	rjmp	.+52     	; 0x528 <_fpadd_parts+0x286>
     4f4:	c9 01       	movw	r24, r18
     4f6:	aa 27       	eor	r26, r26
     4f8:	97 fd       	sbrc	r25, 7
     4fa:	a0 95       	com	r26
     4fc:	ba 2f       	mov	r27, r26
     4fe:	81 70       	andi	r24, 0x01	; 1
     500:	90 70       	andi	r25, 0x00	; 0
     502:	a0 70       	andi	r26, 0x00	; 0
     504:	b0 70       	andi	r27, 0x00	; 0
     506:	56 95       	lsr	r21
     508:	47 95       	ror	r20
     50a:	37 95       	ror	r19
     50c:	27 95       	ror	r18
     50e:	82 2b       	or	r24, r18
     510:	93 2b       	or	r25, r19
     512:	a4 2b       	or	r26, r20
     514:	b5 2b       	or	r27, r21
     516:	84 83       	std	Z+4, r24	; 0x04
     518:	95 83       	std	Z+5, r25	; 0x05
     51a:	a6 83       	std	Z+6, r26	; 0x06
     51c:	b7 83       	std	Z+7, r27	; 0x07
     51e:	82 81       	ldd	r24, Z+2	; 0x02
     520:	93 81       	ldd	r25, Z+3	; 0x03
     522:	01 96       	adiw	r24, 0x01	; 1
     524:	93 83       	std	Z+3, r25	; 0x03
     526:	82 83       	std	Z+2, r24	; 0x02
     528:	df 01       	movw	r26, r30
     52a:	01 c0       	rjmp	.+2      	; 0x52e <_fpadd_parts+0x28c>
     52c:	d2 01       	movw	r26, r4
     52e:	cd 01       	movw	r24, r26
     530:	cd b7       	in	r28, 0x3d	; 61
     532:	de b7       	in	r29, 0x3e	; 62
     534:	e2 e1       	ldi	r30, 0x12	; 18
     536:	0c 94 93 31 	jmp	0x6326	; 0x6326 <__epilogue_restores__>

0000053a <__subsf3>:
     53a:	a0 e2       	ldi	r26, 0x20	; 32
     53c:	b0 e0       	ldi	r27, 0x00	; 0
     53e:	e3 ea       	ldi	r30, 0xA3	; 163
     540:	f2 e0       	ldi	r31, 0x02	; 2
     542:	0c 94 83 31 	jmp	0x6306	; 0x6306 <__prologue_saves__+0x18>
     546:	69 83       	std	Y+1, r22	; 0x01
     548:	7a 83       	std	Y+2, r23	; 0x02
     54a:	8b 83       	std	Y+3, r24	; 0x03
     54c:	9c 83       	std	Y+4, r25	; 0x04
     54e:	2d 83       	std	Y+5, r18	; 0x05
     550:	3e 83       	std	Y+6, r19	; 0x06
     552:	4f 83       	std	Y+7, r20	; 0x07
     554:	58 87       	std	Y+8, r21	; 0x08
     556:	e9 e0       	ldi	r30, 0x09	; 9
     558:	ee 2e       	mov	r14, r30
     55a:	f1 2c       	mov	r15, r1
     55c:	ec 0e       	add	r14, r28
     55e:	fd 1e       	adc	r15, r29
     560:	ce 01       	movw	r24, r28
     562:	01 96       	adiw	r24, 0x01	; 1
     564:	b7 01       	movw	r22, r14
     566:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     56a:	8e 01       	movw	r16, r28
     56c:	0f 5e       	subi	r16, 0xEF	; 239
     56e:	1f 4f       	sbci	r17, 0xFF	; 255
     570:	ce 01       	movw	r24, r28
     572:	05 96       	adiw	r24, 0x05	; 5
     574:	b8 01       	movw	r22, r16
     576:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     57a:	8a 89       	ldd	r24, Y+18	; 0x12
     57c:	91 e0       	ldi	r25, 0x01	; 1
     57e:	89 27       	eor	r24, r25
     580:	8a 8b       	std	Y+18, r24	; 0x12
     582:	c7 01       	movw	r24, r14
     584:	b8 01       	movw	r22, r16
     586:	ae 01       	movw	r20, r28
     588:	47 5e       	subi	r20, 0xE7	; 231
     58a:	5f 4f       	sbci	r21, 0xFF	; 255
     58c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <_fpadd_parts>
     590:	0e 94 2a 07 	call	0xe54	; 0xe54 <__pack_f>
     594:	a0 96       	adiw	r28, 0x20	; 32
     596:	e6 e0       	ldi	r30, 0x06	; 6
     598:	0c 94 9f 31 	jmp	0x633e	; 0x633e <__epilogue_restores__+0x18>

0000059c <__addsf3>:
     59c:	a0 e2       	ldi	r26, 0x20	; 32
     59e:	b0 e0       	ldi	r27, 0x00	; 0
     5a0:	e4 ed       	ldi	r30, 0xD4	; 212
     5a2:	f2 e0       	ldi	r31, 0x02	; 2
     5a4:	0c 94 83 31 	jmp	0x6306	; 0x6306 <__prologue_saves__+0x18>
     5a8:	69 83       	std	Y+1, r22	; 0x01
     5aa:	7a 83       	std	Y+2, r23	; 0x02
     5ac:	8b 83       	std	Y+3, r24	; 0x03
     5ae:	9c 83       	std	Y+4, r25	; 0x04
     5b0:	2d 83       	std	Y+5, r18	; 0x05
     5b2:	3e 83       	std	Y+6, r19	; 0x06
     5b4:	4f 83       	std	Y+7, r20	; 0x07
     5b6:	58 87       	std	Y+8, r21	; 0x08
     5b8:	f9 e0       	ldi	r31, 0x09	; 9
     5ba:	ef 2e       	mov	r14, r31
     5bc:	f1 2c       	mov	r15, r1
     5be:	ec 0e       	add	r14, r28
     5c0:	fd 1e       	adc	r15, r29
     5c2:	ce 01       	movw	r24, r28
     5c4:	01 96       	adiw	r24, 0x01	; 1
     5c6:	b7 01       	movw	r22, r14
     5c8:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     5cc:	8e 01       	movw	r16, r28
     5ce:	0f 5e       	subi	r16, 0xEF	; 239
     5d0:	1f 4f       	sbci	r17, 0xFF	; 255
     5d2:	ce 01       	movw	r24, r28
     5d4:	05 96       	adiw	r24, 0x05	; 5
     5d6:	b8 01       	movw	r22, r16
     5d8:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     5dc:	c7 01       	movw	r24, r14
     5de:	b8 01       	movw	r22, r16
     5e0:	ae 01       	movw	r20, r28
     5e2:	47 5e       	subi	r20, 0xE7	; 231
     5e4:	5f 4f       	sbci	r21, 0xFF	; 255
     5e6:	0e 94 51 01 	call	0x2a2	; 0x2a2 <_fpadd_parts>
     5ea:	0e 94 2a 07 	call	0xe54	; 0xe54 <__pack_f>
     5ee:	a0 96       	adiw	r28, 0x20	; 32
     5f0:	e6 e0       	ldi	r30, 0x06	; 6
     5f2:	0c 94 9f 31 	jmp	0x633e	; 0x633e <__epilogue_restores__+0x18>

000005f6 <__mulsf3>:
     5f6:	a0 e2       	ldi	r26, 0x20	; 32
     5f8:	b0 e0       	ldi	r27, 0x00	; 0
     5fa:	e1 e0       	ldi	r30, 0x01	; 1
     5fc:	f3 e0       	ldi	r31, 0x03	; 3
     5fe:	0c 94 77 31 	jmp	0x62ee	; 0x62ee <__prologue_saves__>
     602:	69 83       	std	Y+1, r22	; 0x01
     604:	7a 83       	std	Y+2, r23	; 0x02
     606:	8b 83       	std	Y+3, r24	; 0x03
     608:	9c 83       	std	Y+4, r25	; 0x04
     60a:	2d 83       	std	Y+5, r18	; 0x05
     60c:	3e 83       	std	Y+6, r19	; 0x06
     60e:	4f 83       	std	Y+7, r20	; 0x07
     610:	58 87       	std	Y+8, r21	; 0x08
     612:	ce 01       	movw	r24, r28
     614:	01 96       	adiw	r24, 0x01	; 1
     616:	be 01       	movw	r22, r28
     618:	67 5f       	subi	r22, 0xF7	; 247
     61a:	7f 4f       	sbci	r23, 0xFF	; 255
     61c:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     620:	ce 01       	movw	r24, r28
     622:	05 96       	adiw	r24, 0x05	; 5
     624:	be 01       	movw	r22, r28
     626:	6f 5e       	subi	r22, 0xEF	; 239
     628:	7f 4f       	sbci	r23, 0xFF	; 255
     62a:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     62e:	99 85       	ldd	r25, Y+9	; 0x09
     630:	92 30       	cpi	r25, 0x02	; 2
     632:	88 f0       	brcs	.+34     	; 0x656 <__mulsf3+0x60>
     634:	89 89       	ldd	r24, Y+17	; 0x11
     636:	82 30       	cpi	r24, 0x02	; 2
     638:	c8 f0       	brcs	.+50     	; 0x66c <__mulsf3+0x76>
     63a:	94 30       	cpi	r25, 0x04	; 4
     63c:	19 f4       	brne	.+6      	; 0x644 <__mulsf3+0x4e>
     63e:	82 30       	cpi	r24, 0x02	; 2
     640:	51 f4       	brne	.+20     	; 0x656 <__mulsf3+0x60>
     642:	04 c0       	rjmp	.+8      	; 0x64c <__mulsf3+0x56>
     644:	84 30       	cpi	r24, 0x04	; 4
     646:	29 f4       	brne	.+10     	; 0x652 <__mulsf3+0x5c>
     648:	92 30       	cpi	r25, 0x02	; 2
     64a:	81 f4       	brne	.+32     	; 0x66c <__mulsf3+0x76>
     64c:	8d e9       	ldi	r24, 0x9D	; 157
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	c6 c0       	rjmp	.+396    	; 0x7de <__mulsf3+0x1e8>
     652:	92 30       	cpi	r25, 0x02	; 2
     654:	49 f4       	brne	.+18     	; 0x668 <__mulsf3+0x72>
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	9a 85       	ldd	r25, Y+10	; 0x0a
     65a:	8a 89       	ldd	r24, Y+18	; 0x12
     65c:	98 13       	cpse	r25, r24
     65e:	21 e0       	ldi	r18, 0x01	; 1
     660:	2a 87       	std	Y+10, r18	; 0x0a
     662:	ce 01       	movw	r24, r28
     664:	09 96       	adiw	r24, 0x09	; 9
     666:	bb c0       	rjmp	.+374    	; 0x7de <__mulsf3+0x1e8>
     668:	82 30       	cpi	r24, 0x02	; 2
     66a:	49 f4       	brne	.+18     	; 0x67e <__mulsf3+0x88>
     66c:	20 e0       	ldi	r18, 0x00	; 0
     66e:	9a 85       	ldd	r25, Y+10	; 0x0a
     670:	8a 89       	ldd	r24, Y+18	; 0x12
     672:	98 13       	cpse	r25, r24
     674:	21 e0       	ldi	r18, 0x01	; 1
     676:	2a 8b       	std	Y+18, r18	; 0x12
     678:	ce 01       	movw	r24, r28
     67a:	41 96       	adiw	r24, 0x11	; 17
     67c:	b0 c0       	rjmp	.+352    	; 0x7de <__mulsf3+0x1e8>
     67e:	2d 84       	ldd	r2, Y+13	; 0x0d
     680:	3e 84       	ldd	r3, Y+14	; 0x0e
     682:	4f 84       	ldd	r4, Y+15	; 0x0f
     684:	58 88       	ldd	r5, Y+16	; 0x10
     686:	6d 88       	ldd	r6, Y+21	; 0x15
     688:	7e 88       	ldd	r7, Y+22	; 0x16
     68a:	8f 88       	ldd	r8, Y+23	; 0x17
     68c:	98 8c       	ldd	r9, Y+24	; 0x18
     68e:	ee 24       	eor	r14, r14
     690:	ff 24       	eor	r15, r15
     692:	87 01       	movw	r16, r14
     694:	aa 24       	eor	r10, r10
     696:	bb 24       	eor	r11, r11
     698:	65 01       	movw	r12, r10
     69a:	40 e0       	ldi	r20, 0x00	; 0
     69c:	50 e0       	ldi	r21, 0x00	; 0
     69e:	60 e0       	ldi	r22, 0x00	; 0
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	e0 e0       	ldi	r30, 0x00	; 0
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	c1 01       	movw	r24, r2
     6a8:	81 70       	andi	r24, 0x01	; 1
     6aa:	90 70       	andi	r25, 0x00	; 0
     6ac:	89 2b       	or	r24, r25
     6ae:	e9 f0       	breq	.+58     	; 0x6ea <__mulsf3+0xf4>
     6b0:	e6 0c       	add	r14, r6
     6b2:	f7 1c       	adc	r15, r7
     6b4:	08 1d       	adc	r16, r8
     6b6:	19 1d       	adc	r17, r9
     6b8:	9a 01       	movw	r18, r20
     6ba:	ab 01       	movw	r20, r22
     6bc:	2a 0d       	add	r18, r10
     6be:	3b 1d       	adc	r19, r11
     6c0:	4c 1d       	adc	r20, r12
     6c2:	5d 1d       	adc	r21, r13
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	a0 e0       	ldi	r26, 0x00	; 0
     6ca:	b0 e0       	ldi	r27, 0x00	; 0
     6cc:	e6 14       	cp	r14, r6
     6ce:	f7 04       	cpc	r15, r7
     6d0:	08 05       	cpc	r16, r8
     6d2:	19 05       	cpc	r17, r9
     6d4:	20 f4       	brcc	.+8      	; 0x6de <__mulsf3+0xe8>
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	a0 e0       	ldi	r26, 0x00	; 0
     6dc:	b0 e0       	ldi	r27, 0x00	; 0
     6de:	ba 01       	movw	r22, r20
     6e0:	a9 01       	movw	r20, r18
     6e2:	48 0f       	add	r20, r24
     6e4:	59 1f       	adc	r21, r25
     6e6:	6a 1f       	adc	r22, r26
     6e8:	7b 1f       	adc	r23, r27
     6ea:	aa 0c       	add	r10, r10
     6ec:	bb 1c       	adc	r11, r11
     6ee:	cc 1c       	adc	r12, r12
     6f0:	dd 1c       	adc	r13, r13
     6f2:	97 fe       	sbrs	r9, 7
     6f4:	08 c0       	rjmp	.+16     	; 0x706 <__mulsf3+0x110>
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	a0 e0       	ldi	r26, 0x00	; 0
     6fc:	b0 e0       	ldi	r27, 0x00	; 0
     6fe:	a8 2a       	or	r10, r24
     700:	b9 2a       	or	r11, r25
     702:	ca 2a       	or	r12, r26
     704:	db 2a       	or	r13, r27
     706:	31 96       	adiw	r30, 0x01	; 1
     708:	e0 32       	cpi	r30, 0x20	; 32
     70a:	f1 05       	cpc	r31, r1
     70c:	49 f0       	breq	.+18     	; 0x720 <__mulsf3+0x12a>
     70e:	66 0c       	add	r6, r6
     710:	77 1c       	adc	r7, r7
     712:	88 1c       	adc	r8, r8
     714:	99 1c       	adc	r9, r9
     716:	56 94       	lsr	r5
     718:	47 94       	ror	r4
     71a:	37 94       	ror	r3
     71c:	27 94       	ror	r2
     71e:	c3 cf       	rjmp	.-122    	; 0x6a6 <__mulsf3+0xb0>
     720:	fa 85       	ldd	r31, Y+10	; 0x0a
     722:	ea 89       	ldd	r30, Y+18	; 0x12
     724:	2b 89       	ldd	r18, Y+19	; 0x13
     726:	3c 89       	ldd	r19, Y+20	; 0x14
     728:	8b 85       	ldd	r24, Y+11	; 0x0b
     72a:	9c 85       	ldd	r25, Y+12	; 0x0c
     72c:	28 0f       	add	r18, r24
     72e:	39 1f       	adc	r19, r25
     730:	2e 5f       	subi	r18, 0xFE	; 254
     732:	3f 4f       	sbci	r19, 0xFF	; 255
     734:	17 c0       	rjmp	.+46     	; 0x764 <__mulsf3+0x16e>
     736:	ca 01       	movw	r24, r20
     738:	81 70       	andi	r24, 0x01	; 1
     73a:	90 70       	andi	r25, 0x00	; 0
     73c:	89 2b       	or	r24, r25
     73e:	61 f0       	breq	.+24     	; 0x758 <__mulsf3+0x162>
     740:	16 95       	lsr	r17
     742:	07 95       	ror	r16
     744:	f7 94       	ror	r15
     746:	e7 94       	ror	r14
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	a0 e0       	ldi	r26, 0x00	; 0
     74e:	b0 e8       	ldi	r27, 0x80	; 128
     750:	e8 2a       	or	r14, r24
     752:	f9 2a       	or	r15, r25
     754:	0a 2b       	or	r16, r26
     756:	1b 2b       	or	r17, r27
     758:	76 95       	lsr	r23
     75a:	67 95       	ror	r22
     75c:	57 95       	ror	r21
     75e:	47 95       	ror	r20
     760:	2f 5f       	subi	r18, 0xFF	; 255
     762:	3f 4f       	sbci	r19, 0xFF	; 255
     764:	77 fd       	sbrc	r23, 7
     766:	e7 cf       	rjmp	.-50     	; 0x736 <__mulsf3+0x140>
     768:	0c c0       	rjmp	.+24     	; 0x782 <__mulsf3+0x18c>
     76a:	44 0f       	add	r20, r20
     76c:	55 1f       	adc	r21, r21
     76e:	66 1f       	adc	r22, r22
     770:	77 1f       	adc	r23, r23
     772:	17 fd       	sbrc	r17, 7
     774:	41 60       	ori	r20, 0x01	; 1
     776:	ee 0c       	add	r14, r14
     778:	ff 1c       	adc	r15, r15
     77a:	00 1f       	adc	r16, r16
     77c:	11 1f       	adc	r17, r17
     77e:	21 50       	subi	r18, 0x01	; 1
     780:	30 40       	sbci	r19, 0x00	; 0
     782:	40 30       	cpi	r20, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	59 07       	cpc	r21, r25
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	69 07       	cpc	r22, r25
     78c:	90 e4       	ldi	r25, 0x40	; 64
     78e:	79 07       	cpc	r23, r25
     790:	60 f3       	brcs	.-40     	; 0x76a <__mulsf3+0x174>
     792:	2b 8f       	std	Y+27, r18	; 0x1b
     794:	3c 8f       	std	Y+28, r19	; 0x1c
     796:	db 01       	movw	r26, r22
     798:	ca 01       	movw	r24, r20
     79a:	8f 77       	andi	r24, 0x7F	; 127
     79c:	90 70       	andi	r25, 0x00	; 0
     79e:	a0 70       	andi	r26, 0x00	; 0
     7a0:	b0 70       	andi	r27, 0x00	; 0
     7a2:	80 34       	cpi	r24, 0x40	; 64
     7a4:	91 05       	cpc	r25, r1
     7a6:	a1 05       	cpc	r26, r1
     7a8:	b1 05       	cpc	r27, r1
     7aa:	61 f4       	brne	.+24     	; 0x7c4 <__mulsf3+0x1ce>
     7ac:	47 fd       	sbrc	r20, 7
     7ae:	0a c0       	rjmp	.+20     	; 0x7c4 <__mulsf3+0x1ce>
     7b0:	e1 14       	cp	r14, r1
     7b2:	f1 04       	cpc	r15, r1
     7b4:	01 05       	cpc	r16, r1
     7b6:	11 05       	cpc	r17, r1
     7b8:	29 f0       	breq	.+10     	; 0x7c4 <__mulsf3+0x1ce>
     7ba:	40 5c       	subi	r20, 0xC0	; 192
     7bc:	5f 4f       	sbci	r21, 0xFF	; 255
     7be:	6f 4f       	sbci	r22, 0xFF	; 255
     7c0:	7f 4f       	sbci	r23, 0xFF	; 255
     7c2:	40 78       	andi	r20, 0x80	; 128
     7c4:	1a 8e       	std	Y+26, r1	; 0x1a
     7c6:	fe 17       	cp	r31, r30
     7c8:	11 f0       	breq	.+4      	; 0x7ce <__mulsf3+0x1d8>
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	8a 8f       	std	Y+26, r24	; 0x1a
     7ce:	4d 8f       	std	Y+29, r20	; 0x1d
     7d0:	5e 8f       	std	Y+30, r21	; 0x1e
     7d2:	6f 8f       	std	Y+31, r22	; 0x1f
     7d4:	78 a3       	std	Y+32, r23	; 0x20
     7d6:	83 e0       	ldi	r24, 0x03	; 3
     7d8:	89 8f       	std	Y+25, r24	; 0x19
     7da:	ce 01       	movw	r24, r28
     7dc:	49 96       	adiw	r24, 0x19	; 25
     7de:	0e 94 2a 07 	call	0xe54	; 0xe54 <__pack_f>
     7e2:	a0 96       	adiw	r28, 0x20	; 32
     7e4:	e2 e1       	ldi	r30, 0x12	; 18
     7e6:	0c 94 93 31 	jmp	0x6326	; 0x6326 <__epilogue_restores__>

000007ea <__divsf3>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 7f 31 	jmp	0x62fe	; 0x62fe <__prologue_saves__+0x10>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	b9 e0       	ldi	r27, 0x09	; 9
     808:	eb 2e       	mov	r14, r27
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     82a:	29 85       	ldd	r18, Y+9	; 0x09
     82c:	22 30       	cpi	r18, 0x02	; 2
     82e:	08 f4       	brcc	.+2      	; 0x832 <__divsf3+0x48>
     830:	7e c0       	rjmp	.+252    	; 0x92e <__stack+0xcf>
     832:	39 89       	ldd	r19, Y+17	; 0x11
     834:	32 30       	cpi	r19, 0x02	; 2
     836:	10 f4       	brcc	.+4      	; 0x83c <__divsf3+0x52>
     838:	b8 01       	movw	r22, r16
     83a:	7c c0       	rjmp	.+248    	; 0x934 <__stack+0xd5>
     83c:	8a 85       	ldd	r24, Y+10	; 0x0a
     83e:	9a 89       	ldd	r25, Y+18	; 0x12
     840:	89 27       	eor	r24, r25
     842:	8a 87       	std	Y+10, r24	; 0x0a
     844:	24 30       	cpi	r18, 0x04	; 4
     846:	11 f0       	breq	.+4      	; 0x84c <__divsf3+0x62>
     848:	22 30       	cpi	r18, 0x02	; 2
     84a:	31 f4       	brne	.+12     	; 0x858 <__divsf3+0x6e>
     84c:	23 17       	cp	r18, r19
     84e:	09 f0       	breq	.+2      	; 0x852 <__divsf3+0x68>
     850:	6e c0       	rjmp	.+220    	; 0x92e <__stack+0xcf>
     852:	6d e9       	ldi	r22, 0x9D	; 157
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	6e c0       	rjmp	.+220    	; 0x934 <__stack+0xd5>
     858:	34 30       	cpi	r19, 0x04	; 4
     85a:	39 f4       	brne	.+14     	; 0x86a <__stack+0xb>
     85c:	1d 86       	std	Y+13, r1	; 0x0d
     85e:	1e 86       	std	Y+14, r1	; 0x0e
     860:	1f 86       	std	Y+15, r1	; 0x0f
     862:	18 8a       	std	Y+16, r1	; 0x10
     864:	1c 86       	std	Y+12, r1	; 0x0c
     866:	1b 86       	std	Y+11, r1	; 0x0b
     868:	04 c0       	rjmp	.+8      	; 0x872 <__stack+0x13>
     86a:	32 30       	cpi	r19, 0x02	; 2
     86c:	21 f4       	brne	.+8      	; 0x876 <__stack+0x17>
     86e:	84 e0       	ldi	r24, 0x04	; 4
     870:	89 87       	std	Y+9, r24	; 0x09
     872:	b7 01       	movw	r22, r14
     874:	5f c0       	rjmp	.+190    	; 0x934 <__stack+0xd5>
     876:	2b 85       	ldd	r18, Y+11	; 0x0b
     878:	3c 85       	ldd	r19, Y+12	; 0x0c
     87a:	8b 89       	ldd	r24, Y+19	; 0x13
     87c:	9c 89       	ldd	r25, Y+20	; 0x14
     87e:	28 1b       	sub	r18, r24
     880:	39 0b       	sbc	r19, r25
     882:	3c 87       	std	Y+12, r19	; 0x0c
     884:	2b 87       	std	Y+11, r18	; 0x0b
     886:	ed 84       	ldd	r14, Y+13	; 0x0d
     888:	fe 84       	ldd	r15, Y+14	; 0x0e
     88a:	0f 85       	ldd	r16, Y+15	; 0x0f
     88c:	18 89       	ldd	r17, Y+16	; 0x10
     88e:	ad 88       	ldd	r10, Y+21	; 0x15
     890:	be 88       	ldd	r11, Y+22	; 0x16
     892:	cf 88       	ldd	r12, Y+23	; 0x17
     894:	d8 8c       	ldd	r13, Y+24	; 0x18
     896:	ea 14       	cp	r14, r10
     898:	fb 04       	cpc	r15, r11
     89a:	0c 05       	cpc	r16, r12
     89c:	1d 05       	cpc	r17, r13
     89e:	40 f4       	brcc	.+16     	; 0x8b0 <__stack+0x51>
     8a0:	ee 0c       	add	r14, r14
     8a2:	ff 1c       	adc	r15, r15
     8a4:	00 1f       	adc	r16, r16
     8a6:	11 1f       	adc	r17, r17
     8a8:	21 50       	subi	r18, 0x01	; 1
     8aa:	30 40       	sbci	r19, 0x00	; 0
     8ac:	3c 87       	std	Y+12, r19	; 0x0c
     8ae:	2b 87       	std	Y+11, r18	; 0x0b
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	40 e0       	ldi	r20, 0x00	; 0
     8b6:	50 e0       	ldi	r21, 0x00	; 0
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	a0 e0       	ldi	r26, 0x00	; 0
     8be:	b0 e4       	ldi	r27, 0x40	; 64
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	ea 14       	cp	r14, r10
     8c6:	fb 04       	cpc	r15, r11
     8c8:	0c 05       	cpc	r16, r12
     8ca:	1d 05       	cpc	r17, r13
     8cc:	40 f0       	brcs	.+16     	; 0x8de <__stack+0x7f>
     8ce:	28 2b       	or	r18, r24
     8d0:	39 2b       	or	r19, r25
     8d2:	4a 2b       	or	r20, r26
     8d4:	5b 2b       	or	r21, r27
     8d6:	ea 18       	sub	r14, r10
     8d8:	fb 08       	sbc	r15, r11
     8da:	0c 09       	sbc	r16, r12
     8dc:	1d 09       	sbc	r17, r13
     8de:	b6 95       	lsr	r27
     8e0:	a7 95       	ror	r26
     8e2:	97 95       	ror	r25
     8e4:	87 95       	ror	r24
     8e6:	ee 0c       	add	r14, r14
     8e8:	ff 1c       	adc	r15, r15
     8ea:	00 1f       	adc	r16, r16
     8ec:	11 1f       	adc	r17, r17
     8ee:	6f 5f       	subi	r22, 0xFF	; 255
     8f0:	7f 4f       	sbci	r23, 0xFF	; 255
     8f2:	6f 31       	cpi	r22, 0x1F	; 31
     8f4:	71 05       	cpc	r23, r1
     8f6:	31 f7       	brne	.-52     	; 0x8c4 <__stack+0x65>
     8f8:	da 01       	movw	r26, r20
     8fa:	c9 01       	movw	r24, r18
     8fc:	8f 77       	andi	r24, 0x7F	; 127
     8fe:	90 70       	andi	r25, 0x00	; 0
     900:	a0 70       	andi	r26, 0x00	; 0
     902:	b0 70       	andi	r27, 0x00	; 0
     904:	80 34       	cpi	r24, 0x40	; 64
     906:	91 05       	cpc	r25, r1
     908:	a1 05       	cpc	r26, r1
     90a:	b1 05       	cpc	r27, r1
     90c:	61 f4       	brne	.+24     	; 0x926 <__stack+0xc7>
     90e:	27 fd       	sbrc	r18, 7
     910:	0a c0       	rjmp	.+20     	; 0x926 <__stack+0xc7>
     912:	e1 14       	cp	r14, r1
     914:	f1 04       	cpc	r15, r1
     916:	01 05       	cpc	r16, r1
     918:	11 05       	cpc	r17, r1
     91a:	29 f0       	breq	.+10     	; 0x926 <__stack+0xc7>
     91c:	20 5c       	subi	r18, 0xC0	; 192
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	4f 4f       	sbci	r20, 0xFF	; 255
     922:	5f 4f       	sbci	r21, 0xFF	; 255
     924:	20 78       	andi	r18, 0x80	; 128
     926:	2d 87       	std	Y+13, r18	; 0x0d
     928:	3e 87       	std	Y+14, r19	; 0x0e
     92a:	4f 87       	std	Y+15, r20	; 0x0f
     92c:	58 8b       	std	Y+16, r21	; 0x10
     92e:	be 01       	movw	r22, r28
     930:	67 5f       	subi	r22, 0xF7	; 247
     932:	7f 4f       	sbci	r23, 0xFF	; 255
     934:	cb 01       	movw	r24, r22
     936:	0e 94 2a 07 	call	0xe54	; 0xe54 <__pack_f>
     93a:	68 96       	adiw	r28, 0x18	; 24
     93c:	ea e0       	ldi	r30, 0x0A	; 10
     93e:	0c 94 9b 31 	jmp	0x6336	; 0x6336 <__epilogue_restores__+0x10>

00000942 <__gtsf2>:
     942:	a8 e1       	ldi	r26, 0x18	; 24
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 83 31 	jmp	0x6306	; 0x6306 <__prologue_saves__+0x18>
     94e:	69 83       	std	Y+1, r22	; 0x01
     950:	7a 83       	std	Y+2, r23	; 0x02
     952:	8b 83       	std	Y+3, r24	; 0x03
     954:	9c 83       	std	Y+4, r25	; 0x04
     956:	2d 83       	std	Y+5, r18	; 0x05
     958:	3e 83       	std	Y+6, r19	; 0x06
     95a:	4f 83       	std	Y+7, r20	; 0x07
     95c:	58 87       	std	Y+8, r21	; 0x08
     95e:	89 e0       	ldi	r24, 0x09	; 9
     960:	e8 2e       	mov	r14, r24
     962:	f1 2c       	mov	r15, r1
     964:	ec 0e       	add	r14, r28
     966:	fd 1e       	adc	r15, r29
     968:	ce 01       	movw	r24, r28
     96a:	01 96       	adiw	r24, 0x01	; 1
     96c:	b7 01       	movw	r22, r14
     96e:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     972:	8e 01       	movw	r16, r28
     974:	0f 5e       	subi	r16, 0xEF	; 239
     976:	1f 4f       	sbci	r17, 0xFF	; 255
     978:	ce 01       	movw	r24, r28
     97a:	05 96       	adiw	r24, 0x05	; 5
     97c:	b8 01       	movw	r22, r16
     97e:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     982:	89 85       	ldd	r24, Y+9	; 0x09
     984:	82 30       	cpi	r24, 0x02	; 2
     986:	40 f0       	brcs	.+16     	; 0x998 <__gtsf2+0x56>
     988:	89 89       	ldd	r24, Y+17	; 0x11
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	28 f0       	brcs	.+10     	; 0x998 <__gtsf2+0x56>
     98e:	c7 01       	movw	r24, r14
     990:	b8 01       	movw	r22, r16
     992:	0e 94 77 08 	call	0x10ee	; 0x10ee <__fpcmp_parts_f>
     996:	01 c0       	rjmp	.+2      	; 0x99a <__gtsf2+0x58>
     998:	8f ef       	ldi	r24, 0xFF	; 255
     99a:	68 96       	adiw	r28, 0x18	; 24
     99c:	e6 e0       	ldi	r30, 0x06	; 6
     99e:	0c 94 9f 31 	jmp	0x633e	; 0x633e <__epilogue_restores__+0x18>

000009a2 <__gesf2>:
     9a2:	a8 e1       	ldi	r26, 0x18	; 24
     9a4:	b0 e0       	ldi	r27, 0x00	; 0
     9a6:	e7 ed       	ldi	r30, 0xD7	; 215
     9a8:	f4 e0       	ldi	r31, 0x04	; 4
     9aa:	0c 94 83 31 	jmp	0x6306	; 0x6306 <__prologue_saves__+0x18>
     9ae:	69 83       	std	Y+1, r22	; 0x01
     9b0:	7a 83       	std	Y+2, r23	; 0x02
     9b2:	8b 83       	std	Y+3, r24	; 0x03
     9b4:	9c 83       	std	Y+4, r25	; 0x04
     9b6:	2d 83       	std	Y+5, r18	; 0x05
     9b8:	3e 83       	std	Y+6, r19	; 0x06
     9ba:	4f 83       	std	Y+7, r20	; 0x07
     9bc:	58 87       	std	Y+8, r21	; 0x08
     9be:	89 e0       	ldi	r24, 0x09	; 9
     9c0:	e8 2e       	mov	r14, r24
     9c2:	f1 2c       	mov	r15, r1
     9c4:	ec 0e       	add	r14, r28
     9c6:	fd 1e       	adc	r15, r29
     9c8:	ce 01       	movw	r24, r28
     9ca:	01 96       	adiw	r24, 0x01	; 1
     9cc:	b7 01       	movw	r22, r14
     9ce:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     9d2:	8e 01       	movw	r16, r28
     9d4:	0f 5e       	subi	r16, 0xEF	; 239
     9d6:	1f 4f       	sbci	r17, 0xFF	; 255
     9d8:	ce 01       	movw	r24, r28
     9da:	05 96       	adiw	r24, 0x05	; 5
     9dc:	b8 01       	movw	r22, r16
     9de:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     9e2:	89 85       	ldd	r24, Y+9	; 0x09
     9e4:	82 30       	cpi	r24, 0x02	; 2
     9e6:	40 f0       	brcs	.+16     	; 0x9f8 <__gesf2+0x56>
     9e8:	89 89       	ldd	r24, Y+17	; 0x11
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	28 f0       	brcs	.+10     	; 0x9f8 <__gesf2+0x56>
     9ee:	c7 01       	movw	r24, r14
     9f0:	b8 01       	movw	r22, r16
     9f2:	0e 94 77 08 	call	0x10ee	; 0x10ee <__fpcmp_parts_f>
     9f6:	01 c0       	rjmp	.+2      	; 0x9fa <__gesf2+0x58>
     9f8:	8f ef       	ldi	r24, 0xFF	; 255
     9fa:	68 96       	adiw	r28, 0x18	; 24
     9fc:	e6 e0       	ldi	r30, 0x06	; 6
     9fe:	0c 94 9f 31 	jmp	0x633e	; 0x633e <__epilogue_restores__+0x18>

00000a02 <__ltsf2>:
     a02:	a8 e1       	ldi	r26, 0x18	; 24
     a04:	b0 e0       	ldi	r27, 0x00	; 0
     a06:	e7 e0       	ldi	r30, 0x07	; 7
     a08:	f5 e0       	ldi	r31, 0x05	; 5
     a0a:	0c 94 83 31 	jmp	0x6306	; 0x6306 <__prologue_saves__+0x18>
     a0e:	69 83       	std	Y+1, r22	; 0x01
     a10:	7a 83       	std	Y+2, r23	; 0x02
     a12:	8b 83       	std	Y+3, r24	; 0x03
     a14:	9c 83       	std	Y+4, r25	; 0x04
     a16:	2d 83       	std	Y+5, r18	; 0x05
     a18:	3e 83       	std	Y+6, r19	; 0x06
     a1a:	4f 83       	std	Y+7, r20	; 0x07
     a1c:	58 87       	std	Y+8, r21	; 0x08
     a1e:	89 e0       	ldi	r24, 0x09	; 9
     a20:	e8 2e       	mov	r14, r24
     a22:	f1 2c       	mov	r15, r1
     a24:	ec 0e       	add	r14, r28
     a26:	fd 1e       	adc	r15, r29
     a28:	ce 01       	movw	r24, r28
     a2a:	01 96       	adiw	r24, 0x01	; 1
     a2c:	b7 01       	movw	r22, r14
     a2e:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     a32:	8e 01       	movw	r16, r28
     a34:	0f 5e       	subi	r16, 0xEF	; 239
     a36:	1f 4f       	sbci	r17, 0xFF	; 255
     a38:	ce 01       	movw	r24, r28
     a3a:	05 96       	adiw	r24, 0x05	; 5
     a3c:	b8 01       	movw	r22, r16
     a3e:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     a42:	89 85       	ldd	r24, Y+9	; 0x09
     a44:	82 30       	cpi	r24, 0x02	; 2
     a46:	40 f0       	brcs	.+16     	; 0xa58 <__ltsf2+0x56>
     a48:	89 89       	ldd	r24, Y+17	; 0x11
     a4a:	82 30       	cpi	r24, 0x02	; 2
     a4c:	28 f0       	brcs	.+10     	; 0xa58 <__ltsf2+0x56>
     a4e:	c7 01       	movw	r24, r14
     a50:	b8 01       	movw	r22, r16
     a52:	0e 94 77 08 	call	0x10ee	; 0x10ee <__fpcmp_parts_f>
     a56:	01 c0       	rjmp	.+2      	; 0xa5a <__ltsf2+0x58>
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	68 96       	adiw	r28, 0x18	; 24
     a5c:	e6 e0       	ldi	r30, 0x06	; 6
     a5e:	0c 94 9f 31 	jmp	0x633e	; 0x633e <__epilogue_restores__+0x18>

00000a62 <__floatsisf>:
     a62:	a8 e0       	ldi	r26, 0x08	; 8
     a64:	b0 e0       	ldi	r27, 0x00	; 0
     a66:	e7 e3       	ldi	r30, 0x37	; 55
     a68:	f5 e0       	ldi	r31, 0x05	; 5
     a6a:	0c 94 80 31 	jmp	0x6300	; 0x6300 <__prologue_saves__+0x12>
     a6e:	9b 01       	movw	r18, r22
     a70:	ac 01       	movw	r20, r24
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	89 83       	std	Y+1, r24	; 0x01
     a76:	da 01       	movw	r26, r20
     a78:	c9 01       	movw	r24, r18
     a7a:	88 27       	eor	r24, r24
     a7c:	b7 fd       	sbrc	r27, 7
     a7e:	83 95       	inc	r24
     a80:	99 27       	eor	r25, r25
     a82:	aa 27       	eor	r26, r26
     a84:	bb 27       	eor	r27, r27
     a86:	b8 2e       	mov	r11, r24
     a88:	21 15       	cp	r18, r1
     a8a:	31 05       	cpc	r19, r1
     a8c:	41 05       	cpc	r20, r1
     a8e:	51 05       	cpc	r21, r1
     a90:	19 f4       	brne	.+6      	; 0xa98 <__floatsisf+0x36>
     a92:	82 e0       	ldi	r24, 0x02	; 2
     a94:	89 83       	std	Y+1, r24	; 0x01
     a96:	3a c0       	rjmp	.+116    	; 0xb0c <__floatsisf+0xaa>
     a98:	88 23       	and	r24, r24
     a9a:	a9 f0       	breq	.+42     	; 0xac6 <__floatsisf+0x64>
     a9c:	20 30       	cpi	r18, 0x00	; 0
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	38 07       	cpc	r19, r24
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	48 07       	cpc	r20, r24
     aa6:	80 e8       	ldi	r24, 0x80	; 128
     aa8:	58 07       	cpc	r21, r24
     aaa:	29 f4       	brne	.+10     	; 0xab6 <__floatsisf+0x54>
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	9f ec       	ldi	r25, 0xCF	; 207
     ab4:	30 c0       	rjmp	.+96     	; 0xb16 <__floatsisf+0xb4>
     ab6:	ee 24       	eor	r14, r14
     ab8:	ff 24       	eor	r15, r15
     aba:	87 01       	movw	r16, r14
     abc:	e2 1a       	sub	r14, r18
     abe:	f3 0a       	sbc	r15, r19
     ac0:	04 0b       	sbc	r16, r20
     ac2:	15 0b       	sbc	r17, r21
     ac4:	02 c0       	rjmp	.+4      	; 0xaca <__floatsisf+0x68>
     ac6:	79 01       	movw	r14, r18
     ac8:	8a 01       	movw	r16, r20
     aca:	8e e1       	ldi	r24, 0x1E	; 30
     acc:	c8 2e       	mov	r12, r24
     ace:	d1 2c       	mov	r13, r1
     ad0:	dc 82       	std	Y+4, r13	; 0x04
     ad2:	cb 82       	std	Y+3, r12	; 0x03
     ad4:	ed 82       	std	Y+5, r14	; 0x05
     ad6:	fe 82       	std	Y+6, r15	; 0x06
     ad8:	0f 83       	std	Y+7, r16	; 0x07
     ada:	18 87       	std	Y+8, r17	; 0x08
     adc:	c8 01       	movw	r24, r16
     ade:	b7 01       	movw	r22, r14
     ae0:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__clzsi2>
     ae4:	01 97       	sbiw	r24, 0x01	; 1
     ae6:	18 16       	cp	r1, r24
     ae8:	19 06       	cpc	r1, r25
     aea:	84 f4       	brge	.+32     	; 0xb0c <__floatsisf+0xaa>
     aec:	08 2e       	mov	r0, r24
     aee:	04 c0       	rjmp	.+8      	; 0xaf8 <__floatsisf+0x96>
     af0:	ee 0c       	add	r14, r14
     af2:	ff 1c       	adc	r15, r15
     af4:	00 1f       	adc	r16, r16
     af6:	11 1f       	adc	r17, r17
     af8:	0a 94       	dec	r0
     afa:	d2 f7       	brpl	.-12     	; 0xaf0 <__floatsisf+0x8e>
     afc:	ed 82       	std	Y+5, r14	; 0x05
     afe:	fe 82       	std	Y+6, r15	; 0x06
     b00:	0f 83       	std	Y+7, r16	; 0x07
     b02:	18 87       	std	Y+8, r17	; 0x08
     b04:	c8 1a       	sub	r12, r24
     b06:	d9 0a       	sbc	r13, r25
     b08:	dc 82       	std	Y+4, r13	; 0x04
     b0a:	cb 82       	std	Y+3, r12	; 0x03
     b0c:	ba 82       	std	Y+2, r11	; 0x02
     b0e:	ce 01       	movw	r24, r28
     b10:	01 96       	adiw	r24, 0x01	; 1
     b12:	0e 94 2a 07 	call	0xe54	; 0xe54 <__pack_f>
     b16:	28 96       	adiw	r28, 0x08	; 8
     b18:	e9 e0       	ldi	r30, 0x09	; 9
     b1a:	0c 94 9c 31 	jmp	0x6338	; 0x6338 <__epilogue_restores__+0x12>

00000b1e <__fixsfsi>:
     b1e:	ac e0       	ldi	r26, 0x0C	; 12
     b20:	b0 e0       	ldi	r27, 0x00	; 0
     b22:	e5 e9       	ldi	r30, 0x95	; 149
     b24:	f5 e0       	ldi	r31, 0x05	; 5
     b26:	0c 94 87 31 	jmp	0x630e	; 0x630e <__prologue_saves__+0x20>
     b2a:	69 83       	std	Y+1, r22	; 0x01
     b2c:	7a 83       	std	Y+2, r23	; 0x02
     b2e:	8b 83       	std	Y+3, r24	; 0x03
     b30:	9c 83       	std	Y+4, r25	; 0x04
     b32:	ce 01       	movw	r24, r28
     b34:	01 96       	adiw	r24, 0x01	; 1
     b36:	be 01       	movw	r22, r28
     b38:	6b 5f       	subi	r22, 0xFB	; 251
     b3a:	7f 4f       	sbci	r23, 0xFF	; 255
     b3c:	0e 94 ff 07 	call	0xffe	; 0xffe <__unpack_f>
     b40:	8d 81       	ldd	r24, Y+5	; 0x05
     b42:	82 30       	cpi	r24, 0x02	; 2
     b44:	61 f1       	breq	.+88     	; 0xb9e <__fixsfsi+0x80>
     b46:	82 30       	cpi	r24, 0x02	; 2
     b48:	50 f1       	brcs	.+84     	; 0xb9e <__fixsfsi+0x80>
     b4a:	84 30       	cpi	r24, 0x04	; 4
     b4c:	21 f4       	brne	.+8      	; 0xb56 <__fixsfsi+0x38>
     b4e:	8e 81       	ldd	r24, Y+6	; 0x06
     b50:	88 23       	and	r24, r24
     b52:	51 f1       	breq	.+84     	; 0xba8 <__fixsfsi+0x8a>
     b54:	2e c0       	rjmp	.+92     	; 0xbb2 <__fixsfsi+0x94>
     b56:	2f 81       	ldd	r18, Y+7	; 0x07
     b58:	38 85       	ldd	r19, Y+8	; 0x08
     b5a:	37 fd       	sbrc	r19, 7
     b5c:	20 c0       	rjmp	.+64     	; 0xb9e <__fixsfsi+0x80>
     b5e:	6e 81       	ldd	r22, Y+6	; 0x06
     b60:	2f 31       	cpi	r18, 0x1F	; 31
     b62:	31 05       	cpc	r19, r1
     b64:	1c f0       	brlt	.+6      	; 0xb6c <__fixsfsi+0x4e>
     b66:	66 23       	and	r22, r22
     b68:	f9 f0       	breq	.+62     	; 0xba8 <__fixsfsi+0x8a>
     b6a:	23 c0       	rjmp	.+70     	; 0xbb2 <__fixsfsi+0x94>
     b6c:	8e e1       	ldi	r24, 0x1E	; 30
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	82 1b       	sub	r24, r18
     b72:	93 0b       	sbc	r25, r19
     b74:	29 85       	ldd	r18, Y+9	; 0x09
     b76:	3a 85       	ldd	r19, Y+10	; 0x0a
     b78:	4b 85       	ldd	r20, Y+11	; 0x0b
     b7a:	5c 85       	ldd	r21, Y+12	; 0x0c
     b7c:	04 c0       	rjmp	.+8      	; 0xb86 <__fixsfsi+0x68>
     b7e:	56 95       	lsr	r21
     b80:	47 95       	ror	r20
     b82:	37 95       	ror	r19
     b84:	27 95       	ror	r18
     b86:	8a 95       	dec	r24
     b88:	d2 f7       	brpl	.-12     	; 0xb7e <__fixsfsi+0x60>
     b8a:	66 23       	and	r22, r22
     b8c:	b1 f0       	breq	.+44     	; 0xbba <__fixsfsi+0x9c>
     b8e:	50 95       	com	r21
     b90:	40 95       	com	r20
     b92:	30 95       	com	r19
     b94:	21 95       	neg	r18
     b96:	3f 4f       	sbci	r19, 0xFF	; 255
     b98:	4f 4f       	sbci	r20, 0xFF	; 255
     b9a:	5f 4f       	sbci	r21, 0xFF	; 255
     b9c:	0e c0       	rjmp	.+28     	; 0xbba <__fixsfsi+0x9c>
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	40 e0       	ldi	r20, 0x00	; 0
     ba4:	50 e0       	ldi	r21, 0x00	; 0
     ba6:	09 c0       	rjmp	.+18     	; 0xbba <__fixsfsi+0x9c>
     ba8:	2f ef       	ldi	r18, 0xFF	; 255
     baa:	3f ef       	ldi	r19, 0xFF	; 255
     bac:	4f ef       	ldi	r20, 0xFF	; 255
     bae:	5f e7       	ldi	r21, 0x7F	; 127
     bb0:	04 c0       	rjmp	.+8      	; 0xbba <__fixsfsi+0x9c>
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	40 e0       	ldi	r20, 0x00	; 0
     bb8:	50 e8       	ldi	r21, 0x80	; 128
     bba:	b9 01       	movw	r22, r18
     bbc:	ca 01       	movw	r24, r20
     bbe:	2c 96       	adiw	r28, 0x0c	; 12
     bc0:	e2 e0       	ldi	r30, 0x02	; 2
     bc2:	0c 94 a3 31 	jmp	0x6346	; 0x6346 <__epilogue_restores__+0x20>

00000bc6 <__floatunsisf>:
     bc6:	a8 e0       	ldi	r26, 0x08	; 8
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	e9 ee       	ldi	r30, 0xE9	; 233
     bcc:	f5 e0       	ldi	r31, 0x05	; 5
     bce:	0c 94 7f 31 	jmp	0x62fe	; 0x62fe <__prologue_saves__+0x10>
     bd2:	7b 01       	movw	r14, r22
     bd4:	8c 01       	movw	r16, r24
     bd6:	61 15       	cp	r22, r1
     bd8:	71 05       	cpc	r23, r1
     bda:	81 05       	cpc	r24, r1
     bdc:	91 05       	cpc	r25, r1
     bde:	19 f4       	brne	.+6      	; 0xbe6 <__floatunsisf+0x20>
     be0:	82 e0       	ldi	r24, 0x02	; 2
     be2:	89 83       	std	Y+1, r24	; 0x01
     be4:	60 c0       	rjmp	.+192    	; 0xca6 <__floatunsisf+0xe0>
     be6:	83 e0       	ldi	r24, 0x03	; 3
     be8:	89 83       	std	Y+1, r24	; 0x01
     bea:	8e e1       	ldi	r24, 0x1E	; 30
     bec:	c8 2e       	mov	r12, r24
     bee:	d1 2c       	mov	r13, r1
     bf0:	dc 82       	std	Y+4, r13	; 0x04
     bf2:	cb 82       	std	Y+3, r12	; 0x03
     bf4:	ed 82       	std	Y+5, r14	; 0x05
     bf6:	fe 82       	std	Y+6, r15	; 0x06
     bf8:	0f 83       	std	Y+7, r16	; 0x07
     bfa:	18 87       	std	Y+8, r17	; 0x08
     bfc:	c8 01       	movw	r24, r16
     bfe:	b7 01       	movw	r22, r14
     c00:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__clzsi2>
     c04:	fc 01       	movw	r30, r24
     c06:	31 97       	sbiw	r30, 0x01	; 1
     c08:	f7 ff       	sbrs	r31, 7
     c0a:	3b c0       	rjmp	.+118    	; 0xc82 <__floatunsisf+0xbc>
     c0c:	22 27       	eor	r18, r18
     c0e:	33 27       	eor	r19, r19
     c10:	2e 1b       	sub	r18, r30
     c12:	3f 0b       	sbc	r19, r31
     c14:	57 01       	movw	r10, r14
     c16:	68 01       	movw	r12, r16
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__floatunsisf+0x5e>
     c1c:	d6 94       	lsr	r13
     c1e:	c7 94       	ror	r12
     c20:	b7 94       	ror	r11
     c22:	a7 94       	ror	r10
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__floatunsisf+0x56>
     c28:	40 e0       	ldi	r20, 0x00	; 0
     c2a:	50 e0       	ldi	r21, 0x00	; 0
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	a0 e0       	ldi	r26, 0x00	; 0
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	04 c0       	rjmp	.+8      	; 0xc42 <__floatunsisf+0x7c>
     c3a:	88 0f       	add	r24, r24
     c3c:	99 1f       	adc	r25, r25
     c3e:	aa 1f       	adc	r26, r26
     c40:	bb 1f       	adc	r27, r27
     c42:	2a 95       	dec	r18
     c44:	d2 f7       	brpl	.-12     	; 0xc3a <__floatunsisf+0x74>
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	a1 09       	sbc	r26, r1
     c4a:	b1 09       	sbc	r27, r1
     c4c:	8e 21       	and	r24, r14
     c4e:	9f 21       	and	r25, r15
     c50:	a0 23       	and	r26, r16
     c52:	b1 23       	and	r27, r17
     c54:	00 97       	sbiw	r24, 0x00	; 0
     c56:	a1 05       	cpc	r26, r1
     c58:	b1 05       	cpc	r27, r1
     c5a:	21 f0       	breq	.+8      	; 0xc64 <__floatunsisf+0x9e>
     c5c:	41 e0       	ldi	r20, 0x01	; 1
     c5e:	50 e0       	ldi	r21, 0x00	; 0
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	4a 29       	or	r20, r10
     c66:	5b 29       	or	r21, r11
     c68:	6c 29       	or	r22, r12
     c6a:	7d 29       	or	r23, r13
     c6c:	4d 83       	std	Y+5, r20	; 0x05
     c6e:	5e 83       	std	Y+6, r21	; 0x06
     c70:	6f 83       	std	Y+7, r22	; 0x07
     c72:	78 87       	std	Y+8, r23	; 0x08
     c74:	8e e1       	ldi	r24, 0x1E	; 30
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	8e 1b       	sub	r24, r30
     c7a:	9f 0b       	sbc	r25, r31
     c7c:	9c 83       	std	Y+4, r25	; 0x04
     c7e:	8b 83       	std	Y+3, r24	; 0x03
     c80:	12 c0       	rjmp	.+36     	; 0xca6 <__floatunsisf+0xe0>
     c82:	30 97       	sbiw	r30, 0x00	; 0
     c84:	81 f0       	breq	.+32     	; 0xca6 <__floatunsisf+0xe0>
     c86:	0e 2e       	mov	r0, r30
     c88:	04 c0       	rjmp	.+8      	; 0xc92 <__floatunsisf+0xcc>
     c8a:	ee 0c       	add	r14, r14
     c8c:	ff 1c       	adc	r15, r15
     c8e:	00 1f       	adc	r16, r16
     c90:	11 1f       	adc	r17, r17
     c92:	0a 94       	dec	r0
     c94:	d2 f7       	brpl	.-12     	; 0xc8a <__floatunsisf+0xc4>
     c96:	ed 82       	std	Y+5, r14	; 0x05
     c98:	fe 82       	std	Y+6, r15	; 0x06
     c9a:	0f 83       	std	Y+7, r16	; 0x07
     c9c:	18 87       	std	Y+8, r17	; 0x08
     c9e:	ce 1a       	sub	r12, r30
     ca0:	df 0a       	sbc	r13, r31
     ca2:	dc 82       	std	Y+4, r13	; 0x04
     ca4:	cb 82       	std	Y+3, r12	; 0x03
     ca6:	1a 82       	std	Y+2, r1	; 0x02
     ca8:	ce 01       	movw	r24, r28
     caa:	01 96       	adiw	r24, 0x01	; 1
     cac:	0e 94 2a 07 	call	0xe54	; 0xe54 <__pack_f>
     cb0:	28 96       	adiw	r28, 0x08	; 8
     cb2:	ea e0       	ldi	r30, 0x0A	; 10
     cb4:	0c 94 9b 31 	jmp	0x6336	; 0x6336 <__epilogue_restores__+0x10>

00000cb8 <__lshrdi3>:
     cb8:	ef 92       	push	r14
     cba:	ff 92       	push	r15
     cbc:	0f 93       	push	r16
     cbe:	df 93       	push	r29
     cc0:	cf 93       	push	r28
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	60 97       	sbiw	r28, 0x10	; 16
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	f8 94       	cli
     ccc:	de bf       	out	0x3e, r29	; 62
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	cd bf       	out	0x3d, r28	; 61
     cd2:	a8 2f       	mov	r26, r24
     cd4:	00 23       	and	r16, r16
     cd6:	09 f4       	brne	.+2      	; 0xcda <__lshrdi3+0x22>
     cd8:	61 c0       	rjmp	.+194    	; 0xd9c <__lshrdi3+0xe4>
     cda:	7e 01       	movw	r14, r28
     cdc:	08 94       	sec
     cde:	e1 1c       	adc	r14, r1
     ce0:	f1 1c       	adc	r15, r1
     ce2:	88 e0       	ldi	r24, 0x08	; 8
     ce4:	f7 01       	movw	r30, r14
     ce6:	11 92       	st	Z+, r1
     ce8:	8a 95       	dec	r24
     cea:	e9 f7       	brne	.-6      	; 0xce6 <__lshrdi3+0x2e>
     cec:	29 83       	std	Y+1, r18	; 0x01
     cee:	3a 83       	std	Y+2, r19	; 0x02
     cf0:	4b 83       	std	Y+3, r20	; 0x03
     cf2:	5c 83       	std	Y+4, r21	; 0x04
     cf4:	6d 83       	std	Y+5, r22	; 0x05
     cf6:	7e 83       	std	Y+6, r23	; 0x06
     cf8:	af 83       	std	Y+7, r26	; 0x07
     cfa:	98 87       	std	Y+8, r25	; 0x08
     cfc:	80 e2       	ldi	r24, 0x20	; 32
     cfe:	80 1b       	sub	r24, r16
     d00:	e8 2f       	mov	r30, r24
     d02:	ff 27       	eor	r31, r31
     d04:	e7 fd       	sbrc	r30, 7
     d06:	f0 95       	com	r31
     d08:	4d 81       	ldd	r20, Y+5	; 0x05
     d0a:	5e 81       	ldd	r21, Y+6	; 0x06
     d0c:	6f 81       	ldd	r22, Y+7	; 0x07
     d0e:	78 85       	ldd	r23, Y+8	; 0x08
     d10:	18 16       	cp	r1, r24
     d12:	84 f0       	brlt	.+32     	; 0xd34 <__lshrdi3+0x7c>
     d14:	1d 86       	std	Y+13, r1	; 0x0d
     d16:	1e 86       	std	Y+14, r1	; 0x0e
     d18:	1f 86       	std	Y+15, r1	; 0x0f
     d1a:	18 8a       	std	Y+16, r1	; 0x10
     d1c:	88 27       	eor	r24, r24
     d1e:	99 27       	eor	r25, r25
     d20:	8e 1b       	sub	r24, r30
     d22:	9f 0b       	sbc	r25, r31
     d24:	04 c0       	rjmp	.+8      	; 0xd2e <__lshrdi3+0x76>
     d26:	76 95       	lsr	r23
     d28:	67 95       	ror	r22
     d2a:	57 95       	ror	r21
     d2c:	47 95       	ror	r20
     d2e:	8a 95       	dec	r24
     d30:	d2 f7       	brpl	.-12     	; 0xd26 <__lshrdi3+0x6e>
     d32:	28 c0       	rjmp	.+80     	; 0xd84 <__lshrdi3+0xcc>
     d34:	20 2f       	mov	r18, r16
     d36:	33 27       	eor	r19, r19
     d38:	27 fd       	sbrc	r18, 7
     d3a:	30 95       	com	r19
     d3c:	db 01       	movw	r26, r22
     d3e:	ca 01       	movw	r24, r20
     d40:	02 2e       	mov	r0, r18
     d42:	04 c0       	rjmp	.+8      	; 0xd4c <__lshrdi3+0x94>
     d44:	b6 95       	lsr	r27
     d46:	a7 95       	ror	r26
     d48:	97 95       	ror	r25
     d4a:	87 95       	ror	r24
     d4c:	0a 94       	dec	r0
     d4e:	d2 f7       	brpl	.-12     	; 0xd44 <__lshrdi3+0x8c>
     d50:	8d 87       	std	Y+13, r24	; 0x0d
     d52:	9e 87       	std	Y+14, r25	; 0x0e
     d54:	af 87       	std	Y+15, r26	; 0x0f
     d56:	b8 8b       	std	Y+16, r27	; 0x10
     d58:	04 c0       	rjmp	.+8      	; 0xd62 <__lshrdi3+0xaa>
     d5a:	44 0f       	add	r20, r20
     d5c:	55 1f       	adc	r21, r21
     d5e:	66 1f       	adc	r22, r22
     d60:	77 1f       	adc	r23, r23
     d62:	ea 95       	dec	r30
     d64:	d2 f7       	brpl	.-12     	; 0xd5a <__lshrdi3+0xa2>
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	9a 81       	ldd	r25, Y+2	; 0x02
     d6a:	ab 81       	ldd	r26, Y+3	; 0x03
     d6c:	bc 81       	ldd	r27, Y+4	; 0x04
     d6e:	04 c0       	rjmp	.+8      	; 0xd78 <__lshrdi3+0xc0>
     d70:	b6 95       	lsr	r27
     d72:	a7 95       	ror	r26
     d74:	97 95       	ror	r25
     d76:	87 95       	ror	r24
     d78:	2a 95       	dec	r18
     d7a:	d2 f7       	brpl	.-12     	; 0xd70 <__lshrdi3+0xb8>
     d7c:	48 2b       	or	r20, r24
     d7e:	59 2b       	or	r21, r25
     d80:	6a 2b       	or	r22, r26
     d82:	7b 2b       	or	r23, r27
     d84:	49 87       	std	Y+9, r20	; 0x09
     d86:	5a 87       	std	Y+10, r21	; 0x0a
     d88:	6b 87       	std	Y+11, r22	; 0x0b
     d8a:	7c 87       	std	Y+12, r23	; 0x0c
     d8c:	29 85       	ldd	r18, Y+9	; 0x09
     d8e:	3a 85       	ldd	r19, Y+10	; 0x0a
     d90:	4b 85       	ldd	r20, Y+11	; 0x0b
     d92:	5c 85       	ldd	r21, Y+12	; 0x0c
     d94:	6d 85       	ldd	r22, Y+13	; 0x0d
     d96:	7e 85       	ldd	r23, Y+14	; 0x0e
     d98:	af 85       	ldd	r26, Y+15	; 0x0f
     d9a:	98 89       	ldd	r25, Y+16	; 0x10
     d9c:	8a 2f       	mov	r24, r26
     d9e:	60 96       	adiw	r28, 0x10	; 16
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	cf 91       	pop	r28
     dac:	df 91       	pop	r29
     dae:	0f 91       	pop	r16
     db0:	ff 90       	pop	r15
     db2:	ef 90       	pop	r14
     db4:	08 95       	ret

00000db6 <__clzsi2>:
     db6:	ef 92       	push	r14
     db8:	ff 92       	push	r15
     dba:	0f 93       	push	r16
     dbc:	1f 93       	push	r17
     dbe:	7b 01       	movw	r14, r22
     dc0:	8c 01       	movw	r16, r24
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	e8 16       	cp	r14, r24
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	f8 06       	cpc	r15, r24
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	08 07       	cpc	r16, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	18 07       	cpc	r17, r24
     dd2:	88 f4       	brcc	.+34     	; 0xdf6 <__clzsi2+0x40>
     dd4:	8f ef       	ldi	r24, 0xFF	; 255
     dd6:	e8 16       	cp	r14, r24
     dd8:	f1 04       	cpc	r15, r1
     dda:	01 05       	cpc	r16, r1
     ddc:	11 05       	cpc	r17, r1
     dde:	31 f0       	breq	.+12     	; 0xdec <__clzsi2+0x36>
     de0:	28 f0       	brcs	.+10     	; 0xdec <__clzsi2+0x36>
     de2:	88 e0       	ldi	r24, 0x08	; 8
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	a0 e0       	ldi	r26, 0x00	; 0
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	17 c0       	rjmp	.+46     	; 0xe1a <__clzsi2+0x64>
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	a0 e0       	ldi	r26, 0x00	; 0
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	12 c0       	rjmp	.+36     	; 0xe1a <__clzsi2+0x64>
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	e8 16       	cp	r14, r24
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	f8 06       	cpc	r15, r24
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	08 07       	cpc	r16, r24
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	18 07       	cpc	r17, r24
     e06:	28 f0       	brcs	.+10     	; 0xe12 <__clzsi2+0x5c>
     e08:	88 e1       	ldi	r24, 0x18	; 24
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	a0 e0       	ldi	r26, 0x00	; 0
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	04 c0       	rjmp	.+8      	; 0xe1a <__clzsi2+0x64>
     e12:	80 e1       	ldi	r24, 0x10	; 16
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	a0 e0       	ldi	r26, 0x00	; 0
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	20 e2       	ldi	r18, 0x20	; 32
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	40 e0       	ldi	r20, 0x00	; 0
     e20:	50 e0       	ldi	r21, 0x00	; 0
     e22:	28 1b       	sub	r18, r24
     e24:	39 0b       	sbc	r19, r25
     e26:	4a 0b       	sbc	r20, r26
     e28:	5b 0b       	sbc	r21, r27
     e2a:	04 c0       	rjmp	.+8      	; 0xe34 <__clzsi2+0x7e>
     e2c:	16 95       	lsr	r17
     e2e:	07 95       	ror	r16
     e30:	f7 94       	ror	r15
     e32:	e7 94       	ror	r14
     e34:	8a 95       	dec	r24
     e36:	d2 f7       	brpl	.-12     	; 0xe2c <__clzsi2+0x76>
     e38:	f7 01       	movw	r30, r14
     e3a:	eb 55       	subi	r30, 0x5B	; 91
     e3c:	ff 4f       	sbci	r31, 0xFF	; 255
     e3e:	80 81       	ld	r24, Z
     e40:	28 1b       	sub	r18, r24
     e42:	31 09       	sbc	r19, r1
     e44:	41 09       	sbc	r20, r1
     e46:	51 09       	sbc	r21, r1
     e48:	c9 01       	movw	r24, r18
     e4a:	1f 91       	pop	r17
     e4c:	0f 91       	pop	r16
     e4e:	ff 90       	pop	r15
     e50:	ef 90       	pop	r14
     e52:	08 95       	ret

00000e54 <__pack_f>:
     e54:	df 92       	push	r13
     e56:	ef 92       	push	r14
     e58:	ff 92       	push	r15
     e5a:	0f 93       	push	r16
     e5c:	1f 93       	push	r17
     e5e:	fc 01       	movw	r30, r24
     e60:	e4 80       	ldd	r14, Z+4	; 0x04
     e62:	f5 80       	ldd	r15, Z+5	; 0x05
     e64:	06 81       	ldd	r16, Z+6	; 0x06
     e66:	17 81       	ldd	r17, Z+7	; 0x07
     e68:	d1 80       	ldd	r13, Z+1	; 0x01
     e6a:	80 81       	ld	r24, Z
     e6c:	82 30       	cpi	r24, 0x02	; 2
     e6e:	48 f4       	brcc	.+18     	; 0xe82 <__pack_f+0x2e>
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	a0 e1       	ldi	r26, 0x10	; 16
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e8 2a       	or	r14, r24
     e7a:	f9 2a       	or	r15, r25
     e7c:	0a 2b       	or	r16, r26
     e7e:	1b 2b       	or	r17, r27
     e80:	a5 c0       	rjmp	.+330    	; 0xfcc <__pack_f+0x178>
     e82:	84 30       	cpi	r24, 0x04	; 4
     e84:	09 f4       	brne	.+2      	; 0xe88 <__pack_f+0x34>
     e86:	9f c0       	rjmp	.+318    	; 0xfc6 <__pack_f+0x172>
     e88:	82 30       	cpi	r24, 0x02	; 2
     e8a:	21 f4       	brne	.+8      	; 0xe94 <__pack_f+0x40>
     e8c:	ee 24       	eor	r14, r14
     e8e:	ff 24       	eor	r15, r15
     e90:	87 01       	movw	r16, r14
     e92:	05 c0       	rjmp	.+10     	; 0xe9e <__pack_f+0x4a>
     e94:	e1 14       	cp	r14, r1
     e96:	f1 04       	cpc	r15, r1
     e98:	01 05       	cpc	r16, r1
     e9a:	11 05       	cpc	r17, r1
     e9c:	19 f4       	brne	.+6      	; 0xea4 <__pack_f+0x50>
     e9e:	e0 e0       	ldi	r30, 0x00	; 0
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	96 c0       	rjmp	.+300    	; 0xfd0 <__pack_f+0x17c>
     ea4:	62 81       	ldd	r22, Z+2	; 0x02
     ea6:	73 81       	ldd	r23, Z+3	; 0x03
     ea8:	9f ef       	ldi	r25, 0xFF	; 255
     eaa:	62 38       	cpi	r22, 0x82	; 130
     eac:	79 07       	cpc	r23, r25
     eae:	0c f0       	brlt	.+2      	; 0xeb2 <__pack_f+0x5e>
     eb0:	5b c0       	rjmp	.+182    	; 0xf68 <__pack_f+0x114>
     eb2:	22 e8       	ldi	r18, 0x82	; 130
     eb4:	3f ef       	ldi	r19, 0xFF	; 255
     eb6:	26 1b       	sub	r18, r22
     eb8:	37 0b       	sbc	r19, r23
     eba:	2a 31       	cpi	r18, 0x1A	; 26
     ebc:	31 05       	cpc	r19, r1
     ebe:	2c f0       	brlt	.+10     	; 0xeca <__pack_f+0x76>
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	40 e0       	ldi	r20, 0x00	; 0
     ec6:	50 e0       	ldi	r21, 0x00	; 0
     ec8:	2a c0       	rjmp	.+84     	; 0xf1e <__pack_f+0xca>
     eca:	b8 01       	movw	r22, r16
     ecc:	a7 01       	movw	r20, r14
     ece:	02 2e       	mov	r0, r18
     ed0:	04 c0       	rjmp	.+8      	; 0xeda <__pack_f+0x86>
     ed2:	76 95       	lsr	r23
     ed4:	67 95       	ror	r22
     ed6:	57 95       	ror	r21
     ed8:	47 95       	ror	r20
     eda:	0a 94       	dec	r0
     edc:	d2 f7       	brpl	.-12     	; 0xed2 <__pack_f+0x7e>
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	a0 e0       	ldi	r26, 0x00	; 0
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	04 c0       	rjmp	.+8      	; 0xef0 <__pack_f+0x9c>
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	aa 1f       	adc	r26, r26
     eee:	bb 1f       	adc	r27, r27
     ef0:	2a 95       	dec	r18
     ef2:	d2 f7       	brpl	.-12     	; 0xee8 <__pack_f+0x94>
     ef4:	01 97       	sbiw	r24, 0x01	; 1
     ef6:	a1 09       	sbc	r26, r1
     ef8:	b1 09       	sbc	r27, r1
     efa:	8e 21       	and	r24, r14
     efc:	9f 21       	and	r25, r15
     efe:	a0 23       	and	r26, r16
     f00:	b1 23       	and	r27, r17
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	a1 05       	cpc	r26, r1
     f06:	b1 05       	cpc	r27, r1
     f08:	21 f0       	breq	.+8      	; 0xf12 <__pack_f+0xbe>
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	a0 e0       	ldi	r26, 0x00	; 0
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	9a 01       	movw	r18, r20
     f14:	ab 01       	movw	r20, r22
     f16:	28 2b       	or	r18, r24
     f18:	39 2b       	or	r19, r25
     f1a:	4a 2b       	or	r20, r26
     f1c:	5b 2b       	or	r21, r27
     f1e:	da 01       	movw	r26, r20
     f20:	c9 01       	movw	r24, r18
     f22:	8f 77       	andi	r24, 0x7F	; 127
     f24:	90 70       	andi	r25, 0x00	; 0
     f26:	a0 70       	andi	r26, 0x00	; 0
     f28:	b0 70       	andi	r27, 0x00	; 0
     f2a:	80 34       	cpi	r24, 0x40	; 64
     f2c:	91 05       	cpc	r25, r1
     f2e:	a1 05       	cpc	r26, r1
     f30:	b1 05       	cpc	r27, r1
     f32:	39 f4       	brne	.+14     	; 0xf42 <__pack_f+0xee>
     f34:	27 ff       	sbrs	r18, 7
     f36:	09 c0       	rjmp	.+18     	; 0xf4a <__pack_f+0xf6>
     f38:	20 5c       	subi	r18, 0xC0	; 192
     f3a:	3f 4f       	sbci	r19, 0xFF	; 255
     f3c:	4f 4f       	sbci	r20, 0xFF	; 255
     f3e:	5f 4f       	sbci	r21, 0xFF	; 255
     f40:	04 c0       	rjmp	.+8      	; 0xf4a <__pack_f+0xf6>
     f42:	21 5c       	subi	r18, 0xC1	; 193
     f44:	3f 4f       	sbci	r19, 0xFF	; 255
     f46:	4f 4f       	sbci	r20, 0xFF	; 255
     f48:	5f 4f       	sbci	r21, 0xFF	; 255
     f4a:	e0 e0       	ldi	r30, 0x00	; 0
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	20 30       	cpi	r18, 0x00	; 0
     f50:	a0 e0       	ldi	r26, 0x00	; 0
     f52:	3a 07       	cpc	r19, r26
     f54:	a0 e0       	ldi	r26, 0x00	; 0
     f56:	4a 07       	cpc	r20, r26
     f58:	a0 e4       	ldi	r26, 0x40	; 64
     f5a:	5a 07       	cpc	r21, r26
     f5c:	10 f0       	brcs	.+4      	; 0xf62 <__pack_f+0x10e>
     f5e:	e1 e0       	ldi	r30, 0x01	; 1
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	79 01       	movw	r14, r18
     f64:	8a 01       	movw	r16, r20
     f66:	27 c0       	rjmp	.+78     	; 0xfb6 <__pack_f+0x162>
     f68:	60 38       	cpi	r22, 0x80	; 128
     f6a:	71 05       	cpc	r23, r1
     f6c:	64 f5       	brge	.+88     	; 0xfc6 <__pack_f+0x172>
     f6e:	fb 01       	movw	r30, r22
     f70:	e1 58       	subi	r30, 0x81	; 129
     f72:	ff 4f       	sbci	r31, 0xFF	; 255
     f74:	d8 01       	movw	r26, r16
     f76:	c7 01       	movw	r24, r14
     f78:	8f 77       	andi	r24, 0x7F	; 127
     f7a:	90 70       	andi	r25, 0x00	; 0
     f7c:	a0 70       	andi	r26, 0x00	; 0
     f7e:	b0 70       	andi	r27, 0x00	; 0
     f80:	80 34       	cpi	r24, 0x40	; 64
     f82:	91 05       	cpc	r25, r1
     f84:	a1 05       	cpc	r26, r1
     f86:	b1 05       	cpc	r27, r1
     f88:	39 f4       	brne	.+14     	; 0xf98 <__pack_f+0x144>
     f8a:	e7 fe       	sbrs	r14, 7
     f8c:	0d c0       	rjmp	.+26     	; 0xfa8 <__pack_f+0x154>
     f8e:	80 e4       	ldi	r24, 0x40	; 64
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	a0 e0       	ldi	r26, 0x00	; 0
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	04 c0       	rjmp	.+8      	; 0xfa0 <__pack_f+0x14c>
     f98:	8f e3       	ldi	r24, 0x3F	; 63
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	a0 e0       	ldi	r26, 0x00	; 0
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e8 0e       	add	r14, r24
     fa2:	f9 1e       	adc	r15, r25
     fa4:	0a 1f       	adc	r16, r26
     fa6:	1b 1f       	adc	r17, r27
     fa8:	17 ff       	sbrs	r17, 7
     faa:	05 c0       	rjmp	.+10     	; 0xfb6 <__pack_f+0x162>
     fac:	16 95       	lsr	r17
     fae:	07 95       	ror	r16
     fb0:	f7 94       	ror	r15
     fb2:	e7 94       	ror	r14
     fb4:	31 96       	adiw	r30, 0x01	; 1
     fb6:	87 e0       	ldi	r24, 0x07	; 7
     fb8:	16 95       	lsr	r17
     fba:	07 95       	ror	r16
     fbc:	f7 94       	ror	r15
     fbe:	e7 94       	ror	r14
     fc0:	8a 95       	dec	r24
     fc2:	d1 f7       	brne	.-12     	; 0xfb8 <__pack_f+0x164>
     fc4:	05 c0       	rjmp	.+10     	; 0xfd0 <__pack_f+0x17c>
     fc6:	ee 24       	eor	r14, r14
     fc8:	ff 24       	eor	r15, r15
     fca:	87 01       	movw	r16, r14
     fcc:	ef ef       	ldi	r30, 0xFF	; 255
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	6e 2f       	mov	r22, r30
     fd2:	67 95       	ror	r22
     fd4:	66 27       	eor	r22, r22
     fd6:	67 95       	ror	r22
     fd8:	90 2f       	mov	r25, r16
     fda:	9f 77       	andi	r25, 0x7F	; 127
     fdc:	d7 94       	ror	r13
     fde:	dd 24       	eor	r13, r13
     fe0:	d7 94       	ror	r13
     fe2:	8e 2f       	mov	r24, r30
     fe4:	86 95       	lsr	r24
     fe6:	49 2f       	mov	r20, r25
     fe8:	46 2b       	or	r20, r22
     fea:	58 2f       	mov	r21, r24
     fec:	5d 29       	or	r21, r13
     fee:	b7 01       	movw	r22, r14
     ff0:	ca 01       	movw	r24, r20
     ff2:	1f 91       	pop	r17
     ff4:	0f 91       	pop	r16
     ff6:	ff 90       	pop	r15
     ff8:	ef 90       	pop	r14
     ffa:	df 90       	pop	r13
     ffc:	08 95       	ret

00000ffe <__unpack_f>:
     ffe:	fc 01       	movw	r30, r24
    1000:	db 01       	movw	r26, r22
    1002:	40 81       	ld	r20, Z
    1004:	51 81       	ldd	r21, Z+1	; 0x01
    1006:	22 81       	ldd	r18, Z+2	; 0x02
    1008:	62 2f       	mov	r22, r18
    100a:	6f 77       	andi	r22, 0x7F	; 127
    100c:	70 e0       	ldi	r23, 0x00	; 0
    100e:	22 1f       	adc	r18, r18
    1010:	22 27       	eor	r18, r18
    1012:	22 1f       	adc	r18, r18
    1014:	93 81       	ldd	r25, Z+3	; 0x03
    1016:	89 2f       	mov	r24, r25
    1018:	88 0f       	add	r24, r24
    101a:	82 2b       	or	r24, r18
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	99 1f       	adc	r25, r25
    1022:	99 27       	eor	r25, r25
    1024:	99 1f       	adc	r25, r25
    1026:	11 96       	adiw	r26, 0x01	; 1
    1028:	9c 93       	st	X, r25
    102a:	11 97       	sbiw	r26, 0x01	; 1
    102c:	21 15       	cp	r18, r1
    102e:	31 05       	cpc	r19, r1
    1030:	a9 f5       	brne	.+106    	; 0x109c <__unpack_f+0x9e>
    1032:	41 15       	cp	r20, r1
    1034:	51 05       	cpc	r21, r1
    1036:	61 05       	cpc	r22, r1
    1038:	71 05       	cpc	r23, r1
    103a:	11 f4       	brne	.+4      	; 0x1040 <__unpack_f+0x42>
    103c:	82 e0       	ldi	r24, 0x02	; 2
    103e:	37 c0       	rjmp	.+110    	; 0x10ae <__unpack_f+0xb0>
    1040:	82 e8       	ldi	r24, 0x82	; 130
    1042:	9f ef       	ldi	r25, 0xFF	; 255
    1044:	13 96       	adiw	r26, 0x03	; 3
    1046:	9c 93       	st	X, r25
    1048:	8e 93       	st	-X, r24
    104a:	12 97       	sbiw	r26, 0x02	; 2
    104c:	9a 01       	movw	r18, r20
    104e:	ab 01       	movw	r20, r22
    1050:	67 e0       	ldi	r22, 0x07	; 7
    1052:	22 0f       	add	r18, r18
    1054:	33 1f       	adc	r19, r19
    1056:	44 1f       	adc	r20, r20
    1058:	55 1f       	adc	r21, r21
    105a:	6a 95       	dec	r22
    105c:	d1 f7       	brne	.-12     	; 0x1052 <__unpack_f+0x54>
    105e:	83 e0       	ldi	r24, 0x03	; 3
    1060:	8c 93       	st	X, r24
    1062:	0d c0       	rjmp	.+26     	; 0x107e <__unpack_f+0x80>
    1064:	22 0f       	add	r18, r18
    1066:	33 1f       	adc	r19, r19
    1068:	44 1f       	adc	r20, r20
    106a:	55 1f       	adc	r21, r21
    106c:	12 96       	adiw	r26, 0x02	; 2
    106e:	8d 91       	ld	r24, X+
    1070:	9c 91       	ld	r25, X
    1072:	13 97       	sbiw	r26, 0x03	; 3
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	13 96       	adiw	r26, 0x03	; 3
    1078:	9c 93       	st	X, r25
    107a:	8e 93       	st	-X, r24
    107c:	12 97       	sbiw	r26, 0x02	; 2
    107e:	20 30       	cpi	r18, 0x00	; 0
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	38 07       	cpc	r19, r24
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	48 07       	cpc	r20, r24
    1088:	80 e4       	ldi	r24, 0x40	; 64
    108a:	58 07       	cpc	r21, r24
    108c:	58 f3       	brcs	.-42     	; 0x1064 <__unpack_f+0x66>
    108e:	14 96       	adiw	r26, 0x04	; 4
    1090:	2d 93       	st	X+, r18
    1092:	3d 93       	st	X+, r19
    1094:	4d 93       	st	X+, r20
    1096:	5c 93       	st	X, r21
    1098:	17 97       	sbiw	r26, 0x07	; 7
    109a:	08 95       	ret
    109c:	2f 3f       	cpi	r18, 0xFF	; 255
    109e:	31 05       	cpc	r19, r1
    10a0:	79 f4       	brne	.+30     	; 0x10c0 <__unpack_f+0xc2>
    10a2:	41 15       	cp	r20, r1
    10a4:	51 05       	cpc	r21, r1
    10a6:	61 05       	cpc	r22, r1
    10a8:	71 05       	cpc	r23, r1
    10aa:	19 f4       	brne	.+6      	; 0x10b2 <__unpack_f+0xb4>
    10ac:	84 e0       	ldi	r24, 0x04	; 4
    10ae:	8c 93       	st	X, r24
    10b0:	08 95       	ret
    10b2:	64 ff       	sbrs	r22, 4
    10b4:	03 c0       	rjmp	.+6      	; 0x10bc <__unpack_f+0xbe>
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	8c 93       	st	X, r24
    10ba:	12 c0       	rjmp	.+36     	; 0x10e0 <__unpack_f+0xe2>
    10bc:	1c 92       	st	X, r1
    10be:	10 c0       	rjmp	.+32     	; 0x10e0 <__unpack_f+0xe2>
    10c0:	2f 57       	subi	r18, 0x7F	; 127
    10c2:	30 40       	sbci	r19, 0x00	; 0
    10c4:	13 96       	adiw	r26, 0x03	; 3
    10c6:	3c 93       	st	X, r19
    10c8:	2e 93       	st	-X, r18
    10ca:	12 97       	sbiw	r26, 0x02	; 2
    10cc:	83 e0       	ldi	r24, 0x03	; 3
    10ce:	8c 93       	st	X, r24
    10d0:	87 e0       	ldi	r24, 0x07	; 7
    10d2:	44 0f       	add	r20, r20
    10d4:	55 1f       	adc	r21, r21
    10d6:	66 1f       	adc	r22, r22
    10d8:	77 1f       	adc	r23, r23
    10da:	8a 95       	dec	r24
    10dc:	d1 f7       	brne	.-12     	; 0x10d2 <__unpack_f+0xd4>
    10de:	70 64       	ori	r23, 0x40	; 64
    10e0:	14 96       	adiw	r26, 0x04	; 4
    10e2:	4d 93       	st	X+, r20
    10e4:	5d 93       	st	X+, r21
    10e6:	6d 93       	st	X+, r22
    10e8:	7c 93       	st	X, r23
    10ea:	17 97       	sbiw	r26, 0x07	; 7
    10ec:	08 95       	ret

000010ee <__fpcmp_parts_f>:
    10ee:	1f 93       	push	r17
    10f0:	dc 01       	movw	r26, r24
    10f2:	fb 01       	movw	r30, r22
    10f4:	9c 91       	ld	r25, X
    10f6:	92 30       	cpi	r25, 0x02	; 2
    10f8:	08 f4       	brcc	.+2      	; 0x10fc <__fpcmp_parts_f+0xe>
    10fa:	47 c0       	rjmp	.+142    	; 0x118a <__fpcmp_parts_f+0x9c>
    10fc:	80 81       	ld	r24, Z
    10fe:	82 30       	cpi	r24, 0x02	; 2
    1100:	08 f4       	brcc	.+2      	; 0x1104 <__fpcmp_parts_f+0x16>
    1102:	43 c0       	rjmp	.+134    	; 0x118a <__fpcmp_parts_f+0x9c>
    1104:	94 30       	cpi	r25, 0x04	; 4
    1106:	51 f4       	brne	.+20     	; 0x111c <__fpcmp_parts_f+0x2e>
    1108:	11 96       	adiw	r26, 0x01	; 1
    110a:	1c 91       	ld	r17, X
    110c:	84 30       	cpi	r24, 0x04	; 4
    110e:	99 f5       	brne	.+102    	; 0x1176 <__fpcmp_parts_f+0x88>
    1110:	81 81       	ldd	r24, Z+1	; 0x01
    1112:	68 2f       	mov	r22, r24
    1114:	70 e0       	ldi	r23, 0x00	; 0
    1116:	61 1b       	sub	r22, r17
    1118:	71 09       	sbc	r23, r1
    111a:	3f c0       	rjmp	.+126    	; 0x119a <__fpcmp_parts_f+0xac>
    111c:	84 30       	cpi	r24, 0x04	; 4
    111e:	21 f0       	breq	.+8      	; 0x1128 <__fpcmp_parts_f+0x3a>
    1120:	92 30       	cpi	r25, 0x02	; 2
    1122:	31 f4       	brne	.+12     	; 0x1130 <__fpcmp_parts_f+0x42>
    1124:	82 30       	cpi	r24, 0x02	; 2
    1126:	b9 f1       	breq	.+110    	; 0x1196 <__fpcmp_parts_f+0xa8>
    1128:	81 81       	ldd	r24, Z+1	; 0x01
    112a:	88 23       	and	r24, r24
    112c:	89 f1       	breq	.+98     	; 0x1190 <__fpcmp_parts_f+0xa2>
    112e:	2d c0       	rjmp	.+90     	; 0x118a <__fpcmp_parts_f+0x9c>
    1130:	11 96       	adiw	r26, 0x01	; 1
    1132:	1c 91       	ld	r17, X
    1134:	11 97       	sbiw	r26, 0x01	; 1
    1136:	82 30       	cpi	r24, 0x02	; 2
    1138:	f1 f0       	breq	.+60     	; 0x1176 <__fpcmp_parts_f+0x88>
    113a:	81 81       	ldd	r24, Z+1	; 0x01
    113c:	18 17       	cp	r17, r24
    113e:	d9 f4       	brne	.+54     	; 0x1176 <__fpcmp_parts_f+0x88>
    1140:	12 96       	adiw	r26, 0x02	; 2
    1142:	2d 91       	ld	r18, X+
    1144:	3c 91       	ld	r19, X
    1146:	13 97       	sbiw	r26, 0x03	; 3
    1148:	82 81       	ldd	r24, Z+2	; 0x02
    114a:	93 81       	ldd	r25, Z+3	; 0x03
    114c:	82 17       	cp	r24, r18
    114e:	93 07       	cpc	r25, r19
    1150:	94 f0       	brlt	.+36     	; 0x1176 <__fpcmp_parts_f+0x88>
    1152:	28 17       	cp	r18, r24
    1154:	39 07       	cpc	r19, r25
    1156:	bc f0       	brlt	.+46     	; 0x1186 <__fpcmp_parts_f+0x98>
    1158:	14 96       	adiw	r26, 0x04	; 4
    115a:	8d 91       	ld	r24, X+
    115c:	9d 91       	ld	r25, X+
    115e:	0d 90       	ld	r0, X+
    1160:	bc 91       	ld	r27, X
    1162:	a0 2d       	mov	r26, r0
    1164:	24 81       	ldd	r18, Z+4	; 0x04
    1166:	35 81       	ldd	r19, Z+5	; 0x05
    1168:	46 81       	ldd	r20, Z+6	; 0x06
    116a:	57 81       	ldd	r21, Z+7	; 0x07
    116c:	28 17       	cp	r18, r24
    116e:	39 07       	cpc	r19, r25
    1170:	4a 07       	cpc	r20, r26
    1172:	5b 07       	cpc	r21, r27
    1174:	18 f4       	brcc	.+6      	; 0x117c <__fpcmp_parts_f+0x8e>
    1176:	11 23       	and	r17, r17
    1178:	41 f0       	breq	.+16     	; 0x118a <__fpcmp_parts_f+0x9c>
    117a:	0a c0       	rjmp	.+20     	; 0x1190 <__fpcmp_parts_f+0xa2>
    117c:	82 17       	cp	r24, r18
    117e:	93 07       	cpc	r25, r19
    1180:	a4 07       	cpc	r26, r20
    1182:	b5 07       	cpc	r27, r21
    1184:	40 f4       	brcc	.+16     	; 0x1196 <__fpcmp_parts_f+0xa8>
    1186:	11 23       	and	r17, r17
    1188:	19 f0       	breq	.+6      	; 0x1190 <__fpcmp_parts_f+0xa2>
    118a:	61 e0       	ldi	r22, 0x01	; 1
    118c:	70 e0       	ldi	r23, 0x00	; 0
    118e:	05 c0       	rjmp	.+10     	; 0x119a <__fpcmp_parts_f+0xac>
    1190:	6f ef       	ldi	r22, 0xFF	; 255
    1192:	7f ef       	ldi	r23, 0xFF	; 255
    1194:	02 c0       	rjmp	.+4      	; 0x119a <__fpcmp_parts_f+0xac>
    1196:	60 e0       	ldi	r22, 0x00	; 0
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	cb 01       	movw	r24, r22
    119c:	1f 91       	pop	r17
    119e:	08 95       	ret

000011a0 <MTIMER0_enInit>:
static void (*CallBackArr[2])(void)={NULL,NULL};
static u32 g_u32NumberOfOverflows =0;
static u8  g_u8NumberOfRemainingcounts=0;
static u32 g_u32NumOfCmpMatches=0;
ErrorState_t MTIMER0_enInit(void)
{
    11a0:	df 93       	push	r29
    11a2:	cf 93       	push	r28
    11a4:	0f 92       	push	r0
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
#if(MTIMER0_MODE==MTIMER0_MODE_CTC||MTIMER0_MODE==MTIMER0_MODE_NORMAL||MTIMER0_MODE==MTIMER0_MODE_FAST_PWM||MTIMER0_MODE==MTIMER0_MODE_PHASE_CORRECT_PWM)
	//timer mode
	//step1 :clear bits by applying Mask
		TCCR0_REG &= MTIMER0_MODE_MASK;
    11aa:	a3 e5       	ldi	r26, 0x53	; 83
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e3 e5       	ldi	r30, 0x53	; 83
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	87 7b       	andi	r24, 0xB7	; 183
    11b6:	8c 93       	st	X, r24
	//step 2 :set insert vlaue
		TCCR0_REG |=MTIMER0_MODE;
    11b8:	a3 e5       	ldi	r26, 0x53	; 83
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e3 e5       	ldi	r30, 0x53	; 83
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	88 64       	ori	r24, 0x48	; 72
    11c4:	8c 93       	st	X, r24
#endif


		//condig oc0 wave generatin mode
		//clear with mask
		TCCR0_REG &=MTIMER_OC0_MASK;
    11c6:	a3 e5       	ldi	r26, 0x53	; 83
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e3 e5       	ldi	r30, 0x53	; 83
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	8f 7c       	andi	r24, 0xCF	; 207
    11d2:	8c 93       	st	X, r24
		//set
		TCCR0_REG |=(MTIMER0_OC0_MODE<<MTIMER0_OC0_SH);
    11d4:	a3 e5       	ldi	r26, 0x53	; 83
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e3 e5       	ldi	r30, 0x53	; 83
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	80 63       	ori	r24, 0x30	; 48
    11e0:	8c 93       	st	X, r24


}
    11e2:	0f 90       	pop	r0
    11e4:	cf 91       	pop	r28
    11e6:	df 91       	pop	r29
    11e8:	08 95       	ret

000011ea <MTIMER0_enStart>:
ErrorState_t MTIMER0_enStart(void)
{
    11ea:	df 93       	push	r29
    11ec:	cf 93       	push	r28
    11ee:	0f 92       	push	r0
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
#if(MTIMER0_CLK>=MTIMER_NO_CLK && MTIMER0_CLK<=MTIMER_EXTCLK_RAIS_EDGE)

	//step1 :clear bits by applying Mask
	TCCR0_REG &= MTIMER0_CS_MASK;
    11f4:	a3 e5       	ldi	r26, 0x53	; 83
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e3 e5       	ldi	r30, 0x53	; 83
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	88 7f       	andi	r24, 0xF8	; 248
    1200:	8c 93       	st	X, r24
//step 2 :set clock value
	TCCR0_REG |=MTIMER0_CLK;
    1202:	a3 e5       	ldi	r26, 0x53	; 83
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e3 e5       	ldi	r30, 0x53	; 83
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	84 60       	ori	r24, 0x04	; 4
    120e:	8c 93       	st	X, r24
#else
	#error("wrong time clock")
#endif


}
    1210:	0f 90       	pop	r0
    1212:	cf 91       	pop	r28
    1214:	df 91       	pop	r29
    1216:	08 95       	ret

00001218 <MTIMER0_enStop>:
ErrorState_t MTIMER0_enStop(void)
{
    1218:	df 93       	push	r29
    121a:	cf 93       	push	r28
    121c:	0f 92       	push	r0
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
//clear
	TCCR0_REG&=MTIMER0_CS_MASK;
    1222:	a3 e5       	ldi	r26, 0x53	; 83
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e3 e5       	ldi	r30, 0x53	; 83
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	88 7f       	andi	r24, 0xF8	; 248
    122e:	8c 93       	st	X, r24
	//set value
	TCCR0_REG |= MTIMER_NO_CLK;
    1230:	a3 e5       	ldi	r26, 0x53	; 83
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	e3 e5       	ldi	r30, 0x53	; 83
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	8c 93       	st	X, r24

}
    123c:	0f 90       	pop	r0
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <MTIMER0_enSetCallBack>:
ErrorState_t MTIMER0_enSetCallBack(u8 copy_u8IntID,void (*ptrfn)(void))
{
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	27 97       	sbiw	r28, 0x07	; 7
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	8a 83       	std	Y+2, r24	; 0x02
    125a:	7c 83       	std	Y+4, r23	; 0x04
    125c:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState_t Local_enState= SUCCES;
    125e:	82 e0       	ldi	r24, 0x02	; 2
    1260:	89 83       	std	Y+1, r24	; 0x01
	if(ptrfn==NULL)
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	9c 81       	ldd	r25, Y+4	; 0x04
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	11 f4       	brne	.+4      	; 0x126e <MTIMER0_enSetCallBack+0x2a>
	{
Local_enState=NULL_PTR_ERR;
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	89 83       	std	Y+1, r24	; 0x01
	}
		switch(copy_u8IntID)
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	3e 83       	std	Y+6, r19	; 0x06
    1276:	2d 83       	std	Y+5, r18	; 0x05
    1278:	8d 81       	ldd	r24, Y+5	; 0x05
    127a:	9e 81       	ldd	r25, Y+6	; 0x06
    127c:	00 97       	sbiw	r24, 0x00	; 0
    127e:	31 f0       	breq	.+12     	; 0x128c <MTIMER0_enSetCallBack+0x48>
    1280:	2d 81       	ldd	r18, Y+5	; 0x05
    1282:	3e 81       	ldd	r19, Y+6	; 0x06
    1284:	21 30       	cpi	r18, 0x01	; 1
    1286:	31 05       	cpc	r19, r1
    1288:	41 f0       	breq	.+16     	; 0x129a <MTIMER0_enSetCallBack+0x56>
    128a:	0e c0       	rjmp	.+28     	; 0x12a8 <MTIMER0_enSetCallBack+0x64>
			{
			case MTIMER0_OVF_INT_ID:
				CallBackArr[0]=ptrfn;
    128c:	8b 81       	ldd	r24, Y+3	; 0x03
    128e:	9c 81       	ldd	r25, Y+4	; 0x04
    1290:	90 93 f5 01 	sts	0x01F5, r25
    1294:	80 93 f4 01 	sts	0x01F4, r24
    1298:	08 c0       	rjmp	.+16     	; 0x12aa <MTIMER0_enSetCallBack+0x66>
				break;
			case MTIMER0_COM_INT_ID:
				CallBackArr[1]=ptrfn;
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	9c 81       	ldd	r25, Y+4	; 0x04
    129e:	90 93 f7 01 	sts	0x01F7, r25
    12a2:	80 93 f6 01 	sts	0x01F6, r24
    12a6:	01 c0       	rjmp	.+2      	; 0x12aa <MTIMER0_enSetCallBack+0x66>
				break;
			default:
				Local_enState= OUT_OF_RANGE;
    12a8:	19 82       	std	Y+1, r1	; 0x01
				break;
			}

		//CallBackArr[copy_u8IntID]=ptrfn;
}
    12aa:	27 96       	adiw	r28, 0x07	; 7
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	cd bf       	out	0x3d, r28	; 61
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	08 95       	ret

000012bc <MTIMER0_enSetTime>:
ErrorState_t MTIMER0_enSetTime(u32 copy_u32delayMS)
{
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
    12c4:	a5 97       	sbiw	r28, 0x25	; 37
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	f8 94       	cli
    12ca:	de bf       	out	0x3e, r29	; 62
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cd bf       	out	0x3d, r28	; 61
    12d0:	6d 8f       	std	Y+29, r22	; 0x1d
    12d2:	7e 8f       	std	Y+30, r23	; 0x1e
    12d4:	8f 8f       	std	Y+31, r24	; 0x1f
    12d6:	98 a3       	std	Y+32, r25	; 0x20
u32	Local_u32Arr[]={1,8,64,256,1025};
    12d8:	ce 01       	movw	r24, r28
    12da:	09 96       	adiw	r24, 0x09	; 9
    12dc:	9a a3       	std	Y+34, r25	; 0x22
    12de:	89 a3       	std	Y+33, r24	; 0x21
    12e0:	e7 ea       	ldi	r30, 0xA7	; 167
    12e2:	f1 e0       	ldi	r31, 0x01	; 1
    12e4:	fc a3       	std	Y+36, r31	; 0x24
    12e6:	eb a3       	std	Y+35, r30	; 0x23
    12e8:	f4 e1       	ldi	r31, 0x14	; 20
    12ea:	fd a3       	std	Y+37, r31	; 0x25
    12ec:	eb a1       	ldd	r30, Y+35	; 0x23
    12ee:	fc a1       	ldd	r31, Y+36	; 0x24
    12f0:	00 80       	ld	r0, Z
    12f2:	8b a1       	ldd	r24, Y+35	; 0x23
    12f4:	9c a1       	ldd	r25, Y+36	; 0x24
    12f6:	01 96       	adiw	r24, 0x01	; 1
    12f8:	9c a3       	std	Y+36, r25	; 0x24
    12fa:	8b a3       	std	Y+35, r24	; 0x23
    12fc:	e9 a1       	ldd	r30, Y+33	; 0x21
    12fe:	fa a1       	ldd	r31, Y+34	; 0x22
    1300:	00 82       	st	Z, r0
    1302:	89 a1       	ldd	r24, Y+33	; 0x21
    1304:	9a a1       	ldd	r25, Y+34	; 0x22
    1306:	01 96       	adiw	r24, 0x01	; 1
    1308:	9a a3       	std	Y+34, r25	; 0x22
    130a:	89 a3       	std	Y+33, r24	; 0x21
    130c:	9d a1       	ldd	r25, Y+37	; 0x25
    130e:	91 50       	subi	r25, 0x01	; 1
    1310:	9d a3       	std	Y+37, r25	; 0x25
    1312:	ed a1       	ldd	r30, Y+37	; 0x25
    1314:	ee 23       	and	r30, r30
    1316:	51 f7       	brne	.-44     	; 0x12ec <MTIMER0_enSetTime+0x30>

f32 Local_f32Tick_Time =(f32)Local_u32Arr[MTIMER0_CLK-1]/FCPU;
    1318:	8d 89       	ldd	r24, Y+21	; 0x15
    131a:	9e 89       	ldd	r25, Y+22	; 0x16
    131c:	af 89       	ldd	r26, Y+23	; 0x17
    131e:	b8 8d       	ldd	r27, Y+24	; 0x18
    1320:	bc 01       	movw	r22, r24
    1322:	cd 01       	movw	r24, r26
    1324:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatunsisf>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	bc 01       	movw	r22, r24
    132e:	cd 01       	movw	r24, r26
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	40 e8       	ldi	r20, 0x80	; 128
    1336:	51 e4       	ldi	r21, 0x41	; 65
    1338:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__divsf3>
    133c:	dc 01       	movw	r26, r24
    133e:	cb 01       	movw	r24, r22
    1340:	8d 83       	std	Y+5, r24	; 0x05
    1342:	9e 83       	std	Y+6, r25	; 0x06
    1344:	af 83       	std	Y+7, r26	; 0x07
    1346:	b8 87       	std	Y+8, r27	; 0x08
u32 Local_u32TotalNumberOfCounts =(copy_u32delayMS*1000)/Local_f32Tick_Time;
    1348:	8d 8d       	ldd	r24, Y+29	; 0x1d
    134a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    134c:	af 8d       	ldd	r26, Y+31	; 0x1f
    134e:	b8 a1       	ldd	r27, Y+32	; 0x20
    1350:	28 ee       	ldi	r18, 0xE8	; 232
    1352:	33 e0       	ldi	r19, 0x03	; 3
    1354:	40 e0       	ldi	r20, 0x00	; 0
    1356:	50 e0       	ldi	r21, 0x00	; 0
    1358:	bc 01       	movw	r22, r24
    135a:	cd 01       	movw	r24, r26
    135c:	0e 94 e8 30 	call	0x61d0	; 0x61d0 <__mulsi3>
    1360:	dc 01       	movw	r26, r24
    1362:	cb 01       	movw	r24, r22
    1364:	bc 01       	movw	r22, r24
    1366:	cd 01       	movw	r24, r26
    1368:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatunsisf>
    136c:	dc 01       	movw	r26, r24
    136e:	cb 01       	movw	r24, r22
    1370:	bc 01       	movw	r22, r24
    1372:	cd 01       	movw	r24, r26
    1374:	2d 81       	ldd	r18, Y+5	; 0x05
    1376:	3e 81       	ldd	r19, Y+6	; 0x06
    1378:	4f 81       	ldd	r20, Y+7	; 0x07
    137a:	58 85       	ldd	r21, Y+8	; 0x08
    137c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__divsf3>
    1380:	dc 01       	movw	r26, r24
    1382:	cb 01       	movw	r24, r22
    1384:	bc 01       	movw	r22, r24
    1386:	cd 01       	movw	r24, r26
    1388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    138c:	dc 01       	movw	r26, r24
    138e:	cb 01       	movw	r24, r22
    1390:	89 83       	std	Y+1, r24	; 0x01
    1392:	9a 83       	std	Y+2, r25	; 0x02
    1394:	ab 83       	std	Y+3, r26	; 0x03
    1396:	bc 83       	std	Y+4, r27	; 0x04
	}

	OCR0_REG = Local_u8OCRValue;
	g_u32NumOfCmpMatches=Local_u32TotalNumberOfCounts/Local_u8OCRValue;
	#endif
return SUCCES;
    1398:	82 e0       	ldi	r24, 0x02	; 2
}//works same as delay_ms
    139a:	a5 96       	adiw	r28, 0x25	; 37
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	f8 94       	cli
    13a0:	de bf       	out	0x3e, r29	; 62
    13a2:	0f be       	out	0x3f, r0	; 63
    13a4:	cd bf       	out	0x3d, r28	; 61
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <MTIMER0_enEnableInt>:
ErrorState_t MTIMER0_enEnableInt(u8 copy_u8IntID)
{
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <MTIMER0_enEnableInt+0x6>
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <MTIMER0_enEnableInt+0x8>
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	8a 83       	std	Y+2, r24	; 0x02
ErrorState_t Local_enState= SUCCES;
    13ba:	82 e0       	ldi	r24, 0x02	; 2
    13bc:	89 83       	std	Y+1, r24	; 0x01

	switch(copy_u8IntID)
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	3c 83       	std	Y+4, r19	; 0x04
    13c6:	2b 83       	std	Y+3, r18	; 0x03
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	9c 81       	ldd	r25, Y+4	; 0x04
    13cc:	00 97       	sbiw	r24, 0x00	; 0
    13ce:	31 f0       	breq	.+12     	; 0x13dc <MTIMER0_enEnableInt+0x30>
    13d0:	2b 81       	ldd	r18, Y+3	; 0x03
    13d2:	3c 81       	ldd	r19, Y+4	; 0x04
    13d4:	21 30       	cpi	r18, 0x01	; 1
    13d6:	31 05       	cpc	r19, r1
    13d8:	49 f0       	breq	.+18     	; 0x13ec <MTIMER0_enEnableInt+0x40>
    13da:	10 c0       	rjmp	.+32     	; 0x13fc <MTIMER0_enEnableInt+0x50>
	{
	case MTIMER0_OVF_INT_ID:
		SET_BIT(TIMSK_REG,TOIEO_BIT);
    13dc:	a9 e5       	ldi	r26, 0x59	; 89
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e9 e5       	ldi	r30, 0x59	; 89
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	81 60       	ori	r24, 0x01	; 1
    13e8:	8c 93       	st	X, r24
    13ea:	09 c0       	rjmp	.+18     	; 0x13fe <MTIMER0_enEnableInt+0x52>
		break;
	case MTIMER0_COM_INT_ID:
		SET_BIT(TIMSK_REG,OCIE0_BIT);
    13ec:	a9 e5       	ldi	r26, 0x59	; 89
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e9 e5       	ldi	r30, 0x59	; 89
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	82 60       	ori	r24, 0x02	; 2
    13f8:	8c 93       	st	X, r24
    13fa:	01 c0       	rjmp	.+2      	; 0x13fe <MTIMER0_enEnableInt+0x52>
		break;
	default:
		Local_enState= OUT_OF_RANGE;
    13fc:	19 82       	std	Y+1, r1	; 0x01
	}
return Local_enState;
    13fe:	89 81       	ldd	r24, Y+1	; 0x01

}
    1400:	0f 90       	pop	r0
    1402:	0f 90       	pop	r0
    1404:	0f 90       	pop	r0
    1406:	0f 90       	pop	r0
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	08 95       	ret

0000140e <MTIMER0_enDisableInt>:
ErrorState_t MTIMER0_enDisableInt(u8 copy_u8IntID)
{
    140e:	df 93       	push	r29
    1410:	cf 93       	push	r28
    1412:	00 d0       	rcall	.+0      	; 0x1414 <MTIMER0_enDisableInt+0x6>
    1414:	00 d0       	rcall	.+0      	; 0x1416 <MTIMER0_enDisableInt+0x8>
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
    141a:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState= SUCCES;
    141c:	82 e0       	ldi	r24, 0x02	; 2
    141e:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8IntID)
    1420:	8a 81       	ldd	r24, Y+2	; 0x02
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	3c 83       	std	Y+4, r19	; 0x04
    1428:	2b 83       	std	Y+3, r18	; 0x03
    142a:	8b 81       	ldd	r24, Y+3	; 0x03
    142c:	9c 81       	ldd	r25, Y+4	; 0x04
    142e:	00 97       	sbiw	r24, 0x00	; 0
    1430:	31 f0       	breq	.+12     	; 0x143e <MTIMER0_enDisableInt+0x30>
    1432:	2b 81       	ldd	r18, Y+3	; 0x03
    1434:	3c 81       	ldd	r19, Y+4	; 0x04
    1436:	21 30       	cpi	r18, 0x01	; 1
    1438:	31 05       	cpc	r19, r1
    143a:	49 f0       	breq	.+18     	; 0x144e <MTIMER0_enDisableInt+0x40>
    143c:	10 c0       	rjmp	.+32     	; 0x145e <MTIMER0_enDisableInt+0x50>
		{
		case MTIMER0_OVF_INT_ID:
			CLR_BIT(TIMSK_REG,TOIEO_BIT);
    143e:	a9 e5       	ldi	r26, 0x59	; 89
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e9 e5       	ldi	r30, 0x59	; 89
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	8e 7f       	andi	r24, 0xFE	; 254
    144a:	8c 93       	st	X, r24
    144c:	09 c0       	rjmp	.+18     	; 0x1460 <MTIMER0_enDisableInt+0x52>
			break;
		case MTIMER0_COM_INT_ID:
			CLR_BIT(TIMSK_REG,OCIE0_BIT);
    144e:	a9 e5       	ldi	r26, 0x59	; 89
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	e9 e5       	ldi	r30, 0x59	; 89
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	8d 7f       	andi	r24, 0xFD	; 253
    145a:	8c 93       	st	X, r24
    145c:	01 c0       	rjmp	.+2      	; 0x1460 <MTIMER0_enDisableInt+0x52>
			break;
		default:
			Local_enState= OUT_OF_RANGE;
    145e:	19 82       	std	Y+1, r1	; 0x01
		}
	return Local_enState;
    1460:	89 81       	ldd	r24, Y+1	; 0x01

}
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	cf 91       	pop	r28
    146c:	df 91       	pop	r29
    146e:	08 95       	ret

00001470 <MTIMER0_ensetCompareValue>:
ErrorState_t MTIMER0_ensetCompareValue(u8 copy_u8Value)
{
    1470:	df 93       	push	r29
    1472:	cf 93       	push	r28
    1474:	00 d0       	rcall	.+0      	; 0x1476 <MTIMER0_ensetCompareValue+0x6>
    1476:	0f 92       	push	r0
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	8a 83       	std	Y+2, r24	; 0x02

	OCR0_REG=copy_u8Value;
    147e:	ec e5       	ldi	r30, 0x5C	; 92
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	80 83       	st	Z, r24
	ErrorState_t Local_enState= SUCCES;
    1486:	82 e0       	ldi	r24, 0x02	; 2
    1488:	89 83       	std	Y+1, r24	; 0x01

}
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	cf 91       	pop	r28
    1492:	df 91       	pop	r29
    1494:	08 95       	ret

00001496 <MTIMER0_enSetFastPWM>:

#if(MTIMER0_MODE==MTIMER0_MODE_FAST_PWM)
ErrorState_t MTIMER0_enSetFastPWM(u8 copy_u8Duty)
{
    1496:	df 93       	push	r29
    1498:	cf 93       	push	r28
    149a:	00 d0       	rcall	.+0      	; 0x149c <MTIMER0_enSetFastPWM+0x6>
    149c:	00 d0       	rcall	.+0      	; 0x149e <MTIMER0_enSetFastPWM+0x8>
    149e:	00 d0       	rcall	.+0      	; 0x14a0 <MTIMER0_enSetFastPWM+0xa>
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    14a4:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState= SUCCES;
    14a6:	82 e0       	ldi	r24, 0x02	; 2
    14a8:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8Duty>=0&&copy_u8Duty<=100)
    14aa:	8a 81       	ldd	r24, Y+2	; 0x02
    14ac:	85 36       	cpi	r24, 0x65	; 101
    14ae:	28 f5       	brcc	.+74     	; 0x14fa <MTIMER0_enSetFastPWM+0x64>
	{
	#if(MTIMER0_OC0_MODE==MTIMER_OC0_INVERTED)
		OCR0_REG=abs(255-((copy_u8Duty*256)/100));
    14b0:	8c e5       	ldi	r24, 0x5C	; 92
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	9e 83       	std	Y+6, r25	; 0x06
    14b6:	8d 83       	std	Y+5, r24	; 0x05
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	88 2f       	mov	r24, r24
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	98 2f       	mov	r25, r24
    14c0:	88 27       	eor	r24, r24
    14c2:	24 e6       	ldi	r18, 0x64	; 100
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	b9 01       	movw	r22, r18
    14c8:	0e 94 13 31 	call	0x6226	; 0x6226 <__divmodhi4>
    14cc:	cb 01       	movw	r24, r22
    14ce:	9c 01       	movw	r18, r24
    14d0:	8f ef       	ldi	r24, 0xFF	; 255
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	82 1b       	sub	r24, r18
    14d6:	93 0b       	sbc	r25, r19
    14d8:	9c 83       	std	Y+4, r25	; 0x04
    14da:	8b 83       	std	Y+3, r24	; 0x03
    14dc:	eb 81       	ldd	r30, Y+3	; 0x03
    14de:	fc 81       	ldd	r31, Y+4	; 0x04
    14e0:	ff 23       	and	r31, r31
    14e2:	3c f4       	brge	.+14     	; 0x14f2 <MTIMER0_enSetFastPWM+0x5c>
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	9c 81       	ldd	r25, Y+4	; 0x04
    14e8:	90 95       	com	r25
    14ea:	81 95       	neg	r24
    14ec:	9f 4f       	sbci	r25, 0xFF	; 255
    14ee:	9c 83       	std	Y+4, r25	; 0x04
    14f0:	8b 83       	std	Y+3, r24	; 0x03
    14f2:	8b 81       	ldd	r24, Y+3	; 0x03
    14f4:	ed 81       	ldd	r30, Y+5	; 0x05
    14f6:	fe 81       	ldd	r31, Y+6	; 0x06
    14f8:	80 83       	st	Z, r24
#else
#error("WRONG MODE")
#endif

	}
return Local_enState;
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    14fc:	26 96       	adiw	r28, 0x06	; 6
    14fe:	0f b6       	in	r0, 0x3f	; 63
    1500:	f8 94       	cli
    1502:	de bf       	out	0x3e, r29	; 62
    1504:	0f be       	out	0x3f, r0	; 63
    1506:	cd bf       	out	0x3d, r28	; 61
    1508:	cf 91       	pop	r28
    150a:	df 91       	pop	r29
    150c:	08 95       	ret

0000150e <__vector_11>:
}


#endif
ISR(TIMER0_OVF_vect)
{
    150e:	1f 92       	push	r1
    1510:	0f 92       	push	r0
    1512:	0f b6       	in	r0, 0x3f	; 63
    1514:	0f 92       	push	r0
    1516:	11 24       	eor	r1, r1
    1518:	2f 93       	push	r18
    151a:	3f 93       	push	r19
    151c:	4f 93       	push	r20
    151e:	5f 93       	push	r21
    1520:	6f 93       	push	r22
    1522:	7f 93       	push	r23
    1524:	8f 93       	push	r24
    1526:	9f 93       	push	r25
    1528:	af 93       	push	r26
    152a:	bf 93       	push	r27
    152c:	ef 93       	push	r30
    152e:	ff 93       	push	r31
    1530:	df 93       	push	r29
    1532:	cf 93       	push	r28
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
	static u32 Local_u32NumberOfCounts=0; //act as global life time scope
	//Increment nuber of counts every time ISR happens
	Local_u32NumberOfCounts++;
    1538:	80 91 01 02 	lds	r24, 0x0201
    153c:	90 91 02 02 	lds	r25, 0x0202
    1540:	a0 91 03 02 	lds	r26, 0x0203
    1544:	b0 91 04 02 	lds	r27, 0x0204
    1548:	01 96       	adiw	r24, 0x01	; 1
    154a:	a1 1d       	adc	r26, r1
    154c:	b1 1d       	adc	r27, r1
    154e:	80 93 01 02 	sts	0x0201, r24
    1552:	90 93 02 02 	sts	0x0202, r25
    1556:	a0 93 03 02 	sts	0x0203, r26
    155a:	b0 93 04 02 	sts	0x0204, r27
	//if number of counts equals to global required Number
	if(Local_u32NumberOfCounts==g_u32NumberOfOverflows)
    155e:	20 91 01 02 	lds	r18, 0x0201
    1562:	30 91 02 02 	lds	r19, 0x0202
    1566:	40 91 03 02 	lds	r20, 0x0203
    156a:	50 91 04 02 	lds	r21, 0x0204
    156e:	80 91 f8 01 	lds	r24, 0x01F8
    1572:	90 91 f9 01 	lds	r25, 0x01F9
    1576:	a0 91 fa 01 	lds	r26, 0x01FA
    157a:	b0 91 fb 01 	lds	r27, 0x01FB
    157e:	28 17       	cp	r18, r24
    1580:	39 07       	cpc	r19, r25
    1582:	4a 07       	cpc	r20, r26
    1584:	5b 07       	cpc	r21, r27
    1586:	c9 f4       	brne	.+50     	; 0x15ba <__vector_11+0xac>
	{
		//preload TCNT with function part
		TCNT0_REG=256-g_u8NumberOfRemainingcounts;
    1588:	e2 e5       	ldi	r30, 0x52	; 82
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 91 fc 01 	lds	r24, 0x01FC
    1590:	81 95       	neg	r24
    1592:	80 83       	st	Z, r24
		//take Action
		if(CallBackArr[MTIMER0_OVF_INT_ID]!=NULL)
    1594:	80 91 f4 01 	lds	r24, 0x01F4
    1598:	90 91 f5 01 	lds	r25, 0x01F5
    159c:	00 97       	sbiw	r24, 0x00	; 0
    159e:	29 f0       	breq	.+10     	; 0x15aa <__vector_11+0x9c>
		{
		CallBackArr[MTIMER0_OVF_INT_ID]();//app function
    15a0:	e0 91 f4 01 	lds	r30, 0x01F4
    15a4:	f0 91 f5 01 	lds	r31, 0x01F5
    15a8:	09 95       	icall
		}
		//reset the Localcounter for the new period
		Local_u32NumberOfCounts=0;
    15aa:	10 92 01 02 	sts	0x0201, r1
    15ae:	10 92 02 02 	sts	0x0202, r1
    15b2:	10 92 03 02 	sts	0x0203, r1
    15b6:	10 92 04 02 	sts	0x0204, r1
	}

}
    15ba:	cf 91       	pop	r28
    15bc:	df 91       	pop	r29
    15be:	ff 91       	pop	r31
    15c0:	ef 91       	pop	r30
    15c2:	bf 91       	pop	r27
    15c4:	af 91       	pop	r26
    15c6:	9f 91       	pop	r25
    15c8:	8f 91       	pop	r24
    15ca:	7f 91       	pop	r23
    15cc:	6f 91       	pop	r22
    15ce:	5f 91       	pop	r21
    15d0:	4f 91       	pop	r20
    15d2:	3f 91       	pop	r19
    15d4:	2f 91       	pop	r18
    15d6:	0f 90       	pop	r0
    15d8:	0f be       	out	0x3f, r0	; 63
    15da:	0f 90       	pop	r0
    15dc:	1f 90       	pop	r1
    15de:	18 95       	reti

000015e0 <__vector_10>:
ISR(TIMER0_COMP_vect)
{
    15e0:	1f 92       	push	r1
    15e2:	0f 92       	push	r0
    15e4:	0f b6       	in	r0, 0x3f	; 63
    15e6:	0f 92       	push	r0
    15e8:	11 24       	eor	r1, r1
    15ea:	2f 93       	push	r18
    15ec:	3f 93       	push	r19
    15ee:	4f 93       	push	r20
    15f0:	5f 93       	push	r21
    15f2:	6f 93       	push	r22
    15f4:	7f 93       	push	r23
    15f6:	8f 93       	push	r24
    15f8:	9f 93       	push	r25
    15fa:	af 93       	push	r26
    15fc:	bf 93       	push	r27
    15fe:	ef 93       	push	r30
    1600:	ff 93       	push	r31
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
	static u32 Local_u32NumberOfCounts=0; //act as global life time scope
		//Increment nuber of counts every time ISR happens
		Local_u32NumberOfCounts++;
    160a:	80 91 05 02 	lds	r24, 0x0205
    160e:	90 91 06 02 	lds	r25, 0x0206
    1612:	a0 91 07 02 	lds	r26, 0x0207
    1616:	b0 91 08 02 	lds	r27, 0x0208
    161a:	01 96       	adiw	r24, 0x01	; 1
    161c:	a1 1d       	adc	r26, r1
    161e:	b1 1d       	adc	r27, r1
    1620:	80 93 05 02 	sts	0x0205, r24
    1624:	90 93 06 02 	sts	0x0206, r25
    1628:	a0 93 07 02 	sts	0x0207, r26
    162c:	b0 93 08 02 	sts	0x0208, r27
		//if number of counts equals to global required Number
if(Local_u32NumberOfCounts==g_u32NumOfCmpMatches)
    1630:	20 91 05 02 	lds	r18, 0x0205
    1634:	30 91 06 02 	lds	r19, 0x0206
    1638:	40 91 07 02 	lds	r20, 0x0207
    163c:	50 91 08 02 	lds	r21, 0x0208
    1640:	80 91 fd 01 	lds	r24, 0x01FD
    1644:	90 91 fe 01 	lds	r25, 0x01FE
    1648:	a0 91 ff 01 	lds	r26, 0x01FF
    164c:	b0 91 00 02 	lds	r27, 0x0200
    1650:	28 17       	cp	r18, r24
    1652:	39 07       	cpc	r19, r25
    1654:	4a 07       	cpc	r20, r26
    1656:	5b 07       	cpc	r21, r27
    1658:	99 f4       	brne	.+38     	; 0x1680 <__vector_10+0xa0>
{	//take action
	Local_u32NumberOfCounts=0;
    165a:	10 92 05 02 	sts	0x0205, r1
    165e:	10 92 06 02 	sts	0x0206, r1
    1662:	10 92 07 02 	sts	0x0207, r1
    1666:	10 92 08 02 	sts	0x0208, r1

	if(CallBackArr[MTIMER0_COM_INT_ID]!=NULL)
    166a:	80 91 f6 01 	lds	r24, 0x01F6
    166e:	90 91 f7 01 	lds	r25, 0x01F7
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	29 f0       	breq	.+10     	; 0x1680 <__vector_10+0xa0>
	{
		CallBackArr[MTIMER0_COM_INT_ID]();
    1676:	e0 91 f6 01 	lds	r30, 0x01F6
    167a:	f0 91 f7 01 	lds	r31, 0x01F7
    167e:	09 95       	icall
	}
}
}
    1680:	cf 91       	pop	r28
    1682:	df 91       	pop	r29
    1684:	ff 91       	pop	r31
    1686:	ef 91       	pop	r30
    1688:	bf 91       	pop	r27
    168a:	af 91       	pop	r26
    168c:	9f 91       	pop	r25
    168e:	8f 91       	pop	r24
    1690:	7f 91       	pop	r23
    1692:	6f 91       	pop	r22
    1694:	5f 91       	pop	r21
    1696:	4f 91       	pop	r20
    1698:	3f 91       	pop	r19
    169a:	2f 91       	pop	r18
    169c:	0f 90       	pop	r0
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	0f 90       	pop	r0
    16a2:	1f 90       	pop	r1
    16a4:	18 95       	reti

000016a6 <MUART_enInit>:
static void (*UART_DataReg_PtrF)(void)=NULL;
/************global variables*********/

//#include "HLCD_init.h"
ErrorState_t MUART_enInit(void)
{
    16a6:	df 93       	push	r29
    16a8:	cf 93       	push	r28
    16aa:	00 d0       	rcall	.+0      	; 0x16ac <MUART_enInit+0x6>
    16ac:	cd b7       	in	r28, 0x3d	; 61
    16ae:	de b7       	in	r29, 0x3e	; 62
	ErrorState_t Local_enState=SUCCES;
    16b0:	82 e0       	ldi	r24, 0x02	; 2
    16b2:	8a 83       	std	Y+2, r24	; 0x02
u8 Local_UCSRC_value=0x80;
    16b4:	80 e8       	ldi	r24, 0x80	; 128
    16b6:	89 83       	std	Y+1, r24	; 0x01
	//set buad rate
UBRRH_REG=(u8)(UART_BAUD_RATE>>8);
    16b8:	e0 e4       	ldi	r30, 0x40	; 64
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	10 82       	st	Z, r1
UBRRL_REG=(u8)UART_BAUD_RATE;
    16be:	e9 e2       	ldi	r30, 0x29	; 41
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	87 e6       	ldi	r24, 0x67	; 103
    16c4:	80 83       	st	Z, r24
//Set RX
SET_BIT(UCSRB_REG,RXEN_BIT);
    16c6:	aa e2       	ldi	r26, 0x2A	; 42
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	ea e2       	ldi	r30, 0x2A	; 42
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	80 61       	ori	r24, 0x10	; 16
    16d2:	8c 93       	st	X, r24
//set TX
SET_BIT(UCSRB_REG,TXEN_BIT);
    16d4:	aa e2       	ldi	r26, 0x2A	; 42
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	ea e2       	ldi	r30, 0x2A	; 42
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	88 60       	ori	r24, 0x08	; 8
    16e0:	8c 93       	st	X, r24

CLR_BIT(UCSRA_REG,U2X_BIT);
    16e2:	ab e2       	ldi	r26, 0x2B	; 43
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	eb e2       	ldi	r30, 0x2B	; 43
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	8d 7f       	andi	r24, 0xFD	; 253
    16ee:	8c 93       	st	X, r24
//SET_BIT(UCSRC_REG,URSEL_BIT);//to active USCRC reg
//CLR_BIT(UCSRC_REG,UMSEL_BIT);//Asynch UART


//parity mode
Local_UCSRC_value&=UART_PARITY_MASK;
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	8f 7c       	andi	r24, 0xCF	; 207
    16f4:	89 83       	std	Y+1, r24	; 0x01
Local_UCSRC_value|=UART_PARITY_BIT<<UPM0_BIT;
//Stop bits mode
//WRITE_BIT(UCSRC_REG,USBS_BIT,UART_STOP_BIT);
Local_UCSRC_value&=UART_STOP_BIT_MASK;
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	87 7f       	andi	r24, 0xF7	; 247
    16fa:	89 83       	std	Y+1, r24	; 0x01
Local_UCSRC_value|=(UART_STOP_BIT<<USBS_BIT);
//data bits size
Local_UCSRC_value&=UART_CHARACTER_SIZE_MASK;
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	89 7f       	andi	r24, 0xF9	; 249
    1700:	89 83       	std	Y+1, r24	; 0x01
Local_UCSRC_value|=(UART_CHARACTER_SIZE<<UCSZ0_BIT);
    1702:	89 81       	ldd	r24, Y+1	; 0x01
    1704:	86 60       	ori	r24, 0x06	; 6
    1706:	89 83       	std	Y+1, r24	; 0x01
//WRITE_BIT(UCSRC_REG,UCSZ0_BIT,1);
//WRITE_BIT(UCSRC_REG,UCSZ1_BIT,1);
//max 8 data bits for 9 data bits you should set UCSZ2 in reg UCSRB

UCSRC_REG=Local_UCSRC_value;
    1708:	e0 e4       	ldi	r30, 0x40	; 64
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	80 83       	st	Z, r24
//HLCD_sendIntNum(UART_PARITY_BIT<<UPM0_BIT);
//HLCD_gotoXY(2, 1);
//HLCD_sendIntNum(UCSRC_REG);
/**********************/

return Local_enState;
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	cf 91       	pop	r28
    1718:	df 91       	pop	r29
    171a:	08 95       	ret

0000171c <MUART_enSendByteSync>:
ErrorState_t MUART_enSendByteSync(u8 Copy_u8Data)
{
    171c:	df 93       	push	r29
    171e:	cf 93       	push	r28
    1720:	00 d0       	rcall	.+0      	; 0x1722 <MUART_enSendByteSync+0x6>
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
    1726:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState=SUCCES;
    1728:	82 e0       	ldi	r24, 0x02	; 2
    172a:	89 83       	std	Y+1, r24	; 0x01

	/*wait for empty reg buffer */
	while(!(GET_BIT(UCSRA_REG,UDRE_BIT)));
    172c:	eb e2       	ldi	r30, 0x2B	; 43
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	82 95       	swap	r24
    1734:	86 95       	lsr	r24
    1736:	87 70       	andi	r24, 0x07	; 7
    1738:	88 2f       	mov	r24, r24
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	81 70       	andi	r24, 0x01	; 1
    173e:	90 70       	andi	r25, 0x00	; 0
    1740:	00 97       	sbiw	r24, 0x00	; 0
    1742:	a1 f3       	breq	.-24     	; 0x172c <MUART_enSendByteSync+0x10>
	/*Send Data to data register */
	UDR_REG=Copy_u8Data;
    1744:	ec e2       	ldi	r30, 0x2C	; 44
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	80 83       	st	Z, r24

	/* Wait for empty transmit buffer */
//	while ( !( UCSRA_REG & (1<<UDRE_BIT)) )	;
	/* Put data into buffer, sends the data */
	//UDR_REG = Copy_u8Data;
	return Local_enState;
    174c:	89 81       	ldd	r24, Y+1	; 0x01

}
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	cf 91       	pop	r28
    1754:	df 91       	pop	r29
    1756:	08 95       	ret

00001758 <MUART_enReciveByteSync>:
ErrorState_t MUART_enReciveByteSync(u8 * ptrCopyData)
{
    1758:	df 93       	push	r29
    175a:	cf 93       	push	r28
    175c:	00 d0       	rcall	.+0      	; 0x175e <MUART_enReciveByteSync+0x6>
    175e:	0f 92       	push	r0
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
    1764:	9b 83       	std	Y+3, r25	; 0x03
    1766:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState=SUCCES;
    1768:	82 e0       	ldi	r24, 0x02	; 2
    176a:	89 83       	std	Y+1, r24	; 0x01
	/*wait for reciving coplete */
	//if(ptrCopyData!=NULL){
	while(!(GET_BIT(UCSRA_REG,RXC_BIT)));
    176c:	eb e2       	ldi	r30, 0x2B	; 43
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	88 23       	and	r24, r24
    1774:	dc f7       	brge	.-10     	; 0x176c <MUART_enReciveByteSync+0x14>
		/* RECIVED*/
		*ptrCopyData=UDR_REG;
    1776:	ec e2       	ldi	r30, 0x2C	; 44
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	ea 81       	ldd	r30, Y+2	; 0x02
    177e:	fb 81       	ldd	r31, Y+3	; 0x03
    1780:	80 83       	st	Z, r24
	//UDR_REG=0;
	//}
	//else{
		//Local_enState=NULL_PTR_ERR;
		//}
		return Local_enState;
    1782:	89 81       	ldd	r24, Y+1	; 0x01
}
    1784:	0f 90       	pop	r0
    1786:	0f 90       	pop	r0
    1788:	0f 90       	pop	r0
    178a:	cf 91       	pop	r28
    178c:	df 91       	pop	r29
    178e:	08 95       	ret

00001790 <MUART_enSendStringSync>:
ErrorState_t MUART_enSendStringSync(char * str)
{ErrorState_t Local_enState=SUCCES;
    1790:	df 93       	push	r29
    1792:	cf 93       	push	r28
    1794:	00 d0       	rcall	.+0      	; 0x1796 <MUART_enSendStringSync+0x6>
    1796:	00 d0       	rcall	.+0      	; 0x1798 <MUART_enSendStringSync+0x8>
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
    179c:	9c 83       	std	Y+4, r25	; 0x04
    179e:	8b 83       	std	Y+3, r24	; 0x03
    17a0:	82 e0       	ldi	r24, 0x02	; 2
    17a2:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 Local_index=0;str[Local_index];Local_index++)
    17a4:	19 82       	std	Y+1, r1	; 0x01
    17a6:	0e c0       	rjmp	.+28     	; 0x17c4 <MUART_enSendStringSync+0x34>
	{
		MUART_enSendByteSync(str[Local_index]);
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	9c 81       	ldd	r25, Y+4	; 0x04
    17b2:	fc 01       	movw	r30, r24
    17b4:	e2 0f       	add	r30, r18
    17b6:	f3 1f       	adc	r31, r19
    17b8:	80 81       	ld	r24, Z
    17ba:	0e 94 8e 0b 	call	0x171c	; 0x171c <MUART_enSendByteSync>
		//}
		return Local_enState;
}
ErrorState_t MUART_enSendStringSync(char * str)
{ErrorState_t Local_enState=SUCCES;
	for(u8 Local_index=0;str[Local_index];Local_index++)
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	8f 5f       	subi	r24, 0xFF	; 255
    17c2:	89 83       	std	Y+1, r24	; 0x01
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	9c 81       	ldd	r25, Y+4	; 0x04
    17ce:	fc 01       	movw	r30, r24
    17d0:	e2 0f       	add	r30, r18
    17d2:	f3 1f       	adc	r31, r19
    17d4:	80 81       	ld	r24, Z
    17d6:	88 23       	and	r24, r24
    17d8:	39 f7       	brne	.-50     	; 0x17a8 <MUART_enSendStringSync+0x18>
	{
		MUART_enSendByteSync(str[Local_index]);
	}

	return Local_enState;
    17da:	8a 81       	ldd	r24, Y+2	; 0x02

}
    17dc:	0f 90       	pop	r0
    17de:	0f 90       	pop	r0
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	cf 91       	pop	r28
    17e6:	df 91       	pop	r29
    17e8:	08 95       	ret

000017ea <MUART_enReciveStringSync>:

ErrorState_t MUART_enReciveStringSync(char * str)
{ErrorState_t Local_enState=SUCCES;
    17ea:	df 93       	push	r29
    17ec:	cf 93       	push	r28
    17ee:	00 d0       	rcall	.+0      	; 0x17f0 <MUART_enReciveStringSync+0x6>
    17f0:	00 d0       	rcall	.+0      	; 0x17f2 <MUART_enReciveStringSync+0x8>
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
    17f6:	9c 83       	std	Y+4, r25	; 0x04
    17f8:	8b 83       	std	Y+3, r24	; 0x03
    17fa:	82 e0       	ldi	r24, 0x02	; 2
    17fc:	8a 83       	std	Y+2, r24	; 0x02

u8 Local_index;
	for(Local_index=0;str[Local_index-1]!='#';Local_index++)
    17fe:	19 82       	std	Y+1, r1	; 0x01
    1800:	0c c0       	rjmp	.+24     	; 0x181a <MUART_enReciveStringSync+0x30>
	{
		MUART_enReciveByteSync((u8 *)&str[Local_index]);
    1802:	89 81       	ldd	r24, Y+1	; 0x01
    1804:	28 2f       	mov	r18, r24
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	9c 81       	ldd	r25, Y+4	; 0x04
    180c:	82 0f       	add	r24, r18
    180e:	93 1f       	adc	r25, r19
    1810:	0e 94 ac 0b 	call	0x1758	; 0x1758 <MUART_enReciveByteSync>

ErrorState_t MUART_enReciveStringSync(char * str)
{ErrorState_t Local_enState=SUCCES;

u8 Local_index;
	for(Local_index=0;str[Local_index-1]!='#';Local_index++)
    1814:	89 81       	ldd	r24, Y+1	; 0x01
    1816:	8f 5f       	subi	r24, 0xFF	; 255
    1818:	89 83       	std	Y+1, r24	; 0x01
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	88 2f       	mov	r24, r24
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	9c 01       	movw	r18, r24
    1822:	21 50       	subi	r18, 0x01	; 1
    1824:	30 40       	sbci	r19, 0x00	; 0
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	9c 81       	ldd	r25, Y+4	; 0x04
    182a:	fc 01       	movw	r30, r24
    182c:	e2 0f       	add	r30, r18
    182e:	f3 1f       	adc	r31, r19
    1830:	80 81       	ld	r24, Z
    1832:	83 32       	cpi	r24, 0x23	; 35
    1834:	31 f7       	brne	.-52     	; 0x1802 <MUART_enReciveStringSync+0x18>
	{
		MUART_enReciveByteSync((u8 *)&str[Local_index]);
	}

	str[Local_index-1]='\0';
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	88 2f       	mov	r24, r24
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	9c 01       	movw	r18, r24
    183e:	21 50       	subi	r18, 0x01	; 1
    1840:	30 40       	sbci	r19, 0x00	; 0
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	9c 81       	ldd	r25, Y+4	; 0x04
    1846:	fc 01       	movw	r30, r24
    1848:	e2 0f       	add	r30, r18
    184a:	f3 1f       	adc	r31, r19
    184c:	10 82       	st	Z, r1
	return Local_enState;
    184e:	8a 81       	ldd	r24, Y+2	; 0x02

}
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	cf 91       	pop	r28
    185a:	df 91       	pop	r29
    185c:	08 95       	ret

0000185e <UART_SendNoBlock>:

ErrorState_t UART_SendNoBlock(u8  Copy_u8Data)
{
    185e:	df 93       	push	r29
    1860:	cf 93       	push	r28
    1862:	00 d0       	rcall	.+0      	; 0x1864 <UART_SendNoBlock+0x6>
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState=SUCCES;
    186a:	82 e0       	ldi	r24, 0x02	; 2
    186c:	89 83       	std	Y+1, r24	; 0x01


		UDR_REG=Copy_u8Data;
    186e:	ec e2       	ldi	r30, 0x2C	; 44
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	8a 81       	ldd	r24, Y+2	; 0x02
    1874:	80 83       	st	Z, r24



		return Local_enState;
    1876:	89 81       	ldd	r24, Y+1	; 0x01


}
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	cf 91       	pop	r28
    187e:	df 91       	pop	r29
    1880:	08 95       	ret

00001882 <UART_ReceiveNoBlock>:

ErrorState_t UART_ReceiveNoBlock(u8 * ptrCopyData)
{
    1882:	df 93       	push	r29
    1884:	cf 93       	push	r28
    1886:	00 d0       	rcall	.+0      	; 0x1888 <UART_ReceiveNoBlock+0x6>
    1888:	0f 92       	push	r0
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    188e:	9b 83       	std	Y+3, r25	; 0x03
    1890:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState=SUCCES;
    1892:	82 e0       	ldi	r24, 0x02	; 2
    1894:	89 83       	std	Y+1, r24	; 0x01

	*ptrCopyData=UDR_REG;
    1896:	ec e2       	ldi	r30, 0x2C	; 44
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	ea 81       	ldd	r30, Y+2	; 0x02
    189e:	fb 81       	ldd	r31, Y+3	; 0x03
    18a0:	80 83       	st	Z, r24
	return Local_enState;
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	cf 91       	pop	r28
    18ac:	df 91       	pop	r29
    18ae:	08 95       	ret

000018b0 <MUART_enDataReg_EmptyInt_Enable>:


/*********interrupts*********/

ErrorState_t MUART_enDataReg_EmptyInt_Enable(void)
{
    18b0:	df 93       	push	r29
    18b2:	cf 93       	push	r28
    18b4:	0f 92       	push	r0
    18b6:	cd b7       	in	r28, 0x3d	; 61
    18b8:	de b7       	in	r29, 0x3e	; 62
	ErrorState_t Local_enState=SUCCES;
    18ba:	82 e0       	ldi	r24, 0x02	; 2
    18bc:	89 83       	std	Y+1, r24	; 0x01



SET_BIT(UCSRB_REG,UDRIE_BIT);
    18be:	aa e2       	ldi	r26, 0x2A	; 42
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	ea e2       	ldi	r30, 0x2A	; 42
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	80 62       	ori	r24, 0x20	; 32
    18ca:	8c 93       	st	X, r24
return Local_enState;
    18cc:	89 81       	ldd	r24, Y+1	; 0x01

}
    18ce:	0f 90       	pop	r0
    18d0:	cf 91       	pop	r28
    18d2:	df 91       	pop	r29
    18d4:	08 95       	ret

000018d6 <MUART_enDataReg_EmptyInt_Disable>:

ErrorState_t MUART_enDataReg_EmptyInt_Disable(void)
{ErrorState_t Local_enState=SUCCES;
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	0f 92       	push	r0
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
    18e0:	82 e0       	ldi	r24, 0x02	; 2
    18e2:	89 83       	std	Y+1, r24	; 0x01



CLR_BIT(UCSRB_REG,UDRIE_BIT);
    18e4:	aa e2       	ldi	r26, 0x2A	; 42
    18e6:	b0 e0       	ldi	r27, 0x00	; 0
    18e8:	ea e2       	ldi	r30, 0x2A	; 42
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	80 81       	ld	r24, Z
    18ee:	8f 7d       	andi	r24, 0xDF	; 223
    18f0:	8c 93       	st	X, r24
return Local_enState;
    18f2:	89 81       	ldd	r24, Y+1	; 0x01

}
    18f4:	0f 90       	pop	r0
    18f6:	cf 91       	pop	r28
    18f8:	df 91       	pop	r29
    18fa:	08 95       	ret

000018fc <MUART_enTx_interruptENable>:



ErrorState_t MUART_enTx_interruptENable(void)
{
    18fc:	df 93       	push	r29
    18fe:	cf 93       	push	r28
    1900:	0f 92       	push	r0
    1902:	cd b7       	in	r28, 0x3d	; 61
    1904:	de b7       	in	r29, 0x3e	; 62
		ErrorState_t Local_enState=SUCCES;
    1906:	82 e0       	ldi	r24, 0x02	; 2
    1908:	89 83       	std	Y+1, r24	; 0x01


		SET_BIT(UCSRB_REG,TXCIE_BIT);
    190a:	aa e2       	ldi	r26, 0x2A	; 42
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	ea e2       	ldi	r30, 0x2A	; 42
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	80 64       	ori	r24, 0x40	; 64
    1916:	8c 93       	st	X, r24

		return Local_enState;
    1918:	89 81       	ldd	r24, Y+1	; 0x01

}
    191a:	0f 90       	pop	r0
    191c:	cf 91       	pop	r28
    191e:	df 91       	pop	r29
    1920:	08 95       	ret

00001922 <MUART_enTx_interruptDisable>:

ErrorState_t MUART_enTx_interruptDisable(void)
{
    1922:	df 93       	push	r29
    1924:	cf 93       	push	r28
    1926:	0f 92       	push	r0
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
			ErrorState_t Local_enState=SUCCES;
    192c:	82 e0       	ldi	r24, 0x02	; 2
    192e:	89 83       	std	Y+1, r24	; 0x01


			CLR_BIT(UCSRB_REG,TXCIE_BIT);
    1930:	aa e2       	ldi	r26, 0x2A	; 42
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	ea e2       	ldi	r30, 0x2A	; 42
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	8f 7b       	andi	r24, 0xBF	; 191
    193c:	8c 93       	st	X, r24
			return Local_enState;
    193e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1940:	0f 90       	pop	r0
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <MUART_enRx_interruptENable>:

ErrorState_t MUART_enRx_interruptENable(void)
{
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	0f 92       	push	r0
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
			ErrorState_t Local_enState=SUCCES;
    1952:	82 e0       	ldi	r24, 0x02	; 2
    1954:	89 83       	std	Y+1, r24	; 0x01

			SET_BIT(UCSRB_REG,RXCIE_BIT);
    1956:	aa e2       	ldi	r26, 0x2A	; 42
    1958:	b0 e0       	ldi	r27, 0x00	; 0
    195a:	ea e2       	ldi	r30, 0x2A	; 42
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	80 68       	ori	r24, 0x80	; 128
    1962:	8c 93       	st	X, r24

			return Local_enState;
    1964:	89 81       	ldd	r24, Y+1	; 0x01

}
    1966:	0f 90       	pop	r0
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	08 95       	ret

0000196e <MUART_enRx_interruptDisable>:



ErrorState_t MUART_enRx_interruptDisable(void)
{
    196e:	df 93       	push	r29
    1970:	cf 93       	push	r28
    1972:	0f 92       	push	r0
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
			ErrorState_t Local_enState=SUCCES;
    1978:	82 e0       	ldi	r24, 0x02	; 2
    197a:	89 83       	std	Y+1, r24	; 0x01


			CLR_BIT(UCSRB_REG,RXCIE_BIT);
    197c:	aa e2       	ldi	r26, 0x2A	; 42
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	ea e2       	ldi	r30, 0x2A	; 42
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	8f 77       	andi	r24, 0x7F	; 127
    1988:	8c 93       	st	X, r24
			return Local_enState;
    198a:	89 81       	ldd	r24, Y+1	; 0x01

}
    198c:	0f 90       	pop	r0
    198e:	cf 91       	pop	r28
    1990:	df 91       	pop	r29
    1992:	08 95       	ret

00001994 <MUART_TX_Setcallback>:


ErrorState_t MUART_TX_Setcallback(void (*copy_ptrf)(void))
{
    1994:	df 93       	push	r29
    1996:	cf 93       	push	r28
    1998:	00 d0       	rcall	.+0      	; 0x199a <MUART_TX_Setcallback+0x6>
    199a:	0f 92       	push	r0
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
    19a0:	9b 83       	std	Y+3, r25	; 0x03
    19a2:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState=SUCCES;
    19a4:	82 e0       	ldi	r24, 0x02	; 2
    19a6:	89 83       	std	Y+1, r24	; 0x01
	if(copy_ptrf!=NULL)
    19a8:	8a 81       	ldd	r24, Y+2	; 0x02
    19aa:	9b 81       	ldd	r25, Y+3	; 0x03
    19ac:	00 97       	sbiw	r24, 0x00	; 0
    19ae:	39 f0       	breq	.+14     	; 0x19be <MUART_TX_Setcallback+0x2a>
	{
	UART_TX_PtrF=copy_ptrf;
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	9b 81       	ldd	r25, Y+3	; 0x03
    19b4:	90 93 0a 02 	sts	0x020A, r25
    19b8:	80 93 09 02 	sts	0x0209, r24
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <MUART_TX_Setcallback+0x2e>
	}
	else
	{
		Local_enState=NULL_PTR_ERR;
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enState;
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	cf 91       	pop	r28
    19cc:	df 91       	pop	r29
    19ce:	08 95       	ret

000019d0 <MUART_RX_Setcallback>:


ErrorState_t MUART_RX_Setcallback(void (*copy_ptrf)(void))
{
    19d0:	df 93       	push	r29
    19d2:	cf 93       	push	r28
    19d4:	00 d0       	rcall	.+0      	; 0x19d6 <MUART_RX_Setcallback+0x6>
    19d6:	0f 92       	push	r0
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
    19dc:	9b 83       	std	Y+3, r25	; 0x03
    19de:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState=SUCCES;
    19e0:	82 e0       	ldi	r24, 0x02	; 2
    19e2:	89 83       	std	Y+1, r24	; 0x01
	if(copy_ptrf!=NULL)
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	9b 81       	ldd	r25, Y+3	; 0x03
    19e8:	00 97       	sbiw	r24, 0x00	; 0
    19ea:	39 f0       	breq	.+14     	; 0x19fa <MUART_RX_Setcallback+0x2a>
	{
	UART_RX_PtrF=copy_ptrf;
    19ec:	8a 81       	ldd	r24, Y+2	; 0x02
    19ee:	9b 81       	ldd	r25, Y+3	; 0x03
    19f0:	90 93 0c 02 	sts	0x020C, r25
    19f4:	80 93 0b 02 	sts	0x020B, r24
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <MUART_RX_Setcallback+0x2e>
	}
	else
	{
		Local_enState=NULL_PTR_ERR;
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enState;
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	cf 91       	pop	r28
    1a08:	df 91       	pop	r29
    1a0a:	08 95       	ret

00001a0c <MUART_Datareg_Setcallback>:

ErrorState_t MUART_Datareg_Setcallback(void (*copy_ptrf)(void))
{
    1a0c:	df 93       	push	r29
    1a0e:	cf 93       	push	r28
    1a10:	00 d0       	rcall	.+0      	; 0x1a12 <MUART_Datareg_Setcallback+0x6>
    1a12:	0f 92       	push	r0
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
    1a18:	9b 83       	std	Y+3, r25	; 0x03
    1a1a:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState=SUCCES;
    1a1c:	82 e0       	ldi	r24, 0x02	; 2
    1a1e:	89 83       	std	Y+1, r24	; 0x01
	if(copy_ptrf!=NULL)
    1a20:	8a 81       	ldd	r24, Y+2	; 0x02
    1a22:	9b 81       	ldd	r25, Y+3	; 0x03
    1a24:	00 97       	sbiw	r24, 0x00	; 0
    1a26:	39 f0       	breq	.+14     	; 0x1a36 <MUART_Datareg_Setcallback+0x2a>
	{
		UART_DataReg_PtrF=copy_ptrf;
    1a28:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a2c:	90 93 0e 02 	sts	0x020E, r25
    1a30:	80 93 0d 02 	sts	0x020D, r24
    1a34:	02 c0       	rjmp	.+4      	; 0x1a3a <MUART_Datareg_Setcallback+0x2e>
	}
	else
	{
		Local_enState=NULL_PTR_ERR;
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enState;
    1a3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	08 95       	ret

00001a48 <__vector_13>:

ISR(USART_RXC_vect)
{
    1a48:	1f 92       	push	r1
    1a4a:	0f 92       	push	r0
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	0f 92       	push	r0
    1a50:	11 24       	eor	r1, r1
    1a52:	2f 93       	push	r18
    1a54:	3f 93       	push	r19
    1a56:	4f 93       	push	r20
    1a58:	5f 93       	push	r21
    1a5a:	6f 93       	push	r22
    1a5c:	7f 93       	push	r23
    1a5e:	8f 93       	push	r24
    1a60:	9f 93       	push	r25
    1a62:	af 93       	push	r26
    1a64:	bf 93       	push	r27
    1a66:	ef 93       	push	r30
    1a68:	ff 93       	push	r31
    1a6a:	df 93       	push	r29
    1a6c:	cf 93       	push	r28
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
	if(UART_RX_PtrF!=NULL){
    1a72:	80 91 0b 02 	lds	r24, 0x020B
    1a76:	90 91 0c 02 	lds	r25, 0x020C
    1a7a:	00 97       	sbiw	r24, 0x00	; 0
    1a7c:	29 f0       	breq	.+10     	; 0x1a88 <__vector_13+0x40>

		UART_RX_PtrF();
    1a7e:	e0 91 0b 02 	lds	r30, 0x020B
    1a82:	f0 91 0c 02 	lds	r31, 0x020C
    1a86:	09 95       	icall
	}


}
    1a88:	cf 91       	pop	r28
    1a8a:	df 91       	pop	r29
    1a8c:	ff 91       	pop	r31
    1a8e:	ef 91       	pop	r30
    1a90:	bf 91       	pop	r27
    1a92:	af 91       	pop	r26
    1a94:	9f 91       	pop	r25
    1a96:	8f 91       	pop	r24
    1a98:	7f 91       	pop	r23
    1a9a:	6f 91       	pop	r22
    1a9c:	5f 91       	pop	r21
    1a9e:	4f 91       	pop	r20
    1aa0:	3f 91       	pop	r19
    1aa2:	2f 91       	pop	r18
    1aa4:	0f 90       	pop	r0
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	0f 90       	pop	r0
    1aaa:	1f 90       	pop	r1
    1aac:	18 95       	reti

00001aae <__vector_14>:


ISR(USART_UDRE_vect)
{
    1aae:	1f 92       	push	r1
    1ab0:	0f 92       	push	r0
    1ab2:	0f b6       	in	r0, 0x3f	; 63
    1ab4:	0f 92       	push	r0
    1ab6:	11 24       	eor	r1, r1
    1ab8:	2f 93       	push	r18
    1aba:	3f 93       	push	r19
    1abc:	4f 93       	push	r20
    1abe:	5f 93       	push	r21
    1ac0:	6f 93       	push	r22
    1ac2:	7f 93       	push	r23
    1ac4:	8f 93       	push	r24
    1ac6:	9f 93       	push	r25
    1ac8:	af 93       	push	r26
    1aca:	bf 93       	push	r27
    1acc:	ef 93       	push	r30
    1ace:	ff 93       	push	r31
    1ad0:	df 93       	push	r29
    1ad2:	cf 93       	push	r28
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62

	if(UART_DataReg_PtrF!=NULL)
    1ad8:	80 91 0d 02 	lds	r24, 0x020D
    1adc:	90 91 0e 02 	lds	r25, 0x020E
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	29 f0       	breq	.+10     	; 0x1aee <__vector_14+0x40>
	{
		UART_DataReg_PtrF();
    1ae4:	e0 91 0d 02 	lds	r30, 0x020D
    1ae8:	f0 91 0e 02 	lds	r31, 0x020E
    1aec:	09 95       	icall
	}

}
    1aee:	cf 91       	pop	r28
    1af0:	df 91       	pop	r29
    1af2:	ff 91       	pop	r31
    1af4:	ef 91       	pop	r30
    1af6:	bf 91       	pop	r27
    1af8:	af 91       	pop	r26
    1afa:	9f 91       	pop	r25
    1afc:	8f 91       	pop	r24
    1afe:	7f 91       	pop	r23
    1b00:	6f 91       	pop	r22
    1b02:	5f 91       	pop	r21
    1b04:	4f 91       	pop	r20
    1b06:	3f 91       	pop	r19
    1b08:	2f 91       	pop	r18
    1b0a:	0f 90       	pop	r0
    1b0c:	0f be       	out	0x3f, r0	; 63
    1b0e:	0f 90       	pop	r0
    1b10:	1f 90       	pop	r1
    1b12:	18 95       	reti

00001b14 <__vector_15>:
ISR(USART_TXC_vect)
{
    1b14:	1f 92       	push	r1
    1b16:	0f 92       	push	r0
    1b18:	0f b6       	in	r0, 0x3f	; 63
    1b1a:	0f 92       	push	r0
    1b1c:	11 24       	eor	r1, r1
    1b1e:	2f 93       	push	r18
    1b20:	3f 93       	push	r19
    1b22:	4f 93       	push	r20
    1b24:	5f 93       	push	r21
    1b26:	6f 93       	push	r22
    1b28:	7f 93       	push	r23
    1b2a:	8f 93       	push	r24
    1b2c:	9f 93       	push	r25
    1b2e:	af 93       	push	r26
    1b30:	bf 93       	push	r27
    1b32:	ef 93       	push	r30
    1b34:	ff 93       	push	r31
    1b36:	df 93       	push	r29
    1b38:	cf 93       	push	r28
    1b3a:	cd b7       	in	r28, 0x3d	; 61
    1b3c:	de b7       	in	r29, 0x3e	; 62
	if(UART_TX_PtrF!=NULL){
    1b3e:	80 91 09 02 	lds	r24, 0x0209
    1b42:	90 91 0a 02 	lds	r25, 0x020A
    1b46:	00 97       	sbiw	r24, 0x00	; 0
    1b48:	29 f0       	breq	.+10     	; 0x1b54 <__vector_15+0x40>

		UART_TX_PtrF();
    1b4a:	e0 91 09 02 	lds	r30, 0x0209
    1b4e:	f0 91 0a 02 	lds	r31, 0x020A
    1b52:	09 95       	icall

	}

}
    1b54:	cf 91       	pop	r28
    1b56:	df 91       	pop	r29
    1b58:	ff 91       	pop	r31
    1b5a:	ef 91       	pop	r30
    1b5c:	bf 91       	pop	r27
    1b5e:	af 91       	pop	r26
    1b60:	9f 91       	pop	r25
    1b62:	8f 91       	pop	r24
    1b64:	7f 91       	pop	r23
    1b66:	6f 91       	pop	r22
    1b68:	5f 91       	pop	r21
    1b6a:	4f 91       	pop	r20
    1b6c:	3f 91       	pop	r19
    1b6e:	2f 91       	pop	r18
    1b70:	0f 90       	pop	r0
    1b72:	0f be       	out	0x3f, r0	; 63
    1b74:	0f 90       	pop	r0
    1b76:	1f 90       	pop	r1
    1b78:	18 95       	reti

00001b7a <MTIMER1_enInit>:
#include <stdlib.h>

static void (*g_ICU_CallBackPtr[2])(void)={NULL,NULL};
static volatile u8 flag=0;
ErrorState_t MTIMER1_enInit(void)
{
    1b7a:	df 93       	push	r29
    1b7c:	cf 93       	push	r28
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1A_REG,WGM10_BIT);
    1b82:	af e4       	ldi	r26, 0x4F	; 79
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	ef e4       	ldi	r30, 0x4F	; 79
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	80 81       	ld	r24, Z
    1b8c:	8e 7f       	andi	r24, 0xFE	; 254
    1b8e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A_REG,WGM11_BIT);
    1b90:	af e4       	ldi	r26, 0x4F	; 79
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	ef e4       	ldi	r30, 0x4F	; 79
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	8d 7f       	andi	r24, 0xFD	; 253
    1b9c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A_REG,WGM12_BIT);
    1b9e:	af e4       	ldi	r26, 0x4F	; 79
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	ef e4       	ldi	r30, 0x4F	; 79
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	87 7f       	andi	r24, 0xF7	; 247
    1baa:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A_REG,WGM13_BIT);
    1bac:	af e4       	ldi	r26, 0x4F	; 79
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	ef e4       	ldi	r30, 0x4F	; 79
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	8f 7e       	andi	r24, 0xEF	; 239
    1bb8:	8c 93       	st	X, r24
	return SUCCES;
    1bba:	82 e0       	ldi	r24, 0x02	; 2
}
    1bbc:	cf 91       	pop	r28
    1bbe:	df 91       	pop	r29
    1bc0:	08 95       	ret

00001bc2 <MTIMER1_enStart>:
//timer mode
ErrorState_t MTIMER1_enStart(void)
{
    1bc2:	df 93       	push	r29
    1bc4:	cf 93       	push	r28
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
#if(MTIMER1_CLK >= MTIMER1_NO_CLOCK && MTIMER1_CLK <= MTIMER1_ECTTCL_RAISs_EDGE)

	//step1 :clear bits by applying Mask
	TCCR1B_REG &=MTIMER1_CS_MASK;
    1bca:	ae e4       	ldi	r26, 0x4E	; 78
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	ee e4       	ldi	r30, 0x4E	; 78
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	88 7f       	andi	r24, 0xF8	; 248
    1bd6:	8c 93       	st	X, r24
	//step 2 :set clock value
	TCCR1B_REG |=MTIMER1_CLK;
    1bd8:	ae e4       	ldi	r26, 0x4E	; 78
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	ee e4       	ldi	r30, 0x4E	; 78
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	85 60       	ori	r24, 0x05	; 5
    1be4:	8c 93       	st	X, r24
#else
	#error ("Wrong Timer Clock")
#endif
return SUCCES;
    1be6:	82 e0       	ldi	r24, 0x02	; 2
}//clock
    1be8:	cf 91       	pop	r28
    1bea:	df 91       	pop	r29
    1bec:	08 95       	ret

00001bee <MTIMER1_enStop>:
ErrorState_t MTIMER1_enStop(void)
{
    1bee:	df 93       	push	r29
    1bf0:	cf 93       	push	r28
    1bf2:	cd b7       	in	r28, 0x3d	; 61
    1bf4:	de b7       	in	r29, 0x3e	; 62

	TCCR1B_REG &= MTIMER1_CS_MASK;
    1bf6:	ae e4       	ldi	r26, 0x4E	; 78
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	ee e4       	ldi	r30, 0x4E	; 78
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	88 7f       	andi	r24, 0xF8	; 248
    1c02:	8c 93       	st	X, r24
	return SUCCES;
    1c04:	82 e0       	ldi	r24, 0x02	; 2
}//stop
    1c06:	cf 91       	pop	r28
    1c08:	df 91       	pop	r29
    1c0a:	08 95       	ret

00001c0c <MTIMER1_ICU_enInit>:
ErrorState_t MTIMER1_ICU_enInit(void)
{
    1c0c:	df 93       	push	r29
    1c0e:	cf 93       	push	r28
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62


	MTIMER1_ICU_enSetTrigger(MTIMER1_ICU_RAIS_EDGE_TRIG);
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <MTIMER1_ICU_enSetTrigger>


		return SUCCES;
    1c1a:	82 e0       	ldi	r24, 0x02	; 2
}//first trigger to the ISR
    1c1c:	cf 91       	pop	r28
    1c1e:	df 91       	pop	r29
    1c20:	08 95       	ret

00001c22 <MTIMER1_ICU_enEnableInt>:
ErrorState_t MTIMER1_ICU_enEnableInt(void)
{
    1c22:	df 93       	push	r29
    1c24:	cf 93       	push	r28
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK_REG,TICIE1_BIT);
    1c2a:	a9 e5       	ldi	r26, 0x59	; 89
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	e9 e5       	ldi	r30, 0x59	; 89
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	80 62       	ori	r24, 0x20	; 32
    1c36:	8c 93       	st	X, r24


	return SUCCES;
    1c38:	82 e0       	ldi	r24, 0x02	; 2
}
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	08 95       	ret

00001c40 <MTIMER1_ICU_enDisableInt>:
ErrorState_t MTIMER1_ICU_enDisableInt(void)
{
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	cd b7       	in	r28, 0x3d	; 61
    1c46:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(TIMSK_REG,TICIE1_BIT);
    1c48:	a9 e5       	ldi	r26, 0x59	; 89
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	e9 e5       	ldi	r30, 0x59	; 89
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	8f 7d       	andi	r24, 0xDF	; 223
    1c54:	8c 93       	st	X, r24


	return SUCCES;
    1c56:	82 e0       	ldi	r24, 0x02	; 2
}
    1c58:	cf 91       	pop	r28
    1c5a:	df 91       	pop	r29
    1c5c:	08 95       	ret

00001c5e <MTIMER1_ICU_enSetCallBack>:
ErrorState_t MTIMER1_ICU_enSetCallBack(u8 copy_u8IntID,void (* ptrfn)(void))
{
    1c5e:	df 93       	push	r29
    1c60:	cf 93       	push	r28
    1c62:	00 d0       	rcall	.+0      	; 0x1c64 <MTIMER1_ICU_enSetCallBack+0x6>
    1c64:	00 d0       	rcall	.+0      	; 0x1c66 <MTIMER1_ICU_enSetCallBack+0x8>
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
    1c6a:	8a 83       	std	Y+2, r24	; 0x02
    1c6c:	7c 83       	std	Y+4, r23	; 0x04
    1c6e:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState_t Local_enstate=SUCCES;
    1c70:	82 e0       	ldi	r24, 0x02	; 2
    1c72:	89 83       	std	Y+1, r24	; 0x01
	if(ptrfn !=NULL)
    1c74:	8b 81       	ldd	r24, Y+3	; 0x03
    1c76:	9c 81       	ldd	r25, Y+4	; 0x04
    1c78:	00 97       	sbiw	r24, 0x00	; 0
    1c7a:	a1 f0       	breq	.+40     	; 0x1ca4 <MTIMER1_ICU_enSetCallBack+0x46>
	{
if(copy_u8IntID==MTIME1_CAPT_ID){
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	88 23       	and	r24, r24
    1c80:	39 f4       	brne	.+14     	; 0x1c90 <MTIMER1_ICU_enSetCallBack+0x32>
		g_ICU_CallBackPtr[0]=ptrfn;
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	9c 81       	ldd	r25, Y+4	; 0x04
    1c86:	90 93 10 02 	sts	0x0210, r25
    1c8a:	80 93 0f 02 	sts	0x020F, r24
    1c8e:	0c c0       	rjmp	.+24     	; 0x1ca8 <MTIMER1_ICU_enSetCallBack+0x4a>
}
else if(copy_u8IntID==MTIME1_OVF_ID){
    1c90:	8a 81       	ldd	r24, Y+2	; 0x02
    1c92:	81 30       	cpi	r24, 0x01	; 1
    1c94:	49 f4       	brne	.+18     	; 0x1ca8 <MTIMER1_ICU_enSetCallBack+0x4a>

	g_ICU_CallBackPtr[1]=ptrfn;
    1c96:	8b 81       	ldd	r24, Y+3	; 0x03
    1c98:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9a:	90 93 12 02 	sts	0x0212, r25
    1c9e:	80 93 11 02 	sts	0x0211, r24
    1ca2:	02 c0       	rjmp	.+4      	; 0x1ca8 <MTIMER1_ICU_enSetCallBack+0x4a>

	}
	else
	{

		Local_enstate=NULL_PTR_ERR;
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enstate;
    1ca8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	cf 91       	pop	r28
    1cb4:	df 91       	pop	r29
    1cb6:	08 95       	ret

00001cb8 <MTIMER1_ICU_enRead>:
ErrorState_t MTIMER1_ICU_enRead(volatile u16 * ptrReadValue)
{
    1cb8:	df 93       	push	r29
    1cba:	cf 93       	push	r28
    1cbc:	00 d0       	rcall	.+0      	; 0x1cbe <MTIMER1_ICU_enRead+0x6>
    1cbe:	0f 92       	push	r0
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62
    1cc4:	9b 83       	std	Y+3, r25	; 0x03
    1cc6:	8a 83       	std	Y+2, r24	; 0x02

	ErrorState_t Local_enstate=SUCCES;
    1cc8:	82 e0       	ldi	r24, 0x02	; 2
    1cca:	89 83       	std	Y+1, r24	; 0x01
		if(ptrReadValue!=NULL)
    1ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cce:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd0:	00 97       	sbiw	r24, 0x00	; 0
    1cd2:	49 f0       	breq	.+18     	; 0x1ce6 <MTIMER1_ICU_enRead+0x2e>
		{
			* ptrReadValue=ICR1_REG;
    1cd4:	e6 e4       	ldi	r30, 0x46	; 70
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	91 81       	ldd	r25, Z+1	; 0x01
    1cdc:	ea 81       	ldd	r30, Y+2	; 0x02
    1cde:	fb 81       	ldd	r31, Y+3	; 0x03
    1ce0:	91 83       	std	Z+1, r25	; 0x01
    1ce2:	80 83       	st	Z, r24
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <MTIMER1_ICU_enRead+0x32>
		}
		else
		{

			Local_enstate=NULL_PTR_ERR;
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_enstate;
    1cea:	89 81       	ldd	r24, Y+1	; 0x01


}
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	cf 91       	pop	r28
    1cf4:	df 91       	pop	r29
    1cf6:	08 95       	ret

00001cf8 <MTIMER1_ICU_enSetTrigger>:
ErrorState_t MTIMER1_ICU_enSetTrigger(u8 copy_u8Trigg)
{
    1cf8:	df 93       	push	r29
    1cfa:	cf 93       	push	r28
    1cfc:	00 d0       	rcall	.+0      	; 0x1cfe <MTIMER1_ICU_enSetTrigger+0x6>
    1cfe:	00 d0       	rcall	.+0      	; 0x1d00 <MTIMER1_ICU_enSetTrigger+0x8>
    1d00:	cd b7       	in	r28, 0x3d	; 61
    1d02:	de b7       	in	r29, 0x3e	; 62
    1d04:	8a 83       	std	Y+2, r24	; 0x02

	ErrorState_t Local_enstate=SUCCES;
    1d06:	82 e0       	ldi	r24, 0x02	; 2
    1d08:	89 83       	std	Y+1, r24	; 0x01
switch(copy_u8Trigg)
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	28 2f       	mov	r18, r24
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	3c 83       	std	Y+4, r19	; 0x04
    1d12:	2b 83       	std	Y+3, r18	; 0x03
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	9c 81       	ldd	r25, Y+4	; 0x04
    1d18:	00 97       	sbiw	r24, 0x00	; 0
    1d1a:	31 f0       	breq	.+12     	; 0x1d28 <MTIMER1_ICU_enSetTrigger+0x30>
    1d1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d20:	21 30       	cpi	r18, 0x01	; 1
    1d22:	31 05       	cpc	r19, r1
    1d24:	49 f0       	breq	.+18     	; 0x1d38 <MTIMER1_ICU_enSetTrigger+0x40>
    1d26:	10 c0       	rjmp	.+32     	; 0x1d48 <MTIMER1_ICU_enSetTrigger+0x50>
{

case MTIMER1_ICU_FALL_EDGE_TRIG:
	CLR_BIT(TCCR1B_REG,ICES1_BIT);
    1d28:	ae e4       	ldi	r26, 0x4E	; 78
    1d2a:	b0 e0       	ldi	r27, 0x00	; 0
    1d2c:	ee e4       	ldi	r30, 0x4E	; 78
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	80 81       	ld	r24, Z
    1d32:	8f 7b       	andi	r24, 0xBF	; 191
    1d34:	8c 93       	st	X, r24
    1d36:	09 c0       	rjmp	.+18     	; 0x1d4a <MTIMER1_ICU_enSetTrigger+0x52>
	break;
case MTIMER1_ICU_RAIS_EDGE_TRIG:
	SET_BIT(TCCR1B_REG,ICES1_BIT);
    1d38:	ae e4       	ldi	r26, 0x4E	; 78
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	ee e4       	ldi	r30, 0x4E	; 78
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	80 64       	ori	r24, 0x40	; 64
    1d44:	8c 93       	st	X, r24
    1d46:	01 c0       	rjmp	.+2      	; 0x1d4a <MTIMER1_ICU_enSetTrigger+0x52>
	break;

default:
Local_enstate=OUT_OF_RANGE;
    1d48:	19 82       	std	Y+1, r1	; 0x01
break;
}

	return Local_enstate;
    1d4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d4c:	0f 90       	pop	r0
    1d4e:	0f 90       	pop	r0
    1d50:	0f 90       	pop	r0
    1d52:	0f 90       	pop	r0
    1d54:	cf 91       	pop	r28
    1d56:	df 91       	pop	r29
    1d58:	08 95       	ret

00001d5a <MTIMER1_OVF_enEnableInt>:

ErrorState_t MTIMER1_OVF_enEnableInt(void)
{
    1d5a:	df 93       	push	r29
    1d5c:	cf 93       	push	r28
    1d5e:	0f 92       	push	r0
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
SET_BIT(TIMSK_REG,TOIE1_BIT);
    1d64:	a9 e5       	ldi	r26, 0x59	; 89
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	e9 e5       	ldi	r30, 0x59	; 89
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	84 60       	ori	r24, 0x04	; 4
    1d70:	8c 93       	st	X, r24



}
    1d72:	0f 90       	pop	r0
    1d74:	cf 91       	pop	r28
    1d76:	df 91       	pop	r29
    1d78:	08 95       	ret

00001d7a <MTIMER1_OVF_enDisableInt>:
ErrorState_t MTIMER1_OVF_enDisableInt(void)
{
    1d7a:	df 93       	push	r29
    1d7c:	cf 93       	push	r28
    1d7e:	0f 92       	push	r0
    1d80:	cd b7       	in	r28, 0x3d	; 61
    1d82:	de b7       	in	r29, 0x3e	; 62


CLR_BIT(TIMSK_REG,TOIE1_BIT);
    1d84:	a9 e5       	ldi	r26, 0x59	; 89
    1d86:	b0 e0       	ldi	r27, 0x00	; 0
    1d88:	e9 e5       	ldi	r30, 0x59	; 89
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	8b 7f       	andi	r24, 0xFB	; 251
    1d90:	8c 93       	st	X, r24

}
    1d92:	0f 90       	pop	r0
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	08 95       	ret

00001d9a <__vector_6>:


ISR(TIMER1_CAPT_vect)
{
    1d9a:	1f 92       	push	r1
    1d9c:	0f 92       	push	r0
    1d9e:	0f b6       	in	r0, 0x3f	; 63
    1da0:	0f 92       	push	r0
    1da2:	11 24       	eor	r1, r1
    1da4:	2f 93       	push	r18
    1da6:	3f 93       	push	r19
    1da8:	4f 93       	push	r20
    1daa:	5f 93       	push	r21
    1dac:	6f 93       	push	r22
    1dae:	7f 93       	push	r23
    1db0:	8f 93       	push	r24
    1db2:	9f 93       	push	r25
    1db4:	af 93       	push	r26
    1db6:	bf 93       	push	r27
    1db8:	ef 93       	push	r30
    1dba:	ff 93       	push	r31
    1dbc:	df 93       	push	r29
    1dbe:	cf 93       	push	r28
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62

	if(g_ICU_CallBackPtr!= NULL&&flag!=0)
    1dc4:	80 91 13 02 	lds	r24, 0x0213
    1dc8:	88 23       	and	r24, r24
    1dca:	29 f0       	breq	.+10     	; 0x1dd6 <__vector_6+0x3c>
		{
		g_ICU_CallBackPtr[MTIME1_CAPT_ID]();	//call fn on higher layer (APP)
    1dcc:	e0 91 0f 02 	lds	r30, 0x020F
    1dd0:	f0 91 10 02 	lds	r31, 0x0210
    1dd4:	09 95       	icall
		}

flag=1;
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	80 93 13 02 	sts	0x0213, r24
}
    1ddc:	cf 91       	pop	r28
    1dde:	df 91       	pop	r29
    1de0:	ff 91       	pop	r31
    1de2:	ef 91       	pop	r30
    1de4:	bf 91       	pop	r27
    1de6:	af 91       	pop	r26
    1de8:	9f 91       	pop	r25
    1dea:	8f 91       	pop	r24
    1dec:	7f 91       	pop	r23
    1dee:	6f 91       	pop	r22
    1df0:	5f 91       	pop	r21
    1df2:	4f 91       	pop	r20
    1df4:	3f 91       	pop	r19
    1df6:	2f 91       	pop	r18
    1df8:	0f 90       	pop	r0
    1dfa:	0f be       	out	0x3f, r0	; 63
    1dfc:	0f 90       	pop	r0
    1dfe:	1f 90       	pop	r1
    1e00:	18 95       	reti

00001e02 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    1e02:	1f 92       	push	r1
    1e04:	0f 92       	push	r0
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	0f 92       	push	r0
    1e0a:	11 24       	eor	r1, r1
    1e0c:	2f 93       	push	r18
    1e0e:	3f 93       	push	r19
    1e10:	4f 93       	push	r20
    1e12:	5f 93       	push	r21
    1e14:	6f 93       	push	r22
    1e16:	7f 93       	push	r23
    1e18:	8f 93       	push	r24
    1e1a:	9f 93       	push	r25
    1e1c:	af 93       	push	r26
    1e1e:	bf 93       	push	r27
    1e20:	ef 93       	push	r30
    1e22:	ff 93       	push	r31
    1e24:	df 93       	push	r29
    1e26:	cf 93       	push	r28
    1e28:	cd b7       	in	r28, 0x3d	; 61
    1e2a:	de b7       	in	r29, 0x3e	; 62

	if(g_ICU_CallBackPtr!= NULL)
			{
			g_ICU_CallBackPtr[MTIME1_OVF_ID]();	//call fn on higher layer (APP)
    1e2c:	e0 91 11 02 	lds	r30, 0x0211
    1e30:	f0 91 12 02 	lds	r31, 0x0212
    1e34:	09 95       	icall
			}

}
    1e36:	cf 91       	pop	r28
    1e38:	df 91       	pop	r29
    1e3a:	ff 91       	pop	r31
    1e3c:	ef 91       	pop	r30
    1e3e:	bf 91       	pop	r27
    1e40:	af 91       	pop	r26
    1e42:	9f 91       	pop	r25
    1e44:	8f 91       	pop	r24
    1e46:	7f 91       	pop	r23
    1e48:	6f 91       	pop	r22
    1e4a:	5f 91       	pop	r21
    1e4c:	4f 91       	pop	r20
    1e4e:	3f 91       	pop	r19
    1e50:	2f 91       	pop	r18
    1e52:	0f 90       	pop	r0
    1e54:	0f be       	out	0x3f, r0	; 63
    1e56:	0f 90       	pop	r0
    1e58:	1f 90       	pop	r1
    1e5a:	18 95       	reti

00001e5c <MSPI_enSPI_MasterInit>:

#include "avr/io.h"


ErrorState_t MSPI_enSPI_MasterInit(void)
{
    1e5c:	df 93       	push	r29
    1e5e:	cf 93       	push	r28
    1e60:	0f 92       	push	r0
    1e62:	cd b7       	in	r28, 0x3d	; 61
    1e64:	de b7       	in	r29, 0x3e	; 62
	ErrorState_t Local_State = SUCCES;
    1e66:	82 e0       	ldi	r24, 0x02	; 2
    1e68:	89 83       	std	Y+1, r24	; 0x01

	// Set MOSI and SCK output, all others input
	DDRB |= (1<<MOSI)| (1<<SCK)|(1<<SELECTOR);
    1e6a:	a7 e3       	ldi	r26, 0x37	; 55
    1e6c:	b0 e0       	ldi	r27, 0x00	; 0
    1e6e:	e7 e3       	ldi	r30, 0x37	; 55
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	80 81       	ld	r24, Z
    1e74:	80 6b       	ori	r24, 0xB0	; 176
    1e76:	8c 93       	st	X, r24
	// Enable SPI, Master, set clock rate fck/16
	SPCR_REG |= (1<<SPE_BIT)|(1<<MSTR_BIT)|(1<<SPR0_BIT);
    1e78:	ad e2       	ldi	r26, 0x2D	; 45
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	ed e2       	ldi	r30, 0x2D	; 45
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	80 81       	ld	r24, Z
    1e82:	81 65       	ori	r24, 0x51	; 81
    1e84:	8c 93       	st	X, r24
	// configer the bits in SPCR
	SET_BIT(SPCR_REG , SPE_BIT);	//Enable SPI
	SET_BIT(SPCR_REG , MSTR_BIT);	//SELECT MASTER
	SPCR_REG |= CLOCK_SELECT;		//SELECT CLOCK (from congfig)*/

	return Local_State;
    1e86:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e88:	0f 90       	pop	r0
    1e8a:	cf 91       	pop	r28
    1e8c:	df 91       	pop	r29
    1e8e:	08 95       	ret

00001e90 <MSPI_enMasterTransmit>:

ErrorState_t MSPI_enMasterTransmit(u8 copy_u8Data , u8 * ptru8RetData)
{
    1e90:	df 93       	push	r29
    1e92:	cf 93       	push	r28
    1e94:	00 d0       	rcall	.+0      	; 0x1e96 <MSPI_enMasterTransmit+0x6>
    1e96:	00 d0       	rcall	.+0      	; 0x1e98 <MSPI_enMasterTransmit+0x8>
    1e98:	cd b7       	in	r28, 0x3d	; 61
    1e9a:	de b7       	in	r29, 0x3e	; 62
    1e9c:	8a 83       	std	Y+2, r24	; 0x02
    1e9e:	7c 83       	std	Y+4, r23	; 0x04
    1ea0:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState_t Local_State = SUCCES;
    1ea2:	82 e0       	ldi	r24, 0x02	; 2
    1ea4:	89 83       	std	Y+1, r24	; 0x01
	//Start transmission
	SPDR_REG = copy_u8Data;
    1ea6:	ef e2       	ldi	r30, 0x2F	; 47
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1eac:	80 83       	st	Z, r24
	// Wait for transmission complete
	while(!(SPSR_REG & (1<<SPIF_BIT)));
    1eae:	ee e2       	ldi	r30, 0x2E	; 46
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	88 23       	and	r24, r24
    1eb6:	dc f7       	brge	.-10     	; 0x1eae <MSPI_enMasterTransmit+0x1e>
	*ptru8RetData = SPDR_REG;
    1eb8:	ef e2       	ldi	r30, 0x2F	; 47
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	eb 81       	ldd	r30, Y+3	; 0x03
    1ec0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ec2:	80 83       	st	Z, r24
	return Local_State;
    1ec4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	08 95       	ret

00001ed4 <MSPI_enSPI_SlaveInit>:

ErrorState_t MSPI_enSPI_SlaveInit(void)
{
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	0f 92       	push	r0
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
	ErrorState_t Local_State = SUCCES;
    1ede:	82 e0       	ldi	r24, 0x02	; 2
    1ee0:	89 83       	std	Y+1, r24	; 0x01

	// congiger the pins as Output
	MDIO_SetPinDirection(MISO, OUTPUT);
    1ee2:	86 e0       	ldi	r24, 0x06	; 6
    1ee4:	61 e0       	ldi	r22, 0x01	; 1
    1ee6:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_SetPinDirection>

	// configer the bits in SPCR
	SET_BIT(SPCR_REG , SPE_BIT);	//Enable SPI
    1eea:	ad e2       	ldi	r26, 0x2D	; 45
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	ed e2       	ldi	r30, 0x2D	; 45
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	80 64       	ori	r24, 0x40	; 64
    1ef6:	8c 93       	st	X, r24

	return Local_State;
    1ef8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1efa:	0f 90       	pop	r0
    1efc:	cf 91       	pop	r28
    1efe:	df 91       	pop	r29
    1f00:	08 95       	ret

00001f02 <MSPI_enSlaveReceive>:

ErrorState_t MSPI_enSlaveReceive( u8 * ptru8RetData)
{
    1f02:	df 93       	push	r29
    1f04:	cf 93       	push	r28
    1f06:	00 d0       	rcall	.+0      	; 0x1f08 <MSPI_enSlaveReceive+0x6>
    1f08:	0f 92       	push	r0
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
    1f0e:	9b 83       	std	Y+3, r25	; 0x03
    1f10:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_State = SUCCES;
    1f12:	82 e0       	ldi	r24, 0x02	; 2
    1f14:	89 83       	std	Y+1, r24	; 0x01

	if(SPDR_REG == 'A')
    1f16:	ef e2       	ldi	r30, 0x2F	; 47
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	81 34       	cpi	r24, 0x41	; 65
    1f1e:	21 f4       	brne	.+8      	; 0x1f28 <MSPI_enSlaveReceive+0x26>
	{
		SPDR_REG = 'C';
    1f20:	ef e2       	ldi	r30, 0x2F	; 47
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	83 e4       	ldi	r24, 0x43	; 67
    1f26:	80 83       	st	Z, r24
	}

	/* Wait for reception complete */
	while(!(SPSR_REG & (1<<SPIF_BIT)));
    1f28:	ee e2       	ldi	r30, 0x2E	; 46
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	80 81       	ld	r24, Z
    1f2e:	88 23       	and	r24, r24
    1f30:	dc f7       	brge	.-10     	; 0x1f28 <MSPI_enSlaveReceive+0x26>

	/* Return data register */
	*ptru8RetData =  SPDR_REG;
    1f32:	ef e2       	ldi	r30, 0x2F	; 47
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	80 81       	ld	r24, Z
    1f38:	ea 81       	ldd	r30, Y+2	; 0x02
    1f3a:	fb 81       	ldd	r31, Y+3	; 0x03
    1f3c:	80 83       	st	Z, r24

	return Local_State;
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f40:	0f 90       	pop	r0
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	cf 91       	pop	r28
    1f48:	df 91       	pop	r29
    1f4a:	08 95       	ret

00001f4c <MTWI_enInit>:




ErrorState_t MTWI_enInit(void)
{
    1f4c:	df 93       	push	r29
    1f4e:	cf 93       	push	r28
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
//cofig speed -> 400KHz (TWBR register, prescaler bits)
CLR_BIT(TWSR_REG,TWSP0_BIT);
    1f54:	a1 e2       	ldi	r26, 0x21	; 33
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	e1 e2       	ldi	r30, 0x21	; 33
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	80 81       	ld	r24, Z
    1f5e:	8e 7f       	andi	r24, 0xFE	; 254
    1f60:	8c 93       	st	X, r24
CLR_BIT(TWSR_REG,TWSP1_BIT);
    1f62:	a1 e2       	ldi	r26, 0x21	; 33
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	e1 e2       	ldi	r30, 0x21	; 33
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	8d 7f       	andi	r24, 0xFD	; 253
    1f6e:	8c 93       	st	X, r24

TWBR_REG=0x02;
    1f70:	e0 e2       	ldi	r30, 0x20	; 32
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	82 e0       	ldi	r24, 0x02	; 2
    1f76:	80 83       	st	Z, r24
//pre scaler = 1

//en twi turn on

SET_BIT(TWCR_REG,TWEN_BIT);
    1f78:	a6 e5       	ldi	r26, 0x56	; 86
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	e6 e5       	ldi	r30, 0x56	; 86
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	84 60       	ori	r24, 0x04	; 4
    1f84:	8c 93       	st	X, r24

return SUCCES;
    1f86:	82 e0       	ldi	r24, 0x02	; 2
}
    1f88:	cf 91       	pop	r28
    1f8a:	df 91       	pop	r29
    1f8c:	08 95       	ret

00001f8e <MTWI_enSendStart>:

ErrorState_t MTWI_enSendStart(void)
{
    1f8e:	df 93       	push	r29
    1f90:	cf 93       	push	r28
    1f92:	cd b7       	in	r28, 0x3d	; 61
    1f94:	de b7       	in	r29, 0x3e	; 62
//	STEP1: clear flag + set start bit + Enable TWI
	TWCR_REG = (1<<TWINT_BIT)|(1<<TWSTA_BIT)|(1<<TWEN_BIT);
    1f96:	e6 e5       	ldi	r30, 0x56	; 86
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	84 ea       	ldi	r24, 0xA4	; 164
    1f9c:	80 83       	st	Z, r24
// step 2 : wait until operation starts
	//while(GET_BIT(TWCR_REG,TWINT_BIT)==0);
	while (!(TWCR_REG & (1<<TWINT_BIT)));  //GET BIT
    1f9e:	e6 e5       	ldi	r30, 0x56	; 86
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 81       	ld	r24, Z
    1fa4:	88 23       	and	r24, r24
    1fa6:	dc f7       	brge	.-10     	; 0x1f9e <MTWI_enSendStart+0x10>

	return SUCCES;
    1fa8:	82 e0       	ldi	r24, 0x02	; 2
}
    1faa:	cf 91       	pop	r28
    1fac:	df 91       	pop	r29
    1fae:	08 95       	ret

00001fb0 <MTWI_enSendStop>:

ErrorState_t MTWI_enSendStop(void)
{
    1fb0:	df 93       	push	r29
    1fb2:	cf 93       	push	r28
    1fb4:	cd b7       	in	r28, 0x3d	; 61
    1fb6:	de b7       	in	r29, 0x3e	; 62
	TWCR_REG = (1<<TWINT_BIT)|(1<<TWEN_BIT)|(1<<TWSTO_BIT);
    1fb8:	e6 e5       	ldi	r30, 0x56	; 86
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	84 e9       	ldi	r24, 0x94	; 148
    1fbe:	80 83       	st	Z, r24
	return SUCCES;
    1fc0:	82 e0       	ldi	r24, 0x02	; 2
}
    1fc2:	cf 91       	pop	r28
    1fc4:	df 91       	pop	r29
    1fc6:	08 95       	ret

00001fc8 <MTWI_enSendByte>:
ErrorState_t MTWI_enSendByte(u8 copy_u8Data)
{//load data into register
    1fc8:	df 93       	push	r29
    1fca:	cf 93       	push	r28
    1fcc:	0f 92       	push	r0
    1fce:	cd b7       	in	r28, 0x3d	; 61
    1fd0:	de b7       	in	r29, 0x3e	; 62
    1fd2:	89 83       	std	Y+1, r24	; 0x01
	TWDR_REG = copy_u8Data;
    1fd4:	e3 e2       	ldi	r30, 0x23	; 35
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	89 81       	ldd	r24, Y+1	; 0x01
    1fda:	80 83       	st	Z, r24
//clear flag + set Enable
	TWCR_REG = (1<<TWINT_BIT) | (1<<TWEN_BIT);
    1fdc:	e6 e5       	ldi	r30, 0x56	; 86
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	84 e8       	ldi	r24, 0x84	; 132
    1fe2:	80 83       	st	Z, r24
	//wait
	//while(GET_BIT(TWCR_REG,TWINT_BIT)==0);
	while (!(TWCR_REG & (1<<TWINT_BIT)));  //GET BIT
    1fe4:	e6 e5       	ldi	r30, 0x56	; 86
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	80 81       	ld	r24, Z
    1fea:	88 23       	and	r24, r24
    1fec:	dc f7       	brge	.-10     	; 0x1fe4 <MTWI_enSendByte+0x1c>
	return SUCCES;
    1fee:	82 e0       	ldi	r24, 0x02	; 2
}
    1ff0:	0f 90       	pop	r0
    1ff2:	cf 91       	pop	r28
    1ff4:	df 91       	pop	r29
    1ff6:	08 95       	ret

00001ff8 <MTWI_enRecByteAck>:
ErrorState_t MTWI_enRecByteAck(u8 *ptrRECdata)
{
    1ff8:	df 93       	push	r29
    1ffa:	cf 93       	push	r28
    1ffc:	00 d0       	rcall	.+0      	; 0x1ffe <MTWI_enRecByteAck+0x6>
    1ffe:	cd b7       	in	r28, 0x3d	; 61
    2000:	de b7       	in	r29, 0x3e	; 62
    2002:	9a 83       	std	Y+2, r25	; 0x02
    2004:	89 83       	std	Y+1, r24	; 0x01
	//clear flag + set Enable
	TWCR_REG = (1<<TWINT_BIT) | (1<<TWEN_BIT)|(1<<TWEA_BIT);
    2006:	e6 e5       	ldi	r30, 0x56	; 86
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	84 ec       	ldi	r24, 0xC4	; 196
    200c:	80 83       	st	Z, r24
	//while(GET_BIT(TWCR_REG,TWINT_BIT)==0);
	while (!(TWCR_REG & (1<<TWINT_BIT)));  //GET BIT
    200e:	e6 e5       	ldi	r30, 0x56	; 86
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	80 81       	ld	r24, Z
    2014:	88 23       	and	r24, r24
    2016:	dc f7       	brge	.-10     	; 0x200e <MTWI_enRecByteAck+0x16>
	//load data
	*ptrRECdata=TWDR_REG;
    2018:	e3 e2       	ldi	r30, 0x23	; 35
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	80 81       	ld	r24, Z
    201e:	e9 81       	ldd	r30, Y+1	; 0x01
    2020:	fa 81       	ldd	r31, Y+2	; 0x02
    2022:	80 83       	st	Z, r24

	return SUCCES;
    2024:	82 e0       	ldi	r24, 0x02	; 2
}
    2026:	0f 90       	pop	r0
    2028:	0f 90       	pop	r0
    202a:	cf 91       	pop	r28
    202c:	df 91       	pop	r29
    202e:	08 95       	ret

00002030 <MTWI_enRecByteNoAck>:
ErrorState_t MTWI_enRecByteNoAck(u8 *ptrRECdata)
{
    2030:	df 93       	push	r29
    2032:	cf 93       	push	r28
    2034:	00 d0       	rcall	.+0      	; 0x2036 <MTWI_enRecByteNoAck+0x6>
    2036:	cd b7       	in	r28, 0x3d	; 61
    2038:	de b7       	in	r29, 0x3e	; 62
    203a:	9a 83       	std	Y+2, r25	; 0x02
    203c:	89 83       	std	Y+1, r24	; 0x01


	//clear flag + set Enable
	TWCR_REG = (1<<TWINT_BIT) | (1<<TWEN_BIT);
    203e:	e6 e5       	ldi	r30, 0x56	; 86
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	84 e8       	ldi	r24, 0x84	; 132
    2044:	80 83       	st	Z, r24
	//while(GET_BIT(TWCR_REG,TWINT_BIT)==0);
while (!(TWCR_REG & (1<<TWINT_BIT)));  //GET BIT
    2046:	e6 e5       	ldi	r30, 0x56	; 86
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	80 81       	ld	r24, Z
    204c:	88 23       	and	r24, r24
    204e:	dc f7       	brge	.-10     	; 0x2046 <MTWI_enRecByteNoAck+0x16>
	//load data
	*ptrRECdata=TWDR_REG;
    2050:	e3 e2       	ldi	r30, 0x23	; 35
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	e9 81       	ldd	r30, Y+1	; 0x01
    2058:	fa 81       	ldd	r31, Y+2	; 0x02
    205a:	80 83       	st	Z, r24
	return SUCCES;
    205c:	82 e0       	ldi	r24, 0x02	; 2
}
    205e:	0f 90       	pop	r0
    2060:	0f 90       	pop	r0
    2062:	cf 91       	pop	r28
    2064:	df 91       	pop	r29
    2066:	08 95       	ret

00002068 <MTWI_enReadStatus>:
ErrorState_t MTWI_enReadStatus(u8 * ptrStatusValue)
{
    2068:	df 93       	push	r29
    206a:	cf 93       	push	r28
    206c:	00 d0       	rcall	.+0      	; 0x206e <MTWI_enReadStatus+0x6>
    206e:	cd b7       	in	r28, 0x3d	; 61
    2070:	de b7       	in	r29, 0x3e	; 62
    2072:	9a 83       	std	Y+2, r25	; 0x02
    2074:	89 83       	std	Y+1, r24	; 0x01
	//apply mask on status register
	* ptrStatusValue =TWSR_REG & MTWI_STATUS_MASK;
    2076:	e1 e2       	ldi	r30, 0x21	; 33
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 81       	ld	r24, Z
    207c:	88 7f       	andi	r24, 0xF8	; 248
    207e:	e9 81       	ldd	r30, Y+1	; 0x01
    2080:	fa 81       	ldd	r31, Y+2	; 0x02
    2082:	80 83       	st	Z, r24
	return SUCCES;
    2084:	82 e0       	ldi	r24, 0x02	; 2
}
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	cf 91       	pop	r28
    208c:	df 91       	pop	r29
    208e:	08 95       	ret

00002090 <MGIE_enEnable>:
#include "MGIE_config.h"
#include "MGIE_int.h"


ErrorState_t MGIE_enEnable(void)
{
    2090:	df 93       	push	r29
    2092:	cf 93       	push	r28
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62
	//SET_BIT(SREG_REG,I_BIT)
	asm("SEI");
    2098:	78 94       	sei
return SUCCES;
    209a:	82 e0       	ldi	r24, 0x02	; 2
}
    209c:	cf 91       	pop	r28
    209e:	df 91       	pop	r29
    20a0:	08 95       	ret

000020a2 <MGIE_enDisable>:

ErrorState_t MGIE_enDisable(void)
{
    20a2:	df 93       	push	r29
    20a4:	cf 93       	push	r28
    20a6:	cd b7       	in	r28, 0x3d	; 61
    20a8:	de b7       	in	r29, 0x3e	; 62

	//CLR_BIT(SREG_REG,I_BIT)
		asm("CLI");
    20aa:	f8 94       	cli
return SUCCES;
    20ac:	82 e0       	ldi	r24, 0x02	; 2
}
    20ae:	cf 91       	pop	r28
    20b0:	df 91       	pop	r29
    20b2:	08 95       	ret

000020b4 <MEXIT_enEnable>:
#include "MEXIT_int.h"
#include <avr/interrupt.h>
void (*CallBackArr[3])(void)={NULL,NULL,NULL};

ErrorState_t MEXIT_enEnable(InterruptID_t copy_enID,IntTrigger_t copy_enTrig)
{
    20b4:	df 93       	push	r29
    20b6:	cf 93       	push	r28
    20b8:	00 d0       	rcall	.+0      	; 0x20ba <MEXIT_enEnable+0x6>
    20ba:	00 d0       	rcall	.+0      	; 0x20bc <MEXIT_enEnable+0x8>
    20bc:	0f 92       	push	r0
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    20c2:	8a 83       	std	Y+2, r24	; 0x02
    20c4:	6b 83       	std	Y+3, r22	; 0x03


	ErrorState_t Local_enState=SUCCES;
    20c6:	82 e0       	ldi	r24, 0x02	; 2
    20c8:	89 83       	std	Y+1, r24	; 0x01
if(copy_enTrig>RAIS_EDGE_TRIG||copy_enTrig<LOW_LEVEL_TRIG)
    20ca:	8b 81       	ldd	r24, Y+3	; 0x03
    20cc:	84 30       	cpi	r24, 0x04	; 4
    20ce:	10 f0       	brcs	.+4      	; 0x20d4 <MEXIT_enEnable+0x20>
{
	Local_enState=OUT_OF_RANGE;
    20d0:	19 82       	std	Y+1, r1	; 0x01
    20d2:	62 c0       	rjmp	.+196    	; 0x2198 <MEXIT_enEnable+0xe4>
}//end if
else{
	switch(copy_enID)
    20d4:	8a 81       	ldd	r24, Y+2	; 0x02
    20d6:	28 2f       	mov	r18, r24
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	3d 83       	std	Y+5, r19	; 0x05
    20dc:	2c 83       	std	Y+4, r18	; 0x04
    20de:	8c 81       	ldd	r24, Y+4	; 0x04
    20e0:	9d 81       	ldd	r25, Y+5	; 0x05
    20e2:	86 30       	cpi	r24, 0x06	; 6
    20e4:	91 05       	cpc	r25, r1
    20e6:	59 f0       	breq	.+22     	; 0x20fe <MEXIT_enEnable+0x4a>
    20e8:	2c 81       	ldd	r18, Y+4	; 0x04
    20ea:	3d 81       	ldd	r19, Y+5	; 0x05
    20ec:	27 30       	cpi	r18, 0x07	; 7
    20ee:	31 05       	cpc	r19, r1
    20f0:	b1 f0       	breq	.+44     	; 0x211e <MEXIT_enEnable+0x6a>
    20f2:	8c 81       	ldd	r24, Y+4	; 0x04
    20f4:	9d 81       	ldd	r25, Y+5	; 0x05
    20f6:	85 30       	cpi	r24, 0x05	; 5
    20f8:	91 05       	cpc	r25, r1
    20fa:	41 f1       	breq	.+80     	; 0x214c <MEXIT_enEnable+0x98>
    20fc:	39 c0       	rjmp	.+114    	; 0x2170 <MEXIT_enEnable+0xbc>
			CLR_BIT(MCUCR_REG,ISC00_BIT);


		}*/
		//aplly mask
		MCUCR_REG &=INT0_SC_MASK;
    20fe:	a5 e5       	ldi	r26, 0x55	; 85
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	e5 e5       	ldi	r30, 0x55	; 85
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	8c 7f       	andi	r24, 0xFC	; 252
    210a:	8c 93       	st	X, r24
		//insert value

		MCUCR_REG|= copy_enTrig;
    210c:	a5 e5       	ldi	r26, 0x55	; 85
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	e5 e5       	ldi	r30, 0x55	; 85
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	90 81       	ld	r25, Z
    2116:	8b 81       	ldd	r24, Y+3	; 0x03
    2118:	89 2b       	or	r24, r25
    211a:	8c 93       	st	X, r24
    211c:	2a c0       	rjmp	.+84     	; 0x2172 <MEXIT_enEnable+0xbe>

	break;
	case INT1_ID:
		MCUCR_REG &=INT1_SC_MASK;
    211e:	a5 e5       	ldi	r26, 0x55	; 85
    2120:	b0 e0       	ldi	r27, 0x00	; 0
    2122:	e5 e5       	ldi	r30, 0x55	; 85
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	80 81       	ld	r24, Z
    2128:	83 7f       	andi	r24, 0xF3	; 243
    212a:	8c 93       	st	X, r24
		//insert value
		MCUCR_REG|= copy_enTrig<<INT1_SC_SH;
    212c:	a5 e5       	ldi	r26, 0x55	; 85
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	e5 e5       	ldi	r30, 0x55	; 85
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	28 2f       	mov	r18, r24
    2138:	8b 81       	ldd	r24, Y+3	; 0x03
    213a:	88 2f       	mov	r24, r24
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	88 0f       	add	r24, r24
    2140:	99 1f       	adc	r25, r25
    2142:	88 0f       	add	r24, r24
    2144:	99 1f       	adc	r25, r25
    2146:	82 2b       	or	r24, r18
    2148:	8c 93       	st	X, r24
    214a:	13 c0       	rjmp	.+38     	; 0x2172 <MEXIT_enEnable+0xbe>
		break;
	case INT2_ID:
		CLR_BIT(MCUCSR_REG,ISC2_BIT);
    214c:	a4 e5       	ldi	r26, 0x54	; 84
    214e:	b0 e0       	ldi	r27, 0x00	; 0
    2150:	e4 e5       	ldi	r30, 0x54	; 84
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	80 81       	ld	r24, Z
    2156:	8f 7b       	andi	r24, 0xBF	; 191
    2158:	8c 93       	st	X, r24
		MCUCSR_REG|=GET_BIT(copy_enTrig,0)<<ISC2_BIT;
    215a:	a4 e5       	ldi	r26, 0x54	; 84
    215c:	b0 e0       	ldi	r27, 0x00	; 0
    215e:	e4 e5       	ldi	r30, 0x54	; 84
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	80 81       	ld	r24, Z
    2164:	98 2f       	mov	r25, r24
    2166:	8b 81       	ldd	r24, Y+3	; 0x03
    2168:	80 74       	andi	r24, 0x40	; 64
    216a:	89 2b       	or	r24, r25
    216c:	8c 93       	st	X, r24
    216e:	01 c0       	rjmp	.+2      	; 0x2172 <MEXIT_enEnable+0xbe>
		break;
	default:
		Local_enState=OUT_OF_RANGE;
    2170:	19 82       	std	Y+1, r1	; 0x01
	}//end switch triger
//Enable Special keu
SET_BIT(GICR,copy_enID);
    2172:	ab e5       	ldi	r26, 0x5B	; 91
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	eb e5       	ldi	r30, 0x5B	; 91
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	48 2f       	mov	r20, r24
    217e:	8a 81       	ldd	r24, Y+2	; 0x02
    2180:	28 2f       	mov	r18, r24
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	02 2e       	mov	r0, r18
    218a:	02 c0       	rjmp	.+4      	; 0x2190 <MEXIT_enEnable+0xdc>
    218c:	88 0f       	add	r24, r24
    218e:	99 1f       	adc	r25, r25
    2190:	0a 94       	dec	r0
    2192:	e2 f7       	brpl	.-8      	; 0x218c <MEXIT_enEnable+0xd8>
    2194:	84 2b       	or	r24, r20
    2196:	8c 93       	st	X, r24
}//end if
return Local_enState;
    2198:	89 81       	ldd	r24, Y+1	; 0x01
}
    219a:	0f 90       	pop	r0
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	0f 90       	pop	r0
    21a2:	0f 90       	pop	r0
    21a4:	cf 91       	pop	r28
    21a6:	df 91       	pop	r29
    21a8:	08 95       	ret

000021aa <MEXIT_enDisable>:
//set ON Enable , config trigger
ErrorState_t MEXIT_enDisable(InterruptID_t copy_enID)
{ 	ErrorState_t Local_enState=SUCCES;
    21aa:	df 93       	push	r29
    21ac:	cf 93       	push	r28
    21ae:	00 d0       	rcall	.+0      	; 0x21b0 <MEXIT_enDisable+0x6>
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
    21b4:	8a 83       	std	Y+2, r24	; 0x02
    21b6:	82 e0       	ldi	r24, 0x02	; 2
    21b8:	89 83       	std	Y+1, r24	; 0x01
	if(copy_enID>=INT2_ID&&copy_enID<=INT1_ID)
    21ba:	8a 81       	ldd	r24, Y+2	; 0x02
    21bc:	85 30       	cpi	r24, 0x05	; 5
    21be:	c0 f0       	brcs	.+48     	; 0x21f0 <MEXIT_enDisable+0x46>
    21c0:	8a 81       	ldd	r24, Y+2	; 0x02
    21c2:	88 30       	cpi	r24, 0x08	; 8
    21c4:	a8 f4       	brcc	.+42     	; 0x21f0 <MEXIT_enDisable+0x46>
	CLR_BIT(GICR_REG,copy_enID);
    21c6:	ab e5       	ldi	r26, 0x5B	; 91
    21c8:	b0 e0       	ldi	r27, 0x00	; 0
    21ca:	eb e5       	ldi	r30, 0x5B	; 91
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	80 81       	ld	r24, Z
    21d0:	48 2f       	mov	r20, r24
    21d2:	8a 81       	ldd	r24, Y+2	; 0x02
    21d4:	28 2f       	mov	r18, r24
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	02 2e       	mov	r0, r18
    21de:	02 c0       	rjmp	.+4      	; 0x21e4 <MEXIT_enDisable+0x3a>
    21e0:	88 0f       	add	r24, r24
    21e2:	99 1f       	adc	r25, r25
    21e4:	0a 94       	dec	r0
    21e6:	e2 f7       	brpl	.-8      	; 0x21e0 <MEXIT_enDisable+0x36>
    21e8:	80 95       	com	r24
    21ea:	84 23       	and	r24, r20
    21ec:	8c 93       	st	X, r24
    21ee:	02 c0       	rjmp	.+4      	; 0x21f4 <MEXIT_enDisable+0x4a>
	else
		Local_enState=SUCCES;
    21f0:	82 e0       	ldi	r24, 0x02	; 2
    21f2:	89 83       	std	Y+1, r24	; 0x01
	return Local_enState;
    21f4:	89 81       	ldd	r24, Y+1	; 0x01
}//Set off
    21f6:	0f 90       	pop	r0
    21f8:	0f 90       	pop	r0
    21fa:	cf 91       	pop	r28
    21fc:	df 91       	pop	r29
    21fe:	08 95       	ret

00002200 <MEXIT_enSetCallBack>:

ErrorState_t MEXIT_enSetCallBack(InterruptID_t copy_enID,void (*ptrfn)(void))
{ErrorState_t Local_enState=SUCCES;
    2200:	df 93       	push	r29
    2202:	cf 93       	push	r28
    2204:	00 d0       	rcall	.+0      	; 0x2206 <MEXIT_enSetCallBack+0x6>
    2206:	00 d0       	rcall	.+0      	; 0x2208 <MEXIT_enSetCallBack+0x8>
    2208:	00 d0       	rcall	.+0      	; 0x220a <MEXIT_enSetCallBack+0xa>
    220a:	cd b7       	in	r28, 0x3d	; 61
    220c:	de b7       	in	r29, 0x3e	; 62
    220e:	8a 83       	std	Y+2, r24	; 0x02
    2210:	7c 83       	std	Y+4, r23	; 0x04
    2212:	6b 83       	std	Y+3, r22	; 0x03
    2214:	82 e0       	ldi	r24, 0x02	; 2
    2216:	89 83       	std	Y+1, r24	; 0x01

if(ptrfn==NULL)
    2218:	8b 81       	ldd	r24, Y+3	; 0x03
    221a:	9c 81       	ldd	r25, Y+4	; 0x04
    221c:	00 97       	sbiw	r24, 0x00	; 0
    221e:	19 f4       	brne	.+6      	; 0x2226 <MEXIT_enSetCallBack+0x26>

{

Local_enState=NULL_PTR_ERR;
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	89 83       	std	Y+1, r24	; 0x01
    2224:	2b c0       	rjmp	.+86     	; 0x227c <MEXIT_enSetCallBack+0x7c>
}
else{
switch (copy_enID)
    2226:	8a 81       	ldd	r24, Y+2	; 0x02
    2228:	28 2f       	mov	r18, r24
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	3e 83       	std	Y+6, r19	; 0x06
    222e:	2d 83       	std	Y+5, r18	; 0x05
    2230:	8d 81       	ldd	r24, Y+5	; 0x05
    2232:	9e 81       	ldd	r25, Y+6	; 0x06
    2234:	86 30       	cpi	r24, 0x06	; 6
    2236:	91 05       	cpc	r25, r1
    2238:	59 f0       	breq	.+22     	; 0x2250 <MEXIT_enSetCallBack+0x50>
    223a:	2d 81       	ldd	r18, Y+5	; 0x05
    223c:	3e 81       	ldd	r19, Y+6	; 0x06
    223e:	27 30       	cpi	r18, 0x07	; 7
    2240:	31 05       	cpc	r19, r1
    2242:	69 f0       	breq	.+26     	; 0x225e <MEXIT_enSetCallBack+0x5e>
    2244:	8d 81       	ldd	r24, Y+5	; 0x05
    2246:	9e 81       	ldd	r25, Y+6	; 0x06
    2248:	85 30       	cpi	r24, 0x05	; 5
    224a:	91 05       	cpc	r25, r1
    224c:	79 f0       	breq	.+30     	; 0x226c <MEXIT_enSetCallBack+0x6c>
    224e:	15 c0       	rjmp	.+42     	; 0x227a <MEXIT_enSetCallBack+0x7a>
{

case INT0_ID:
	CallBackArr[0]=ptrfn;
    2250:	8b 81       	ldd	r24, Y+3	; 0x03
    2252:	9c 81       	ldd	r25, Y+4	; 0x04
    2254:	90 93 15 02 	sts	0x0215, r25
    2258:	80 93 14 02 	sts	0x0214, r24
    225c:	0f c0       	rjmp	.+30     	; 0x227c <MEXIT_enSetCallBack+0x7c>
	break;


case INT1_ID:
	CallBackArr[1]=ptrfn;
    225e:	8b 81       	ldd	r24, Y+3	; 0x03
    2260:	9c 81       	ldd	r25, Y+4	; 0x04
    2262:	90 93 17 02 	sts	0x0217, r25
    2266:	80 93 16 02 	sts	0x0216, r24
    226a:	08 c0       	rjmp	.+16     	; 0x227c <MEXIT_enSetCallBack+0x7c>
	break;

case INT2_ID:
	CallBackArr[2]=ptrfn;
    226c:	8b 81       	ldd	r24, Y+3	; 0x03
    226e:	9c 81       	ldd	r25, Y+4	; 0x04
    2270:	90 93 19 02 	sts	0x0219, r25
    2274:	80 93 18 02 	sts	0x0218, r24
    2278:	01 c0       	rjmp	.+2      	; 0x227c <MEXIT_enSetCallBack+0x7c>
	break;
default:
	Local_enState=OUT_OF_RANGE;
    227a:	19 82       	std	Y+1, r1	; 0x01
}
}
return Local_enState;
    227c:	89 81       	ldd	r24, Y+1	; 0x01

}
    227e:	26 96       	adiw	r28, 0x06	; 6
    2280:	0f b6       	in	r0, 0x3f	; 63
    2282:	f8 94       	cli
    2284:	de bf       	out	0x3e, r29	; 62
    2286:	0f be       	out	0x3f, r0	; 63
    2288:	cd bf       	out	0x3d, r28	; 61
    228a:	cf 91       	pop	r28
    228c:	df 91       	pop	r29
    228e:	08 95       	ret

00002290 <__vector_1>:

ISR(INT0_vect)
{
    2290:	1f 92       	push	r1
    2292:	0f 92       	push	r0
    2294:	0f b6       	in	r0, 0x3f	; 63
    2296:	0f 92       	push	r0
    2298:	11 24       	eor	r1, r1
    229a:	2f 93       	push	r18
    229c:	3f 93       	push	r19
    229e:	4f 93       	push	r20
    22a0:	5f 93       	push	r21
    22a2:	6f 93       	push	r22
    22a4:	7f 93       	push	r23
    22a6:	8f 93       	push	r24
    22a8:	9f 93       	push	r25
    22aa:	af 93       	push	r26
    22ac:	bf 93       	push	r27
    22ae:	ef 93       	push	r30
    22b0:	ff 93       	push	r31
    22b2:	df 93       	push	r29
    22b4:	cf 93       	push	r28
    22b6:	cd b7       	in	r28, 0x3d	; 61
    22b8:	de b7       	in	r29, 0x3e	; 62
	if(CallBackArr[0]!=NULL)
    22ba:	80 91 14 02 	lds	r24, 0x0214
    22be:	90 91 15 02 	lds	r25, 0x0215
    22c2:	00 97       	sbiw	r24, 0x00	; 0
    22c4:	29 f0       	breq	.+10     	; 0x22d0 <__vector_1+0x40>
	{
		CallBackArr[0]();
    22c6:	e0 91 14 02 	lds	r30, 0x0214
    22ca:	f0 91 15 02 	lds	r31, 0x0215
    22ce:	09 95       	icall

	}


}
    22d0:	cf 91       	pop	r28
    22d2:	df 91       	pop	r29
    22d4:	ff 91       	pop	r31
    22d6:	ef 91       	pop	r30
    22d8:	bf 91       	pop	r27
    22da:	af 91       	pop	r26
    22dc:	9f 91       	pop	r25
    22de:	8f 91       	pop	r24
    22e0:	7f 91       	pop	r23
    22e2:	6f 91       	pop	r22
    22e4:	5f 91       	pop	r21
    22e6:	4f 91       	pop	r20
    22e8:	3f 91       	pop	r19
    22ea:	2f 91       	pop	r18
    22ec:	0f 90       	pop	r0
    22ee:	0f be       	out	0x3f, r0	; 63
    22f0:	0f 90       	pop	r0
    22f2:	1f 90       	pop	r1
    22f4:	18 95       	reti

000022f6 <__vector_2>:

ISR(INT1_vect)
{
    22f6:	1f 92       	push	r1
    22f8:	0f 92       	push	r0
    22fa:	0f b6       	in	r0, 0x3f	; 63
    22fc:	0f 92       	push	r0
    22fe:	11 24       	eor	r1, r1
    2300:	2f 93       	push	r18
    2302:	3f 93       	push	r19
    2304:	4f 93       	push	r20
    2306:	5f 93       	push	r21
    2308:	6f 93       	push	r22
    230a:	7f 93       	push	r23
    230c:	8f 93       	push	r24
    230e:	9f 93       	push	r25
    2310:	af 93       	push	r26
    2312:	bf 93       	push	r27
    2314:	ef 93       	push	r30
    2316:	ff 93       	push	r31
    2318:	df 93       	push	r29
    231a:	cf 93       	push	r28
    231c:	cd b7       	in	r28, 0x3d	; 61
    231e:	de b7       	in	r29, 0x3e	; 62
	if(CallBackArr[1]!=NULL)
    2320:	80 91 16 02 	lds	r24, 0x0216
    2324:	90 91 17 02 	lds	r25, 0x0217
    2328:	00 97       	sbiw	r24, 0x00	; 0
    232a:	29 f0       	breq	.+10     	; 0x2336 <__vector_2+0x40>
	{
		CallBackArr[1]();
    232c:	e0 91 16 02 	lds	r30, 0x0216
    2330:	f0 91 17 02 	lds	r31, 0x0217
    2334:	09 95       	icall

	}


}
    2336:	cf 91       	pop	r28
    2338:	df 91       	pop	r29
    233a:	ff 91       	pop	r31
    233c:	ef 91       	pop	r30
    233e:	bf 91       	pop	r27
    2340:	af 91       	pop	r26
    2342:	9f 91       	pop	r25
    2344:	8f 91       	pop	r24
    2346:	7f 91       	pop	r23
    2348:	6f 91       	pop	r22
    234a:	5f 91       	pop	r21
    234c:	4f 91       	pop	r20
    234e:	3f 91       	pop	r19
    2350:	2f 91       	pop	r18
    2352:	0f 90       	pop	r0
    2354:	0f be       	out	0x3f, r0	; 63
    2356:	0f 90       	pop	r0
    2358:	1f 90       	pop	r1
    235a:	18 95       	reti

0000235c <__vector_3>:

ISR(INT2_vect)
{
    235c:	1f 92       	push	r1
    235e:	0f 92       	push	r0
    2360:	0f b6       	in	r0, 0x3f	; 63
    2362:	0f 92       	push	r0
    2364:	11 24       	eor	r1, r1
    2366:	2f 93       	push	r18
    2368:	3f 93       	push	r19
    236a:	4f 93       	push	r20
    236c:	5f 93       	push	r21
    236e:	6f 93       	push	r22
    2370:	7f 93       	push	r23
    2372:	8f 93       	push	r24
    2374:	9f 93       	push	r25
    2376:	af 93       	push	r26
    2378:	bf 93       	push	r27
    237a:	ef 93       	push	r30
    237c:	ff 93       	push	r31
    237e:	df 93       	push	r29
    2380:	cf 93       	push	r28
    2382:	cd b7       	in	r28, 0x3d	; 61
    2384:	de b7       	in	r29, 0x3e	; 62
	if(CallBackArr[2]!=NULL)
    2386:	80 91 18 02 	lds	r24, 0x0218
    238a:	90 91 19 02 	lds	r25, 0x0219
    238e:	00 97       	sbiw	r24, 0x00	; 0
    2390:	29 f0       	breq	.+10     	; 0x239c <__vector_3+0x40>
	{
		CallBackArr[2]();
    2392:	e0 91 18 02 	lds	r30, 0x0218
    2396:	f0 91 19 02 	lds	r31, 0x0219
    239a:	09 95       	icall

	}


}
    239c:	cf 91       	pop	r28
    239e:	df 91       	pop	r29
    23a0:	ff 91       	pop	r31
    23a2:	ef 91       	pop	r30
    23a4:	bf 91       	pop	r27
    23a6:	af 91       	pop	r26
    23a8:	9f 91       	pop	r25
    23aa:	8f 91       	pop	r24
    23ac:	7f 91       	pop	r23
    23ae:	6f 91       	pop	r22
    23b0:	5f 91       	pop	r21
    23b2:	4f 91       	pop	r20
    23b4:	3f 91       	pop	r19
    23b6:	2f 91       	pop	r18
    23b8:	0f 90       	pop	r0
    23ba:	0f be       	out	0x3f, r0	; 63
    23bc:	0f 90       	pop	r0
    23be:	1f 90       	pop	r1
    23c0:	18 95       	reti

000023c2 <MDIO_SetPinDirection>:
#include "BIT_MATH.h"
#include "MDIO_priv.h"
#include "MDIO_int.h"

void MDIO_SetPinDirection(Pin_t copy_enPin, Direction_t copy_u8enDirection)
{
    23c2:	df 93       	push	r29
    23c4:	cf 93       	push	r28
    23c6:	cd b7       	in	r28, 0x3d	; 61
    23c8:	de b7       	in	r29, 0x3e	; 62
    23ca:	2e 97       	sbiw	r28, 0x0e	; 14
    23cc:	0f b6       	in	r0, 0x3f	; 63
    23ce:	f8 94       	cli
    23d0:	de bf       	out	0x3e, r29	; 62
    23d2:	0f be       	out	0x3f, r0	; 63
    23d4:	cd bf       	out	0x3d, r28	; 61
    23d6:	8b 83       	std	Y+3, r24	; 0x03
    23d8:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8port= copy_enPin /10; //1-4
    23da:	8b 81       	ldd	r24, Y+3	; 0x03
    23dc:	9a e0       	ldi	r25, 0x0A	; 10
    23de:	69 2f       	mov	r22, r25
    23e0:	0e 94 07 31 	call	0x620e	; 0x620e <__udivmodqi4>
    23e4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8pin= copy_enPin % 10; //0-7
    23e6:	8b 81       	ldd	r24, Y+3	; 0x03
    23e8:	9a e0       	ldi	r25, 0x0A	; 10
    23ea:	69 2f       	mov	r22, r25
    23ec:	0e 94 07 31 	call	0x620e	; 0x620e <__udivmodqi4>
    23f0:	89 2f       	mov	r24, r25
    23f2:	89 83       	std	Y+1, r24	; 0x01
	/*****************************/
	switch(Local_u8port)
    23f4:	8a 81       	ldd	r24, Y+2	; 0x02
    23f6:	28 2f       	mov	r18, r24
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	3e 87       	std	Y+14, r19	; 0x0e
    23fc:	2d 87       	std	Y+13, r18	; 0x0d
    23fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2400:	9e 85       	ldd	r25, Y+14	; 0x0e
    2402:	82 30       	cpi	r24, 0x02	; 2
    2404:	91 05       	cpc	r25, r1
    2406:	09 f4       	brne	.+2      	; 0x240a <MDIO_SetPinDirection+0x48>
    2408:	50 c0       	rjmp	.+160    	; 0x24aa <MDIO_SetPinDirection+0xe8>
    240a:	2d 85       	ldd	r18, Y+13	; 0x0d
    240c:	3e 85       	ldd	r19, Y+14	; 0x0e
    240e:	23 30       	cpi	r18, 0x03	; 3
    2410:	31 05       	cpc	r19, r1
    2412:	34 f4       	brge	.+12     	; 0x2420 <MDIO_SetPinDirection+0x5e>
    2414:	8d 85       	ldd	r24, Y+13	; 0x0d
    2416:	9e 85       	ldd	r25, Y+14	; 0x0e
    2418:	81 30       	cpi	r24, 0x01	; 1
    241a:	91 05       	cpc	r25, r1
    241c:	71 f0       	breq	.+28     	; 0x243a <MDIO_SetPinDirection+0x78>
    241e:	ec c0       	rjmp	.+472    	; 0x25f8 <MDIO_SetPinDirection+0x236>
    2420:	2d 85       	ldd	r18, Y+13	; 0x0d
    2422:	3e 85       	ldd	r19, Y+14	; 0x0e
    2424:	23 30       	cpi	r18, 0x03	; 3
    2426:	31 05       	cpc	r19, r1
    2428:	09 f4       	brne	.+2      	; 0x242c <MDIO_SetPinDirection+0x6a>
    242a:	77 c0       	rjmp	.+238    	; 0x251a <MDIO_SetPinDirection+0x158>
    242c:	8d 85       	ldd	r24, Y+13	; 0x0d
    242e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2430:	84 30       	cpi	r24, 0x04	; 4
    2432:	91 05       	cpc	r25, r1
    2434:	09 f4       	brne	.+2      	; 0x2438 <MDIO_SetPinDirection+0x76>
    2436:	a9 c0       	rjmp	.+338    	; 0x258a <MDIO_SetPinDirection+0x1c8>
    2438:	df c0       	rjmp	.+446    	; 0x25f8 <MDIO_SetPinDirection+0x236>
	{
	case PORTA:
		switch(copy_u8enDirection)
    243a:	8c 81       	ldd	r24, Y+4	; 0x04
    243c:	28 2f       	mov	r18, r24
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	3c 87       	std	Y+12, r19	; 0x0c
    2442:	2b 87       	std	Y+11, r18	; 0x0b
    2444:	8b 85       	ldd	r24, Y+11	; 0x0b
    2446:	9c 85       	ldd	r25, Y+12	; 0x0c
    2448:	00 97       	sbiw	r24, 0x00	; 0
    244a:	31 f0       	breq	.+12     	; 0x2458 <MDIO_SetPinDirection+0x96>
    244c:	2b 85       	ldd	r18, Y+11	; 0x0b
    244e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2450:	21 30       	cpi	r18, 0x01	; 1
    2452:	31 05       	cpc	r19, r1
    2454:	b1 f0       	breq	.+44     	; 0x2482 <MDIO_SetPinDirection+0xc0>
    2456:	d0 c0       	rjmp	.+416    	; 0x25f8 <MDIO_SetPinDirection+0x236>
		{
		case INPUT :
			CLR_BIT(DDRA_REG,Local_u8pin);
    2458:	aa e3       	ldi	r26, 0x3A	; 58
    245a:	b0 e0       	ldi	r27, 0x00	; 0
    245c:	ea e3       	ldi	r30, 0x3A	; 58
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	80 81       	ld	r24, Z
    2462:	48 2f       	mov	r20, r24
    2464:	89 81       	ldd	r24, Y+1	; 0x01
    2466:	28 2f       	mov	r18, r24
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	02 2e       	mov	r0, r18
    2470:	02 c0       	rjmp	.+4      	; 0x2476 <MDIO_SetPinDirection+0xb4>
    2472:	88 0f       	add	r24, r24
    2474:	99 1f       	adc	r25, r25
    2476:	0a 94       	dec	r0
    2478:	e2 f7       	brpl	.-8      	; 0x2472 <MDIO_SetPinDirection+0xb0>
    247a:	80 95       	com	r24
    247c:	84 23       	and	r24, r20
    247e:	8c 93       	st	X, r24
    2480:	bb c0       	rjmp	.+374    	; 0x25f8 <MDIO_SetPinDirection+0x236>
			break;
		case OUTPUT :
					SET_BIT(DDRA_REG,Local_u8pin);
    2482:	aa e3       	ldi	r26, 0x3A	; 58
    2484:	b0 e0       	ldi	r27, 0x00	; 0
    2486:	ea e3       	ldi	r30, 0x3A	; 58
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	80 81       	ld	r24, Z
    248c:	48 2f       	mov	r20, r24
    248e:	89 81       	ldd	r24, Y+1	; 0x01
    2490:	28 2f       	mov	r18, r24
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	02 2e       	mov	r0, r18
    249a:	02 c0       	rjmp	.+4      	; 0x24a0 <MDIO_SetPinDirection+0xde>
    249c:	88 0f       	add	r24, r24
    249e:	99 1f       	adc	r25, r25
    24a0:	0a 94       	dec	r0
    24a2:	e2 f7       	brpl	.-8      	; 0x249c <MDIO_SetPinDirection+0xda>
    24a4:	84 2b       	or	r24, r20
    24a6:	8c 93       	st	X, r24
    24a8:	a7 c0       	rjmp	.+334    	; 0x25f8 <MDIO_SetPinDirection+0x236>
					break;
		}
		break;
		/*****************************/
	case PORTB:
		switch(copy_u8enDirection)
    24aa:	8c 81       	ldd	r24, Y+4	; 0x04
    24ac:	28 2f       	mov	r18, r24
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	3a 87       	std	Y+10, r19	; 0x0a
    24b2:	29 87       	std	Y+9, r18	; 0x09
    24b4:	89 85       	ldd	r24, Y+9	; 0x09
    24b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b8:	00 97       	sbiw	r24, 0x00	; 0
    24ba:	31 f0       	breq	.+12     	; 0x24c8 <MDIO_SetPinDirection+0x106>
    24bc:	29 85       	ldd	r18, Y+9	; 0x09
    24be:	3a 85       	ldd	r19, Y+10	; 0x0a
    24c0:	21 30       	cpi	r18, 0x01	; 1
    24c2:	31 05       	cpc	r19, r1
    24c4:	b1 f0       	breq	.+44     	; 0x24f2 <MDIO_SetPinDirection+0x130>
    24c6:	98 c0       	rjmp	.+304    	; 0x25f8 <MDIO_SetPinDirection+0x236>
				{
				case INPUT :
					CLR_BIT(DDRB_REG,Local_u8pin);
    24c8:	a7 e3       	ldi	r26, 0x37	; 55
    24ca:	b0 e0       	ldi	r27, 0x00	; 0
    24cc:	e7 e3       	ldi	r30, 0x37	; 55
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	80 81       	ld	r24, Z
    24d2:	48 2f       	mov	r20, r24
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
    24d6:	28 2f       	mov	r18, r24
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	02 2e       	mov	r0, r18
    24e0:	02 c0       	rjmp	.+4      	; 0x24e6 <MDIO_SetPinDirection+0x124>
    24e2:	88 0f       	add	r24, r24
    24e4:	99 1f       	adc	r25, r25
    24e6:	0a 94       	dec	r0
    24e8:	e2 f7       	brpl	.-8      	; 0x24e2 <MDIO_SetPinDirection+0x120>
    24ea:	80 95       	com	r24
    24ec:	84 23       	and	r24, r20
    24ee:	8c 93       	st	X, r24
    24f0:	83 c0       	rjmp	.+262    	; 0x25f8 <MDIO_SetPinDirection+0x236>
					break;
				case OUTPUT :
							SET_BIT(DDRB_REG,Local_u8pin);
    24f2:	a7 e3       	ldi	r26, 0x37	; 55
    24f4:	b0 e0       	ldi	r27, 0x00	; 0
    24f6:	e7 e3       	ldi	r30, 0x37	; 55
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	80 81       	ld	r24, Z
    24fc:	48 2f       	mov	r20, r24
    24fe:	89 81       	ldd	r24, Y+1	; 0x01
    2500:	28 2f       	mov	r18, r24
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	02 2e       	mov	r0, r18
    250a:	02 c0       	rjmp	.+4      	; 0x2510 <MDIO_SetPinDirection+0x14e>
    250c:	88 0f       	add	r24, r24
    250e:	99 1f       	adc	r25, r25
    2510:	0a 94       	dec	r0
    2512:	e2 f7       	brpl	.-8      	; 0x250c <MDIO_SetPinDirection+0x14a>
    2514:	84 2b       	or	r24, r20
    2516:	8c 93       	st	X, r24
    2518:	6f c0       	rjmp	.+222    	; 0x25f8 <MDIO_SetPinDirection+0x236>
							break;
				}
			break;
			/*****************************/
	case PORTC:
		switch(copy_u8enDirection)
    251a:	8c 81       	ldd	r24, Y+4	; 0x04
    251c:	28 2f       	mov	r18, r24
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	38 87       	std	Y+8, r19	; 0x08
    2522:	2f 83       	std	Y+7, r18	; 0x07
    2524:	8f 81       	ldd	r24, Y+7	; 0x07
    2526:	98 85       	ldd	r25, Y+8	; 0x08
    2528:	00 97       	sbiw	r24, 0x00	; 0
    252a:	31 f0       	breq	.+12     	; 0x2538 <MDIO_SetPinDirection+0x176>
    252c:	2f 81       	ldd	r18, Y+7	; 0x07
    252e:	38 85       	ldd	r19, Y+8	; 0x08
    2530:	21 30       	cpi	r18, 0x01	; 1
    2532:	31 05       	cpc	r19, r1
    2534:	b1 f0       	breq	.+44     	; 0x2562 <MDIO_SetPinDirection+0x1a0>
    2536:	60 c0       	rjmp	.+192    	; 0x25f8 <MDIO_SetPinDirection+0x236>
				{
				case INPUT :
					CLR_BIT(DDRC_REG,Local_u8pin);
    2538:	a4 e3       	ldi	r26, 0x34	; 52
    253a:	b0 e0       	ldi	r27, 0x00	; 0
    253c:	e4 e3       	ldi	r30, 0x34	; 52
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	80 81       	ld	r24, Z
    2542:	48 2f       	mov	r20, r24
    2544:	89 81       	ldd	r24, Y+1	; 0x01
    2546:	28 2f       	mov	r18, r24
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	02 2e       	mov	r0, r18
    2550:	02 c0       	rjmp	.+4      	; 0x2556 <MDIO_SetPinDirection+0x194>
    2552:	88 0f       	add	r24, r24
    2554:	99 1f       	adc	r25, r25
    2556:	0a 94       	dec	r0
    2558:	e2 f7       	brpl	.-8      	; 0x2552 <MDIO_SetPinDirection+0x190>
    255a:	80 95       	com	r24
    255c:	84 23       	and	r24, r20
    255e:	8c 93       	st	X, r24
    2560:	4b c0       	rjmp	.+150    	; 0x25f8 <MDIO_SetPinDirection+0x236>
					break;
				case OUTPUT :
					SET_BIT(DDRC_REG,Local_u8pin);
    2562:	a4 e3       	ldi	r26, 0x34	; 52
    2564:	b0 e0       	ldi	r27, 0x00	; 0
    2566:	e4 e3       	ldi	r30, 0x34	; 52
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	80 81       	ld	r24, Z
    256c:	48 2f       	mov	r20, r24
    256e:	89 81       	ldd	r24, Y+1	; 0x01
    2570:	28 2f       	mov	r18, r24
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	02 2e       	mov	r0, r18
    257a:	02 c0       	rjmp	.+4      	; 0x2580 <MDIO_SetPinDirection+0x1be>
    257c:	88 0f       	add	r24, r24
    257e:	99 1f       	adc	r25, r25
    2580:	0a 94       	dec	r0
    2582:	e2 f7       	brpl	.-8      	; 0x257c <MDIO_SetPinDirection+0x1ba>
    2584:	84 2b       	or	r24, r20
    2586:	8c 93       	st	X, r24
    2588:	37 c0       	rjmp	.+110    	; 0x25f8 <MDIO_SetPinDirection+0x236>
				}
			break;
			/*****************************/
		case PORTD:

		switch(copy_u8enDirection)
    258a:	8c 81       	ldd	r24, Y+4	; 0x04
    258c:	28 2f       	mov	r18, r24
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	3e 83       	std	Y+6, r19	; 0x06
    2592:	2d 83       	std	Y+5, r18	; 0x05
    2594:	8d 81       	ldd	r24, Y+5	; 0x05
    2596:	9e 81       	ldd	r25, Y+6	; 0x06
    2598:	00 97       	sbiw	r24, 0x00	; 0
    259a:	31 f0       	breq	.+12     	; 0x25a8 <MDIO_SetPinDirection+0x1e6>
    259c:	2d 81       	ldd	r18, Y+5	; 0x05
    259e:	3e 81       	ldd	r19, Y+6	; 0x06
    25a0:	21 30       	cpi	r18, 0x01	; 1
    25a2:	31 05       	cpc	r19, r1
    25a4:	b1 f0       	breq	.+44     	; 0x25d2 <MDIO_SetPinDirection+0x210>
    25a6:	28 c0       	rjmp	.+80     	; 0x25f8 <MDIO_SetPinDirection+0x236>
				{
				case INPUT :
					CLR_BIT(DDRD_REG,Local_u8pin);
    25a8:	a1 e3       	ldi	r26, 0x31	; 49
    25aa:	b0 e0       	ldi	r27, 0x00	; 0
    25ac:	e1 e3       	ldi	r30, 0x31	; 49
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	80 81       	ld	r24, Z
    25b2:	48 2f       	mov	r20, r24
    25b4:	89 81       	ldd	r24, Y+1	; 0x01
    25b6:	28 2f       	mov	r18, r24
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	81 e0       	ldi	r24, 0x01	; 1
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	02 2e       	mov	r0, r18
    25c0:	02 c0       	rjmp	.+4      	; 0x25c6 <MDIO_SetPinDirection+0x204>
    25c2:	88 0f       	add	r24, r24
    25c4:	99 1f       	adc	r25, r25
    25c6:	0a 94       	dec	r0
    25c8:	e2 f7       	brpl	.-8      	; 0x25c2 <MDIO_SetPinDirection+0x200>
    25ca:	80 95       	com	r24
    25cc:	84 23       	and	r24, r20
    25ce:	8c 93       	st	X, r24
    25d0:	13 c0       	rjmp	.+38     	; 0x25f8 <MDIO_SetPinDirection+0x236>
					break;
				case OUTPUT :
					SET_BIT(DDRD_REG,Local_u8pin);
    25d2:	a1 e3       	ldi	r26, 0x31	; 49
    25d4:	b0 e0       	ldi	r27, 0x00	; 0
    25d6:	e1 e3       	ldi	r30, 0x31	; 49
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	80 81       	ld	r24, Z
    25dc:	48 2f       	mov	r20, r24
    25de:	89 81       	ldd	r24, Y+1	; 0x01
    25e0:	28 2f       	mov	r18, r24
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	02 2e       	mov	r0, r18
    25ea:	02 c0       	rjmp	.+4      	; 0x25f0 <MDIO_SetPinDirection+0x22e>
    25ec:	88 0f       	add	r24, r24
    25ee:	99 1f       	adc	r25, r25
    25f0:	0a 94       	dec	r0
    25f2:	e2 f7       	brpl	.-8      	; 0x25ec <MDIO_SetPinDirection+0x22a>
    25f4:	84 2b       	or	r24, r20
    25f6:	8c 93       	st	X, r24
			break;
			/*****************************/
		default: break;

	}
}
    25f8:	2e 96       	adiw	r28, 0x0e	; 14
    25fa:	0f b6       	in	r0, 0x3f	; 63
    25fc:	f8 94       	cli
    25fe:	de bf       	out	0x3e, r29	; 62
    2600:	0f be       	out	0x3f, r0	; 63
    2602:	cd bf       	out	0x3d, r28	; 61
    2604:	cf 91       	pop	r28
    2606:	df 91       	pop	r29
    2608:	08 95       	ret

0000260a <MDIO_voidSetPinValue>:

/////////////////////////////////////////////////////////////
void MDIO_voidSetPinValue(Pin_t copy_enPin,Value_t copy_enValue)
{
    260a:	df 93       	push	r29
    260c:	cf 93       	push	r28
    260e:	cd b7       	in	r28, 0x3d	; 61
    2610:	de b7       	in	r29, 0x3e	; 62
    2612:	2e 97       	sbiw	r28, 0x0e	; 14
    2614:	0f b6       	in	r0, 0x3f	; 63
    2616:	f8 94       	cli
    2618:	de bf       	out	0x3e, r29	; 62
    261a:	0f be       	out	0x3f, r0	; 63
    261c:	cd bf       	out	0x3d, r28	; 61
    261e:	8b 83       	std	Y+3, r24	; 0x03
    2620:	6c 83       	std	Y+4, r22	; 0x04
u8 Local_u8port= copy_enPin /10; //1-4
    2622:	8b 81       	ldd	r24, Y+3	; 0x03
    2624:	9a e0       	ldi	r25, 0x0A	; 10
    2626:	69 2f       	mov	r22, r25
    2628:	0e 94 07 31 	call	0x620e	; 0x620e <__udivmodqi4>
    262c:	8a 83       	std	Y+2, r24	; 0x02
u8 Local_u8pin= copy_enPin % 10; //0-7
    262e:	8b 81       	ldd	r24, Y+3	; 0x03
    2630:	9a e0       	ldi	r25, 0x0A	; 10
    2632:	69 2f       	mov	r22, r25
    2634:	0e 94 07 31 	call	0x620e	; 0x620e <__udivmodqi4>
    2638:	89 2f       	mov	r24, r25
    263a:	89 83       	std	Y+1, r24	; 0x01


switch(Local_u8port)
    263c:	8a 81       	ldd	r24, Y+2	; 0x02
    263e:	28 2f       	mov	r18, r24
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	3e 87       	std	Y+14, r19	; 0x0e
    2644:	2d 87       	std	Y+13, r18	; 0x0d
    2646:	8d 85       	ldd	r24, Y+13	; 0x0d
    2648:	9e 85       	ldd	r25, Y+14	; 0x0e
    264a:	82 30       	cpi	r24, 0x02	; 2
    264c:	91 05       	cpc	r25, r1
    264e:	09 f4       	brne	.+2      	; 0x2652 <MDIO_voidSetPinValue+0x48>
    2650:	50 c0       	rjmp	.+160    	; 0x26f2 <MDIO_voidSetPinValue+0xe8>
    2652:	2d 85       	ldd	r18, Y+13	; 0x0d
    2654:	3e 85       	ldd	r19, Y+14	; 0x0e
    2656:	23 30       	cpi	r18, 0x03	; 3
    2658:	31 05       	cpc	r19, r1
    265a:	34 f4       	brge	.+12     	; 0x2668 <MDIO_voidSetPinValue+0x5e>
    265c:	8d 85       	ldd	r24, Y+13	; 0x0d
    265e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2660:	81 30       	cpi	r24, 0x01	; 1
    2662:	91 05       	cpc	r25, r1
    2664:	71 f0       	breq	.+28     	; 0x2682 <MDIO_voidSetPinValue+0x78>
    2666:	ec c0       	rjmp	.+472    	; 0x2840 <MDIO_voidSetPinValue+0x236>
    2668:	2d 85       	ldd	r18, Y+13	; 0x0d
    266a:	3e 85       	ldd	r19, Y+14	; 0x0e
    266c:	23 30       	cpi	r18, 0x03	; 3
    266e:	31 05       	cpc	r19, r1
    2670:	09 f4       	brne	.+2      	; 0x2674 <MDIO_voidSetPinValue+0x6a>
    2672:	77 c0       	rjmp	.+238    	; 0x2762 <MDIO_voidSetPinValue+0x158>
    2674:	8d 85       	ldd	r24, Y+13	; 0x0d
    2676:	9e 85       	ldd	r25, Y+14	; 0x0e
    2678:	84 30       	cpi	r24, 0x04	; 4
    267a:	91 05       	cpc	r25, r1
    267c:	09 f4       	brne	.+2      	; 0x2680 <MDIO_voidSetPinValue+0x76>
    267e:	a9 c0       	rjmp	.+338    	; 0x27d2 <MDIO_voidSetPinValue+0x1c8>
    2680:	df c0       	rjmp	.+446    	; 0x2840 <MDIO_voidSetPinValue+0x236>
	{
case PORTA:
	switch(copy_enValue)
    2682:	8c 81       	ldd	r24, Y+4	; 0x04
    2684:	28 2f       	mov	r18, r24
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	3c 87       	std	Y+12, r19	; 0x0c
    268a:	2b 87       	std	Y+11, r18	; 0x0b
    268c:	8b 85       	ldd	r24, Y+11	; 0x0b
    268e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2690:	00 97       	sbiw	r24, 0x00	; 0
    2692:	31 f0       	breq	.+12     	; 0x26a0 <MDIO_voidSetPinValue+0x96>
    2694:	2b 85       	ldd	r18, Y+11	; 0x0b
    2696:	3c 85       	ldd	r19, Y+12	; 0x0c
    2698:	21 30       	cpi	r18, 0x01	; 1
    269a:	31 05       	cpc	r19, r1
    269c:	b1 f0       	breq	.+44     	; 0x26ca <MDIO_voidSetPinValue+0xc0>
    269e:	d0 c0       	rjmp	.+416    	; 0x2840 <MDIO_voidSetPinValue+0x236>
	{
	case LOW :
		CLR_BIT(PRTA_REG,Local_u8pin);
    26a0:	ab e3       	ldi	r26, 0x3B	; 59
    26a2:	b0 e0       	ldi	r27, 0x00	; 0
    26a4:	eb e3       	ldi	r30, 0x3B	; 59
    26a6:	f0 e0       	ldi	r31, 0x00	; 0
    26a8:	80 81       	ld	r24, Z
    26aa:	48 2f       	mov	r20, r24
    26ac:	89 81       	ldd	r24, Y+1	; 0x01
    26ae:	28 2f       	mov	r18, r24
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	02 2e       	mov	r0, r18
    26b8:	02 c0       	rjmp	.+4      	; 0x26be <MDIO_voidSetPinValue+0xb4>
    26ba:	88 0f       	add	r24, r24
    26bc:	99 1f       	adc	r25, r25
    26be:	0a 94       	dec	r0
    26c0:	e2 f7       	brpl	.-8      	; 0x26ba <MDIO_voidSetPinValue+0xb0>
    26c2:	80 95       	com	r24
    26c4:	84 23       	and	r24, r20
    26c6:	8c 93       	st	X, r24
    26c8:	bb c0       	rjmp	.+374    	; 0x2840 <MDIO_voidSetPinValue+0x236>
	break;
	case HIGH :
		SET_BIT(PRTA_REG,Local_u8pin);
    26ca:	ab e3       	ldi	r26, 0x3B	; 59
    26cc:	b0 e0       	ldi	r27, 0x00	; 0
    26ce:	eb e3       	ldi	r30, 0x3B	; 59
    26d0:	f0 e0       	ldi	r31, 0x00	; 0
    26d2:	80 81       	ld	r24, Z
    26d4:	48 2f       	mov	r20, r24
    26d6:	89 81       	ldd	r24, Y+1	; 0x01
    26d8:	28 2f       	mov	r18, r24
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	02 2e       	mov	r0, r18
    26e2:	02 c0       	rjmp	.+4      	; 0x26e8 <MDIO_voidSetPinValue+0xde>
    26e4:	88 0f       	add	r24, r24
    26e6:	99 1f       	adc	r25, r25
    26e8:	0a 94       	dec	r0
    26ea:	e2 f7       	brpl	.-8      	; 0x26e4 <MDIO_voidSetPinValue+0xda>
    26ec:	84 2b       	or	r24, r20
    26ee:	8c 93       	st	X, r24
    26f0:	a7 c0       	rjmp	.+334    	; 0x2840 <MDIO_voidSetPinValue+0x236>
	break;
	//PORTA_REG|=(copy_enValue<<Local_u8pin)
									/*****************************/
case PORTB:

	switch(copy_enValue)
    26f2:	8c 81       	ldd	r24, Y+4	; 0x04
    26f4:	28 2f       	mov	r18, r24
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	3a 87       	std	Y+10, r19	; 0x0a
    26fa:	29 87       	std	Y+9, r18	; 0x09
    26fc:	89 85       	ldd	r24, Y+9	; 0x09
    26fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2700:	00 97       	sbiw	r24, 0x00	; 0
    2702:	31 f0       	breq	.+12     	; 0x2710 <MDIO_voidSetPinValue+0x106>
    2704:	29 85       	ldd	r18, Y+9	; 0x09
    2706:	3a 85       	ldd	r19, Y+10	; 0x0a
    2708:	21 30       	cpi	r18, 0x01	; 1
    270a:	31 05       	cpc	r19, r1
    270c:	b1 f0       	breq	.+44     	; 0x273a <MDIO_voidSetPinValue+0x130>
    270e:	98 c0       	rjmp	.+304    	; 0x2840 <MDIO_voidSetPinValue+0x236>
		{
		case LOW :
		CLR_BIT(PRTB_REG,Local_u8pin);
    2710:	a8 e3       	ldi	r26, 0x38	; 56
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	e8 e3       	ldi	r30, 0x38	; 56
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	48 2f       	mov	r20, r24
    271c:	89 81       	ldd	r24, Y+1	; 0x01
    271e:	28 2f       	mov	r18, r24
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	81 e0       	ldi	r24, 0x01	; 1
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	02 2e       	mov	r0, r18
    2728:	02 c0       	rjmp	.+4      	; 0x272e <MDIO_voidSetPinValue+0x124>
    272a:	88 0f       	add	r24, r24
    272c:	99 1f       	adc	r25, r25
    272e:	0a 94       	dec	r0
    2730:	e2 f7       	brpl	.-8      	; 0x272a <MDIO_voidSetPinValue+0x120>
    2732:	80 95       	com	r24
    2734:	84 23       	and	r24, r20
    2736:	8c 93       	st	X, r24
    2738:	83 c0       	rjmp	.+262    	; 0x2840 <MDIO_voidSetPinValue+0x236>
	break;
	case HIGH  :
		SET_BIT(PRTB_REG,Local_u8pin);
    273a:	a8 e3       	ldi	r26, 0x38	; 56
    273c:	b0 e0       	ldi	r27, 0x00	; 0
    273e:	e8 e3       	ldi	r30, 0x38	; 56
    2740:	f0 e0       	ldi	r31, 0x00	; 0
    2742:	80 81       	ld	r24, Z
    2744:	48 2f       	mov	r20, r24
    2746:	89 81       	ldd	r24, Y+1	; 0x01
    2748:	28 2f       	mov	r18, r24
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	02 2e       	mov	r0, r18
    2752:	02 c0       	rjmp	.+4      	; 0x2758 <MDIO_voidSetPinValue+0x14e>
    2754:	88 0f       	add	r24, r24
    2756:	99 1f       	adc	r25, r25
    2758:	0a 94       	dec	r0
    275a:	e2 f7       	brpl	.-8      	; 0x2754 <MDIO_voidSetPinValue+0x14a>
    275c:	84 2b       	or	r24, r20
    275e:	8c 93       	st	X, r24
    2760:	6f c0       	rjmp	.+222    	; 0x2840 <MDIO_voidSetPinValue+0x236>
	break;
		}
break;
	/*****************************/
case PORTC:
		switch(copy_enValue)
    2762:	8c 81       	ldd	r24, Y+4	; 0x04
    2764:	28 2f       	mov	r18, r24
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	38 87       	std	Y+8, r19	; 0x08
    276a:	2f 83       	std	Y+7, r18	; 0x07
    276c:	8f 81       	ldd	r24, Y+7	; 0x07
    276e:	98 85       	ldd	r25, Y+8	; 0x08
    2770:	00 97       	sbiw	r24, 0x00	; 0
    2772:	d1 f0       	breq	.+52     	; 0x27a8 <MDIO_voidSetPinValue+0x19e>
    2774:	2f 81       	ldd	r18, Y+7	; 0x07
    2776:	38 85       	ldd	r19, Y+8	; 0x08
    2778:	21 30       	cpi	r18, 0x01	; 1
    277a:	31 05       	cpc	r19, r1
    277c:	09 f0       	breq	.+2      	; 0x2780 <MDIO_voidSetPinValue+0x176>
    277e:	60 c0       	rjmp	.+192    	; 0x2840 <MDIO_voidSetPinValue+0x236>
					{
		case HIGH  :
				SET_BIT(PRTC_REG,Local_u8pin);
    2780:	a5 e3       	ldi	r26, 0x35	; 53
    2782:	b0 e0       	ldi	r27, 0x00	; 0
    2784:	e5 e3       	ldi	r30, 0x35	; 53
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	80 81       	ld	r24, Z
    278a:	48 2f       	mov	r20, r24
    278c:	89 81       	ldd	r24, Y+1	; 0x01
    278e:	28 2f       	mov	r18, r24
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	02 2e       	mov	r0, r18
    2798:	02 c0       	rjmp	.+4      	; 0x279e <MDIO_voidSetPinValue+0x194>
    279a:	88 0f       	add	r24, r24
    279c:	99 1f       	adc	r25, r25
    279e:	0a 94       	dec	r0
    27a0:	e2 f7       	brpl	.-8      	; 0x279a <MDIO_voidSetPinValue+0x190>
    27a2:	84 2b       	or	r24, r20
    27a4:	8c 93       	st	X, r24
    27a6:	4c c0       	rjmp	.+152    	; 0x2840 <MDIO_voidSetPinValue+0x236>
				break;
		case LOW :
					CLR_BIT(PRTC_REG,Local_u8pin);
    27a8:	a5 e3       	ldi	r26, 0x35	; 53
    27aa:	b0 e0       	ldi	r27, 0x00	; 0
    27ac:	e5 e3       	ldi	r30, 0x35	; 53
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	80 81       	ld	r24, Z
    27b2:	48 2f       	mov	r20, r24
    27b4:	89 81       	ldd	r24, Y+1	; 0x01
    27b6:	28 2f       	mov	r18, r24
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	02 2e       	mov	r0, r18
    27c0:	02 c0       	rjmp	.+4      	; 0x27c6 <MDIO_voidSetPinValue+0x1bc>
    27c2:	88 0f       	add	r24, r24
    27c4:	99 1f       	adc	r25, r25
    27c6:	0a 94       	dec	r0
    27c8:	e2 f7       	brpl	.-8      	; 0x27c2 <MDIO_voidSetPinValue+0x1b8>
    27ca:	80 95       	com	r24
    27cc:	84 23       	and	r24, r20
    27ce:	8c 93       	st	X, r24
    27d0:	37 c0       	rjmp	.+110    	; 0x2840 <MDIO_voidSetPinValue+0x236>
			}
	break;
	/*****************************/
case PORTD:

switch(copy_enValue)
    27d2:	8c 81       	ldd	r24, Y+4	; 0x04
    27d4:	28 2f       	mov	r18, r24
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	3e 83       	std	Y+6, r19	; 0x06
    27da:	2d 83       	std	Y+5, r18	; 0x05
    27dc:	8d 81       	ldd	r24, Y+5	; 0x05
    27de:	9e 81       	ldd	r25, Y+6	; 0x06
    27e0:	00 97       	sbiw	r24, 0x00	; 0
    27e2:	31 f0       	breq	.+12     	; 0x27f0 <MDIO_voidSetPinValue+0x1e6>
    27e4:	2d 81       	ldd	r18, Y+5	; 0x05
    27e6:	3e 81       	ldd	r19, Y+6	; 0x06
    27e8:	21 30       	cpi	r18, 0x01	; 1
    27ea:	31 05       	cpc	r19, r1
    27ec:	b1 f0       	breq	.+44     	; 0x281a <MDIO_voidSetPinValue+0x210>
    27ee:	28 c0       	rjmp	.+80     	; 0x2840 <MDIO_voidSetPinValue+0x236>
				{
	case LOW :
	CLR_BIT(PRTD_REG,Local_u8pin);
    27f0:	a2 e3       	ldi	r26, 0x32	; 50
    27f2:	b0 e0       	ldi	r27, 0x00	; 0
    27f4:	e2 e3       	ldi	r30, 0x32	; 50
    27f6:	f0 e0       	ldi	r31, 0x00	; 0
    27f8:	80 81       	ld	r24, Z
    27fa:	48 2f       	mov	r20, r24
    27fc:	89 81       	ldd	r24, Y+1	; 0x01
    27fe:	28 2f       	mov	r18, r24
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	02 2e       	mov	r0, r18
    2808:	02 c0       	rjmp	.+4      	; 0x280e <MDIO_voidSetPinValue+0x204>
    280a:	88 0f       	add	r24, r24
    280c:	99 1f       	adc	r25, r25
    280e:	0a 94       	dec	r0
    2810:	e2 f7       	brpl	.-8      	; 0x280a <MDIO_voidSetPinValue+0x200>
    2812:	80 95       	com	r24
    2814:	84 23       	and	r24, r20
    2816:	8c 93       	st	X, r24
    2818:	13 c0       	rjmp	.+38     	; 0x2840 <MDIO_voidSetPinValue+0x236>
	break;
	case HIGH  :
	SET_BIT(PRTD_REG,Local_u8pin);
    281a:	a2 e3       	ldi	r26, 0x32	; 50
    281c:	b0 e0       	ldi	r27, 0x00	; 0
    281e:	e2 e3       	ldi	r30, 0x32	; 50
    2820:	f0 e0       	ldi	r31, 0x00	; 0
    2822:	80 81       	ld	r24, Z
    2824:	48 2f       	mov	r20, r24
    2826:	89 81       	ldd	r24, Y+1	; 0x01
    2828:	28 2f       	mov	r18, r24
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	02 2e       	mov	r0, r18
    2832:	02 c0       	rjmp	.+4      	; 0x2838 <MDIO_voidSetPinValue+0x22e>
    2834:	88 0f       	add	r24, r24
    2836:	99 1f       	adc	r25, r25
    2838:	0a 94       	dec	r0
    283a:	e2 f7       	brpl	.-8      	; 0x2834 <MDIO_voidSetPinValue+0x22a>
    283c:	84 2b       	or	r24, r20
    283e:	8c 93       	st	X, r24




}
}
    2840:	2e 96       	adiw	r28, 0x0e	; 14
    2842:	0f b6       	in	r0, 0x3f	; 63
    2844:	f8 94       	cli
    2846:	de bf       	out	0x3e, r29	; 62
    2848:	0f be       	out	0x3f, r0	; 63
    284a:	cd bf       	out	0x3d, r28	; 61
    284c:	cf 91       	pop	r28
    284e:	df 91       	pop	r29
    2850:	08 95       	ret

00002852 <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue(Port_t copy_enPort, u8 copy_u8Value)
{
    2852:	df 93       	push	r29
    2854:	cf 93       	push	r28
    2856:	00 d0       	rcall	.+0      	; 0x2858 <MDIO_voidSetPortValue+0x6>
    2858:	00 d0       	rcall	.+0      	; 0x285a <MDIO_voidSetPortValue+0x8>
    285a:	0f 92       	push	r0
    285c:	cd b7       	in	r28, 0x3d	; 61
    285e:	de b7       	in	r29, 0x3e	; 62
    2860:	8a 83       	std	Y+2, r24	; 0x02
    2862:	6b 83       	std	Y+3, r22	; 0x03
			u8 Local_u8port= copy_enPort /10; //1-4
    2864:	8a 81       	ldd	r24, Y+2	; 0x02
    2866:	9a e0       	ldi	r25, 0x0A	; 10
    2868:	69 2f       	mov	r22, r25
    286a:	0e 94 07 31 	call	0x620e	; 0x620e <__udivmodqi4>
    286e:	89 83       	std	Y+1, r24	; 0x01
			//u8 Local_u8pin= copy_enPort % 10; //0-7
			switch(Local_u8port)
    2870:	89 81       	ldd	r24, Y+1	; 0x01
    2872:	28 2f       	mov	r18, r24
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	3d 83       	std	Y+5, r19	; 0x05
    2878:	2c 83       	std	Y+4, r18	; 0x04
    287a:	8c 81       	ldd	r24, Y+4	; 0x04
    287c:	9d 81       	ldd	r25, Y+5	; 0x05
    287e:	82 30       	cpi	r24, 0x02	; 2
    2880:	91 05       	cpc	r25, r1
    2882:	f9 f0       	breq	.+62     	; 0x28c2 <MDIO_voidSetPortValue+0x70>
    2884:	2c 81       	ldd	r18, Y+4	; 0x04
    2886:	3d 81       	ldd	r19, Y+5	; 0x05
    2888:	23 30       	cpi	r18, 0x03	; 3
    288a:	31 05       	cpc	r19, r1
    288c:	34 f4       	brge	.+12     	; 0x289a <MDIO_voidSetPortValue+0x48>
    288e:	8c 81       	ldd	r24, Y+4	; 0x04
    2890:	9d 81       	ldd	r25, Y+5	; 0x05
    2892:	81 30       	cpi	r24, 0x01	; 1
    2894:	91 05       	cpc	r25, r1
    2896:	61 f0       	breq	.+24     	; 0x28b0 <MDIO_voidSetPortValue+0x5e>
    2898:	14 c0       	rjmp	.+40     	; 0x28c2 <MDIO_voidSetPortValue+0x70>
    289a:	2c 81       	ldd	r18, Y+4	; 0x04
    289c:	3d 81       	ldd	r19, Y+5	; 0x05
    289e:	23 30       	cpi	r18, 0x03	; 3
    28a0:	31 05       	cpc	r19, r1
    28a2:	79 f0       	breq	.+30     	; 0x28c2 <MDIO_voidSetPortValue+0x70>
    28a4:	8c 81       	ldd	r24, Y+4	; 0x04
    28a6:	9d 81       	ldd	r25, Y+5	; 0x05
    28a8:	84 30       	cpi	r24, 0x04	; 4
    28aa:	91 05       	cpc	r25, r1
    28ac:	31 f0       	breq	.+12     	; 0x28ba <MDIO_voidSetPortValue+0x68>
    28ae:	09 c0       	rjmp	.+18     	; 0x28c2 <MDIO_voidSetPortValue+0x70>
				{
				case PORTA:
					PRTA_REG=copy_u8Value;
    28b0:	eb e3       	ldi	r30, 0x3B	; 59
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	8b 81       	ldd	r24, Y+3	; 0x03
    28b6:	80 83       	st	Z, r24
    28b8:	04 c0       	rjmp	.+8      	; 0x28c2 <MDIO_voidSetPortValue+0x70>
					PRTC_REG=copy_u8Value;
									break;
						/*****************************/
					case PORTD:

						PRTD_REG=copy_u8Value;
    28ba:	e2 e3       	ldi	r30, 0x32	; 50
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	8b 81       	ldd	r24, Y+3	; 0x03
    28c0:	80 83       	st	Z, r24
							break;
						/*****************************/
					default: break;
				}
}
    28c2:	0f 90       	pop	r0
    28c4:	0f 90       	pop	r0
    28c6:	0f 90       	pop	r0
    28c8:	0f 90       	pop	r0
    28ca:	0f 90       	pop	r0
    28cc:	cf 91       	pop	r28
    28ce:	df 91       	pop	r29
    28d0:	08 95       	ret

000028d2 <MDIO_voidGetPinValue>:

void MDIO_voidGetPinValue(Pin_t copy_enPort, Value_t * ptrValue)
{
    28d2:	df 93       	push	r29
    28d4:	cf 93       	push	r28
    28d6:	cd b7       	in	r28, 0x3d	; 61
    28d8:	de b7       	in	r29, 0x3e	; 62
    28da:	27 97       	sbiw	r28, 0x07	; 7
    28dc:	0f b6       	in	r0, 0x3f	; 63
    28de:	f8 94       	cli
    28e0:	de bf       	out	0x3e, r29	; 62
    28e2:	0f be       	out	0x3f, r0	; 63
    28e4:	cd bf       	out	0x3d, r28	; 61
    28e6:	8b 83       	std	Y+3, r24	; 0x03
    28e8:	7d 83       	std	Y+5, r23	; 0x05
    28ea:	6c 83       	std	Y+4, r22	; 0x04
				u8 Local_u8port= copy_enPort /10; //1-4
    28ec:	8b 81       	ldd	r24, Y+3	; 0x03
    28ee:	9a e0       	ldi	r25, 0x0A	; 10
    28f0:	69 2f       	mov	r22, r25
    28f2:	0e 94 07 31 	call	0x620e	; 0x620e <__udivmodqi4>
    28f6:	8a 83       	std	Y+2, r24	; 0x02
				u8 Local_u8pin= copy_enPort % 10; //0-7
    28f8:	8b 81       	ldd	r24, Y+3	; 0x03
    28fa:	9a e0       	ldi	r25, 0x0A	; 10
    28fc:	69 2f       	mov	r22, r25
    28fe:	0e 94 07 31 	call	0x620e	; 0x620e <__udivmodqi4>
    2902:	89 2f       	mov	r24, r25
    2904:	89 83       	std	Y+1, r24	; 0x01

				switch(Local_u8port)
    2906:	8a 81       	ldd	r24, Y+2	; 0x02
    2908:	28 2f       	mov	r18, r24
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	3f 83       	std	Y+7, r19	; 0x07
    290e:	2e 83       	std	Y+6, r18	; 0x06
    2910:	4e 81       	ldd	r20, Y+6	; 0x06
    2912:	5f 81       	ldd	r21, Y+7	; 0x07
    2914:	42 30       	cpi	r20, 0x02	; 2
    2916:	51 05       	cpc	r21, r1
    2918:	09 f4       	brne	.+2      	; 0x291c <MDIO_voidGetPinValue+0x4a>
    291a:	3d c0       	rjmp	.+122    	; 0x2996 <MDIO_voidGetPinValue+0xc4>
    291c:	8e 81       	ldd	r24, Y+6	; 0x06
    291e:	9f 81       	ldd	r25, Y+7	; 0x07
    2920:	83 30       	cpi	r24, 0x03	; 3
    2922:	91 05       	cpc	r25, r1
    2924:	34 f4       	brge	.+12     	; 0x2932 <MDIO_voidGetPinValue+0x60>
    2926:	2e 81       	ldd	r18, Y+6	; 0x06
    2928:	3f 81       	ldd	r19, Y+7	; 0x07
    292a:	21 30       	cpi	r18, 0x01	; 1
    292c:	31 05       	cpc	r19, r1
    292e:	61 f0       	breq	.+24     	; 0x2948 <MDIO_voidGetPinValue+0x76>
    2930:	32 c0       	rjmp	.+100    	; 0x2996 <MDIO_voidGetPinValue+0xc4>
    2932:	4e 81       	ldd	r20, Y+6	; 0x06
    2934:	5f 81       	ldd	r21, Y+7	; 0x07
    2936:	43 30       	cpi	r20, 0x03	; 3
    2938:	51 05       	cpc	r21, r1
    293a:	69 f1       	breq	.+90     	; 0x2996 <MDIO_voidGetPinValue+0xc4>
    293c:	8e 81       	ldd	r24, Y+6	; 0x06
    293e:	9f 81       	ldd	r25, Y+7	; 0x07
    2940:	84 30       	cpi	r24, 0x04	; 4
    2942:	91 05       	cpc	r25, r1
    2944:	a9 f0       	breq	.+42     	; 0x2970 <MDIO_voidGetPinValue+0x9e>
    2946:	27 c0       	rjmp	.+78     	; 0x2996 <MDIO_voidGetPinValue+0xc4>
					{
					case PORTA:
						* ptrValue = GET_BIT(PINA_REG,Local_u8pin);
    2948:	e9 e3       	ldi	r30, 0x39	; 57
    294a:	f0 e0       	ldi	r31, 0x00	; 0
    294c:	80 81       	ld	r24, Z
    294e:	28 2f       	mov	r18, r24
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	89 81       	ldd	r24, Y+1	; 0x01
    2954:	88 2f       	mov	r24, r24
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	a9 01       	movw	r20, r18
    295a:	02 c0       	rjmp	.+4      	; 0x2960 <MDIO_voidGetPinValue+0x8e>
    295c:	55 95       	asr	r21
    295e:	47 95       	ror	r20
    2960:	8a 95       	dec	r24
    2962:	e2 f7       	brpl	.-8      	; 0x295c <MDIO_voidGetPinValue+0x8a>
    2964:	ca 01       	movw	r24, r20
    2966:	81 70       	andi	r24, 0x01	; 1
    2968:	ec 81       	ldd	r30, Y+4	; 0x04
    296a:	fd 81       	ldd	r31, Y+5	; 0x05
    296c:	80 83       	st	Z, r24
    296e:	13 c0       	rjmp	.+38     	; 0x2996 <MDIO_voidGetPinValue+0xc4>
						* ptrValue = GET_BIT(PINC_REG,Local_u8pin);
										break;
							/*****************************/
						case PORTD:

							* ptrValue = GET_BIT(PIND_REG,Local_u8pin);
    2970:	e0 e3       	ldi	r30, 0x30	; 48
    2972:	f0 e0       	ldi	r31, 0x00	; 0
    2974:	80 81       	ld	r24, Z
    2976:	28 2f       	mov	r18, r24
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	89 81       	ldd	r24, Y+1	; 0x01
    297c:	88 2f       	mov	r24, r24
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	a9 01       	movw	r20, r18
    2982:	02 c0       	rjmp	.+4      	; 0x2988 <MDIO_voidGetPinValue+0xb6>
    2984:	55 95       	asr	r21
    2986:	47 95       	ror	r20
    2988:	8a 95       	dec	r24
    298a:	e2 f7       	brpl	.-8      	; 0x2984 <MDIO_voidGetPinValue+0xb2>
    298c:	ca 01       	movw	r24, r20
    298e:	81 70       	andi	r24, 0x01	; 1
    2990:	ec 81       	ldd	r30, Y+4	; 0x04
    2992:	fd 81       	ldd	r31, Y+5	; 0x05
    2994:	80 83       	st	Z, r24
								break;
							/*****************************/
						default: break;
}
}
    2996:	27 96       	adiw	r28, 0x07	; 7
    2998:	0f b6       	in	r0, 0x3f	; 63
    299a:	f8 94       	cli
    299c:	de bf       	out	0x3e, r29	; 62
    299e:	0f be       	out	0x3f, r0	; 63
    29a0:	cd bf       	out	0x3d, r28	; 61
    29a2:	cf 91       	pop	r28
    29a4:	df 91       	pop	r29
    29a6:	08 95       	ret

000029a8 <MDIO_voidTogglePinValue>:

void MDIO_voidTogglePinValue(Pin_t copy_enPin)
{
    29a8:	df 93       	push	r29
    29aa:	cf 93       	push	r28
    29ac:	00 d0       	rcall	.+0      	; 0x29ae <MDIO_voidTogglePinValue+0x6>
    29ae:	00 d0       	rcall	.+0      	; 0x29b0 <MDIO_voidTogglePinValue+0x8>
    29b0:	0f 92       	push	r0
    29b2:	cd b7       	in	r28, 0x3d	; 61
    29b4:	de b7       	in	r29, 0x3e	; 62
    29b6:	8b 83       	std	Y+3, r24	; 0x03
					u8 Local_u8port= copy_enPin /10; //1-4
    29b8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ba:	9a e0       	ldi	r25, 0x0A	; 10
    29bc:	69 2f       	mov	r22, r25
    29be:	0e 94 07 31 	call	0x620e	; 0x620e <__udivmodqi4>
    29c2:	8a 83       	std	Y+2, r24	; 0x02
					u8 Local_u8pin= copy_enPin % 10; //0-7
    29c4:	8b 81       	ldd	r24, Y+3	; 0x03
    29c6:	9a e0       	ldi	r25, 0x0A	; 10
    29c8:	69 2f       	mov	r22, r25
    29ca:	0e 94 07 31 	call	0x620e	; 0x620e <__udivmodqi4>
    29ce:	89 2f       	mov	r24, r25
    29d0:	89 83       	std	Y+1, r24	; 0x01
switch(Local_u8port)
    29d2:	8a 81       	ldd	r24, Y+2	; 0x02
    29d4:	28 2f       	mov	r18, r24
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	3d 83       	std	Y+5, r19	; 0x05
    29da:	2c 83       	std	Y+4, r18	; 0x04
    29dc:	8c 81       	ldd	r24, Y+4	; 0x04
    29de:	9d 81       	ldd	r25, Y+5	; 0x05
    29e0:	82 30       	cpi	r24, 0x02	; 2
    29e2:	91 05       	cpc	r25, r1
    29e4:	51 f1       	breq	.+84     	; 0x2a3a <MDIO_voidTogglePinValue+0x92>
    29e6:	2c 81       	ldd	r18, Y+4	; 0x04
    29e8:	3d 81       	ldd	r19, Y+5	; 0x05
    29ea:	23 30       	cpi	r18, 0x03	; 3
    29ec:	31 05       	cpc	r19, r1
    29ee:	34 f4       	brge	.+12     	; 0x29fc <MDIO_voidTogglePinValue+0x54>
    29f0:	8c 81       	ldd	r24, Y+4	; 0x04
    29f2:	9d 81       	ldd	r25, Y+5	; 0x05
    29f4:	81 30       	cpi	r24, 0x01	; 1
    29f6:	91 05       	cpc	r25, r1
    29f8:	61 f0       	breq	.+24     	; 0x2a12 <MDIO_voidTogglePinValue+0x6a>
    29fa:	5a c0       	rjmp	.+180    	; 0x2ab0 <MDIO_voidTogglePinValue+0x108>
    29fc:	2c 81       	ldd	r18, Y+4	; 0x04
    29fe:	3d 81       	ldd	r19, Y+5	; 0x05
    2a00:	23 30       	cpi	r18, 0x03	; 3
    2a02:	31 05       	cpc	r19, r1
    2a04:	71 f1       	breq	.+92     	; 0x2a62 <MDIO_voidTogglePinValue+0xba>
    2a06:	8c 81       	ldd	r24, Y+4	; 0x04
    2a08:	9d 81       	ldd	r25, Y+5	; 0x05
    2a0a:	84 30       	cpi	r24, 0x04	; 4
    2a0c:	91 05       	cpc	r25, r1
    2a0e:	e9 f1       	breq	.+122    	; 0x2a8a <MDIO_voidTogglePinValue+0xe2>
    2a10:	4f c0       	rjmp	.+158    	; 0x2ab0 <MDIO_voidTogglePinValue+0x108>
{
case PORTA:
	TOG_BIT(PRTA_REG,Local_u8pin);
    2a12:	ab e3       	ldi	r26, 0x3B	; 59
    2a14:	b0 e0       	ldi	r27, 0x00	; 0
    2a16:	eb e3       	ldi	r30, 0x3B	; 59
    2a18:	f0 e0       	ldi	r31, 0x00	; 0
    2a1a:	80 81       	ld	r24, Z
    2a1c:	48 2f       	mov	r20, r24
    2a1e:	89 81       	ldd	r24, Y+1	; 0x01
    2a20:	28 2f       	mov	r18, r24
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	81 e0       	ldi	r24, 0x01	; 1
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	02 2e       	mov	r0, r18
    2a2a:	02 c0       	rjmp	.+4      	; 0x2a30 <MDIO_voidTogglePinValue+0x88>
    2a2c:	88 0f       	add	r24, r24
    2a2e:	99 1f       	adc	r25, r25
    2a30:	0a 94       	dec	r0
    2a32:	e2 f7       	brpl	.-8      	; 0x2a2c <MDIO_voidTogglePinValue+0x84>
    2a34:	84 27       	eor	r24, r20
    2a36:	8c 93       	st	X, r24
    2a38:	3b c0       	rjmp	.+118    	; 0x2ab0 <MDIO_voidTogglePinValue+0x108>
	break;
case PORTB:
	TOG_BIT(PRTB_REG,Local_u8pin);
    2a3a:	a8 e3       	ldi	r26, 0x38	; 56
    2a3c:	b0 e0       	ldi	r27, 0x00	; 0
    2a3e:	e8 e3       	ldi	r30, 0x38	; 56
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	80 81       	ld	r24, Z
    2a44:	48 2f       	mov	r20, r24
    2a46:	89 81       	ldd	r24, Y+1	; 0x01
    2a48:	28 2f       	mov	r18, r24
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	81 e0       	ldi	r24, 0x01	; 1
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	02 2e       	mov	r0, r18
    2a52:	02 c0       	rjmp	.+4      	; 0x2a58 <MDIO_voidTogglePinValue+0xb0>
    2a54:	88 0f       	add	r24, r24
    2a56:	99 1f       	adc	r25, r25
    2a58:	0a 94       	dec	r0
    2a5a:	e2 f7       	brpl	.-8      	; 0x2a54 <MDIO_voidTogglePinValue+0xac>
    2a5c:	84 27       	eor	r24, r20
    2a5e:	8c 93       	st	X, r24
    2a60:	27 c0       	rjmp	.+78     	; 0x2ab0 <MDIO_voidTogglePinValue+0x108>
	break;
case PORTC:
	TOG_BIT(PRTC_REG,Local_u8pin);
    2a62:	a5 e3       	ldi	r26, 0x35	; 53
    2a64:	b0 e0       	ldi	r27, 0x00	; 0
    2a66:	e5 e3       	ldi	r30, 0x35	; 53
    2a68:	f0 e0       	ldi	r31, 0x00	; 0
    2a6a:	80 81       	ld	r24, Z
    2a6c:	48 2f       	mov	r20, r24
    2a6e:	89 81       	ldd	r24, Y+1	; 0x01
    2a70:	28 2f       	mov	r18, r24
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	81 e0       	ldi	r24, 0x01	; 1
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	02 2e       	mov	r0, r18
    2a7a:	02 c0       	rjmp	.+4      	; 0x2a80 <MDIO_voidTogglePinValue+0xd8>
    2a7c:	88 0f       	add	r24, r24
    2a7e:	99 1f       	adc	r25, r25
    2a80:	0a 94       	dec	r0
    2a82:	e2 f7       	brpl	.-8      	; 0x2a7c <MDIO_voidTogglePinValue+0xd4>
    2a84:	84 27       	eor	r24, r20
    2a86:	8c 93       	st	X, r24
    2a88:	13 c0       	rjmp	.+38     	; 0x2ab0 <MDIO_voidTogglePinValue+0x108>
	break;
case PORTD:
	TOG_BIT(PRTD_REG,Local_u8pin);
    2a8a:	a2 e3       	ldi	r26, 0x32	; 50
    2a8c:	b0 e0       	ldi	r27, 0x00	; 0
    2a8e:	e2 e3       	ldi	r30, 0x32	; 50
    2a90:	f0 e0       	ldi	r31, 0x00	; 0
    2a92:	80 81       	ld	r24, Z
    2a94:	48 2f       	mov	r20, r24
    2a96:	89 81       	ldd	r24, Y+1	; 0x01
    2a98:	28 2f       	mov	r18, r24
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	02 2e       	mov	r0, r18
    2aa2:	02 c0       	rjmp	.+4      	; 0x2aa8 <MDIO_voidTogglePinValue+0x100>
    2aa4:	88 0f       	add	r24, r24
    2aa6:	99 1f       	adc	r25, r25
    2aa8:	0a 94       	dec	r0
    2aaa:	e2 f7       	brpl	.-8      	; 0x2aa4 <MDIO_voidTogglePinValue+0xfc>
    2aac:	84 27       	eor	r24, r20
    2aae:	8c 93       	st	X, r24
	break;

}
}
    2ab0:	0f 90       	pop	r0
    2ab2:	0f 90       	pop	r0
    2ab4:	0f 90       	pop	r0
    2ab6:	0f 90       	pop	r0
    2ab8:	0f 90       	pop	r0
    2aba:	cf 91       	pop	r28
    2abc:	df 91       	pop	r29
    2abe:	08 95       	ret

00002ac0 <MDIO_voidGetPortValue>:



void MDIO_voidGetPortValue(Pin_t copy_enPort,u8 * ptrPortValue)
{
    2ac0:	df 93       	push	r29
    2ac2:	cf 93       	push	r28
    2ac4:	00 d0       	rcall	.+0      	; 0x2ac6 <MDIO_voidGetPortValue+0x6>
    2ac6:	00 d0       	rcall	.+0      	; 0x2ac8 <MDIO_voidGetPortValue+0x8>
    2ac8:	00 d0       	rcall	.+0      	; 0x2aca <MDIO_voidGetPortValue+0xa>
    2aca:	cd b7       	in	r28, 0x3d	; 61
    2acc:	de b7       	in	r29, 0x3e	; 62
    2ace:	8a 83       	std	Y+2, r24	; 0x02
    2ad0:	7c 83       	std	Y+4, r23	; 0x04
    2ad2:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8port= copy_enPort /10; //1-4
    2ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad6:	9a e0       	ldi	r25, 0x0A	; 10
    2ad8:	69 2f       	mov	r22, r25
    2ada:	0e 94 07 31 	call	0x620e	; 0x620e <__udivmodqi4>
    2ade:	89 83       	std	Y+1, r24	; 0x01
			//	u8 Local_u8pin= copy_enPort % 10; //0-7

				switch(Local_u8port)
    2ae0:	89 81       	ldd	r24, Y+1	; 0x01
    2ae2:	28 2f       	mov	r18, r24
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	3e 83       	std	Y+6, r19	; 0x06
    2ae8:	2d 83       	std	Y+5, r18	; 0x05
    2aea:	8d 81       	ldd	r24, Y+5	; 0x05
    2aec:	9e 81       	ldd	r25, Y+6	; 0x06
    2aee:	82 30       	cpi	r24, 0x02	; 2
    2af0:	91 05       	cpc	r25, r1
    2af2:	e9 f0       	breq	.+58     	; 0x2b2e <MDIO_voidGetPortValue+0x6e>
    2af4:	2d 81       	ldd	r18, Y+5	; 0x05
    2af6:	3e 81       	ldd	r19, Y+6	; 0x06
    2af8:	23 30       	cpi	r18, 0x03	; 3
    2afa:	31 05       	cpc	r19, r1
    2afc:	34 f4       	brge	.+12     	; 0x2b0a <MDIO_voidGetPortValue+0x4a>
    2afe:	8d 81       	ldd	r24, Y+5	; 0x05
    2b00:	9e 81       	ldd	r25, Y+6	; 0x06
    2b02:	81 30       	cpi	r24, 0x01	; 1
    2b04:	91 05       	cpc	r25, r1
    2b06:	61 f0       	breq	.+24     	; 0x2b20 <MDIO_voidGetPortValue+0x60>
    2b08:	26 c0       	rjmp	.+76     	; 0x2b56 <MDIO_voidGetPortValue+0x96>
    2b0a:	2d 81       	ldd	r18, Y+5	; 0x05
    2b0c:	3e 81       	ldd	r19, Y+6	; 0x06
    2b0e:	23 30       	cpi	r18, 0x03	; 3
    2b10:	31 05       	cpc	r19, r1
    2b12:	a1 f0       	breq	.+40     	; 0x2b3c <MDIO_voidGetPortValue+0x7c>
    2b14:	8d 81       	ldd	r24, Y+5	; 0x05
    2b16:	9e 81       	ldd	r25, Y+6	; 0x06
    2b18:	84 30       	cpi	r24, 0x04	; 4
    2b1a:	91 05       	cpc	r25, r1
    2b1c:	b1 f0       	breq	.+44     	; 0x2b4a <MDIO_voidGetPortValue+0x8a>
    2b1e:	1b c0       	rjmp	.+54     	; 0x2b56 <MDIO_voidGetPortValue+0x96>
					{
					case PORTA:
						* ptrPortValue = PRTA_REG;
    2b20:	eb e3       	ldi	r30, 0x3B	; 59
    2b22:	f0 e0       	ldi	r31, 0x00	; 0
    2b24:	80 81       	ld	r24, Z
    2b26:	eb 81       	ldd	r30, Y+3	; 0x03
    2b28:	fc 81       	ldd	r31, Y+4	; 0x04
    2b2a:	80 83       	st	Z, r24
    2b2c:	14 c0       	rjmp	.+40     	; 0x2b56 <MDIO_voidGetPortValue+0x96>
						break;
						/*****************************/
					case PORTB:
											* ptrPortValue = PRTB_REG;
    2b2e:	e8 e3       	ldi	r30, 0x38	; 56
    2b30:	f0 e0       	ldi	r31, 0x00	; 0
    2b32:	80 81       	ld	r24, Z
    2b34:	eb 81       	ldd	r30, Y+3	; 0x03
    2b36:	fc 81       	ldd	r31, Y+4	; 0x04
    2b38:	80 83       	st	Z, r24
    2b3a:	0d c0       	rjmp	.+26     	; 0x2b56 <MDIO_voidGetPortValue+0x96>
											break;
							/*****************************/
					case PORTC:
											* ptrPortValue = PRTC_REG;
    2b3c:	e5 e3       	ldi	r30, 0x35	; 53
    2b3e:	f0 e0       	ldi	r31, 0x00	; 0
    2b40:	80 81       	ld	r24, Z
    2b42:	eb 81       	ldd	r30, Y+3	; 0x03
    2b44:	fc 81       	ldd	r31, Y+4	; 0x04
    2b46:	80 83       	st	Z, r24
    2b48:	06 c0       	rjmp	.+12     	; 0x2b56 <MDIO_voidGetPortValue+0x96>
											break;
							/*****************************/
					case PORTD:
											* ptrPortValue = PRTD_REG;
    2b4a:	e2 e3       	ldi	r30, 0x32	; 50
    2b4c:	f0 e0       	ldi	r31, 0x00	; 0
    2b4e:	80 81       	ld	r24, Z
    2b50:	eb 81       	ldd	r30, Y+3	; 0x03
    2b52:	fc 81       	ldd	r31, Y+4	; 0x04
    2b54:	80 83       	st	Z, r24
							/*****************************/
						default: break;

}

}
    2b56:	26 96       	adiw	r28, 0x06	; 6
    2b58:	0f b6       	in	r0, 0x3f	; 63
    2b5a:	f8 94       	cli
    2b5c:	de bf       	out	0x3e, r29	; 62
    2b5e:	0f be       	out	0x3f, r0	; 63
    2b60:	cd bf       	out	0x3d, r28	; 61
    2b62:	cf 91       	pop	r28
    2b64:	df 91       	pop	r29
    2b66:	08 95       	ret

00002b68 <M_ADC_void_Init>:
	return adcValue;
}
*/

void M_ADC_void_Init(u8 copy_u8presclaer, u8 copy_vref)
{/*
    2b68:	df 93       	push	r29
    2b6a:	cf 93       	push	r28
    2b6c:	00 d0       	rcall	.+0      	; 0x2b6e <M_ADC_void_Init+0x6>
    2b6e:	cd b7       	in	r28, 0x3d	; 61
    2b70:	de b7       	in	r29, 0x3e	; 62
    2b72:	89 83       	std	Y+1, r24	; 0x01
    2b74:	6a 83       	std	Y+2, r22	; 0x02
			SET_BIT(ADMUX_REG,REFS1);
	break;
	default:
		*/

ADMUX_REG|=(copy_vref<<6);
    2b76:	a7 e2       	ldi	r26, 0x27	; 39
    2b78:	b0 e0       	ldi	r27, 0x00	; 0
    2b7a:	e7 e2       	ldi	r30, 0x27	; 39
    2b7c:	f0 e0       	ldi	r31, 0x00	; 0
    2b7e:	80 81       	ld	r24, Z
    2b80:	28 2f       	mov	r18, r24
    2b82:	8a 81       	ldd	r24, Y+2	; 0x02
    2b84:	88 2f       	mov	r24, r24
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	00 24       	eor	r0, r0
    2b8a:	96 95       	lsr	r25
    2b8c:	87 95       	ror	r24
    2b8e:	07 94       	ror	r0
    2b90:	96 95       	lsr	r25
    2b92:	87 95       	ror	r24
    2b94:	07 94       	ror	r0
    2b96:	98 2f       	mov	r25, r24
    2b98:	80 2d       	mov	r24, r0
    2b9a:	82 2b       	or	r24, r18
    2b9c:	8c 93       	st	X, r24
if(copy_u8presclaer<=7&&copy_u8presclaer>=0){
    2b9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ba0:	88 30       	cpi	r24, 0x08	; 8
    2ba2:	40 f4       	brcc	.+16     	; 0x2bb4 <M_ADC_void_Init+0x4c>

	ADCSRA_REG|=(copy_u8presclaer);
    2ba4:	a6 e2       	ldi	r26, 0x26	; 38
    2ba6:	b0 e0       	ldi	r27, 0x00	; 0
    2ba8:	e6 e2       	ldi	r30, 0x26	; 38
    2baa:	f0 e0       	ldi	r31, 0x00	; 0
    2bac:	90 81       	ld	r25, Z
    2bae:	89 81       	ldd	r24, Y+1	; 0x01
    2bb0:	89 2b       	or	r24, r25
    2bb2:	8c 93       	st	X, r24
}


//Enable ADC
SET_BIT(ADCSRA_REG,ADEN);
    2bb4:	a6 e2       	ldi	r26, 0x26	; 38
    2bb6:	b0 e0       	ldi	r27, 0x00	; 0
    2bb8:	e6 e2       	ldi	r30, 0x26	; 38
    2bba:	f0 e0       	ldi	r31, 0x00	; 0
    2bbc:	80 81       	ld	r24, Z
    2bbe:	80 68       	ori	r24, 0x80	; 128
    2bc0:	8c 93       	st	X, r24
//Start conversion
SET_BIT(ADCSRA_REG,ADSC);
    2bc2:	a6 e2       	ldi	r26, 0x26	; 38
    2bc4:	b0 e0       	ldi	r27, 0x00	; 0
    2bc6:	e6 e2       	ldi	r30, 0x26	; 38
    2bc8:	f0 e0       	ldi	r31, 0x00	; 0
    2bca:	80 81       	ld	r24, Z
    2bcc:	80 64       	ori	r24, 0x40	; 64
    2bce:	8c 93       	st	X, r24
//Auto Trig
#if(CONVERSION_MODE==FREE_RUNNING_MODE)

SET_BIT(ADCSRA_REG,ADATE);
    2bd0:	a6 e2       	ldi	r26, 0x26	; 38
    2bd2:	b0 e0       	ldi	r27, 0x00	; 0
    2bd4:	e6 e2       	ldi	r30, 0x26	; 38
    2bd6:	f0 e0       	ldi	r31, 0x00	; 0
    2bd8:	80 81       	ld	r24, Z
    2bda:	80 62       	ori	r24, 0x20	; 32
    2bdc:	8c 93       	st	X, r24



#endif
}
    2bde:	0f 90       	pop	r0
    2be0:	0f 90       	pop	r0
    2be2:	cf 91       	pop	r28
    2be4:	df 91       	pop	r29
    2be6:	08 95       	ret

00002be8 <M_ADC_u16_adcRead>:
u16 M_ADC_u16_adcRead(u8 copy_u8Channel )
{
    2be8:	df 93       	push	r29
    2bea:	cf 93       	push	r28
    2bec:	cd b7       	in	r28, 0x3d	; 61
    2bee:	de b7       	in	r29, 0x3e	; 62
    2bf0:	27 97       	sbiw	r28, 0x07	; 7
    2bf2:	0f b6       	in	r0, 0x3f	; 63
    2bf4:	f8 94       	cli
    2bf6:	de bf       	out	0x3e, r29	; 62
    2bf8:	0f be       	out	0x3f, r0	; 63
    2bfa:	cd bf       	out	0x3d, r28	; 61
    2bfc:	8f 83       	std	Y+7, r24	; 0x07

ADMUX_REG|=(copy_u8Channel);
    2bfe:	a7 e2       	ldi	r26, 0x27	; 39
    2c00:	b0 e0       	ldi	r27, 0x00	; 0
    2c02:	e7 e2       	ldi	r30, 0x27	; 39
    2c04:	f0 e0       	ldi	r31, 0x00	; 0
    2c06:	90 81       	ld	r25, Z
    2c08:	8f 81       	ldd	r24, Y+7	; 0x07
    2c0a:	89 2b       	or	r24, r25
    2c0c:	8c 93       	st	X, r24
u32 ADCvalue=0,low,high;
low=(u32)ADCL_REG;
high=(u32)(ADCH_REG*256);
ADCvalue=low+high;
*/
u16 ADCvalue=0,low,high;
    2c0e:	1e 82       	std	Y+6, r1	; 0x06
    2c10:	1d 82       	std	Y+5, r1	; 0x05
low=ADCL_REG;
    2c12:	e4 e2       	ldi	r30, 0x24	; 36
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	80 81       	ld	r24, Z
    2c18:	88 2f       	mov	r24, r24
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	9c 83       	std	Y+4, r25	; 0x04
    2c1e:	8b 83       	std	Y+3, r24	; 0x03
high=ADCH_REG<<8;
    2c20:	e5 e2       	ldi	r30, 0x25	; 37
    2c22:	f0 e0       	ldi	r31, 0x00	; 0
    2c24:	80 81       	ld	r24, Z
    2c26:	88 2f       	mov	r24, r24
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	98 2f       	mov	r25, r24
    2c2c:	88 27       	eor	r24, r24
    2c2e:	9a 83       	std	Y+2, r25	; 0x02
    2c30:	89 83       	std	Y+1, r24	; 0x01
ADCvalue=low+high;
    2c32:	2b 81       	ldd	r18, Y+3	; 0x03
    2c34:	3c 81       	ldd	r19, Y+4	; 0x04
    2c36:	89 81       	ldd	r24, Y+1	; 0x01
    2c38:	9a 81       	ldd	r25, Y+2	; 0x02
    2c3a:	82 0f       	add	r24, r18
    2c3c:	93 1f       	adc	r25, r19
    2c3e:	9e 83       	std	Y+6, r25	; 0x06
    2c40:	8d 83       	std	Y+5, r24	; 0x05
return ADCvalue;
    2c42:	8d 81       	ldd	r24, Y+5	; 0x05
    2c44:	9e 81       	ldd	r25, Y+6	; 0x06

}
    2c46:	27 96       	adiw	r28, 0x07	; 7
    2c48:	0f b6       	in	r0, 0x3f	; 63
    2c4a:	f8 94       	cli
    2c4c:	de bf       	out	0x3e, r29	; 62
    2c4e:	0f be       	out	0x3f, r0	; 63
    2c50:	cd bf       	out	0x3d, r28	; 61
    2c52:	cf 91       	pop	r28
    2c54:	df 91       	pop	r29
    2c56:	08 95       	ret

00002c58 <HLED_enInit>:
#include "HLED_int.h"


/****************/
ErrorState_t HLED_enInit(u8 copy_u8LedId)
{
    2c58:	df 93       	push	r29
    2c5a:	cf 93       	push	r28
    2c5c:	00 d0       	rcall	.+0      	; 0x2c5e <HLED_enInit+0x6>
    2c5e:	00 d0       	rcall	.+0      	; 0x2c60 <HLED_enInit+0x8>
    2c60:	cd b7       	in	r28, 0x3d	; 61
    2c62:	de b7       	in	r29, 0x3e	; 62
    2c64:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_State=SUCCES;
    2c66:	82 e0       	ldi	r24, 0x02	; 2
    2c68:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8LedId)
    2c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6c:	28 2f       	mov	r18, r24
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	3c 83       	std	Y+4, r19	; 0x04
    2c72:	2b 83       	std	Y+3, r18	; 0x03
    2c74:	8b 81       	ldd	r24, Y+3	; 0x03
    2c76:	9c 81       	ldd	r25, Y+4	; 0x04
    2c78:	82 30       	cpi	r24, 0x02	; 2
    2c7a:	91 05       	cpc	r25, r1
    2c7c:	79 f0       	breq	.+30     	; 0x2c9c <HLED_enInit+0x44>
    2c7e:	2b 81       	ldd	r18, Y+3	; 0x03
    2c80:	3c 81       	ldd	r19, Y+4	; 0x04
    2c82:	23 30       	cpi	r18, 0x03	; 3
    2c84:	31 05       	cpc	r19, r1
    2c86:	79 f0       	breq	.+30     	; 0x2ca6 <HLED_enInit+0x4e>
    2c88:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c8c:	81 30       	cpi	r24, 0x01	; 1
    2c8e:	91 05       	cpc	r25, r1
    2c90:	79 f4       	brne	.+30     	; 0x2cb0 <HLED_enInit+0x58>
	{
	case HLED_RED_ID:
		MDIO_SetPinDirection(HLED_RED_LED_PIN,OUTPUT);
    2c92:	8e e1       	ldi	r24, 0x1E	; 30
    2c94:	61 e0       	ldi	r22, 0x01	; 1
    2c96:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_SetPinDirection>
    2c9a:	0b c0       	rjmp	.+22     	; 0x2cb2 <HLED_enInit+0x5a>
		break;
		case HLED_BLUE_ID:
		MDIO_SetPinDirection(HLED_BLUE_LED_PIN,OUTPUT);
    2c9c:	80 e2       	ldi	r24, 0x20	; 32
    2c9e:	61 e0       	ldi	r22, 0x01	; 1
    2ca0:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_SetPinDirection>
    2ca4:	06 c0       	rjmp	.+12     	; 0x2cb2 <HLED_enInit+0x5a>
		break;
		case HLED_GRN_ID:
		MDIO_SetPinDirection(HLED_GRN_LED_PIN,OUTPUT);
    2ca6:	8f e1       	ldi	r24, 0x1F	; 31
    2ca8:	61 e0       	ldi	r22, 0x01	; 1
    2caa:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_SetPinDirection>
    2cae:	01 c0       	rjmp	.+2      	; 0x2cb2 <HLED_enInit+0x5a>
		break;
default:
	Local_State=OUT_OF_RANGE;
    2cb0:	19 82       	std	Y+1, r1	; 0x01
	}
return Local_State;
    2cb2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cb4:	0f 90       	pop	r0
    2cb6:	0f 90       	pop	r0
    2cb8:	0f 90       	pop	r0
    2cba:	0f 90       	pop	r0
    2cbc:	cf 91       	pop	r28
    2cbe:	df 91       	pop	r29
    2cc0:	08 95       	ret

00002cc2 <HLED_enSetON>:
/****************/
ErrorState_t HLED_enSetON(u8 copy_u8LedId)
{
    2cc2:	df 93       	push	r29
    2cc4:	cf 93       	push	r28
    2cc6:	00 d0       	rcall	.+0      	; 0x2cc8 <HLED_enSetON+0x6>
    2cc8:	00 d0       	rcall	.+0      	; 0x2cca <HLED_enSetON+0x8>
    2cca:	cd b7       	in	r28, 0x3d	; 61
    2ccc:	de b7       	in	r29, 0x3e	; 62
    2cce:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_State=SUCCES;
    2cd0:	82 e0       	ldi	r24, 0x02	; 2
    2cd2:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8LedId)
    2cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd6:	28 2f       	mov	r18, r24
    2cd8:	30 e0       	ldi	r19, 0x00	; 0
    2cda:	3c 83       	std	Y+4, r19	; 0x04
    2cdc:	2b 83       	std	Y+3, r18	; 0x03
    2cde:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce2:	82 30       	cpi	r24, 0x02	; 2
    2ce4:	91 05       	cpc	r25, r1
    2ce6:	79 f0       	breq	.+30     	; 0x2d06 <HLED_enSetON+0x44>
    2ce8:	2b 81       	ldd	r18, Y+3	; 0x03
    2cea:	3c 81       	ldd	r19, Y+4	; 0x04
    2cec:	23 30       	cpi	r18, 0x03	; 3
    2cee:	31 05       	cpc	r19, r1
    2cf0:	79 f0       	breq	.+30     	; 0x2d10 <HLED_enSetON+0x4e>
    2cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf4:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf6:	81 30       	cpi	r24, 0x01	; 1
    2cf8:	91 05       	cpc	r25, r1
    2cfa:	79 f4       	brne	.+30     	; 0x2d1a <HLED_enSetON+0x58>
	{
	case HLED_RED_ID:
#if(HLED_RED_LED_DIR==HLED_LED_FORWARD)
		MDIO_voidSetPinValue(HLED_RED_LED_PIN,HIGH);
    2cfc:	8e e1       	ldi	r24, 0x1E	; 30
    2cfe:	61 e0       	ldi	r22, 0x01	; 1
    2d00:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
    2d04:	0b c0       	rjmp	.+22     	; 0x2d1c <HLED_enSetON+0x5a>
	#error  ("wrong led Red Direction")
#endif
		break;
	case HLED_BLUE_ID:
#if(HLED_BLUE_LED_DIR==HLED_LED_FORWARD)
		MDIO_voidSetPinValue(HLED_BLUE_LED_PIN,HIGH);
    2d06:	80 e2       	ldi	r24, 0x20	; 32
    2d08:	61 e0       	ldi	r22, 0x01	; 1
    2d0a:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
    2d0e:	06 c0       	rjmp	.+12     	; 0x2d1c <HLED_enSetON+0x5a>
		break;


	case HLED_GRN_ID:
#if(HLED_GRN_LED_DIR==HLED_LED_FORWARD)
		MDIO_voidSetPinValue(HLED_GRN_LED_PIN,HIGH);
    2d10:	8f e1       	ldi	r24, 0x1F	; 31
    2d12:	61 e0       	ldi	r22, 0x01	; 1
    2d14:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
    2d18:	01 c0       	rjmp	.+2      	; 0x2d1c <HLED_enSetON+0x5a>
	#error  ("wrong led Red Direction")
#endif

break;
default:
	Local_State=OUT_OF_RANGE;
    2d1a:	19 82       	std	Y+1, r1	; 0x01
	}
return Local_State;
    2d1c:	89 81       	ldd	r24, Y+1	; 0x01

}
    2d1e:	0f 90       	pop	r0
    2d20:	0f 90       	pop	r0
    2d22:	0f 90       	pop	r0
    2d24:	0f 90       	pop	r0
    2d26:	cf 91       	pop	r28
    2d28:	df 91       	pop	r29
    2d2a:	08 95       	ret

00002d2c <HLED_enSetOFF>:
/****************/
ErrorState_t HLED_enSetOFF(u8 copy_u8LedId)
{
    2d2c:	df 93       	push	r29
    2d2e:	cf 93       	push	r28
    2d30:	00 d0       	rcall	.+0      	; 0x2d32 <HLED_enSetOFF+0x6>
    2d32:	00 d0       	rcall	.+0      	; 0x2d34 <HLED_enSetOFF+0x8>
    2d34:	cd b7       	in	r28, 0x3d	; 61
    2d36:	de b7       	in	r29, 0x3e	; 62
    2d38:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_State=SUCCES;
    2d3a:	82 e0       	ldi	r24, 0x02	; 2
    2d3c:	89 83       	std	Y+1, r24	; 0x01
		switch(copy_u8LedId)
    2d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d40:	28 2f       	mov	r18, r24
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	3c 83       	std	Y+4, r19	; 0x04
    2d46:	2b 83       	std	Y+3, r18	; 0x03
    2d48:	8b 81       	ldd	r24, Y+3	; 0x03
    2d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d4c:	82 30       	cpi	r24, 0x02	; 2
    2d4e:	91 05       	cpc	r25, r1
    2d50:	79 f0       	breq	.+30     	; 0x2d70 <HLED_enSetOFF+0x44>
    2d52:	2b 81       	ldd	r18, Y+3	; 0x03
    2d54:	3c 81       	ldd	r19, Y+4	; 0x04
    2d56:	23 30       	cpi	r18, 0x03	; 3
    2d58:	31 05       	cpc	r19, r1
    2d5a:	79 f0       	breq	.+30     	; 0x2d7a <HLED_enSetOFF+0x4e>
    2d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d60:	81 30       	cpi	r24, 0x01	; 1
    2d62:	91 05       	cpc	r25, r1
    2d64:	79 f4       	brne	.+30     	; 0x2d84 <HLED_enSetOFF+0x58>
		{
		case HLED_RED_ID:
	#if(HLED_RED_LED_DIR==HLED_LED_FORWARD)
			MDIO_voidSetPinValue(HLED_RED_LED_PIN,LOW);
    2d66:	8e e1       	ldi	r24, 0x1E	; 30
    2d68:	60 e0       	ldi	r22, 0x00	; 0
    2d6a:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
    2d6e:	0b c0       	rjmp	.+22     	; 0x2d86 <HLED_enSetOFF+0x5a>
		#error  ("wrong led Red Direction")
	#endif
			break;
		case HLED_BLUE_ID:
	#if(HLED_BLUE_LED_DIR==HLED_LED_FORWARD)
			MDIO_voidSetPinValue(HLED_BLUE_LED_PIN,LOW);
    2d70:	80 e2       	ldi	r24, 0x20	; 32
    2d72:	60 e0       	ldi	r22, 0x00	; 0
    2d74:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
    2d78:	06 c0       	rjmp	.+12     	; 0x2d86 <HLED_enSetOFF+0x5a>
			break;


		case HLED_GRN_ID:
	#if(HLED_GRN_LED_DIR==HLED_LED_FORWARD)
			MDIO_voidSetPinValue(HLED_GRN_LED_PIN,LOW);
    2d7a:	8f e1       	ldi	r24, 0x1F	; 31
    2d7c:	60 e0       	ldi	r22, 0x00	; 0
    2d7e:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
    2d82:	01 c0       	rjmp	.+2      	; 0x2d86 <HLED_enSetOFF+0x5a>
		#error  ("wrong led Red Direction")
	#endif

	break;
	default:
		Local_State=OUT_OF_RANGE;
    2d84:	19 82       	std	Y+1, r1	; 0x01
		}
	return Local_State;
    2d86:	89 81       	ldd	r24, Y+1	; 0x01


}
    2d88:	0f 90       	pop	r0
    2d8a:	0f 90       	pop	r0
    2d8c:	0f 90       	pop	r0
    2d8e:	0f 90       	pop	r0
    2d90:	cf 91       	pop	r28
    2d92:	df 91       	pop	r29
    2d94:	08 95       	ret

00002d96 <HLED_enToggle>:
ErrorState_t HLED_enToggle(u8 copy_u8LedId)
{
    2d96:	df 93       	push	r29
    2d98:	cf 93       	push	r28
    2d9a:	00 d0       	rcall	.+0      	; 0x2d9c <HLED_enToggle+0x6>
    2d9c:	00 d0       	rcall	.+0      	; 0x2d9e <HLED_enToggle+0x8>
    2d9e:	cd b7       	in	r28, 0x3d	; 61
    2da0:	de b7       	in	r29, 0x3e	; 62
    2da2:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_State=SUCCES;
    2da4:	82 e0       	ldi	r24, 0x02	; 2
    2da6:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8LedId)
    2da8:	8a 81       	ldd	r24, Y+2	; 0x02
    2daa:	28 2f       	mov	r18, r24
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	3c 83       	std	Y+4, r19	; 0x04
    2db0:	2b 83       	std	Y+3, r18	; 0x03
    2db2:	8b 81       	ldd	r24, Y+3	; 0x03
    2db4:	9c 81       	ldd	r25, Y+4	; 0x04
    2db6:	82 30       	cpi	r24, 0x02	; 2
    2db8:	91 05       	cpc	r25, r1
    2dba:	71 f0       	breq	.+28     	; 0x2dd8 <HLED_enToggle+0x42>
    2dbc:	2b 81       	ldd	r18, Y+3	; 0x03
    2dbe:	3c 81       	ldd	r19, Y+4	; 0x04
    2dc0:	23 30       	cpi	r18, 0x03	; 3
    2dc2:	31 05       	cpc	r19, r1
    2dc4:	69 f0       	breq	.+26     	; 0x2de0 <HLED_enToggle+0x4a>
    2dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2dca:	81 30       	cpi	r24, 0x01	; 1
    2dcc:	91 05       	cpc	r25, r1
    2dce:	61 f4       	brne	.+24     	; 0x2de8 <HLED_enToggle+0x52>
	{
	case HLED_RED_ID:
		MDIO_voidTogglePinValue(HLED_RED_LED_PIN);
    2dd0:	8e e1       	ldi	r24, 0x1E	; 30
    2dd2:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <MDIO_voidTogglePinValue>
    2dd6:	09 c0       	rjmp	.+18     	; 0x2dea <HLED_enToggle+0x54>
		break;
	case HLED_BLUE_ID:
		MDIO_voidTogglePinValue(HLED_BLUE_LED_PIN);
    2dd8:	80 e2       	ldi	r24, 0x20	; 32
    2dda:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <MDIO_voidTogglePinValue>
    2dde:	05 c0       	rjmp	.+10     	; 0x2dea <HLED_enToggle+0x54>
		break;

	case HLED_GRN_ID:
		MDIO_voidTogglePinValue(HLED_GRN_LED_PIN);
    2de0:	8f e1       	ldi	r24, 0x1F	; 31
    2de2:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <MDIO_voidTogglePinValue>
    2de6:	01 c0       	rjmp	.+2      	; 0x2dea <HLED_enToggle+0x54>
		break;
default:
	Local_State=OUT_OF_RANGE;
    2de8:	19 82       	std	Y+1, r1	; 0x01

	}
return Local_State;
    2dea:	89 81       	ldd	r24, Y+1	; 0x01

}
    2dec:	0f 90       	pop	r0
    2dee:	0f 90       	pop	r0
    2df0:	0f 90       	pop	r0
    2df2:	0f 90       	pop	r0
    2df4:	cf 91       	pop	r28
    2df6:	df 91       	pop	r29
    2df8:	08 95       	ret

00002dfa <OVF_INC>:
#include "HULTRASONIC_config.h"
#include "HULTRASONIC_int.h"


	void OVF_INC(void)
		{
    2dfa:	df 93       	push	r29
    2dfc:	cf 93       	push	r28
    2dfe:	cd b7       	in	r28, 0x3d	; 61
    2e00:	de b7       	in	r29, 0x3e	; 62
			//MDIO_voidTogglePinValue(PC6);
			g_T1OVFint++;
    2e02:	80 91 1e 02 	lds	r24, 0x021E
    2e06:	90 91 1f 02 	lds	r25, 0x021F
    2e0a:	01 96       	adiw	r24, 0x01	; 1
    2e0c:	90 93 1f 02 	sts	0x021F, r25
    2e10:	80 93 1e 02 	sts	0x021E, r24

		}
    2e14:	cf 91       	pop	r28
    2e16:	df 91       	pop	r29
    2e18:	08 95       	ret

00002e1a <ICU_HW>:

		void ICU_HW(void) // fn to check if ICU work and read the signal
		{	//MDIO_voidTogglePinValue(PC5);
    2e1a:	df 93       	push	r29
    2e1c:	cf 93       	push	r28
    2e1e:	cd b7       	in	r28, 0x3d	; 61
    2e20:	de b7       	in	r29, 0x3e	; 62
			//if(flag!=0){
			if(g_State == STATE1)
    2e22:	80 91 a5 01 	lds	r24, 0x01A5
    2e26:	81 30       	cpi	r24, 0x01	; 1
    2e28:	99 f4       	brne	.+38     	; 0x2e50 <ICU_HW+0x36>
			{
				MTIMER1_ICU_enRead(&g_Reading1);
    2e2a:	8a e1       	ldi	r24, 0x1A	; 26
    2e2c:	92 e0       	ldi	r25, 0x02	; 2
    2e2e:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <MTIMER1_ICU_enRead>
				MTIMER1_ICU_enSetTrigger(MTIMER1_ICU_FALL_EDGE_TRIG);
    2e32:	80 e0       	ldi	r24, 0x00	; 0
    2e34:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <MTIMER1_ICU_enSetTrigger>
				g_T1OVFint_Multfact1=g_T1OVFint;
    2e38:	80 91 1e 02 	lds	r24, 0x021E
    2e3c:	90 91 1f 02 	lds	r25, 0x021F
    2e40:	90 93 21 02 	sts	0x0221, r25
    2e44:	80 93 20 02 	sts	0x0220, r24
				g_State = STATE2;
    2e48:	82 e0       	ldi	r24, 0x02	; 2
    2e4a:	80 93 a5 01 	sts	0x01A5, r24
    2e4e:	1a c0       	rjmp	.+52     	; 0x2e84 <ICU_HW+0x6a>
			}
			else if(g_State == STATE2)
    2e50:	80 91 a5 01 	lds	r24, 0x01A5
    2e54:	82 30       	cpi	r24, 0x02	; 2
    2e56:	b1 f4       	brne	.+44     	; 0x2e84 <ICU_HW+0x6a>
			{
				// change trigger

				MTIMER1_ICU_enRead(&g_Reading2);
    2e58:	8c e1       	ldi	r24, 0x1C	; 28
    2e5a:	92 e0       	ldi	r25, 0x02	; 2
    2e5c:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <MTIMER1_ICU_enRead>
				g_T1OVFint_Multfact2=g_T1OVFint;
    2e60:	80 91 1e 02 	lds	r24, 0x021E
    2e64:	90 91 1f 02 	lds	r25, 0x021F
    2e68:	90 93 23 02 	sts	0x0223, r25
    2e6c:	80 93 22 02 	sts	0x0222, r24

				g_State = STATE3;
    2e70:	83 e0       	ldi	r24, 0x03	; 3
    2e72:	80 93 a5 01 	sts	0x01A5, r24

				MTIMER1_ICU_enSetTrigger(MTIMER1_ICU_RAIS_EDGE_TRIG);
    2e76:	81 e0       	ldi	r24, 0x01	; 1
    2e78:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <MTIMER1_ICU_enSetTrigger>
				g_T1OVFint=0;
    2e7c:	10 92 1f 02 	sts	0x021F, r1
    2e80:	10 92 1e 02 	sts	0x021E, r1

			//MTIMER1_enStop();

			//MTIMER1_ICU_enDisableInt()		}
			}
		}
    2e84:	cf 91       	pop	r28
    2e86:	df 91       	pop	r29
    2e88:	08 95       	ret

00002e8a <HUltrasonic_enInit>:



ErrorState_t HUltrasonic_enInit(Pin_t copy_enTrigPin)
{
    2e8a:	df 93       	push	r29
    2e8c:	cf 93       	push	r28
    2e8e:	0f 92       	push	r0
    2e90:	cd b7       	in	r28, 0x3d	; 61
    2e92:	de b7       	in	r29, 0x3e	; 62
    2e94:	89 83       	std	Y+1, r24	; 0x01



	//	MDIO_SetPinDirection(PC5, OUTPUT);
	//	MDIO_SetPinDirection(PC6, OUTPUT);
		MDIO_SetPinDirection(ECHO_PIN, INPUT);//echo
    2e96:	8e e2       	ldi	r24, 0x2E	; 46
    2e98:	60 e0       	ldi	r22, 0x00	; 0
    2e9a:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_SetPinDirection>
		MDIO_SetPinDirection(copy_enTrigPin, OUTPUT);//trig
    2e9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ea0:	61 e0       	ldi	r22, 0x01	; 1
    2ea2:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_SetPinDirection>
		MTIMER1_enInit();
    2ea6:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <MTIMER1_enInit>
		MTIMER1_ICU_enInit();
    2eaa:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <MTIMER1_ICU_enInit>
		MTIMER1_ICU_enEnableInt();
    2eae:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <MTIMER1_ICU_enEnableInt>
		MTIMER1_OVF_enEnableInt();
    2eb2:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <MTIMER1_OVF_enEnableInt>
		MTIMER1_enStart();
    2eb6:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <MTIMER1_enStart>
		MGIE_enEnable();
    2eba:	0e 94 48 10 	call	0x2090	; 0x2090 <MGIE_enEnable>
		MTIMER1_ICU_enSetCallBack(MTIME1_CAPT_ID,ICU_HW);
    2ebe:	2d e0       	ldi	r18, 0x0D	; 13
    2ec0:	37 e1       	ldi	r19, 0x17	; 23
    2ec2:	80 e0       	ldi	r24, 0x00	; 0
    2ec4:	b9 01       	movw	r22, r18
    2ec6:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <MTIMER1_ICU_enSetCallBack>
		MTIMER1_ICU_enSetCallBack(MTIME1_OVF_ID,OVF_INC);
    2eca:	2d ef       	ldi	r18, 0xFD	; 253
    2ecc:	36 e1       	ldi	r19, 0x16	; 22
    2ece:	81 e0       	ldi	r24, 0x01	; 1
    2ed0:	b9 01       	movw	r22, r18
    2ed2:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <MTIMER1_ICU_enSetCallBack>
return SUCCES;
    2ed6:	82 e0       	ldi	r24, 0x02	; 2
}
    2ed8:	0f 90       	pop	r0
    2eda:	cf 91       	pop	r28
    2edc:	df 91       	pop	r29
    2ede:	08 95       	ret

00002ee0 <HUltrasonic_enStartReading>:

ErrorState_t HUltrasonic_enStartReading(Pin_t copy_enTrigPin,u32 * copy_u8Distance)
{
    2ee0:	ef 92       	push	r14
    2ee2:	ff 92       	push	r15
    2ee4:	0f 93       	push	r16
    2ee6:	1f 93       	push	r17
    2ee8:	df 93       	push	r29
    2eea:	cf 93       	push	r28
    2eec:	cd b7       	in	r28, 0x3d	; 61
    2eee:	de b7       	in	r29, 0x3e	; 62
    2ef0:	c3 54       	subi	r28, 0x43	; 67
    2ef2:	d0 40       	sbci	r29, 0x00	; 0
    2ef4:	0f b6       	in	r0, 0x3f	; 63
    2ef6:	f8 94       	cli
    2ef8:	de bf       	out	0x3e, r29	; 62
    2efa:	0f be       	out	0x3f, r0	; 63
    2efc:	cd bf       	out	0x3d, r28	; 61
    2efe:	fe 01       	movw	r30, r28
    2f00:	ef 5b       	subi	r30, 0xBF	; 191
    2f02:	ff 4f       	sbci	r31, 0xFF	; 255
    2f04:	80 83       	st	Z, r24
    2f06:	fe 01       	movw	r30, r28
    2f08:	ee 5b       	subi	r30, 0xBE	; 190
    2f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0c:	71 83       	std	Z+1, r23	; 0x01
    2f0e:	60 83       	st	Z, r22
    2f10:	80 e0       	ldi	r24, 0x00	; 0
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	a0 ea       	ldi	r26, 0xA0	; 160
    2f16:	b1 e4       	ldi	r27, 0x41	; 65
    2f18:	8d a7       	std	Y+45, r24	; 0x2d
    2f1a:	9e a7       	std	Y+46, r25	; 0x2e
    2f1c:	af a7       	std	Y+47, r26	; 0x2f
    2f1e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2f20:	6d a5       	ldd	r22, Y+45	; 0x2d
    2f22:	7e a5       	ldd	r23, Y+46	; 0x2e
    2f24:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f26:	98 a9       	ldd	r25, Y+48	; 0x30
    2f28:	2b ea       	ldi	r18, 0xAB	; 171
    2f2a:	3a ea       	ldi	r19, 0xAA	; 170
    2f2c:	4a ea       	ldi	r20, 0xAA	; 170
    2f2e:	50 e4       	ldi	r21, 0x40	; 64
    2f30:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    2f34:	dc 01       	movw	r26, r24
    2f36:	cb 01       	movw	r24, r22
    2f38:	89 a7       	std	Y+41, r24	; 0x29
    2f3a:	9a a7       	std	Y+42, r25	; 0x2a
    2f3c:	ab a7       	std	Y+43, r26	; 0x2b
    2f3e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2f40:	69 a5       	ldd	r22, Y+41	; 0x29
    2f42:	7a a5       	ldd	r23, Y+42	; 0x2a
    2f44:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f46:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	40 e8       	ldi	r20, 0x80	; 128
    2f4e:	5f e3       	ldi	r21, 0x3F	; 63
    2f50:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    2f54:	88 23       	and	r24, r24
    2f56:	1c f4       	brge	.+6      	; 0x2f5e <HUltrasonic_enStartReading+0x7e>
		__ticks = 1;
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	88 a7       	std	Y+40, r24	; 0x28
    2f5c:	91 c0       	rjmp	.+290    	; 0x3080 <HUltrasonic_enStartReading+0x1a0>
	else if (__tmp > 255)
    2f5e:	69 a5       	ldd	r22, Y+41	; 0x29
    2f60:	7a a5       	ldd	r23, Y+42	; 0x2a
    2f62:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f64:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f66:	20 e0       	ldi	r18, 0x00	; 0
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	4f e7       	ldi	r20, 0x7F	; 127
    2f6c:	53 e4       	ldi	r21, 0x43	; 67
    2f6e:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    2f72:	18 16       	cp	r1, r24
    2f74:	0c f0       	brlt	.+2      	; 0x2f78 <HUltrasonic_enStartReading+0x98>
    2f76:	7b c0       	rjmp	.+246    	; 0x306e <HUltrasonic_enStartReading+0x18e>
	{
		_delay_ms(__us / 1000.0);
    2f78:	6d a5       	ldd	r22, Y+45	; 0x2d
    2f7a:	7e a5       	ldd	r23, Y+46	; 0x2e
    2f7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f7e:	98 a9       	ldd	r25, Y+48	; 0x30
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	4a e7       	ldi	r20, 0x7A	; 122
    2f86:	54 e4       	ldi	r21, 0x44	; 68
    2f88:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__divsf3>
    2f8c:	dc 01       	movw	r26, r24
    2f8e:	cb 01       	movw	r24, r22
    2f90:	8c a3       	std	Y+36, r24	; 0x24
    2f92:	9d a3       	std	Y+37, r25	; 0x25
    2f94:	ae a3       	std	Y+38, r26	; 0x26
    2f96:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f98:	6c a1       	ldd	r22, Y+36	; 0x24
    2f9a:	7d a1       	ldd	r23, Y+37	; 0x25
    2f9c:	8e a1       	ldd	r24, Y+38	; 0x26
    2f9e:	9f a1       	ldd	r25, Y+39	; 0x27
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	4a e7       	ldi	r20, 0x7A	; 122
    2fa6:	55 e4       	ldi	r21, 0x45	; 69
    2fa8:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    2fac:	dc 01       	movw	r26, r24
    2fae:	cb 01       	movw	r24, r22
    2fb0:	88 a3       	std	Y+32, r24	; 0x20
    2fb2:	99 a3       	std	Y+33, r25	; 0x21
    2fb4:	aa a3       	std	Y+34, r26	; 0x22
    2fb6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2fb8:	68 a1       	ldd	r22, Y+32	; 0x20
    2fba:	79 a1       	ldd	r23, Y+33	; 0x21
    2fbc:	8a a1       	ldd	r24, Y+34	; 0x22
    2fbe:	9b a1       	ldd	r25, Y+35	; 0x23
    2fc0:	20 e0       	ldi	r18, 0x00	; 0
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	40 e8       	ldi	r20, 0x80	; 128
    2fc6:	5f e3       	ldi	r21, 0x3F	; 63
    2fc8:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    2fcc:	88 23       	and	r24, r24
    2fce:	2c f4       	brge	.+10     	; 0x2fda <HUltrasonic_enStartReading+0xfa>
		__ticks = 1;
    2fd0:	81 e0       	ldi	r24, 0x01	; 1
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	9f 8f       	std	Y+31, r25	; 0x1f
    2fd6:	8e 8f       	std	Y+30, r24	; 0x1e
    2fd8:	3f c0       	rjmp	.+126    	; 0x3058 <HUltrasonic_enStartReading+0x178>
	else if (__tmp > 65535)
    2fda:	68 a1       	ldd	r22, Y+32	; 0x20
    2fdc:	79 a1       	ldd	r23, Y+33	; 0x21
    2fde:	8a a1       	ldd	r24, Y+34	; 0x22
    2fe0:	9b a1       	ldd	r25, Y+35	; 0x23
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	3f ef       	ldi	r19, 0xFF	; 255
    2fe6:	4f e7       	ldi	r20, 0x7F	; 127
    2fe8:	57 e4       	ldi	r21, 0x47	; 71
    2fea:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    2fee:	18 16       	cp	r1, r24
    2ff0:	4c f5       	brge	.+82     	; 0x3044 <HUltrasonic_enStartReading+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ff2:	6c a1       	ldd	r22, Y+36	; 0x24
    2ff4:	7d a1       	ldd	r23, Y+37	; 0x25
    2ff6:	8e a1       	ldd	r24, Y+38	; 0x26
    2ff8:	9f a1       	ldd	r25, Y+39	; 0x27
    2ffa:	20 e0       	ldi	r18, 0x00	; 0
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	40 e2       	ldi	r20, 0x20	; 32
    3000:	51 e4       	ldi	r21, 0x41	; 65
    3002:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    3006:	dc 01       	movw	r26, r24
    3008:	cb 01       	movw	r24, r22
    300a:	bc 01       	movw	r22, r24
    300c:	cd 01       	movw	r24, r26
    300e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3012:	dc 01       	movw	r26, r24
    3014:	cb 01       	movw	r24, r22
    3016:	9f 8f       	std	Y+31, r25	; 0x1f
    3018:	8e 8f       	std	Y+30, r24	; 0x1e
    301a:	0f c0       	rjmp	.+30     	; 0x303a <HUltrasonic_enStartReading+0x15a>
    301c:	80 e9       	ldi	r24, 0x90	; 144
    301e:	91 e0       	ldi	r25, 0x01	; 1
    3020:	9d 8f       	std	Y+29, r25	; 0x1d
    3022:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3024:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3026:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3028:	01 97       	sbiw	r24, 0x01	; 1
    302a:	f1 f7       	brne	.-4      	; 0x3028 <HUltrasonic_enStartReading+0x148>
    302c:	9d 8f       	std	Y+29, r25	; 0x1d
    302e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3030:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3032:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3034:	01 97       	sbiw	r24, 0x01	; 1
    3036:	9f 8f       	std	Y+31, r25	; 0x1f
    3038:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    303a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    303c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    303e:	00 97       	sbiw	r24, 0x00	; 0
    3040:	69 f7       	brne	.-38     	; 0x301c <HUltrasonic_enStartReading+0x13c>
    3042:	24 c0       	rjmp	.+72     	; 0x308c <HUltrasonic_enStartReading+0x1ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3044:	68 a1       	ldd	r22, Y+32	; 0x20
    3046:	79 a1       	ldd	r23, Y+33	; 0x21
    3048:	8a a1       	ldd	r24, Y+34	; 0x22
    304a:	9b a1       	ldd	r25, Y+35	; 0x23
    304c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3050:	dc 01       	movw	r26, r24
    3052:	cb 01       	movw	r24, r22
    3054:	9f 8f       	std	Y+31, r25	; 0x1f
    3056:	8e 8f       	std	Y+30, r24	; 0x1e
    3058:	8e 8d       	ldd	r24, Y+30	; 0x1e
    305a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    305c:	9b 8f       	std	Y+27, r25	; 0x1b
    305e:	8a 8f       	std	Y+26, r24	; 0x1a
    3060:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3062:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3064:	01 97       	sbiw	r24, 0x01	; 1
    3066:	f1 f7       	brne	.-4      	; 0x3064 <HUltrasonic_enStartReading+0x184>
    3068:	9b 8f       	std	Y+27, r25	; 0x1b
    306a:	8a 8f       	std	Y+26, r24	; 0x1a
    306c:	0f c0       	rjmp	.+30     	; 0x308c <HUltrasonic_enStartReading+0x1ac>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    306e:	69 a5       	ldd	r22, Y+41	; 0x29
    3070:	7a a5       	ldd	r23, Y+42	; 0x2a
    3072:	8b a5       	ldd	r24, Y+43	; 0x2b
    3074:	9c a5       	ldd	r25, Y+44	; 0x2c
    3076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    307a:	dc 01       	movw	r26, r24
    307c:	cb 01       	movw	r24, r22
    307e:	88 a7       	std	Y+40, r24	; 0x28
    3080:	88 a5       	ldd	r24, Y+40	; 0x28
    3082:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3084:	89 8d       	ldd	r24, Y+25	; 0x19
    3086:	8a 95       	dec	r24
    3088:	f1 f7       	brne	.-4      	; 0x3086 <HUltrasonic_enStartReading+0x1a6>
    308a:	89 8f       	std	Y+25, r24	; 0x19

	    _delay_us(20);
	MDIO_voidSetPinValue(copy_enTrigPin, HIGH);
    308c:	fe 01       	movw	r30, r28
    308e:	ef 5b       	subi	r30, 0xBF	; 191
    3090:	ff 4f       	sbci	r31, 0xFF	; 255
    3092:	80 81       	ld	r24, Z
    3094:	61 e0       	ldi	r22, 0x01	; 1
    3096:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
    309a:	80 e0       	ldi	r24, 0x00	; 0
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	a0 ea       	ldi	r26, 0xA0	; 160
    30a0:	b1 e4       	ldi	r27, 0x41	; 65
    30a2:	8d 8b       	std	Y+21, r24	; 0x15
    30a4:	9e 8b       	std	Y+22, r25	; 0x16
    30a6:	af 8b       	std	Y+23, r26	; 0x17
    30a8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    30aa:	6d 89       	ldd	r22, Y+21	; 0x15
    30ac:	7e 89       	ldd	r23, Y+22	; 0x16
    30ae:	8f 89       	ldd	r24, Y+23	; 0x17
    30b0:	98 8d       	ldd	r25, Y+24	; 0x18
    30b2:	2b ea       	ldi	r18, 0xAB	; 171
    30b4:	3a ea       	ldi	r19, 0xAA	; 170
    30b6:	4a ea       	ldi	r20, 0xAA	; 170
    30b8:	50 e4       	ldi	r21, 0x40	; 64
    30ba:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	89 8b       	std	Y+17, r24	; 0x11
    30c4:	9a 8b       	std	Y+18, r25	; 0x12
    30c6:	ab 8b       	std	Y+19, r26	; 0x13
    30c8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    30ca:	69 89       	ldd	r22, Y+17	; 0x11
    30cc:	7a 89       	ldd	r23, Y+18	; 0x12
    30ce:	8b 89       	ldd	r24, Y+19	; 0x13
    30d0:	9c 89       	ldd	r25, Y+20	; 0x14
    30d2:	20 e0       	ldi	r18, 0x00	; 0
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	40 e8       	ldi	r20, 0x80	; 128
    30d8:	5f e3       	ldi	r21, 0x3F	; 63
    30da:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    30de:	88 23       	and	r24, r24
    30e0:	1c f4       	brge	.+6      	; 0x30e8 <HUltrasonic_enStartReading+0x208>
		__ticks = 1;
    30e2:	81 e0       	ldi	r24, 0x01	; 1
    30e4:	88 8b       	std	Y+16, r24	; 0x10
    30e6:	91 c0       	rjmp	.+290    	; 0x320a <HUltrasonic_enStartReading+0x32a>
	else if (__tmp > 255)
    30e8:	69 89       	ldd	r22, Y+17	; 0x11
    30ea:	7a 89       	ldd	r23, Y+18	; 0x12
    30ec:	8b 89       	ldd	r24, Y+19	; 0x13
    30ee:	9c 89       	ldd	r25, Y+20	; 0x14
    30f0:	20 e0       	ldi	r18, 0x00	; 0
    30f2:	30 e0       	ldi	r19, 0x00	; 0
    30f4:	4f e7       	ldi	r20, 0x7F	; 127
    30f6:	53 e4       	ldi	r21, 0x43	; 67
    30f8:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    30fc:	18 16       	cp	r1, r24
    30fe:	0c f0       	brlt	.+2      	; 0x3102 <HUltrasonic_enStartReading+0x222>
    3100:	7b c0       	rjmp	.+246    	; 0x31f8 <HUltrasonic_enStartReading+0x318>
	{
		_delay_ms(__us / 1000.0);
    3102:	6d 89       	ldd	r22, Y+21	; 0x15
    3104:	7e 89       	ldd	r23, Y+22	; 0x16
    3106:	8f 89       	ldd	r24, Y+23	; 0x17
    3108:	98 8d       	ldd	r25, Y+24	; 0x18
    310a:	20 e0       	ldi	r18, 0x00	; 0
    310c:	30 e0       	ldi	r19, 0x00	; 0
    310e:	4a e7       	ldi	r20, 0x7A	; 122
    3110:	54 e4       	ldi	r21, 0x44	; 68
    3112:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__divsf3>
    3116:	dc 01       	movw	r26, r24
    3118:	cb 01       	movw	r24, r22
    311a:	8c 87       	std	Y+12, r24	; 0x0c
    311c:	9d 87       	std	Y+13, r25	; 0x0d
    311e:	ae 87       	std	Y+14, r26	; 0x0e
    3120:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3122:	6c 85       	ldd	r22, Y+12	; 0x0c
    3124:	7d 85       	ldd	r23, Y+13	; 0x0d
    3126:	8e 85       	ldd	r24, Y+14	; 0x0e
    3128:	9f 85       	ldd	r25, Y+15	; 0x0f
    312a:	20 e0       	ldi	r18, 0x00	; 0
    312c:	30 e0       	ldi	r19, 0x00	; 0
    312e:	4a e7       	ldi	r20, 0x7A	; 122
    3130:	55 e4       	ldi	r21, 0x45	; 69
    3132:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    3136:	dc 01       	movw	r26, r24
    3138:	cb 01       	movw	r24, r22
    313a:	88 87       	std	Y+8, r24	; 0x08
    313c:	99 87       	std	Y+9, r25	; 0x09
    313e:	aa 87       	std	Y+10, r26	; 0x0a
    3140:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3142:	68 85       	ldd	r22, Y+8	; 0x08
    3144:	79 85       	ldd	r23, Y+9	; 0x09
    3146:	8a 85       	ldd	r24, Y+10	; 0x0a
    3148:	9b 85       	ldd	r25, Y+11	; 0x0b
    314a:	20 e0       	ldi	r18, 0x00	; 0
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	40 e8       	ldi	r20, 0x80	; 128
    3150:	5f e3       	ldi	r21, 0x3F	; 63
    3152:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    3156:	88 23       	and	r24, r24
    3158:	2c f4       	brge	.+10     	; 0x3164 <HUltrasonic_enStartReading+0x284>
		__ticks = 1;
    315a:	81 e0       	ldi	r24, 0x01	; 1
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	9f 83       	std	Y+7, r25	; 0x07
    3160:	8e 83       	std	Y+6, r24	; 0x06
    3162:	3f c0       	rjmp	.+126    	; 0x31e2 <HUltrasonic_enStartReading+0x302>
	else if (__tmp > 65535)
    3164:	68 85       	ldd	r22, Y+8	; 0x08
    3166:	79 85       	ldd	r23, Y+9	; 0x09
    3168:	8a 85       	ldd	r24, Y+10	; 0x0a
    316a:	9b 85       	ldd	r25, Y+11	; 0x0b
    316c:	20 e0       	ldi	r18, 0x00	; 0
    316e:	3f ef       	ldi	r19, 0xFF	; 255
    3170:	4f e7       	ldi	r20, 0x7F	; 127
    3172:	57 e4       	ldi	r21, 0x47	; 71
    3174:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    3178:	18 16       	cp	r1, r24
    317a:	4c f5       	brge	.+82     	; 0x31ce <HUltrasonic_enStartReading+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    317c:	6c 85       	ldd	r22, Y+12	; 0x0c
    317e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3180:	8e 85       	ldd	r24, Y+14	; 0x0e
    3182:	9f 85       	ldd	r25, Y+15	; 0x0f
    3184:	20 e0       	ldi	r18, 0x00	; 0
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	40 e2       	ldi	r20, 0x20	; 32
    318a:	51 e4       	ldi	r21, 0x41	; 65
    318c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    3190:	dc 01       	movw	r26, r24
    3192:	cb 01       	movw	r24, r22
    3194:	bc 01       	movw	r22, r24
    3196:	cd 01       	movw	r24, r26
    3198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    319c:	dc 01       	movw	r26, r24
    319e:	cb 01       	movw	r24, r22
    31a0:	9f 83       	std	Y+7, r25	; 0x07
    31a2:	8e 83       	std	Y+6, r24	; 0x06
    31a4:	0f c0       	rjmp	.+30     	; 0x31c4 <HUltrasonic_enStartReading+0x2e4>
    31a6:	80 e9       	ldi	r24, 0x90	; 144
    31a8:	91 e0       	ldi	r25, 0x01	; 1
    31aa:	9d 83       	std	Y+5, r25	; 0x05
    31ac:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31ae:	8c 81       	ldd	r24, Y+4	; 0x04
    31b0:	9d 81       	ldd	r25, Y+5	; 0x05
    31b2:	01 97       	sbiw	r24, 0x01	; 1
    31b4:	f1 f7       	brne	.-4      	; 0x31b2 <HUltrasonic_enStartReading+0x2d2>
    31b6:	9d 83       	std	Y+5, r25	; 0x05
    31b8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ba:	8e 81       	ldd	r24, Y+6	; 0x06
    31bc:	9f 81       	ldd	r25, Y+7	; 0x07
    31be:	01 97       	sbiw	r24, 0x01	; 1
    31c0:	9f 83       	std	Y+7, r25	; 0x07
    31c2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31c4:	8e 81       	ldd	r24, Y+6	; 0x06
    31c6:	9f 81       	ldd	r25, Y+7	; 0x07
    31c8:	00 97       	sbiw	r24, 0x00	; 0
    31ca:	69 f7       	brne	.-38     	; 0x31a6 <HUltrasonic_enStartReading+0x2c6>
    31cc:	24 c0       	rjmp	.+72     	; 0x3216 <HUltrasonic_enStartReading+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ce:	68 85       	ldd	r22, Y+8	; 0x08
    31d0:	79 85       	ldd	r23, Y+9	; 0x09
    31d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    31d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    31d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31da:	dc 01       	movw	r26, r24
    31dc:	cb 01       	movw	r24, r22
    31de:	9f 83       	std	Y+7, r25	; 0x07
    31e0:	8e 83       	std	Y+6, r24	; 0x06
    31e2:	8e 81       	ldd	r24, Y+6	; 0x06
    31e4:	9f 81       	ldd	r25, Y+7	; 0x07
    31e6:	9b 83       	std	Y+3, r25	; 0x03
    31e8:	8a 83       	std	Y+2, r24	; 0x02
    31ea:	8a 81       	ldd	r24, Y+2	; 0x02
    31ec:	9b 81       	ldd	r25, Y+3	; 0x03
    31ee:	01 97       	sbiw	r24, 0x01	; 1
    31f0:	f1 f7       	brne	.-4      	; 0x31ee <HUltrasonic_enStartReading+0x30e>
    31f2:	9b 83       	std	Y+3, r25	; 0x03
    31f4:	8a 83       	std	Y+2, r24	; 0x02
    31f6:	0f c0       	rjmp	.+30     	; 0x3216 <HUltrasonic_enStartReading+0x336>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    31f8:	69 89       	ldd	r22, Y+17	; 0x11
    31fa:	7a 89       	ldd	r23, Y+18	; 0x12
    31fc:	8b 89       	ldd	r24, Y+19	; 0x13
    31fe:	9c 89       	ldd	r25, Y+20	; 0x14
    3200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3204:	dc 01       	movw	r26, r24
    3206:	cb 01       	movw	r24, r22
    3208:	88 8b       	std	Y+16, r24	; 0x10
    320a:	88 89       	ldd	r24, Y+16	; 0x10
    320c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    320e:	89 81       	ldd	r24, Y+1	; 0x01
    3210:	8a 95       	dec	r24
    3212:	f1 f7       	brne	.-4      	; 0x3210 <HUltrasonic_enStartReading+0x330>
    3214:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(20);
	MDIO_voidSetPinValue(copy_enTrigPin,LOW);
    3216:	fe 01       	movw	r30, r28
    3218:	ef 5b       	subi	r30, 0xBF	; 191
    321a:	ff 4f       	sbci	r31, 0xFF	; 255
    321c:	80 81       	ld	r24, Z
    321e:	60 e0       	ldi	r22, 0x00	; 0
    3220:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	   // _delay_us(10);


	while(g_State != STATE3)
    3224:	80 91 a5 01 	lds	r24, 0x01A5
    3228:	83 30       	cpi	r24, 0x03	; 3
    322a:	e1 f7       	brne	.-8      	; 0x3224 <HUltrasonic_enStartReading+0x344>
		{

		}
		g_State=STATE1;
    322c:	81 e0       	ldi	r24, 0x01	; 1
    322e:	80 93 a5 01 	sts	0x01A5, r24

		u32 TimeTicks;
		//TimeTicks=((u32)g_Reading2+((u32)g_T1OVFint_Multfact2*OVF_VALUE))-((u32)g_Reading1+((u32)g_T1OVFint_Multfact1*OVF_VALUE));
		TimeTicks=(u32)g_Reading2-(u32)g_Reading1;
    3232:	80 91 1c 02 	lds	r24, 0x021C
    3236:	90 91 1d 02 	lds	r25, 0x021D
    323a:	9c 01       	movw	r18, r24
    323c:	40 e0       	ldi	r20, 0x00	; 0
    323e:	50 e0       	ldi	r21, 0x00	; 0
    3240:	80 91 1a 02 	lds	r24, 0x021A
    3244:	90 91 1b 02 	lds	r25, 0x021B
    3248:	cc 01       	movw	r24, r24
    324a:	a0 e0       	ldi	r26, 0x00	; 0
    324c:	b0 e0       	ldi	r27, 0x00	; 0
    324e:	79 01       	movw	r14, r18
    3250:	8a 01       	movw	r16, r20
    3252:	e8 1a       	sub	r14, r24
    3254:	f9 0a       	sbc	r15, r25
    3256:	0a 0b       	sbc	r16, r26
    3258:	1b 0b       	sbc	r17, r27
    325a:	d8 01       	movw	r26, r16
    325c:	c7 01       	movw	r24, r14
    325e:	fe 01       	movw	r30, r28
    3260:	fd 96       	adiw	r30, 0x3d	; 61
    3262:	80 83       	st	Z, r24
    3264:	91 83       	std	Z+1, r25	; 0x01
    3266:	a2 83       	std	Z+2, r26	; 0x02
    3268:	b3 83       	std	Z+3, r27	; 0x03


			f32 tickTime = PRESCALER1024/FCPU; //prescaler/FCPU
    326a:	80 e0       	ldi	r24, 0x00	; 0
    326c:	90 e0       	ldi	r25, 0x00	; 0
    326e:	a0 e8       	ldi	r26, 0x80	; 128
    3270:	b2 e4       	ldi	r27, 0x42	; 66
    3272:	89 af       	std	Y+57, r24	; 0x39
    3274:	9a af       	std	Y+58, r25	; 0x3a
    3276:	ab af       	std	Y+59, r26	; 0x3b
    3278:	bc af       	std	Y+60, r27	; 0x3c
	 	    f32	Time = (TimeTicks * tickTime)/1000000.0;//convert to micro
    327a:	fe 01       	movw	r30, r28
    327c:	fd 96       	adiw	r30, 0x3d	; 61
    327e:	60 81       	ld	r22, Z
    3280:	71 81       	ldd	r23, Z+1	; 0x01
    3282:	82 81       	ldd	r24, Z+2	; 0x02
    3284:	93 81       	ldd	r25, Z+3	; 0x03
    3286:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatunsisf>
    328a:	dc 01       	movw	r26, r24
    328c:	cb 01       	movw	r24, r22
    328e:	bc 01       	movw	r22, r24
    3290:	cd 01       	movw	r24, r26
    3292:	29 ad       	ldd	r18, Y+57	; 0x39
    3294:	3a ad       	ldd	r19, Y+58	; 0x3a
    3296:	4b ad       	ldd	r20, Y+59	; 0x3b
    3298:	5c ad       	ldd	r21, Y+60	; 0x3c
    329a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    329e:	dc 01       	movw	r26, r24
    32a0:	cb 01       	movw	r24, r22
    32a2:	bc 01       	movw	r22, r24
    32a4:	cd 01       	movw	r24, r26
    32a6:	20 e0       	ldi	r18, 0x00	; 0
    32a8:	34 e2       	ldi	r19, 0x24	; 36
    32aa:	44 e7       	ldi	r20, 0x74	; 116
    32ac:	59 e4       	ldi	r21, 0x49	; 73
    32ae:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__divsf3>
    32b2:	dc 01       	movw	r26, r24
    32b4:	cb 01       	movw	r24, r22
    32b6:	8d ab       	std	Y+53, r24	; 0x35
    32b8:	9e ab       	std	Y+54, r25	; 0x36
    32ba:	af ab       	std	Y+55, r26	; 0x37
    32bc:	b8 af       	std	Y+56, r27	; 0x38
			u32 Distance = ceil( SPEED_OF_SOUND*(Time/2));
    32be:	6d a9       	ldd	r22, Y+53	; 0x35
    32c0:	7e a9       	ldd	r23, Y+54	; 0x36
    32c2:	8f a9       	ldd	r24, Y+55	; 0x37
    32c4:	98 ad       	ldd	r25, Y+56	; 0x38
    32c6:	20 e0       	ldi	r18, 0x00	; 0
    32c8:	30 e0       	ldi	r19, 0x00	; 0
    32ca:	40 e0       	ldi	r20, 0x00	; 0
    32cc:	50 e4       	ldi	r21, 0x40	; 64
    32ce:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__divsf3>
    32d2:	dc 01       	movw	r26, r24
    32d4:	cb 01       	movw	r24, r22
    32d6:	bc 01       	movw	r22, r24
    32d8:	cd 01       	movw	r24, r26
    32da:	20 e0       	ldi	r18, 0x00	; 0
    32dc:	3c ef       	ldi	r19, 0xFC	; 252
    32de:	45 e0       	ldi	r20, 0x05	; 5
    32e0:	57 e4       	ldi	r21, 0x47	; 71
    32e2:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    32e6:	dc 01       	movw	r26, r24
    32e8:	cb 01       	movw	r24, r22
    32ea:	bc 01       	movw	r22, r24
    32ec:	cd 01       	movw	r24, r26
    32ee:	0e 94 ae 31 	call	0x635c	; 0x635c <ceil>
    32f2:	dc 01       	movw	r26, r24
    32f4:	cb 01       	movw	r24, r22
    32f6:	bc 01       	movw	r22, r24
    32f8:	cd 01       	movw	r24, r26
    32fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32fe:	dc 01       	movw	r26, r24
    3300:	cb 01       	movw	r24, r22
    3302:	89 ab       	std	Y+49, r24	; 0x31
    3304:	9a ab       	std	Y+50, r25	; 0x32
    3306:	ab ab       	std	Y+51, r26	; 0x33
    3308:	bc ab       	std	Y+52, r27	; 0x34
		if(Distance<=400&&Distance>=2){
    330a:	89 a9       	ldd	r24, Y+49	; 0x31
    330c:	9a a9       	ldd	r25, Y+50	; 0x32
    330e:	ab a9       	ldd	r26, Y+51	; 0x33
    3310:	bc a9       	ldd	r27, Y+52	; 0x34
    3312:	81 39       	cpi	r24, 0x91	; 145
    3314:	01 e0       	ldi	r16, 0x01	; 1
    3316:	90 07       	cpc	r25, r16
    3318:	00 e0       	ldi	r16, 0x00	; 0
    331a:	a0 07       	cpc	r26, r16
    331c:	00 e0       	ldi	r16, 0x00	; 0
    331e:	b0 07       	cpc	r27, r16
    3320:	b8 f4       	brcc	.+46     	; 0x3350 <HUltrasonic_enStartReading+0x470>
    3322:	89 a9       	ldd	r24, Y+49	; 0x31
    3324:	9a a9       	ldd	r25, Y+50	; 0x32
    3326:	ab a9       	ldd	r26, Y+51	; 0x33
    3328:	bc a9       	ldd	r27, Y+52	; 0x34
    332a:	82 30       	cpi	r24, 0x02	; 2
    332c:	91 05       	cpc	r25, r1
    332e:	a1 05       	cpc	r26, r1
    3330:	b1 05       	cpc	r27, r1
    3332:	70 f0       	brcs	.+28     	; 0x3350 <HUltrasonic_enStartReading+0x470>
			*copy_u8Distance=Distance;
    3334:	fe 01       	movw	r30, r28
    3336:	ee 5b       	subi	r30, 0xBE	; 190
    3338:	ff 4f       	sbci	r31, 0xFF	; 255
    333a:	01 90       	ld	r0, Z+
    333c:	f0 81       	ld	r31, Z
    333e:	e0 2d       	mov	r30, r0
    3340:	89 a9       	ldd	r24, Y+49	; 0x31
    3342:	9a a9       	ldd	r25, Y+50	; 0x32
    3344:	ab a9       	ldd	r26, Y+51	; 0x33
    3346:	bc a9       	ldd	r27, Y+52	; 0x34
    3348:	80 83       	st	Z, r24
    334a:	91 83       	std	Z+1, r25	; 0x01
    334c:	a2 83       	std	Z+2, r26	; 0x02
    334e:	b3 83       	std	Z+3, r27	; 0x03
		}
			g_Reading1=0;
    3350:	10 92 1b 02 	sts	0x021B, r1
    3354:	10 92 1a 02 	sts	0x021A, r1
			g_Reading2=0;
    3358:	10 92 1d 02 	sts	0x021D, r1
    335c:	10 92 1c 02 	sts	0x021C, r1

return SUCCES;
    3360:	82 e0       	ldi	r24, 0x02	; 2
}
    3362:	cd 5b       	subi	r28, 0xBD	; 189
    3364:	df 4f       	sbci	r29, 0xFF	; 255
    3366:	0f b6       	in	r0, 0x3f	; 63
    3368:	f8 94       	cli
    336a:	de bf       	out	0x3e, r29	; 62
    336c:	0f be       	out	0x3f, r0	; 63
    336e:	cd bf       	out	0x3d, r28	; 61
    3370:	cf 91       	pop	r28
    3372:	df 91       	pop	r29
    3374:	1f 91       	pop	r17
    3376:	0f 91       	pop	r16
    3378:	ff 90       	pop	r15
    337a:	ef 90       	pop	r14
    337c:	08 95       	ret

0000337e <HSSD_enInit>:
#include "HSSD_config.h"
#include "HSSD_int.h"


ErrorState_t HSSD_enInit(void)
{
    337e:	df 93       	push	r29
    3380:	cf 93       	push	r28
    3382:	cd b7       	in	r28, 0x3d	; 61
    3384:	de b7       	in	r29, 0x3e	; 62
	//Initialize all pins as output.
	MDIO_SetPinDirection(HSSD_LED_A_PIN, OUTPUT);
    3386:	8b e0       	ldi	r24, 0x0B	; 11
    3388:	61 e0       	ldi	r22, 0x01	; 1
    338a:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(HSSD_LED_B_PIN, OUTPUT);
    338e:	8c e0       	ldi	r24, 0x0C	; 12
    3390:	61 e0       	ldi	r22, 0x01	; 1
    3392:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(HSSD_LED_C_PIN, OUTPUT);
    3396:	8d e0       	ldi	r24, 0x0D	; 13
    3398:	61 e0       	ldi	r22, 0x01	; 1
    339a:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(HSSD_LED_D_PIN, OUTPUT);
    339e:	8e e0       	ldi	r24, 0x0E	; 14
    33a0:	61 e0       	ldi	r22, 0x01	; 1
    33a2:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(HSSD_LED_E_PIN, OUTPUT);
    33a6:	8f e0       	ldi	r24, 0x0F	; 15
    33a8:	61 e0       	ldi	r22, 0x01	; 1
    33aa:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(HSSD_LED_F_PIN, OUTPUT);
    33ae:	80 e1       	ldi	r24, 0x10	; 16
    33b0:	61 e0       	ldi	r22, 0x01	; 1
    33b2:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(HSSD_LED_G_PIN, OUTPUT);
    33b6:	81 e1       	ldi	r24, 0x11	; 17
    33b8:	61 e0       	ldi	r22, 0x01	; 1
    33ba:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(HSSD_LED_DP_PIN, OUTPUT);
    33be:	84 e1       	ldi	r24, 0x14	; 20
    33c0:	61 e0       	ldi	r22, 0x01	; 1
    33c2:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_SetPinDirection>
	//TO MAKE THE PORT CONFIGRABLE AS MUCH AS POSSIBLE
		MDIO_SetPinDirection(HSSD_EN1_PIN, OUTPUT);
    33c6:	84 e2       	ldi	r24, 0x24	; 36
    33c8:	61 e0       	ldi	r22, 0x01	; 1
    33ca:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_SetPinDirection>
		MDIO_SetPinDirection(HSSD_EN2_PIN, OUTPUT);
    33ce:	85 e2       	ldi	r24, 0x25	; 37
    33d0:	61 e0       	ldi	r22, 0x01	; 1
    33d2:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_SetPinDirection>
		return SUCCES;
    33d6:	82 e0       	ldi	r24, 0x02	; 2
}
    33d8:	cf 91       	pop	r28
    33da:	df 91       	pop	r29
    33dc:	08 95       	ret

000033de <HSSD_enDisplayNumber>:


ErrorState_t HSSD_enDisplayNumber(u8 copy_u8NUMBER)//00-99
{
    33de:	df 93       	push	r29
    33e0:	cf 93       	push	r28
    33e2:	cd b7       	in	r28, 0x3d	; 61
    33e4:	de b7       	in	r29, 0x3e	; 62
    33e6:	a6 97       	sbiw	r28, 0x26	; 38
    33e8:	0f b6       	in	r0, 0x3f	; 63
    33ea:	f8 94       	cli
    33ec:	de bf       	out	0x3e, r29	; 62
    33ee:	0f be       	out	0x3f, r0	; 63
    33f0:	cd bf       	out	0x3d, r28	; 61
    33f2:	8a a3       	std	Y+34, r24	; 0x22
	ErrorState_t Local_enState =SUCCES;
    33f4:	82 e0       	ldi	r24, 0x02	; 2
    33f6:	89 a3       	std	Y+33, r24	; 0x21
	if(copy_u8NUMBER>99)
    33f8:	8a a1       	ldd	r24, Y+34	; 0x22
    33fa:	84 36       	cpi	r24, 0x64	; 100
    33fc:	10 f0       	brcs	.+4      	; 0x3402 <HSSD_enDisplayNumber+0x24>
	{
		Local_enState =OUT_OF_RANGE;
    33fe:	19 a2       	std	Y+33, r1	; 0x21
    3400:	02 c4       	rjmp	.+2052   	; 0x3c06 <HSSD_enDisplayNumber+0x828>
	}//end if
	else
	{


u8 Local_u8Units =copy_u8NUMBER %10;
    3402:	8a a1       	ldd	r24, Y+34	; 0x22
    3404:	9a e0       	ldi	r25, 0x0A	; 10
    3406:	69 2f       	mov	r22, r25
    3408:	0e 94 07 31 	call	0x620e	; 0x620e <__udivmodqi4>
    340c:	89 2f       	mov	r24, r25
    340e:	88 a3       	std	Y+32, r24	; 0x20
u8 Local_u8Tens =copy_u8NUMBER /10;
    3410:	8a a1       	ldd	r24, Y+34	; 0x22
    3412:	9a e0       	ldi	r25, 0x0A	; 10
    3414:	69 2f       	mov	r22, r25
    3416:	0e 94 07 31 	call	0x620e	; 0x620e <__udivmodqi4>
    341a:	8f 8f       	std	Y+31, r24	; 0x1f
MDIO_voidSetPinValue(HSSD_LED_DP_PIN,LOW);
    341c:	84 e1       	ldi	r24, 0x14	; 20
    341e:	60 e0       	ldi	r22, 0x00	; 0
    3420:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
u16 i;
for(i=0;i<HSSD_DISPLAY_TIME;i++)
    3424:	1e 8e       	std	Y+30, r1	; 0x1e
    3426:	1d 8e       	std	Y+29, r1	; 0x1d
    3428:	e7 c3       	rjmp	.+1998   	; 0x3bf8 <HSSD_enDisplayNumber+0x81a>
{

switch(Local_u8Units)
    342a:	88 a1       	ldd	r24, Y+32	; 0x20
    342c:	28 2f       	mov	r18, r24
    342e:	30 e0       	ldi	r19, 0x00	; 0
    3430:	3e a3       	std	Y+38, r19	; 0x26
    3432:	2d a3       	std	Y+37, r18	; 0x25
    3434:	8d a1       	ldd	r24, Y+37	; 0x25
    3436:	9e a1       	ldd	r25, Y+38	; 0x26
    3438:	84 30       	cpi	r24, 0x04	; 4
    343a:	91 05       	cpc	r25, r1
    343c:	09 f4       	brne	.+2      	; 0x3440 <HSSD_enDisplayNumber+0x62>
    343e:	bb c0       	rjmp	.+374    	; 0x35b6 <HSSD_enDisplayNumber+0x1d8>
    3440:	2d a1       	ldd	r18, Y+37	; 0x25
    3442:	3e a1       	ldd	r19, Y+38	; 0x26
    3444:	25 30       	cpi	r18, 0x05	; 5
    3446:	31 05       	cpc	r19, r1
    3448:	ec f4       	brge	.+58     	; 0x3484 <HSSD_enDisplayNumber+0xa6>
    344a:	8d a1       	ldd	r24, Y+37	; 0x25
    344c:	9e a1       	ldd	r25, Y+38	; 0x26
    344e:	81 30       	cpi	r24, 0x01	; 1
    3450:	91 05       	cpc	r25, r1
    3452:	09 f4       	brne	.+2      	; 0x3456 <HSSD_enDisplayNumber+0x78>
    3454:	59 c0       	rjmp	.+178    	; 0x3508 <HSSD_enDisplayNumber+0x12a>
    3456:	2d a1       	ldd	r18, Y+37	; 0x25
    3458:	3e a1       	ldd	r19, Y+38	; 0x26
    345a:	22 30       	cpi	r18, 0x02	; 2
    345c:	31 05       	cpc	r19, r1
    345e:	2c f4       	brge	.+10     	; 0x346a <HSSD_enDisplayNumber+0x8c>
    3460:	8d a1       	ldd	r24, Y+37	; 0x25
    3462:	9e a1       	ldd	r25, Y+38	; 0x26
    3464:	00 97       	sbiw	r24, 0x00	; 0
    3466:	99 f1       	breq	.+102    	; 0x34ce <HSSD_enDisplayNumber+0xf0>
    3468:	53 c1       	rjmp	.+678    	; 0x3710 <HSSD_enDisplayNumber+0x332>
    346a:	2d a1       	ldd	r18, Y+37	; 0x25
    346c:	3e a1       	ldd	r19, Y+38	; 0x26
    346e:	22 30       	cpi	r18, 0x02	; 2
    3470:	31 05       	cpc	r19, r1
    3472:	09 f4       	brne	.+2      	; 0x3476 <HSSD_enDisplayNumber+0x98>
    3474:	66 c0       	rjmp	.+204    	; 0x3542 <HSSD_enDisplayNumber+0x164>
    3476:	8d a1       	ldd	r24, Y+37	; 0x25
    3478:	9e a1       	ldd	r25, Y+38	; 0x26
    347a:	83 30       	cpi	r24, 0x03	; 3
    347c:	91 05       	cpc	r25, r1
    347e:	09 f4       	brne	.+2      	; 0x3482 <HSSD_enDisplayNumber+0xa4>
    3480:	7d c0       	rjmp	.+250    	; 0x357c <HSSD_enDisplayNumber+0x19e>
    3482:	46 c1       	rjmp	.+652    	; 0x3710 <HSSD_enDisplayNumber+0x332>
    3484:	2d a1       	ldd	r18, Y+37	; 0x25
    3486:	3e a1       	ldd	r19, Y+38	; 0x26
    3488:	27 30       	cpi	r18, 0x07	; 7
    348a:	31 05       	cpc	r19, r1
    348c:	09 f4       	brne	.+2      	; 0x3490 <HSSD_enDisplayNumber+0xb2>
    348e:	ea c0       	rjmp	.+468    	; 0x3664 <HSSD_enDisplayNumber+0x286>
    3490:	8d a1       	ldd	r24, Y+37	; 0x25
    3492:	9e a1       	ldd	r25, Y+38	; 0x26
    3494:	88 30       	cpi	r24, 0x08	; 8
    3496:	91 05       	cpc	r25, r1
    3498:	6c f4       	brge	.+26     	; 0x34b4 <HSSD_enDisplayNumber+0xd6>
    349a:	2d a1       	ldd	r18, Y+37	; 0x25
    349c:	3e a1       	ldd	r19, Y+38	; 0x26
    349e:	25 30       	cpi	r18, 0x05	; 5
    34a0:	31 05       	cpc	r19, r1
    34a2:	09 f4       	brne	.+2      	; 0x34a6 <HSSD_enDisplayNumber+0xc8>
    34a4:	a5 c0       	rjmp	.+330    	; 0x35f0 <HSSD_enDisplayNumber+0x212>
    34a6:	8d a1       	ldd	r24, Y+37	; 0x25
    34a8:	9e a1       	ldd	r25, Y+38	; 0x26
    34aa:	86 30       	cpi	r24, 0x06	; 6
    34ac:	91 05       	cpc	r25, r1
    34ae:	09 f4       	brne	.+2      	; 0x34b2 <HSSD_enDisplayNumber+0xd4>
    34b0:	bc c0       	rjmp	.+376    	; 0x362a <HSSD_enDisplayNumber+0x24c>
    34b2:	2e c1       	rjmp	.+604    	; 0x3710 <HSSD_enDisplayNumber+0x332>
    34b4:	2d a1       	ldd	r18, Y+37	; 0x25
    34b6:	3e a1       	ldd	r19, Y+38	; 0x26
    34b8:	28 30       	cpi	r18, 0x08	; 8
    34ba:	31 05       	cpc	r19, r1
    34bc:	09 f4       	brne	.+2      	; 0x34c0 <HSSD_enDisplayNumber+0xe2>
    34be:	ef c0       	rjmp	.+478    	; 0x369e <HSSD_enDisplayNumber+0x2c0>
    34c0:	8d a1       	ldd	r24, Y+37	; 0x25
    34c2:	9e a1       	ldd	r25, Y+38	; 0x26
    34c4:	89 30       	cpi	r24, 0x09	; 9
    34c6:	91 05       	cpc	r25, r1
    34c8:	09 f4       	brne	.+2      	; 0x34cc <HSSD_enDisplayNumber+0xee>
    34ca:	06 c1       	rjmp	.+524    	; 0x36d8 <HSSD_enDisplayNumber+0x2fa>
    34cc:	21 c1       	rjmp	.+578    	; 0x3710 <HSSD_enDisplayNumber+0x332>
{
case 0:
	MDIO_voidSetPinValue(HSSD_LED_A_PIN,HIGH);
    34ce:	8b e0       	ldi	r24, 0x0B	; 11
    34d0:	61 e0       	ldi	r22, 0x01	; 1
    34d2:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_B_PIN,HIGH);
    34d6:	8c e0       	ldi	r24, 0x0C	; 12
    34d8:	61 e0       	ldi	r22, 0x01	; 1
    34da:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_C_PIN,HIGH);
    34de:	8d e0       	ldi	r24, 0x0D	; 13
    34e0:	61 e0       	ldi	r22, 0x01	; 1
    34e2:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_D_PIN,HIGH);
    34e6:	8e e0       	ldi	r24, 0x0E	; 14
    34e8:	61 e0       	ldi	r22, 0x01	; 1
    34ea:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_E_PIN,HIGH);
    34ee:	8f e0       	ldi	r24, 0x0F	; 15
    34f0:	61 e0       	ldi	r22, 0x01	; 1
    34f2:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_F_PIN,HIGH);
    34f6:	80 e1       	ldi	r24, 0x10	; 16
    34f8:	61 e0       	ldi	r22, 0x01	; 1
    34fa:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_G_PIN,LOW);
    34fe:	81 e1       	ldi	r24, 0x11	; 17
    3500:	60 e0       	ldi	r22, 0x00	; 0
    3502:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
    3506:	04 c1       	rjmp	.+520    	; 0x3710 <HSSD_enDisplayNumber+0x332>
	break;
case 1:
	MDIO_voidSetPinValue(HSSD_LED_A_PIN,LOW);
    3508:	8b e0       	ldi	r24, 0x0B	; 11
    350a:	60 e0       	ldi	r22, 0x00	; 0
    350c:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_B_PIN,HIGH);
    3510:	8c e0       	ldi	r24, 0x0C	; 12
    3512:	61 e0       	ldi	r22, 0x01	; 1
    3514:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_C_PIN,HIGH);
    3518:	8d e0       	ldi	r24, 0x0D	; 13
    351a:	61 e0       	ldi	r22, 0x01	; 1
    351c:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_D_PIN,LOW);
    3520:	8e e0       	ldi	r24, 0x0E	; 14
    3522:	60 e0       	ldi	r22, 0x00	; 0
    3524:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_E_PIN,LOW);
    3528:	8f e0       	ldi	r24, 0x0F	; 15
    352a:	60 e0       	ldi	r22, 0x00	; 0
    352c:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_F_PIN,LOW);
    3530:	80 e1       	ldi	r24, 0x10	; 16
    3532:	60 e0       	ldi	r22, 0x00	; 0
    3534:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_G_PIN,LOW);
    3538:	81 e1       	ldi	r24, 0x11	; 17
    353a:	60 e0       	ldi	r22, 0x00	; 0
    353c:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
    3540:	e7 c0       	rjmp	.+462    	; 0x3710 <HSSD_enDisplayNumber+0x332>
	break;
case 2:
	MDIO_voidSetPinValue(HSSD_LED_A_PIN,HIGH);
    3542:	8b e0       	ldi	r24, 0x0B	; 11
    3544:	61 e0       	ldi	r22, 0x01	; 1
    3546:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(HSSD_LED_B_PIN,HIGH);
    354a:	8c e0       	ldi	r24, 0x0C	; 12
    354c:	61 e0       	ldi	r22, 0x01	; 1
    354e:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(HSSD_LED_C_PIN,LOW);
    3552:	8d e0       	ldi	r24, 0x0D	; 13
    3554:	60 e0       	ldi	r22, 0x00	; 0
    3556:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(HSSD_LED_D_PIN,HIGH);
    355a:	8e e0       	ldi	r24, 0x0E	; 14
    355c:	61 e0       	ldi	r22, 0x01	; 1
    355e:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(HSSD_LED_E_PIN,HIGH);
    3562:	8f e0       	ldi	r24, 0x0F	; 15
    3564:	61 e0       	ldi	r22, 0x01	; 1
    3566:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(HSSD_LED_F_PIN,LOW);
    356a:	80 e1       	ldi	r24, 0x10	; 16
    356c:	60 e0       	ldi	r22, 0x00	; 0
    356e:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(HSSD_LED_G_PIN,HIGH);
    3572:	81 e1       	ldi	r24, 0x11	; 17
    3574:	61 e0       	ldi	r22, 0x01	; 1
    3576:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
    357a:	ca c0       	rjmp	.+404    	; 0x3710 <HSSD_enDisplayNumber+0x332>
	break;
case 3:
			MDIO_voidSetPinValue(HSSD_LED_A_PIN,HIGH);
    357c:	8b e0       	ldi	r24, 0x0B	; 11
    357e:	61 e0       	ldi	r22, 0x01	; 1
    3580:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(HSSD_LED_B_PIN,HIGH);
    3584:	8c e0       	ldi	r24, 0x0C	; 12
    3586:	61 e0       	ldi	r22, 0x01	; 1
    3588:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(HSSD_LED_C_PIN,HIGH);
    358c:	8d e0       	ldi	r24, 0x0D	; 13
    358e:	61 e0       	ldi	r22, 0x01	; 1
    3590:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(HSSD_LED_D_PIN,HIGH);
    3594:	8e e0       	ldi	r24, 0x0E	; 14
    3596:	61 e0       	ldi	r22, 0x01	; 1
    3598:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(HSSD_LED_E_PIN,LOW);
    359c:	8f e0       	ldi	r24, 0x0F	; 15
    359e:	60 e0       	ldi	r22, 0x00	; 0
    35a0:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(HSSD_LED_F_PIN,LOW);
    35a4:	80 e1       	ldi	r24, 0x10	; 16
    35a6:	60 e0       	ldi	r22, 0x00	; 0
    35a8:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(HSSD_LED_G_PIN,HIGH);
    35ac:	81 e1       	ldi	r24, 0x11	; 17
    35ae:	61 e0       	ldi	r22, 0x01	; 1
    35b0:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
    35b4:	ad c0       	rjmp	.+346    	; 0x3710 <HSSD_enDisplayNumber+0x332>
	break;
case 4:
	MDIO_voidSetPinValue(HSSD_LED_A_PIN,LOW);
    35b6:	8b e0       	ldi	r24, 0x0B	; 11
    35b8:	60 e0       	ldi	r22, 0x00	; 0
    35ba:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_B_PIN,HIGH);
    35be:	8c e0       	ldi	r24, 0x0C	; 12
    35c0:	61 e0       	ldi	r22, 0x01	; 1
    35c2:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_C_PIN,HIGH);
    35c6:	8d e0       	ldi	r24, 0x0D	; 13
    35c8:	61 e0       	ldi	r22, 0x01	; 1
    35ca:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_D_PIN,LOW);
    35ce:	8e e0       	ldi	r24, 0x0E	; 14
    35d0:	60 e0       	ldi	r22, 0x00	; 0
    35d2:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_E_PIN,LOW);
    35d6:	8f e0       	ldi	r24, 0x0F	; 15
    35d8:	60 e0       	ldi	r22, 0x00	; 0
    35da:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_F_PIN,HIGH);
    35de:	80 e1       	ldi	r24, 0x10	; 16
    35e0:	61 e0       	ldi	r22, 0x01	; 1
    35e2:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_G_PIN,HIGH);
    35e6:	81 e1       	ldi	r24, 0x11	; 17
    35e8:	61 e0       	ldi	r22, 0x01	; 1
    35ea:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
    35ee:	90 c0       	rjmp	.+288    	; 0x3710 <HSSD_enDisplayNumber+0x332>
	break;
case 5:
	MDIO_voidSetPinValue(HSSD_LED_A_PIN,HIGH);
    35f0:	8b e0       	ldi	r24, 0x0B	; 11
    35f2:	61 e0       	ldi	r22, 0x01	; 1
    35f4:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_B_PIN,LOW);
    35f8:	8c e0       	ldi	r24, 0x0C	; 12
    35fa:	60 e0       	ldi	r22, 0x00	; 0
    35fc:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_C_PIN,HIGH);
    3600:	8d e0       	ldi	r24, 0x0D	; 13
    3602:	61 e0       	ldi	r22, 0x01	; 1
    3604:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_D_PIN,HIGH);
    3608:	8e e0       	ldi	r24, 0x0E	; 14
    360a:	61 e0       	ldi	r22, 0x01	; 1
    360c:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_E_PIN,LOW);
    3610:	8f e0       	ldi	r24, 0x0F	; 15
    3612:	60 e0       	ldi	r22, 0x00	; 0
    3614:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_F_PIN,HIGH);
    3618:	80 e1       	ldi	r24, 0x10	; 16
    361a:	61 e0       	ldi	r22, 0x01	; 1
    361c:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_G_PIN,HIGH);
    3620:	81 e1       	ldi	r24, 0x11	; 17
    3622:	61 e0       	ldi	r22, 0x01	; 1
    3624:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
    3628:	73 c0       	rjmp	.+230    	; 0x3710 <HSSD_enDisplayNumber+0x332>
	break;
case 6:
	MDIO_voidSetPinValue(HSSD_LED_A_PIN,HIGH);
    362a:	8b e0       	ldi	r24, 0x0B	; 11
    362c:	61 e0       	ldi	r22, 0x01	; 1
    362e:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_B_PIN,LOW);
    3632:	8c e0       	ldi	r24, 0x0C	; 12
    3634:	60 e0       	ldi	r22, 0x00	; 0
    3636:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_C_PIN,HIGH);
    363a:	8d e0       	ldi	r24, 0x0D	; 13
    363c:	61 e0       	ldi	r22, 0x01	; 1
    363e:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_D_PIN,HIGH);
    3642:	8e e0       	ldi	r24, 0x0E	; 14
    3644:	61 e0       	ldi	r22, 0x01	; 1
    3646:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_E_PIN,HIGH);
    364a:	8f e0       	ldi	r24, 0x0F	; 15
    364c:	61 e0       	ldi	r22, 0x01	; 1
    364e:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_F_PIN,HIGH);
    3652:	80 e1       	ldi	r24, 0x10	; 16
    3654:	61 e0       	ldi	r22, 0x01	; 1
    3656:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_G_PIN,HIGH);
    365a:	81 e1       	ldi	r24, 0x11	; 17
    365c:	61 e0       	ldi	r22, 0x01	; 1
    365e:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
    3662:	56 c0       	rjmp	.+172    	; 0x3710 <HSSD_enDisplayNumber+0x332>
	break;
case 7:
	MDIO_voidSetPinValue(HSSD_LED_A_PIN,HIGH);
    3664:	8b e0       	ldi	r24, 0x0B	; 11
    3666:	61 e0       	ldi	r22, 0x01	; 1
    3668:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_B_PIN,HIGH);
    366c:	8c e0       	ldi	r24, 0x0C	; 12
    366e:	61 e0       	ldi	r22, 0x01	; 1
    3670:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_C_PIN,HIGH);
    3674:	8d e0       	ldi	r24, 0x0D	; 13
    3676:	61 e0       	ldi	r22, 0x01	; 1
    3678:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_D_PIN,LOW);
    367c:	8e e0       	ldi	r24, 0x0E	; 14
    367e:	60 e0       	ldi	r22, 0x00	; 0
    3680:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_E_PIN,LOW);
    3684:	8f e0       	ldi	r24, 0x0F	; 15
    3686:	60 e0       	ldi	r22, 0x00	; 0
    3688:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_F_PIN,LOW);
    368c:	80 e1       	ldi	r24, 0x10	; 16
    368e:	60 e0       	ldi	r22, 0x00	; 0
    3690:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_G_PIN,LOW);
    3694:	81 e1       	ldi	r24, 0x11	; 17
    3696:	60 e0       	ldi	r22, 0x00	; 0
    3698:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
    369c:	39 c0       	rjmp	.+114    	; 0x3710 <HSSD_enDisplayNumber+0x332>
	break;
case 8:
	MDIO_voidSetPinValue(HSSD_LED_A_PIN,HIGH);
    369e:	8b e0       	ldi	r24, 0x0B	; 11
    36a0:	61 e0       	ldi	r22, 0x01	; 1
    36a2:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_B_PIN,HIGH);
    36a6:	8c e0       	ldi	r24, 0x0C	; 12
    36a8:	61 e0       	ldi	r22, 0x01	; 1
    36aa:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_C_PIN,HIGH);
    36ae:	8d e0       	ldi	r24, 0x0D	; 13
    36b0:	61 e0       	ldi	r22, 0x01	; 1
    36b2:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_D_PIN,HIGH);
    36b6:	8e e0       	ldi	r24, 0x0E	; 14
    36b8:	61 e0       	ldi	r22, 0x01	; 1
    36ba:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_E_PIN,HIGH);
    36be:	8f e0       	ldi	r24, 0x0F	; 15
    36c0:	61 e0       	ldi	r22, 0x01	; 1
    36c2:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_F_PIN,HIGH);
    36c6:	80 e1       	ldi	r24, 0x10	; 16
    36c8:	61 e0       	ldi	r22, 0x01	; 1
    36ca:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_G_PIN,HIGH);
    36ce:	81 e1       	ldi	r24, 0x11	; 17
    36d0:	61 e0       	ldi	r22, 0x01	; 1
    36d2:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
    36d6:	1c c0       	rjmp	.+56     	; 0x3710 <HSSD_enDisplayNumber+0x332>
	break;
case 9:
	MDIO_voidSetPinValue(HSSD_LED_A_PIN,HIGH);
    36d8:	8b e0       	ldi	r24, 0x0B	; 11
    36da:	61 e0       	ldi	r22, 0x01	; 1
    36dc:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_B_PIN,HIGH);
    36e0:	8c e0       	ldi	r24, 0x0C	; 12
    36e2:	61 e0       	ldi	r22, 0x01	; 1
    36e4:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_C_PIN,HIGH);
    36e8:	8d e0       	ldi	r24, 0x0D	; 13
    36ea:	61 e0       	ldi	r22, 0x01	; 1
    36ec:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_D_PIN,HIGH);
    36f0:	8e e0       	ldi	r24, 0x0E	; 14
    36f2:	61 e0       	ldi	r22, 0x01	; 1
    36f4:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_E_PIN,LOW);
    36f8:	8f e0       	ldi	r24, 0x0F	; 15
    36fa:	60 e0       	ldi	r22, 0x00	; 0
    36fc:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_F_PIN,HIGH);
    3700:	80 e1       	ldi	r24, 0x10	; 16
    3702:	61 e0       	ldi	r22, 0x01	; 1
    3704:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_G_PIN,HIGH);
    3708:	81 e1       	ldi	r24, 0x11	; 17
    370a:	61 e0       	ldi	r22, 0x01	; 1
    370c:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	break;
default:break;
}//end switch
//Enable Dig1
MDIO_voidSetPinValue (HSSD_EN1_PIN , HIGH);
    3710:	84 e2       	ldi	r24, 0x24	; 36
    3712:	61 e0       	ldi	r22, 0x01	; 1
    3714:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
//Disable Gig2
MDIO_voidSetPinValue (HSSD_EN2_PIN ,LOW);
    3718:	85 e2       	ldi	r24, 0x25	; 37
    371a:	60 e0       	ldi	r22, 0x00	; 0
    371c:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
    3720:	80 e0       	ldi	r24, 0x00	; 0
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	a0 e8       	ldi	r26, 0x80	; 128
    3726:	bf e3       	ldi	r27, 0x3F	; 63
    3728:	89 8f       	std	Y+25, r24	; 0x19
    372a:	9a 8f       	std	Y+26, r25	; 0x1a
    372c:	ab 8f       	std	Y+27, r26	; 0x1b
    372e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3730:	69 8d       	ldd	r22, Y+25	; 0x19
    3732:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3734:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3736:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3738:	20 e0       	ldi	r18, 0x00	; 0
    373a:	30 e0       	ldi	r19, 0x00	; 0
    373c:	4a e7       	ldi	r20, 0x7A	; 122
    373e:	55 e4       	ldi	r21, 0x45	; 69
    3740:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    3744:	dc 01       	movw	r26, r24
    3746:	cb 01       	movw	r24, r22
    3748:	8d 8b       	std	Y+21, r24	; 0x15
    374a:	9e 8b       	std	Y+22, r25	; 0x16
    374c:	af 8b       	std	Y+23, r26	; 0x17
    374e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3750:	6d 89       	ldd	r22, Y+21	; 0x15
    3752:	7e 89       	ldd	r23, Y+22	; 0x16
    3754:	8f 89       	ldd	r24, Y+23	; 0x17
    3756:	98 8d       	ldd	r25, Y+24	; 0x18
    3758:	20 e0       	ldi	r18, 0x00	; 0
    375a:	30 e0       	ldi	r19, 0x00	; 0
    375c:	40 e8       	ldi	r20, 0x80	; 128
    375e:	5f e3       	ldi	r21, 0x3F	; 63
    3760:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    3764:	88 23       	and	r24, r24
    3766:	2c f4       	brge	.+10     	; 0x3772 <HSSD_enDisplayNumber+0x394>
		__ticks = 1;
    3768:	81 e0       	ldi	r24, 0x01	; 1
    376a:	90 e0       	ldi	r25, 0x00	; 0
    376c:	9c 8b       	std	Y+20, r25	; 0x14
    376e:	8b 8b       	std	Y+19, r24	; 0x13
    3770:	3f c0       	rjmp	.+126    	; 0x37f0 <HSSD_enDisplayNumber+0x412>
	else if (__tmp > 65535)
    3772:	6d 89       	ldd	r22, Y+21	; 0x15
    3774:	7e 89       	ldd	r23, Y+22	; 0x16
    3776:	8f 89       	ldd	r24, Y+23	; 0x17
    3778:	98 8d       	ldd	r25, Y+24	; 0x18
    377a:	20 e0       	ldi	r18, 0x00	; 0
    377c:	3f ef       	ldi	r19, 0xFF	; 255
    377e:	4f e7       	ldi	r20, 0x7F	; 127
    3780:	57 e4       	ldi	r21, 0x47	; 71
    3782:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    3786:	18 16       	cp	r1, r24
    3788:	4c f5       	brge	.+82     	; 0x37dc <HSSD_enDisplayNumber+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    378a:	69 8d       	ldd	r22, Y+25	; 0x19
    378c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    378e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3790:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3792:	20 e0       	ldi	r18, 0x00	; 0
    3794:	30 e0       	ldi	r19, 0x00	; 0
    3796:	40 e2       	ldi	r20, 0x20	; 32
    3798:	51 e4       	ldi	r21, 0x41	; 65
    379a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    379e:	dc 01       	movw	r26, r24
    37a0:	cb 01       	movw	r24, r22
    37a2:	bc 01       	movw	r22, r24
    37a4:	cd 01       	movw	r24, r26
    37a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37aa:	dc 01       	movw	r26, r24
    37ac:	cb 01       	movw	r24, r22
    37ae:	9c 8b       	std	Y+20, r25	; 0x14
    37b0:	8b 8b       	std	Y+19, r24	; 0x13
    37b2:	0f c0       	rjmp	.+30     	; 0x37d2 <HSSD_enDisplayNumber+0x3f4>
    37b4:	80 e9       	ldi	r24, 0x90	; 144
    37b6:	91 e0       	ldi	r25, 0x01	; 1
    37b8:	9a 8b       	std	Y+18, r25	; 0x12
    37ba:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    37bc:	89 89       	ldd	r24, Y+17	; 0x11
    37be:	9a 89       	ldd	r25, Y+18	; 0x12
    37c0:	01 97       	sbiw	r24, 0x01	; 1
    37c2:	f1 f7       	brne	.-4      	; 0x37c0 <HSSD_enDisplayNumber+0x3e2>
    37c4:	9a 8b       	std	Y+18, r25	; 0x12
    37c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37c8:	8b 89       	ldd	r24, Y+19	; 0x13
    37ca:	9c 89       	ldd	r25, Y+20	; 0x14
    37cc:	01 97       	sbiw	r24, 0x01	; 1
    37ce:	9c 8b       	std	Y+20, r25	; 0x14
    37d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37d2:	8b 89       	ldd	r24, Y+19	; 0x13
    37d4:	9c 89       	ldd	r25, Y+20	; 0x14
    37d6:	00 97       	sbiw	r24, 0x00	; 0
    37d8:	69 f7       	brne	.-38     	; 0x37b4 <HSSD_enDisplayNumber+0x3d6>
    37da:	14 c0       	rjmp	.+40     	; 0x3804 <HSSD_enDisplayNumber+0x426>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37dc:	6d 89       	ldd	r22, Y+21	; 0x15
    37de:	7e 89       	ldd	r23, Y+22	; 0x16
    37e0:	8f 89       	ldd	r24, Y+23	; 0x17
    37e2:	98 8d       	ldd	r25, Y+24	; 0x18
    37e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e8:	dc 01       	movw	r26, r24
    37ea:	cb 01       	movw	r24, r22
    37ec:	9c 8b       	std	Y+20, r25	; 0x14
    37ee:	8b 8b       	std	Y+19, r24	; 0x13
    37f0:	8b 89       	ldd	r24, Y+19	; 0x13
    37f2:	9c 89       	ldd	r25, Y+20	; 0x14
    37f4:	98 8b       	std	Y+16, r25	; 0x10
    37f6:	8f 87       	std	Y+15, r24	; 0x0f
    37f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    37fa:	98 89       	ldd	r25, Y+16	; 0x10
    37fc:	01 97       	sbiw	r24, 0x01	; 1
    37fe:	f1 f7       	brne	.-4      	; 0x37fc <HSSD_enDisplayNumber+0x41e>
    3800:	98 8b       	std	Y+16, r25	; 0x10
    3802:	8f 87       	std	Y+15, r24	; 0x0f
//delay fo the digit to be on
_delay_ms(1);
//disable Dig1
MDIO_voidSetPinValue (HSSD_EN1_PIN , LOW);
    3804:	84 e2       	ldi	r24, 0x24	; 36
    3806:	60 e0       	ldi	r22, 0x00	; 0
    3808:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
switch(Local_u8Tens)
    380c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    380e:	28 2f       	mov	r18, r24
    3810:	30 e0       	ldi	r19, 0x00	; 0
    3812:	3c a3       	std	Y+36, r19	; 0x24
    3814:	2b a3       	std	Y+35, r18	; 0x23
    3816:	8b a1       	ldd	r24, Y+35	; 0x23
    3818:	9c a1       	ldd	r25, Y+36	; 0x24
    381a:	84 30       	cpi	r24, 0x04	; 4
    381c:	91 05       	cpc	r25, r1
    381e:	09 f4       	brne	.+2      	; 0x3822 <HSSD_enDisplayNumber+0x444>
    3820:	bb c0       	rjmp	.+374    	; 0x3998 <HSSD_enDisplayNumber+0x5ba>
    3822:	2b a1       	ldd	r18, Y+35	; 0x23
    3824:	3c a1       	ldd	r19, Y+36	; 0x24
    3826:	25 30       	cpi	r18, 0x05	; 5
    3828:	31 05       	cpc	r19, r1
    382a:	ec f4       	brge	.+58     	; 0x3866 <HSSD_enDisplayNumber+0x488>
    382c:	8b a1       	ldd	r24, Y+35	; 0x23
    382e:	9c a1       	ldd	r25, Y+36	; 0x24
    3830:	81 30       	cpi	r24, 0x01	; 1
    3832:	91 05       	cpc	r25, r1
    3834:	09 f4       	brne	.+2      	; 0x3838 <HSSD_enDisplayNumber+0x45a>
    3836:	59 c0       	rjmp	.+178    	; 0x38ea <HSSD_enDisplayNumber+0x50c>
    3838:	2b a1       	ldd	r18, Y+35	; 0x23
    383a:	3c a1       	ldd	r19, Y+36	; 0x24
    383c:	22 30       	cpi	r18, 0x02	; 2
    383e:	31 05       	cpc	r19, r1
    3840:	2c f4       	brge	.+10     	; 0x384c <HSSD_enDisplayNumber+0x46e>
    3842:	8b a1       	ldd	r24, Y+35	; 0x23
    3844:	9c a1       	ldd	r25, Y+36	; 0x24
    3846:	00 97       	sbiw	r24, 0x00	; 0
    3848:	99 f1       	breq	.+102    	; 0x38b0 <HSSD_enDisplayNumber+0x4d2>
    384a:	53 c1       	rjmp	.+678    	; 0x3af2 <HSSD_enDisplayNumber+0x714>
    384c:	2b a1       	ldd	r18, Y+35	; 0x23
    384e:	3c a1       	ldd	r19, Y+36	; 0x24
    3850:	22 30       	cpi	r18, 0x02	; 2
    3852:	31 05       	cpc	r19, r1
    3854:	09 f4       	brne	.+2      	; 0x3858 <HSSD_enDisplayNumber+0x47a>
    3856:	66 c0       	rjmp	.+204    	; 0x3924 <HSSD_enDisplayNumber+0x546>
    3858:	8b a1       	ldd	r24, Y+35	; 0x23
    385a:	9c a1       	ldd	r25, Y+36	; 0x24
    385c:	83 30       	cpi	r24, 0x03	; 3
    385e:	91 05       	cpc	r25, r1
    3860:	09 f4       	brne	.+2      	; 0x3864 <HSSD_enDisplayNumber+0x486>
    3862:	7d c0       	rjmp	.+250    	; 0x395e <HSSD_enDisplayNumber+0x580>
    3864:	46 c1       	rjmp	.+652    	; 0x3af2 <HSSD_enDisplayNumber+0x714>
    3866:	2b a1       	ldd	r18, Y+35	; 0x23
    3868:	3c a1       	ldd	r19, Y+36	; 0x24
    386a:	27 30       	cpi	r18, 0x07	; 7
    386c:	31 05       	cpc	r19, r1
    386e:	09 f4       	brne	.+2      	; 0x3872 <HSSD_enDisplayNumber+0x494>
    3870:	ea c0       	rjmp	.+468    	; 0x3a46 <HSSD_enDisplayNumber+0x668>
    3872:	8b a1       	ldd	r24, Y+35	; 0x23
    3874:	9c a1       	ldd	r25, Y+36	; 0x24
    3876:	88 30       	cpi	r24, 0x08	; 8
    3878:	91 05       	cpc	r25, r1
    387a:	6c f4       	brge	.+26     	; 0x3896 <HSSD_enDisplayNumber+0x4b8>
    387c:	2b a1       	ldd	r18, Y+35	; 0x23
    387e:	3c a1       	ldd	r19, Y+36	; 0x24
    3880:	25 30       	cpi	r18, 0x05	; 5
    3882:	31 05       	cpc	r19, r1
    3884:	09 f4       	brne	.+2      	; 0x3888 <HSSD_enDisplayNumber+0x4aa>
    3886:	a5 c0       	rjmp	.+330    	; 0x39d2 <HSSD_enDisplayNumber+0x5f4>
    3888:	8b a1       	ldd	r24, Y+35	; 0x23
    388a:	9c a1       	ldd	r25, Y+36	; 0x24
    388c:	86 30       	cpi	r24, 0x06	; 6
    388e:	91 05       	cpc	r25, r1
    3890:	09 f4       	brne	.+2      	; 0x3894 <HSSD_enDisplayNumber+0x4b6>
    3892:	bc c0       	rjmp	.+376    	; 0x3a0c <HSSD_enDisplayNumber+0x62e>
    3894:	2e c1       	rjmp	.+604    	; 0x3af2 <HSSD_enDisplayNumber+0x714>
    3896:	2b a1       	ldd	r18, Y+35	; 0x23
    3898:	3c a1       	ldd	r19, Y+36	; 0x24
    389a:	28 30       	cpi	r18, 0x08	; 8
    389c:	31 05       	cpc	r19, r1
    389e:	09 f4       	brne	.+2      	; 0x38a2 <HSSD_enDisplayNumber+0x4c4>
    38a0:	ef c0       	rjmp	.+478    	; 0x3a80 <HSSD_enDisplayNumber+0x6a2>
    38a2:	8b a1       	ldd	r24, Y+35	; 0x23
    38a4:	9c a1       	ldd	r25, Y+36	; 0x24
    38a6:	89 30       	cpi	r24, 0x09	; 9
    38a8:	91 05       	cpc	r25, r1
    38aa:	09 f4       	brne	.+2      	; 0x38ae <HSSD_enDisplayNumber+0x4d0>
    38ac:	06 c1       	rjmp	.+524    	; 0x3aba <HSSD_enDisplayNumber+0x6dc>
    38ae:	21 c1       	rjmp	.+578    	; 0x3af2 <HSSD_enDisplayNumber+0x714>
{
case 0:
	MDIO_voidSetPinValue(HSSD_LED_A_PIN,HIGH);
    38b0:	8b e0       	ldi	r24, 0x0B	; 11
    38b2:	61 e0       	ldi	r22, 0x01	; 1
    38b4:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_B_PIN,HIGH);
    38b8:	8c e0       	ldi	r24, 0x0C	; 12
    38ba:	61 e0       	ldi	r22, 0x01	; 1
    38bc:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_C_PIN,HIGH);
    38c0:	8d e0       	ldi	r24, 0x0D	; 13
    38c2:	61 e0       	ldi	r22, 0x01	; 1
    38c4:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_D_PIN,HIGH);
    38c8:	8e e0       	ldi	r24, 0x0E	; 14
    38ca:	61 e0       	ldi	r22, 0x01	; 1
    38cc:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_E_PIN,HIGH);
    38d0:	8f e0       	ldi	r24, 0x0F	; 15
    38d2:	61 e0       	ldi	r22, 0x01	; 1
    38d4:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_F_PIN,HIGH);
    38d8:	80 e1       	ldi	r24, 0x10	; 16
    38da:	61 e0       	ldi	r22, 0x01	; 1
    38dc:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_G_PIN,LOW);
    38e0:	81 e1       	ldi	r24, 0x11	; 17
    38e2:	60 e0       	ldi	r22, 0x00	; 0
    38e4:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
    38e8:	04 c1       	rjmp	.+520    	; 0x3af2 <HSSD_enDisplayNumber+0x714>
	break;
case 1:
	MDIO_voidSetPinValue(HSSD_LED_A_PIN,LOW);
    38ea:	8b e0       	ldi	r24, 0x0B	; 11
    38ec:	60 e0       	ldi	r22, 0x00	; 0
    38ee:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_B_PIN,HIGH);
    38f2:	8c e0       	ldi	r24, 0x0C	; 12
    38f4:	61 e0       	ldi	r22, 0x01	; 1
    38f6:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_C_PIN,HIGH);
    38fa:	8d e0       	ldi	r24, 0x0D	; 13
    38fc:	61 e0       	ldi	r22, 0x01	; 1
    38fe:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_D_PIN,LOW);
    3902:	8e e0       	ldi	r24, 0x0E	; 14
    3904:	60 e0       	ldi	r22, 0x00	; 0
    3906:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_E_PIN,LOW);
    390a:	8f e0       	ldi	r24, 0x0F	; 15
    390c:	60 e0       	ldi	r22, 0x00	; 0
    390e:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_F_PIN,LOW);
    3912:	80 e1       	ldi	r24, 0x10	; 16
    3914:	60 e0       	ldi	r22, 0x00	; 0
    3916:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_G_PIN,LOW);
    391a:	81 e1       	ldi	r24, 0x11	; 17
    391c:	60 e0       	ldi	r22, 0x00	; 0
    391e:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
    3922:	e7 c0       	rjmp	.+462    	; 0x3af2 <HSSD_enDisplayNumber+0x714>
	break;
case 2:
	MDIO_voidSetPinValue(HSSD_LED_A_PIN,HIGH);
    3924:	8b e0       	ldi	r24, 0x0B	; 11
    3926:	61 e0       	ldi	r22, 0x01	; 1
    3928:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(HSSD_LED_B_PIN,HIGH);
    392c:	8c e0       	ldi	r24, 0x0C	; 12
    392e:	61 e0       	ldi	r22, 0x01	; 1
    3930:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(HSSD_LED_C_PIN,LOW);
    3934:	8d e0       	ldi	r24, 0x0D	; 13
    3936:	60 e0       	ldi	r22, 0x00	; 0
    3938:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(HSSD_LED_D_PIN,HIGH);
    393c:	8e e0       	ldi	r24, 0x0E	; 14
    393e:	61 e0       	ldi	r22, 0x01	; 1
    3940:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(HSSD_LED_E_PIN,HIGH);
    3944:	8f e0       	ldi	r24, 0x0F	; 15
    3946:	61 e0       	ldi	r22, 0x01	; 1
    3948:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(HSSD_LED_F_PIN,LOW);
    394c:	80 e1       	ldi	r24, 0x10	; 16
    394e:	60 e0       	ldi	r22, 0x00	; 0
    3950:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(HSSD_LED_G_PIN,HIGH);
    3954:	81 e1       	ldi	r24, 0x11	; 17
    3956:	61 e0       	ldi	r22, 0x01	; 1
    3958:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
    395c:	ca c0       	rjmp	.+404    	; 0x3af2 <HSSD_enDisplayNumber+0x714>
	break;
case 3:
			MDIO_voidSetPinValue(HSSD_LED_A_PIN,HIGH);
    395e:	8b e0       	ldi	r24, 0x0B	; 11
    3960:	61 e0       	ldi	r22, 0x01	; 1
    3962:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(HSSD_LED_B_PIN,HIGH);
    3966:	8c e0       	ldi	r24, 0x0C	; 12
    3968:	61 e0       	ldi	r22, 0x01	; 1
    396a:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(HSSD_LED_C_PIN,HIGH);
    396e:	8d e0       	ldi	r24, 0x0D	; 13
    3970:	61 e0       	ldi	r22, 0x01	; 1
    3972:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(HSSD_LED_D_PIN,HIGH);
    3976:	8e e0       	ldi	r24, 0x0E	; 14
    3978:	61 e0       	ldi	r22, 0x01	; 1
    397a:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(HSSD_LED_E_PIN,LOW);
    397e:	8f e0       	ldi	r24, 0x0F	; 15
    3980:	60 e0       	ldi	r22, 0x00	; 0
    3982:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(HSSD_LED_F_PIN,LOW);
    3986:	80 e1       	ldi	r24, 0x10	; 16
    3988:	60 e0       	ldi	r22, 0x00	; 0
    398a:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(HSSD_LED_G_PIN,HIGH);
    398e:	81 e1       	ldi	r24, 0x11	; 17
    3990:	61 e0       	ldi	r22, 0x01	; 1
    3992:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
    3996:	ad c0       	rjmp	.+346    	; 0x3af2 <HSSD_enDisplayNumber+0x714>
	break;
case 4:
	MDIO_voidSetPinValue(HSSD_LED_A_PIN,LOW);
    3998:	8b e0       	ldi	r24, 0x0B	; 11
    399a:	60 e0       	ldi	r22, 0x00	; 0
    399c:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_B_PIN,HIGH);
    39a0:	8c e0       	ldi	r24, 0x0C	; 12
    39a2:	61 e0       	ldi	r22, 0x01	; 1
    39a4:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_C_PIN,HIGH);
    39a8:	8d e0       	ldi	r24, 0x0D	; 13
    39aa:	61 e0       	ldi	r22, 0x01	; 1
    39ac:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_D_PIN,LOW);
    39b0:	8e e0       	ldi	r24, 0x0E	; 14
    39b2:	60 e0       	ldi	r22, 0x00	; 0
    39b4:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_E_PIN,LOW);
    39b8:	8f e0       	ldi	r24, 0x0F	; 15
    39ba:	60 e0       	ldi	r22, 0x00	; 0
    39bc:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_F_PIN,HIGH);
    39c0:	80 e1       	ldi	r24, 0x10	; 16
    39c2:	61 e0       	ldi	r22, 0x01	; 1
    39c4:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_G_PIN,HIGH);
    39c8:	81 e1       	ldi	r24, 0x11	; 17
    39ca:	61 e0       	ldi	r22, 0x01	; 1
    39cc:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
    39d0:	90 c0       	rjmp	.+288    	; 0x3af2 <HSSD_enDisplayNumber+0x714>
	break;
case 5:
	MDIO_voidSetPinValue(HSSD_LED_A_PIN,HIGH);
    39d2:	8b e0       	ldi	r24, 0x0B	; 11
    39d4:	61 e0       	ldi	r22, 0x01	; 1
    39d6:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_B_PIN,LOW);
    39da:	8c e0       	ldi	r24, 0x0C	; 12
    39dc:	60 e0       	ldi	r22, 0x00	; 0
    39de:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_C_PIN,HIGH);
    39e2:	8d e0       	ldi	r24, 0x0D	; 13
    39e4:	61 e0       	ldi	r22, 0x01	; 1
    39e6:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_D_PIN,HIGH);
    39ea:	8e e0       	ldi	r24, 0x0E	; 14
    39ec:	61 e0       	ldi	r22, 0x01	; 1
    39ee:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_E_PIN,LOW);
    39f2:	8f e0       	ldi	r24, 0x0F	; 15
    39f4:	60 e0       	ldi	r22, 0x00	; 0
    39f6:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_F_PIN,HIGH);
    39fa:	80 e1       	ldi	r24, 0x10	; 16
    39fc:	61 e0       	ldi	r22, 0x01	; 1
    39fe:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_G_PIN,HIGH);
    3a02:	81 e1       	ldi	r24, 0x11	; 17
    3a04:	61 e0       	ldi	r22, 0x01	; 1
    3a06:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
    3a0a:	73 c0       	rjmp	.+230    	; 0x3af2 <HSSD_enDisplayNumber+0x714>
	break;
case 6:
	MDIO_voidSetPinValue(HSSD_LED_A_PIN,HIGH);
    3a0c:	8b e0       	ldi	r24, 0x0B	; 11
    3a0e:	61 e0       	ldi	r22, 0x01	; 1
    3a10:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_B_PIN,LOW);
    3a14:	8c e0       	ldi	r24, 0x0C	; 12
    3a16:	60 e0       	ldi	r22, 0x00	; 0
    3a18:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_C_PIN,HIGH);
    3a1c:	8d e0       	ldi	r24, 0x0D	; 13
    3a1e:	61 e0       	ldi	r22, 0x01	; 1
    3a20:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_D_PIN,HIGH);
    3a24:	8e e0       	ldi	r24, 0x0E	; 14
    3a26:	61 e0       	ldi	r22, 0x01	; 1
    3a28:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_E_PIN,HIGH);
    3a2c:	8f e0       	ldi	r24, 0x0F	; 15
    3a2e:	61 e0       	ldi	r22, 0x01	; 1
    3a30:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_F_PIN,HIGH);
    3a34:	80 e1       	ldi	r24, 0x10	; 16
    3a36:	61 e0       	ldi	r22, 0x01	; 1
    3a38:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_G_PIN,HIGH);
    3a3c:	81 e1       	ldi	r24, 0x11	; 17
    3a3e:	61 e0       	ldi	r22, 0x01	; 1
    3a40:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
    3a44:	56 c0       	rjmp	.+172    	; 0x3af2 <HSSD_enDisplayNumber+0x714>
	break;
case 7:
	MDIO_voidSetPinValue(HSSD_LED_A_PIN,HIGH);
    3a46:	8b e0       	ldi	r24, 0x0B	; 11
    3a48:	61 e0       	ldi	r22, 0x01	; 1
    3a4a:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_B_PIN,HIGH);
    3a4e:	8c e0       	ldi	r24, 0x0C	; 12
    3a50:	61 e0       	ldi	r22, 0x01	; 1
    3a52:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_C_PIN,HIGH);
    3a56:	8d e0       	ldi	r24, 0x0D	; 13
    3a58:	61 e0       	ldi	r22, 0x01	; 1
    3a5a:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_D_PIN,LOW);
    3a5e:	8e e0       	ldi	r24, 0x0E	; 14
    3a60:	60 e0       	ldi	r22, 0x00	; 0
    3a62:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_E_PIN,LOW);
    3a66:	8f e0       	ldi	r24, 0x0F	; 15
    3a68:	60 e0       	ldi	r22, 0x00	; 0
    3a6a:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_F_PIN,LOW);
    3a6e:	80 e1       	ldi	r24, 0x10	; 16
    3a70:	60 e0       	ldi	r22, 0x00	; 0
    3a72:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_G_PIN,LOW);
    3a76:	81 e1       	ldi	r24, 0x11	; 17
    3a78:	60 e0       	ldi	r22, 0x00	; 0
    3a7a:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
    3a7e:	39 c0       	rjmp	.+114    	; 0x3af2 <HSSD_enDisplayNumber+0x714>
	break;
case 8:
	MDIO_voidSetPinValue(HSSD_LED_A_PIN,HIGH);
    3a80:	8b e0       	ldi	r24, 0x0B	; 11
    3a82:	61 e0       	ldi	r22, 0x01	; 1
    3a84:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_B_PIN,HIGH);
    3a88:	8c e0       	ldi	r24, 0x0C	; 12
    3a8a:	61 e0       	ldi	r22, 0x01	; 1
    3a8c:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_C_PIN,HIGH);
    3a90:	8d e0       	ldi	r24, 0x0D	; 13
    3a92:	61 e0       	ldi	r22, 0x01	; 1
    3a94:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_D_PIN,HIGH);
    3a98:	8e e0       	ldi	r24, 0x0E	; 14
    3a9a:	61 e0       	ldi	r22, 0x01	; 1
    3a9c:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_E_PIN,HIGH);
    3aa0:	8f e0       	ldi	r24, 0x0F	; 15
    3aa2:	61 e0       	ldi	r22, 0x01	; 1
    3aa4:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_F_PIN,HIGH);
    3aa8:	80 e1       	ldi	r24, 0x10	; 16
    3aaa:	61 e0       	ldi	r22, 0x01	; 1
    3aac:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_G_PIN,HIGH);
    3ab0:	81 e1       	ldi	r24, 0x11	; 17
    3ab2:	61 e0       	ldi	r22, 0x01	; 1
    3ab4:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
    3ab8:	1c c0       	rjmp	.+56     	; 0x3af2 <HSSD_enDisplayNumber+0x714>
	break;
case 9:
	MDIO_voidSetPinValue(HSSD_LED_A_PIN,HIGH);
    3aba:	8b e0       	ldi	r24, 0x0B	; 11
    3abc:	61 e0       	ldi	r22, 0x01	; 1
    3abe:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_B_PIN,HIGH);
    3ac2:	8c e0       	ldi	r24, 0x0C	; 12
    3ac4:	61 e0       	ldi	r22, 0x01	; 1
    3ac6:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_C_PIN,HIGH);
    3aca:	8d e0       	ldi	r24, 0x0D	; 13
    3acc:	61 e0       	ldi	r22, 0x01	; 1
    3ace:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_D_PIN,HIGH);
    3ad2:	8e e0       	ldi	r24, 0x0E	; 14
    3ad4:	61 e0       	ldi	r22, 0x01	; 1
    3ad6:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_E_PIN,LOW);
    3ada:	8f e0       	ldi	r24, 0x0F	; 15
    3adc:	60 e0       	ldi	r22, 0x00	; 0
    3ade:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_F_PIN,HIGH);
    3ae2:	80 e1       	ldi	r24, 0x10	; 16
    3ae4:	61 e0       	ldi	r22, 0x01	; 1
    3ae6:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HSSD_LED_G_PIN,HIGH);
    3aea:	81 e1       	ldi	r24, 0x11	; 17
    3aec:	61 e0       	ldi	r22, 0x01	; 1
    3aee:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	break;
}//end switch
//Enable Dig2
MDIO_voidSetPinValue (HSSD_EN2_PIN ,HIGH);
    3af2:	85 e2       	ldi	r24, 0x25	; 37
    3af4:	61 e0       	ldi	r22, 0x01	; 1
    3af6:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
//Disable Gig1
MDIO_voidSetPinValue (HSSD_EN1_PIN ,LOW);
    3afa:	84 e2       	ldi	r24, 0x24	; 36
    3afc:	60 e0       	ldi	r22, 0x00	; 0
    3afe:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
    3b02:	80 e0       	ldi	r24, 0x00	; 0
    3b04:	90 e0       	ldi	r25, 0x00	; 0
    3b06:	a0 e8       	ldi	r26, 0x80	; 128
    3b08:	bf e3       	ldi	r27, 0x3F	; 63
    3b0a:	8b 87       	std	Y+11, r24	; 0x0b
    3b0c:	9c 87       	std	Y+12, r25	; 0x0c
    3b0e:	ad 87       	std	Y+13, r26	; 0x0d
    3b10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b12:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b14:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b16:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b18:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b1a:	20 e0       	ldi	r18, 0x00	; 0
    3b1c:	30 e0       	ldi	r19, 0x00	; 0
    3b1e:	4a e7       	ldi	r20, 0x7A	; 122
    3b20:	55 e4       	ldi	r21, 0x45	; 69
    3b22:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    3b26:	dc 01       	movw	r26, r24
    3b28:	cb 01       	movw	r24, r22
    3b2a:	8f 83       	std	Y+7, r24	; 0x07
    3b2c:	98 87       	std	Y+8, r25	; 0x08
    3b2e:	a9 87       	std	Y+9, r26	; 0x09
    3b30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b32:	6f 81       	ldd	r22, Y+7	; 0x07
    3b34:	78 85       	ldd	r23, Y+8	; 0x08
    3b36:	89 85       	ldd	r24, Y+9	; 0x09
    3b38:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b3a:	20 e0       	ldi	r18, 0x00	; 0
    3b3c:	30 e0       	ldi	r19, 0x00	; 0
    3b3e:	40 e8       	ldi	r20, 0x80	; 128
    3b40:	5f e3       	ldi	r21, 0x3F	; 63
    3b42:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    3b46:	88 23       	and	r24, r24
    3b48:	2c f4       	brge	.+10     	; 0x3b54 <HSSD_enDisplayNumber+0x776>
		__ticks = 1;
    3b4a:	81 e0       	ldi	r24, 0x01	; 1
    3b4c:	90 e0       	ldi	r25, 0x00	; 0
    3b4e:	9e 83       	std	Y+6, r25	; 0x06
    3b50:	8d 83       	std	Y+5, r24	; 0x05
    3b52:	3f c0       	rjmp	.+126    	; 0x3bd2 <HSSD_enDisplayNumber+0x7f4>
	else if (__tmp > 65535)
    3b54:	6f 81       	ldd	r22, Y+7	; 0x07
    3b56:	78 85       	ldd	r23, Y+8	; 0x08
    3b58:	89 85       	ldd	r24, Y+9	; 0x09
    3b5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b5c:	20 e0       	ldi	r18, 0x00	; 0
    3b5e:	3f ef       	ldi	r19, 0xFF	; 255
    3b60:	4f e7       	ldi	r20, 0x7F	; 127
    3b62:	57 e4       	ldi	r21, 0x47	; 71
    3b64:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    3b68:	18 16       	cp	r1, r24
    3b6a:	4c f5       	brge	.+82     	; 0x3bbe <HSSD_enDisplayNumber+0x7e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b70:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b72:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b74:	20 e0       	ldi	r18, 0x00	; 0
    3b76:	30 e0       	ldi	r19, 0x00	; 0
    3b78:	40 e2       	ldi	r20, 0x20	; 32
    3b7a:	51 e4       	ldi	r21, 0x41	; 65
    3b7c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    3b80:	dc 01       	movw	r26, r24
    3b82:	cb 01       	movw	r24, r22
    3b84:	bc 01       	movw	r22, r24
    3b86:	cd 01       	movw	r24, r26
    3b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b8c:	dc 01       	movw	r26, r24
    3b8e:	cb 01       	movw	r24, r22
    3b90:	9e 83       	std	Y+6, r25	; 0x06
    3b92:	8d 83       	std	Y+5, r24	; 0x05
    3b94:	0f c0       	rjmp	.+30     	; 0x3bb4 <HSSD_enDisplayNumber+0x7d6>
    3b96:	80 e9       	ldi	r24, 0x90	; 144
    3b98:	91 e0       	ldi	r25, 0x01	; 1
    3b9a:	9c 83       	std	Y+4, r25	; 0x04
    3b9c:	8b 83       	std	Y+3, r24	; 0x03
    3b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    3ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ba2:	01 97       	sbiw	r24, 0x01	; 1
    3ba4:	f1 f7       	brne	.-4      	; 0x3ba2 <HSSD_enDisplayNumber+0x7c4>
    3ba6:	9c 83       	std	Y+4, r25	; 0x04
    3ba8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3baa:	8d 81       	ldd	r24, Y+5	; 0x05
    3bac:	9e 81       	ldd	r25, Y+6	; 0x06
    3bae:	01 97       	sbiw	r24, 0x01	; 1
    3bb0:	9e 83       	std	Y+6, r25	; 0x06
    3bb2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    3bb6:	9e 81       	ldd	r25, Y+6	; 0x06
    3bb8:	00 97       	sbiw	r24, 0x00	; 0
    3bba:	69 f7       	brne	.-38     	; 0x3b96 <HSSD_enDisplayNumber+0x7b8>
    3bbc:	14 c0       	rjmp	.+40     	; 0x3be6 <HSSD_enDisplayNumber+0x808>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bbe:	6f 81       	ldd	r22, Y+7	; 0x07
    3bc0:	78 85       	ldd	r23, Y+8	; 0x08
    3bc2:	89 85       	ldd	r24, Y+9	; 0x09
    3bc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bca:	dc 01       	movw	r26, r24
    3bcc:	cb 01       	movw	r24, r22
    3bce:	9e 83       	std	Y+6, r25	; 0x06
    3bd0:	8d 83       	std	Y+5, r24	; 0x05
    3bd2:	8d 81       	ldd	r24, Y+5	; 0x05
    3bd4:	9e 81       	ldd	r25, Y+6	; 0x06
    3bd6:	9a 83       	std	Y+2, r25	; 0x02
    3bd8:	89 83       	std	Y+1, r24	; 0x01
    3bda:	89 81       	ldd	r24, Y+1	; 0x01
    3bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    3bde:	01 97       	sbiw	r24, 0x01	; 1
    3be0:	f1 f7       	brne	.-4      	; 0x3bde <HSSD_enDisplayNumber+0x800>
    3be2:	9a 83       	std	Y+2, r25	; 0x02
    3be4:	89 83       	std	Y+1, r24	; 0x01
//delay fo the digit to be on
_delay_ms(1);
//disable Dig2
MDIO_voidSetPinValue (HSSD_EN2_PIN , LOW);
    3be6:	85 e2       	ldi	r24, 0x25	; 37
    3be8:	60 e0       	ldi	r22, 0x00	; 0
    3bea:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>

u8 Local_u8Units =copy_u8NUMBER %10;
u8 Local_u8Tens =copy_u8NUMBER /10;
MDIO_voidSetPinValue(HSSD_LED_DP_PIN,LOW);
u16 i;
for(i=0;i<HSSD_DISPLAY_TIME;i++)
    3bee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3bf0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3bf2:	01 96       	adiw	r24, 0x01	; 1
    3bf4:	9e 8f       	std	Y+30, r25	; 0x1e
    3bf6:	8d 8f       	std	Y+29, r24	; 0x1d
    3bf8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3bfa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3bfc:	21 e0       	ldi	r18, 0x01	; 1
    3bfe:	84 3f       	cpi	r24, 0xF4	; 244
    3c00:	92 07       	cpc	r25, r18
    3c02:	08 f4       	brcc	.+2      	; 0x3c06 <HSSD_enDisplayNumber+0x828>
    3c04:	12 cc       	rjmp	.-2012   	; 0x342a <HSSD_enDisplayNumber+0x4c>
/*the foor loop is Important to see the out for the display time ,
	the function must do all proprties ,hence IF i called it before
 * the while(1) or the while 1 has many function ,it wont work well
*/
	}//end else
	return Local_enState;
    3c06:	89 a1       	ldd	r24, Y+33	; 0x21
}
    3c08:	a6 96       	adiw	r28, 0x26	; 38
    3c0a:	0f b6       	in	r0, 0x3f	; 63
    3c0c:	f8 94       	cli
    3c0e:	de bf       	out	0x3e, r29	; 62
    3c10:	0f be       	out	0x3f, r0	; 63
    3c12:	cd bf       	out	0x3d, r28	; 61
    3c14:	cf 91       	pop	r28
    3c16:	df 91       	pop	r29
    3c18:	08 95       	ret

00003c1a <HRELAY_enInit>:
#include "HRELAY_config.h"
#include "HRELAY_int.h"
#include "MDIO_int.h"

ErrorState_t HRELAY_enInit(void)
{
    3c1a:	df 93       	push	r29
    3c1c:	cf 93       	push	r28
    3c1e:	cd b7       	in	r28, 0x3d	; 61
    3c20:	de b7       	in	r29, 0x3e	; 62
MDIO_SetPinDirection(HRELAY_PIN,OUTPUT);
    3c22:	84 e2       	ldi	r24, 0x24	; 36
    3c24:	61 e0       	ldi	r22, 0x01	; 1
    3c26:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_SetPinDirection>
return SUCCES;
    3c2a:	82 e0       	ldi	r24, 0x02	; 2
}
    3c2c:	cf 91       	pop	r28
    3c2e:	df 91       	pop	r29
    3c30:	08 95       	ret

00003c32 <HRELAY_enOn>:
ErrorState_t HRELAY_enOn(void)
{
    3c32:	df 93       	push	r29
    3c34:	cf 93       	push	r28
    3c36:	cd b7       	in	r28, 0x3d	; 61
    3c38:	de b7       	in	r29, 0x3e	; 62
MDIO_voidSetPinValue(HRELAY_PIN, HIGH);
    3c3a:	84 e2       	ldi	r24, 0x24	; 36
    3c3c:	61 e0       	ldi	r22, 0x01	; 1
    3c3e:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	return SUCCES;
    3c42:	82 e0       	ldi	r24, 0x02	; 2
}
    3c44:	cf 91       	pop	r28
    3c46:	df 91       	pop	r29
    3c48:	08 95       	ret

00003c4a <HRELAY_enOFF>:
ErrorState_t HRELAY_enOFF(void)
{
    3c4a:	df 93       	push	r29
    3c4c:	cf 93       	push	r28
    3c4e:	cd b7       	in	r28, 0x3d	; 61
    3c50:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue(HRELAY_PIN, LOW);
    3c52:	84 e2       	ldi	r24, 0x24	; 36
    3c54:	60 e0       	ldi	r22, 0x00	; 0
    3c56:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	return SUCCES;
    3c5a:	82 e0       	ldi	r24, 0x02	; 2
}
    3c5c:	cf 91       	pop	r28
    3c5e:	df 91       	pop	r29
    3c60:	08 95       	ret

00003c62 <HRELAY_enToggle>:
ErrorState_t HRELAY_enToggle(void)
{
    3c62:	df 93       	push	r29
    3c64:	cf 93       	push	r28
    3c66:	cd b7       	in	r28, 0x3d	; 61
    3c68:	de b7       	in	r29, 0x3e	; 62
MDIO_voidTogglePinValue(HRELAY_PIN);
    3c6a:	84 e2       	ldi	r24, 0x24	; 36
    3c6c:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <MDIO_voidTogglePinValue>
	return SUCCES;
    3c70:	82 e0       	ldi	r24, 0x02	; 2
}
    3c72:	cf 91       	pop	r28
    3c74:	df 91       	pop	r29
    3c76:	08 95       	ret

00003c78 <HPB_enInit>:
#include  "HPB_priv.h"
#include "HPB_config.h"
#include "HPB_init.h"

 ErrorState_t HPB_enInit(PB_t * ptrPB)
{
    3c78:	df 93       	push	r29
    3c7a:	cf 93       	push	r28
    3c7c:	00 d0       	rcall	.+0      	; 0x3c7e <HPB_enInit+0x6>
    3c7e:	0f 92       	push	r0
    3c80:	cd b7       	in	r28, 0x3d	; 61
    3c82:	de b7       	in	r29, 0x3e	; 62
    3c84:	9b 83       	std	Y+3, r25	; 0x03
    3c86:	8a 83       	std	Y+2, r24	; 0x02
	 ErrorState_t Local_enState = SUCCES;
    3c88:	82 e0       	ldi	r24, 0x02	; 2
    3c8a:	89 83       	std	Y+1, r24	; 0x01

MDIO_SetPinDirection(ptrPB->PushButtonPin , INPUT);
    3c8c:	ea 81       	ldd	r30, Y+2	; 0x02
    3c8e:	fb 81       	ldd	r31, Y+3	; 0x03
    3c90:	81 81       	ldd	r24, Z+1	; 0x01
    3c92:	60 e0       	ldi	r22, 0x00	; 0
    3c94:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_SetPinDirection>

if(ptrPB->PushButtonID>=1&&ptrPB->PushButtonID<=4)
    3c98:	ea 81       	ldd	r30, Y+2	; 0x02
    3c9a:	fb 81       	ldd	r31, Y+3	; 0x03
    3c9c:	80 81       	ld	r24, Z
    3c9e:	88 23       	and	r24, r24
    3ca0:	61 f0       	breq	.+24     	; 0x3cba <HPB_enInit+0x42>
    3ca2:	ea 81       	ldd	r30, Y+2	; 0x02
    3ca4:	fb 81       	ldd	r31, Y+3	; 0x03
    3ca6:	80 81       	ld	r24, Z
    3ca8:	85 30       	cpi	r24, 0x05	; 5
    3caa:	38 f4       	brcc	.+14     	; 0x3cba <HPB_enInit+0x42>
{

#if(KIT_TYPE==SIM_KIT)
MDIO_voidSetPinValue(ptrPB->PushButtonPin, HIGH);
    3cac:	ea 81       	ldd	r30, Y+2	; 0x02
    3cae:	fb 81       	ldd	r31, Y+3	; 0x03
    3cb0:	81 81       	ldd	r24, Z+1	; 0x01
    3cb2:	61 e0       	ldi	r22, 0x01	; 1
    3cb4:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
    3cb8:	02 c0       	rjmp	.+4      	; 0x3cbe <HPB_enInit+0x46>

#endif
}//end if
else
{
 Local_enState = SUCCES;
    3cba:	82 e0       	ldi	r24, 0x02	; 2
    3cbc:	89 83       	std	Y+1, r24	; 0x01
		}//end switcj


#endif*/

return Local_enState;
    3cbe:	89 81       	ldd	r24, Y+1	; 0x01
}//end init
    3cc0:	0f 90       	pop	r0
    3cc2:	0f 90       	pop	r0
    3cc4:	0f 90       	pop	r0
    3cc6:	cf 91       	pop	r28
    3cc8:	df 91       	pop	r29
    3cca:	08 95       	ret

00003ccc <HPB_enRead>:

 ErrorState_t HPB_enRead(PB_t *ptrPB,PBState_t * ptrState)
{
    3ccc:	df 93       	push	r29
    3cce:	cf 93       	push	r28
    3cd0:	cd b7       	in	r28, 0x3d	; 61
    3cd2:	de b7       	in	r29, 0x3e	; 62
    3cd4:	64 97       	sbiw	r28, 0x14	; 20
    3cd6:	0f b6       	in	r0, 0x3f	; 63
    3cd8:	f8 94       	cli
    3cda:	de bf       	out	0x3e, r29	; 62
    3cdc:	0f be       	out	0x3f, r0	; 63
    3cde:	cd bf       	out	0x3d, r28	; 61
    3ce0:	9a 8b       	std	Y+18, r25	; 0x12
    3ce2:	89 8b       	std	Y+17, r24	; 0x11
    3ce4:	7c 8b       	std	Y+20, r23	; 0x14
    3ce6:	6b 8b       	std	Y+19, r22	; 0x13
	ErrorState_t Local_enState = SUCCES;
    3ce8:	82 e0       	ldi	r24, 0x02	; 2
    3cea:	8f 87       	std	Y+15, r24	; 0x0f

	u8 Local_u8PinRead = PB_RELEASED;
    3cec:	81 e0       	ldi	r24, 0x01	; 1
    3cee:	88 8b       	std	Y+16, r24	; 0x10


			MDIO_voidGetPinValue(ptrPB->PushButtonPin,&Local_u8PinRead);
    3cf0:	e9 89       	ldd	r30, Y+17	; 0x11
    3cf2:	fa 89       	ldd	r31, Y+18	; 0x12
    3cf4:	81 81       	ldd	r24, Z+1	; 0x01
    3cf6:	9e 01       	movw	r18, r28
    3cf8:	20 5f       	subi	r18, 0xF0	; 240
    3cfa:	3f 4f       	sbci	r19, 0xFF	; 255
    3cfc:	b9 01       	movw	r22, r18
    3cfe:	0e 94 69 14 	call	0x28d2	; 0x28d2 <MDIO_voidGetPinValue>
			if(Local_u8PinRead==PB_PRESSED)
    3d02:	88 89       	ldd	r24, Y+16	; 0x10
    3d04:	88 23       	and	r24, r24
    3d06:	09 f0       	breq	.+2      	; 0x3d0a <HPB_enRead+0x3e>
    3d08:	94 c0       	rjmp	.+296    	; 0x3e32 <HPB_enRead+0x166>
    3d0a:	80 e0       	ldi	r24, 0x00	; 0
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
    3d0e:	a8 e4       	ldi	r26, 0x48	; 72
    3d10:	b2 e4       	ldi	r27, 0x42	; 66
    3d12:	8b 87       	std	Y+11, r24	; 0x0b
    3d14:	9c 87       	std	Y+12, r25	; 0x0c
    3d16:	ad 87       	std	Y+13, r26	; 0x0d
    3d18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d20:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d22:	20 e0       	ldi	r18, 0x00	; 0
    3d24:	30 e0       	ldi	r19, 0x00	; 0
    3d26:	4a e7       	ldi	r20, 0x7A	; 122
    3d28:	55 e4       	ldi	r21, 0x45	; 69
    3d2a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    3d2e:	dc 01       	movw	r26, r24
    3d30:	cb 01       	movw	r24, r22
    3d32:	8f 83       	std	Y+7, r24	; 0x07
    3d34:	98 87       	std	Y+8, r25	; 0x08
    3d36:	a9 87       	std	Y+9, r26	; 0x09
    3d38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d3a:	6f 81       	ldd	r22, Y+7	; 0x07
    3d3c:	78 85       	ldd	r23, Y+8	; 0x08
    3d3e:	89 85       	ldd	r24, Y+9	; 0x09
    3d40:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d42:	20 e0       	ldi	r18, 0x00	; 0
    3d44:	30 e0       	ldi	r19, 0x00	; 0
    3d46:	40 e8       	ldi	r20, 0x80	; 128
    3d48:	5f e3       	ldi	r21, 0x3F	; 63
    3d4a:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    3d4e:	88 23       	and	r24, r24
    3d50:	2c f4       	brge	.+10     	; 0x3d5c <HPB_enRead+0x90>
		__ticks = 1;
    3d52:	81 e0       	ldi	r24, 0x01	; 1
    3d54:	90 e0       	ldi	r25, 0x00	; 0
    3d56:	9e 83       	std	Y+6, r25	; 0x06
    3d58:	8d 83       	std	Y+5, r24	; 0x05
    3d5a:	3f c0       	rjmp	.+126    	; 0x3dda <HPB_enRead+0x10e>
	else if (__tmp > 65535)
    3d5c:	6f 81       	ldd	r22, Y+7	; 0x07
    3d5e:	78 85       	ldd	r23, Y+8	; 0x08
    3d60:	89 85       	ldd	r24, Y+9	; 0x09
    3d62:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d64:	20 e0       	ldi	r18, 0x00	; 0
    3d66:	3f ef       	ldi	r19, 0xFF	; 255
    3d68:	4f e7       	ldi	r20, 0x7F	; 127
    3d6a:	57 e4       	ldi	r21, 0x47	; 71
    3d6c:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    3d70:	18 16       	cp	r1, r24
    3d72:	4c f5       	brge	.+82     	; 0x3dc6 <HPB_enRead+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d74:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d76:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d78:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d7c:	20 e0       	ldi	r18, 0x00	; 0
    3d7e:	30 e0       	ldi	r19, 0x00	; 0
    3d80:	40 e2       	ldi	r20, 0x20	; 32
    3d82:	51 e4       	ldi	r21, 0x41	; 65
    3d84:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    3d88:	dc 01       	movw	r26, r24
    3d8a:	cb 01       	movw	r24, r22
    3d8c:	bc 01       	movw	r22, r24
    3d8e:	cd 01       	movw	r24, r26
    3d90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d94:	dc 01       	movw	r26, r24
    3d96:	cb 01       	movw	r24, r22
    3d98:	9e 83       	std	Y+6, r25	; 0x06
    3d9a:	8d 83       	std	Y+5, r24	; 0x05
    3d9c:	0f c0       	rjmp	.+30     	; 0x3dbc <HPB_enRead+0xf0>
    3d9e:	80 e9       	ldi	r24, 0x90	; 144
    3da0:	91 e0       	ldi	r25, 0x01	; 1
    3da2:	9c 83       	std	Y+4, r25	; 0x04
    3da4:	8b 83       	std	Y+3, r24	; 0x03
    3da6:	8b 81       	ldd	r24, Y+3	; 0x03
    3da8:	9c 81       	ldd	r25, Y+4	; 0x04
    3daa:	01 97       	sbiw	r24, 0x01	; 1
    3dac:	f1 f7       	brne	.-4      	; 0x3daa <HPB_enRead+0xde>
    3dae:	9c 83       	std	Y+4, r25	; 0x04
    3db0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3db2:	8d 81       	ldd	r24, Y+5	; 0x05
    3db4:	9e 81       	ldd	r25, Y+6	; 0x06
    3db6:	01 97       	sbiw	r24, 0x01	; 1
    3db8:	9e 83       	std	Y+6, r25	; 0x06
    3dba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    3dbe:	9e 81       	ldd	r25, Y+6	; 0x06
    3dc0:	00 97       	sbiw	r24, 0x00	; 0
    3dc2:	69 f7       	brne	.-38     	; 0x3d9e <HPB_enRead+0xd2>
    3dc4:	14 c0       	rjmp	.+40     	; 0x3dee <HPB_enRead+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dc6:	6f 81       	ldd	r22, Y+7	; 0x07
    3dc8:	78 85       	ldd	r23, Y+8	; 0x08
    3dca:	89 85       	ldd	r24, Y+9	; 0x09
    3dcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dd2:	dc 01       	movw	r26, r24
    3dd4:	cb 01       	movw	r24, r22
    3dd6:	9e 83       	std	Y+6, r25	; 0x06
    3dd8:	8d 83       	std	Y+5, r24	; 0x05
    3dda:	8d 81       	ldd	r24, Y+5	; 0x05
    3ddc:	9e 81       	ldd	r25, Y+6	; 0x06
    3dde:	9a 83       	std	Y+2, r25	; 0x02
    3de0:	89 83       	std	Y+1, r24	; 0x01
    3de2:	89 81       	ldd	r24, Y+1	; 0x01
    3de4:	9a 81       	ldd	r25, Y+2	; 0x02
    3de6:	01 97       	sbiw	r24, 0x01	; 1
    3de8:	f1 f7       	brne	.-4      	; 0x3de6 <HPB_enRead+0x11a>
    3dea:	9a 83       	std	Y+2, r25	; 0x02
    3dec:	89 83       	std	Y+1, r24	; 0x01
			{//for debpuncing
				_delay_ms(50);
				//socend read
				MDIO_voidGetPinValue(ptrPB->PushButtonPin,&Local_u8PinRead);
    3dee:	e9 89       	ldd	r30, Y+17	; 0x11
    3df0:	fa 89       	ldd	r31, Y+18	; 0x12
    3df2:	81 81       	ldd	r24, Z+1	; 0x01
    3df4:	9e 01       	movw	r18, r28
    3df6:	20 5f       	subi	r18, 0xF0	; 240
    3df8:	3f 4f       	sbci	r19, 0xFF	; 255
    3dfa:	b9 01       	movw	r22, r18
    3dfc:	0e 94 69 14 	call	0x28d2	; 0x28d2 <MDIO_voidGetPinValue>
				if(Local_u8PinRead==PB_PRESSED)
    3e00:	88 89       	ldd	r24, Y+16	; 0x10
    3e02:	88 23       	and	r24, r24
    3e04:	89 f4       	brne	.+34     	; 0x3e28 <HPB_enRead+0x15c>
    3e06:	09 c0       	rjmp	.+18     	; 0x3e1a <HPB_enRead+0x14e>
				{
					//for single press
					while(Local_u8PinRead==PB_PRESSED)
					{
						MDIO_voidGetPinValue(ptrPB->PushButtonPin,&Local_u8PinRead);
    3e08:	e9 89       	ldd	r30, Y+17	; 0x11
    3e0a:	fa 89       	ldd	r31, Y+18	; 0x12
    3e0c:	81 81       	ldd	r24, Z+1	; 0x01
    3e0e:	9e 01       	movw	r18, r28
    3e10:	20 5f       	subi	r18, 0xF0	; 240
    3e12:	3f 4f       	sbci	r19, 0xFF	; 255
    3e14:	b9 01       	movw	r22, r18
    3e16:	0e 94 69 14 	call	0x28d2	; 0x28d2 <MDIO_voidGetPinValue>
				//socend read
				MDIO_voidGetPinValue(ptrPB->PushButtonPin,&Local_u8PinRead);
				if(Local_u8PinRead==PB_PRESSED)
				{
					//for single press
					while(Local_u8PinRead==PB_PRESSED)
    3e1a:	88 89       	ldd	r24, Y+16	; 0x10
    3e1c:	88 23       	and	r24, r24
    3e1e:	a1 f3       	breq	.-24     	; 0x3e08 <HPB_enRead+0x13c>
					{
						MDIO_voidGetPinValue(ptrPB->PushButtonPin,&Local_u8PinRead);
						//check if the button is still pressed or not

					}//end while
					*ptrState=PB_PRESSED;
    3e20:	eb 89       	ldd	r30, Y+19	; 0x13
    3e22:	fc 89       	ldd	r31, Y+20	; 0x14
    3e24:	10 82       	st	Z, r1
    3e26:	09 c0       	rjmp	.+18     	; 0x3e3a <HPB_enRead+0x16e>
				}//end if socend problem
				else
				{

					*ptrState=PB_RELEASED;
    3e28:	eb 89       	ldd	r30, Y+19	; 0x13
    3e2a:	fc 89       	ldd	r31, Y+20	; 0x14
    3e2c:	81 e0       	ldi	r24, 0x01	; 1
    3e2e:	80 83       	st	Z, r24
    3e30:	04 c0       	rjmp	.+8      	; 0x3e3a <HPB_enRead+0x16e>
				}
			}// end if debouncing
			else
							{

								*ptrState=PB_RELEASED;
    3e32:	eb 89       	ldd	r30, Y+19	; 0x13
    3e34:	fc 89       	ldd	r31, Y+20	; 0x14
    3e36:	81 e0       	ldi	r24, 0x01	; 1
    3e38:	80 83       	st	Z, r24
							}

		//Local_enState =OUT_OF_RANGE;


return Local_enState;
    3e3a:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3e3c:	64 96       	adiw	r28, 0x14	; 20
    3e3e:	0f b6       	in	r0, 0x3f	; 63
    3e40:	f8 94       	cli
    3e42:	de bf       	out	0x3e, r29	; 62
    3e44:	0f be       	out	0x3f, r0	; 63
    3e46:	cd bf       	out	0x3d, r28	; 61
    3e48:	cf 91       	pop	r28
    3e4a:	df 91       	pop	r29
    3e4c:	08 95       	ret

00003e4e <HLM35_enInit>:
#include "HLM35_config.h"
#include "HLM35_int.h"
#include "MADC_int.h"
#include "MDIO_int.h"
ErrorState_t HLM35_enInit(void)
{
    3e4e:	df 93       	push	r29
    3e50:	cf 93       	push	r28
    3e52:	cd b7       	in	r28, 0x3d	; 61
    3e54:	de b7       	in	r29, 0x3e	; 62

//step 1 set pin input
	MDIO_SetPinDirection(HLM35_PIN, INPUT);
    3e56:	8a e0       	ldi	r24, 0x0A	; 10
    3e58:	60 e0       	ldi	r22, 0x00	; 0
    3e5a:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_SetPinDirection>
	//init adc
	M_ADC_void_Init(prescaler_128,vref_AVCC);
    3e5e:	87 e0       	ldi	r24, 0x07	; 7
    3e60:	61 e0       	ldi	r22, 0x01	; 1
    3e62:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <M_ADC_void_Init>

	return SUCCES;
    3e66:	82 e0       	ldi	r24, 0x02	; 2

}
    3e68:	cf 91       	pop	r28
    3e6a:	df 91       	pop	r29
    3e6c:	08 95       	ret

00003e6e <HLM35_enTempRead>:
ErrorState_t HLM35_enTempRead(u8 *pTempValue)
{
    3e6e:	df 93       	push	r29
    3e70:	cf 93       	push	r28
    3e72:	cd b7       	in	r28, 0x3d	; 61
    3e74:	de b7       	in	r29, 0x3e	; 62
    3e76:	2a 97       	sbiw	r28, 0x0a	; 10
    3e78:	0f b6       	in	r0, 0x3f	; 63
    3e7a:	f8 94       	cli
    3e7c:	de bf       	out	0x3e, r29	; 62
    3e7e:	0f be       	out	0x3f, r0	; 63
    3e80:	cd bf       	out	0x3d, r28	; 61
    3e82:	9a 87       	std	Y+10, r25	; 0x0a
    3e84:	89 87       	std	Y+9, r24	; 0x09
	ErrorState_t Local_enState=SUCCES;
    3e86:	82 e0       	ldi	r24, 0x02	; 2
    3e88:	88 87       	std	Y+8, r24	; 0x08
	if(pTempValue !=NULL){
    3e8a:	89 85       	ldd	r24, Y+9	; 0x09
    3e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e8e:	00 97       	sbiw	r24, 0x00	; 0
    3e90:	99 f1       	breq	.+102    	; 0x3ef8 <HLM35_enTempRead+0x8a>
u16 Local_ADC_DigitalValue;

Local_ADC_DigitalValue=M_ADC_u16_adcRead(HLM35_CHANNEL);
    3e92:	80 e0       	ldi	r24, 0x00	; 0
    3e94:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <M_ADC_u16_adcRead>
    3e98:	9f 83       	std	Y+7, r25	; 0x07
    3e9a:	8e 83       	std	Y+6, r24	; 0x06


//convert
u32 Local_u32Readmv =((u32)Local_ADC_DigitalValue*5000)/1024;//DCA 5mV/resulution ==> value in mvolt
    3e9c:	8e 81       	ldd	r24, Y+6	; 0x06
    3e9e:	9f 81       	ldd	r25, Y+7	; 0x07
    3ea0:	cc 01       	movw	r24, r24
    3ea2:	a0 e0       	ldi	r26, 0x00	; 0
    3ea4:	b0 e0       	ldi	r27, 0x00	; 0
    3ea6:	28 e8       	ldi	r18, 0x88	; 136
    3ea8:	33 e1       	ldi	r19, 0x13	; 19
    3eaa:	40 e0       	ldi	r20, 0x00	; 0
    3eac:	50 e0       	ldi	r21, 0x00	; 0
    3eae:	bc 01       	movw	r22, r24
    3eb0:	cd 01       	movw	r24, r26
    3eb2:	0e 94 e8 30 	call	0x61d0	; 0x61d0 <__mulsi3>
    3eb6:	dc 01       	movw	r26, r24
    3eb8:	cb 01       	movw	r24, r22
    3eba:	07 2e       	mov	r0, r23
    3ebc:	7a e0       	ldi	r23, 0x0A	; 10
    3ebe:	b6 95       	lsr	r27
    3ec0:	a7 95       	ror	r26
    3ec2:	97 95       	ror	r25
    3ec4:	87 95       	ror	r24
    3ec6:	7a 95       	dec	r23
    3ec8:	d1 f7       	brne	.-12     	; 0x3ebe <HLM35_enTempRead+0x50>
    3eca:	70 2d       	mov	r23, r0
    3ecc:	8a 83       	std	Y+2, r24	; 0x02
    3ece:	9b 83       	std	Y+3, r25	; 0x03
    3ed0:	ac 83       	std	Y+4, r26	; 0x04
    3ed2:	bd 83       	std	Y+5, r27	; 0x05
*pTempValue=Local_u32Readmv/10; //==>50mV =5 C
    3ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ed6:	9b 81       	ldd	r25, Y+3	; 0x03
    3ed8:	ac 81       	ldd	r26, Y+4	; 0x04
    3eda:	bd 81       	ldd	r27, Y+5	; 0x05
    3edc:	2a e0       	ldi	r18, 0x0A	; 10
    3ede:	30 e0       	ldi	r19, 0x00	; 0
    3ee0:	40 e0       	ldi	r20, 0x00	; 0
    3ee2:	50 e0       	ldi	r21, 0x00	; 0
    3ee4:	bc 01       	movw	r22, r24
    3ee6:	cd 01       	movw	r24, r26
    3ee8:	0e 94 26 31 	call	0x624c	; 0x624c <__udivmodsi4>
    3eec:	da 01       	movw	r26, r20
    3eee:	c9 01       	movw	r24, r18
    3ef0:	e9 85       	ldd	r30, Y+9	; 0x09
    3ef2:	fa 85       	ldd	r31, Y+10	; 0x0a
    3ef4:	80 83       	st	Z, r24
    3ef6:	02 c0       	rjmp	.+4      	; 0x3efc <HLM35_enTempRead+0x8e>

	}//end if
	else
	{
		ErrorState_t Local_enState=NULL_PTR_ERR;
    3ef8:	81 e0       	ldi	r24, 0x01	; 1
    3efa:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enState;
    3efc:	88 85       	ldd	r24, Y+8	; 0x08
}
    3efe:	2a 96       	adiw	r28, 0x0a	; 10
    3f00:	0f b6       	in	r0, 0x3f	; 63
    3f02:	f8 94       	cli
    3f04:	de bf       	out	0x3e, r29	; 62
    3f06:	0f be       	out	0x3f, r0	; 63
    3f08:	cd bf       	out	0x3d, r28	; 61
    3f0a:	cf 91       	pop	r28
    3f0c:	df 91       	pop	r29
    3f0e:	08 95       	ret

00003f10 <HLCD_Init>:
#include "HLCD_config.h"
#include "HLCD_init.h"


ErrorState_t HLCD_Init(void)
{
    3f10:	df 93       	push	r29
    3f12:	cf 93       	push	r28
    3f14:	cd b7       	in	r28, 0x3d	; 61
    3f16:	de b7       	in	r29, 0x3e	; 62
    3f18:	aa 97       	sbiw	r28, 0x2a	; 42
    3f1a:	0f b6       	in	r0, 0x3f	; 63
    3f1c:	f8 94       	cli
    3f1e:	de bf       	out	0x3e, r29	; 62
    3f20:	0f be       	out	0x3f, r0	; 63
    3f22:	cd bf       	out	0x3d, r28	; 61
//set direction
MDIO_SetPinDirection(HLCD_RS_PIN, OUTPUT);
    3f24:	8b e0       	ldi	r24, 0x0B	; 11
    3f26:	61 e0       	ldi	r22, 0x01	; 1
    3f28:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_SetPinDirection>
MDIO_SetPinDirection(HLCD_EN_PIN, OUTPUT);
    3f2c:	8c e0       	ldi	r24, 0x0C	; 12
    3f2e:	61 e0       	ldi	r22, 0x01	; 1
    3f30:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_SetPinDirection>

MDIO_SetPinDirection(HLCD_D7_PIN, OUTPUT);
    3f34:	80 e1       	ldi	r24, 0x10	; 16
    3f36:	61 e0       	ldi	r22, 0x01	; 1
    3f38:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_SetPinDirection>
MDIO_SetPinDirection(HLCD_D6_PIN, OUTPUT);
    3f3c:	8f e0       	ldi	r24, 0x0F	; 15
    3f3e:	61 e0       	ldi	r22, 0x01	; 1
    3f40:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_SetPinDirection>
MDIO_SetPinDirection(HLCD_D5_PIN, OUTPUT);
    3f44:	8e e0       	ldi	r24, 0x0E	; 14
    3f46:	61 e0       	ldi	r22, 0x01	; 1
    3f48:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_SetPinDirection>
MDIO_SetPinDirection(HLCD_D4_PIN, OUTPUT);
    3f4c:	8d e0       	ldi	r24, 0x0D	; 13
    3f4e:	61 e0       	ldi	r22, 0x01	; 1
    3f50:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_SetPinDirection>
    3f54:	80 e0       	ldi	r24, 0x00	; 0
    3f56:	90 e0       	ldi	r25, 0x00	; 0
    3f58:	ac e0       	ldi	r26, 0x0C	; 12
    3f5a:	b2 e4       	ldi	r27, 0x42	; 66
    3f5c:	8f a3       	std	Y+39, r24	; 0x27
    3f5e:	98 a7       	std	Y+40, r25	; 0x28
    3f60:	a9 a7       	std	Y+41, r26	; 0x29
    3f62:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f64:	6f a1       	ldd	r22, Y+39	; 0x27
    3f66:	78 a5       	ldd	r23, Y+40	; 0x28
    3f68:	89 a5       	ldd	r24, Y+41	; 0x29
    3f6a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f6c:	20 e0       	ldi	r18, 0x00	; 0
    3f6e:	30 e0       	ldi	r19, 0x00	; 0
    3f70:	4a e7       	ldi	r20, 0x7A	; 122
    3f72:	55 e4       	ldi	r21, 0x45	; 69
    3f74:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    3f78:	dc 01       	movw	r26, r24
    3f7a:	cb 01       	movw	r24, r22
    3f7c:	8b a3       	std	Y+35, r24	; 0x23
    3f7e:	9c a3       	std	Y+36, r25	; 0x24
    3f80:	ad a3       	std	Y+37, r26	; 0x25
    3f82:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3f84:	6b a1       	ldd	r22, Y+35	; 0x23
    3f86:	7c a1       	ldd	r23, Y+36	; 0x24
    3f88:	8d a1       	ldd	r24, Y+37	; 0x25
    3f8a:	9e a1       	ldd	r25, Y+38	; 0x26
    3f8c:	20 e0       	ldi	r18, 0x00	; 0
    3f8e:	30 e0       	ldi	r19, 0x00	; 0
    3f90:	40 e8       	ldi	r20, 0x80	; 128
    3f92:	5f e3       	ldi	r21, 0x3F	; 63
    3f94:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    3f98:	88 23       	and	r24, r24
    3f9a:	2c f4       	brge	.+10     	; 0x3fa6 <HLCD_Init+0x96>
		__ticks = 1;
    3f9c:	81 e0       	ldi	r24, 0x01	; 1
    3f9e:	90 e0       	ldi	r25, 0x00	; 0
    3fa0:	9a a3       	std	Y+34, r25	; 0x22
    3fa2:	89 a3       	std	Y+33, r24	; 0x21
    3fa4:	3f c0       	rjmp	.+126    	; 0x4024 <HLCD_Init+0x114>
	else if (__tmp > 65535)
    3fa6:	6b a1       	ldd	r22, Y+35	; 0x23
    3fa8:	7c a1       	ldd	r23, Y+36	; 0x24
    3faa:	8d a1       	ldd	r24, Y+37	; 0x25
    3fac:	9e a1       	ldd	r25, Y+38	; 0x26
    3fae:	20 e0       	ldi	r18, 0x00	; 0
    3fb0:	3f ef       	ldi	r19, 0xFF	; 255
    3fb2:	4f e7       	ldi	r20, 0x7F	; 127
    3fb4:	57 e4       	ldi	r21, 0x47	; 71
    3fb6:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    3fba:	18 16       	cp	r1, r24
    3fbc:	4c f5       	brge	.+82     	; 0x4010 <HLCD_Init+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fbe:	6f a1       	ldd	r22, Y+39	; 0x27
    3fc0:	78 a5       	ldd	r23, Y+40	; 0x28
    3fc2:	89 a5       	ldd	r24, Y+41	; 0x29
    3fc4:	9a a5       	ldd	r25, Y+42	; 0x2a
    3fc6:	20 e0       	ldi	r18, 0x00	; 0
    3fc8:	30 e0       	ldi	r19, 0x00	; 0
    3fca:	40 e2       	ldi	r20, 0x20	; 32
    3fcc:	51 e4       	ldi	r21, 0x41	; 65
    3fce:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    3fd2:	dc 01       	movw	r26, r24
    3fd4:	cb 01       	movw	r24, r22
    3fd6:	bc 01       	movw	r22, r24
    3fd8:	cd 01       	movw	r24, r26
    3fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fde:	dc 01       	movw	r26, r24
    3fe0:	cb 01       	movw	r24, r22
    3fe2:	9a a3       	std	Y+34, r25	; 0x22
    3fe4:	89 a3       	std	Y+33, r24	; 0x21
    3fe6:	0f c0       	rjmp	.+30     	; 0x4006 <HLCD_Init+0xf6>
    3fe8:	80 e9       	ldi	r24, 0x90	; 144
    3fea:	91 e0       	ldi	r25, 0x01	; 1
    3fec:	98 a3       	std	Y+32, r25	; 0x20
    3fee:	8f 8f       	std	Y+31, r24	; 0x1f
    3ff0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ff2:	98 a1       	ldd	r25, Y+32	; 0x20
    3ff4:	01 97       	sbiw	r24, 0x01	; 1
    3ff6:	f1 f7       	brne	.-4      	; 0x3ff4 <HLCD_Init+0xe4>
    3ff8:	98 a3       	std	Y+32, r25	; 0x20
    3ffa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ffc:	89 a1       	ldd	r24, Y+33	; 0x21
    3ffe:	9a a1       	ldd	r25, Y+34	; 0x22
    4000:	01 97       	sbiw	r24, 0x01	; 1
    4002:	9a a3       	std	Y+34, r25	; 0x22
    4004:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4006:	89 a1       	ldd	r24, Y+33	; 0x21
    4008:	9a a1       	ldd	r25, Y+34	; 0x22
    400a:	00 97       	sbiw	r24, 0x00	; 0
    400c:	69 f7       	brne	.-38     	; 0x3fe8 <HLCD_Init+0xd8>
    400e:	14 c0       	rjmp	.+40     	; 0x4038 <HLCD_Init+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4010:	6b a1       	ldd	r22, Y+35	; 0x23
    4012:	7c a1       	ldd	r23, Y+36	; 0x24
    4014:	8d a1       	ldd	r24, Y+37	; 0x25
    4016:	9e a1       	ldd	r25, Y+38	; 0x26
    4018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    401c:	dc 01       	movw	r26, r24
    401e:	cb 01       	movw	r24, r22
    4020:	9a a3       	std	Y+34, r25	; 0x22
    4022:	89 a3       	std	Y+33, r24	; 0x21
    4024:	89 a1       	ldd	r24, Y+33	; 0x21
    4026:	9a a1       	ldd	r25, Y+34	; 0x22
    4028:	9e 8f       	std	Y+30, r25	; 0x1e
    402a:	8d 8f       	std	Y+29, r24	; 0x1d
    402c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    402e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4030:	01 97       	sbiw	r24, 0x01	; 1
    4032:	f1 f7       	brne	.-4      	; 0x4030 <HLCD_Init+0x120>
    4034:	9e 8f       	std	Y+30, r25	; 0x1e
    4036:	8d 8f       	std	Y+29, r24	; 0x1d

HLCD_SendCommand(HLCD_FUNCTION_SET_8Bit_2Lines_5X7);
#elif (HLCD_MODE==_4BIT_)
_delay_ms(35);
//send 0010
MDIO_voidSetPinValue(HLCD_EN_PIN, LOW);
    4038:	8c e0       	ldi	r24, 0x0C	; 12
    403a:	60 e0       	ldi	r22, 0x00	; 0
    403c:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>

MDIO_voidSetPinValue(HLCD_D7_PIN, 0);
    4040:	80 e1       	ldi	r24, 0x10	; 16
    4042:	60 e0       	ldi	r22, 0x00	; 0
    4044:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
MDIO_voidSetPinValue(HLCD_D6_PIN, 0);
    4048:	8f e0       	ldi	r24, 0x0F	; 15
    404a:	60 e0       	ldi	r22, 0x00	; 0
    404c:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
MDIO_voidSetPinValue(HLCD_D5_PIN, 1);
    4050:	8e e0       	ldi	r24, 0x0E	; 14
    4052:	61 e0       	ldi	r22, 0x01	; 1
    4054:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
MDIO_voidSetPinValue(HLCD_D4_PIN, 0);
    4058:	8d e0       	ldi	r24, 0x0D	; 13
    405a:	60 e0       	ldi	r22, 0x00	; 0
    405c:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
MDIO_voidSetPinValue(HLCD_EN_PIN, HIGH);
    4060:	8c e0       	ldi	r24, 0x0C	; 12
    4062:	61 e0       	ldi	r22, 0x01	; 1
    4064:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
    4068:	80 e0       	ldi	r24, 0x00	; 0
    406a:	90 e0       	ldi	r25, 0x00	; 0
    406c:	a0 e8       	ldi	r26, 0x80	; 128
    406e:	bf e3       	ldi	r27, 0x3F	; 63
    4070:	89 8f       	std	Y+25, r24	; 0x19
    4072:	9a 8f       	std	Y+26, r25	; 0x1a
    4074:	ab 8f       	std	Y+27, r26	; 0x1b
    4076:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4078:	69 8d       	ldd	r22, Y+25	; 0x19
    407a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    407c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    407e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4080:	20 e0       	ldi	r18, 0x00	; 0
    4082:	30 e0       	ldi	r19, 0x00	; 0
    4084:	4a e7       	ldi	r20, 0x7A	; 122
    4086:	55 e4       	ldi	r21, 0x45	; 69
    4088:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    408c:	dc 01       	movw	r26, r24
    408e:	cb 01       	movw	r24, r22
    4090:	8d 8b       	std	Y+21, r24	; 0x15
    4092:	9e 8b       	std	Y+22, r25	; 0x16
    4094:	af 8b       	std	Y+23, r26	; 0x17
    4096:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4098:	6d 89       	ldd	r22, Y+21	; 0x15
    409a:	7e 89       	ldd	r23, Y+22	; 0x16
    409c:	8f 89       	ldd	r24, Y+23	; 0x17
    409e:	98 8d       	ldd	r25, Y+24	; 0x18
    40a0:	20 e0       	ldi	r18, 0x00	; 0
    40a2:	30 e0       	ldi	r19, 0x00	; 0
    40a4:	40 e8       	ldi	r20, 0x80	; 128
    40a6:	5f e3       	ldi	r21, 0x3F	; 63
    40a8:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    40ac:	88 23       	and	r24, r24
    40ae:	2c f4       	brge	.+10     	; 0x40ba <HLCD_Init+0x1aa>
		__ticks = 1;
    40b0:	81 e0       	ldi	r24, 0x01	; 1
    40b2:	90 e0       	ldi	r25, 0x00	; 0
    40b4:	9c 8b       	std	Y+20, r25	; 0x14
    40b6:	8b 8b       	std	Y+19, r24	; 0x13
    40b8:	3f c0       	rjmp	.+126    	; 0x4138 <HLCD_Init+0x228>
	else if (__tmp > 65535)
    40ba:	6d 89       	ldd	r22, Y+21	; 0x15
    40bc:	7e 89       	ldd	r23, Y+22	; 0x16
    40be:	8f 89       	ldd	r24, Y+23	; 0x17
    40c0:	98 8d       	ldd	r25, Y+24	; 0x18
    40c2:	20 e0       	ldi	r18, 0x00	; 0
    40c4:	3f ef       	ldi	r19, 0xFF	; 255
    40c6:	4f e7       	ldi	r20, 0x7F	; 127
    40c8:	57 e4       	ldi	r21, 0x47	; 71
    40ca:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    40ce:	18 16       	cp	r1, r24
    40d0:	4c f5       	brge	.+82     	; 0x4124 <HLCD_Init+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40d2:	69 8d       	ldd	r22, Y+25	; 0x19
    40d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    40d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    40d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    40da:	20 e0       	ldi	r18, 0x00	; 0
    40dc:	30 e0       	ldi	r19, 0x00	; 0
    40de:	40 e2       	ldi	r20, 0x20	; 32
    40e0:	51 e4       	ldi	r21, 0x41	; 65
    40e2:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    40e6:	dc 01       	movw	r26, r24
    40e8:	cb 01       	movw	r24, r22
    40ea:	bc 01       	movw	r22, r24
    40ec:	cd 01       	movw	r24, r26
    40ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40f2:	dc 01       	movw	r26, r24
    40f4:	cb 01       	movw	r24, r22
    40f6:	9c 8b       	std	Y+20, r25	; 0x14
    40f8:	8b 8b       	std	Y+19, r24	; 0x13
    40fa:	0f c0       	rjmp	.+30     	; 0x411a <HLCD_Init+0x20a>
    40fc:	80 e9       	ldi	r24, 0x90	; 144
    40fe:	91 e0       	ldi	r25, 0x01	; 1
    4100:	9a 8b       	std	Y+18, r25	; 0x12
    4102:	89 8b       	std	Y+17, r24	; 0x11
    4104:	89 89       	ldd	r24, Y+17	; 0x11
    4106:	9a 89       	ldd	r25, Y+18	; 0x12
    4108:	01 97       	sbiw	r24, 0x01	; 1
    410a:	f1 f7       	brne	.-4      	; 0x4108 <HLCD_Init+0x1f8>
    410c:	9a 8b       	std	Y+18, r25	; 0x12
    410e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4110:	8b 89       	ldd	r24, Y+19	; 0x13
    4112:	9c 89       	ldd	r25, Y+20	; 0x14
    4114:	01 97       	sbiw	r24, 0x01	; 1
    4116:	9c 8b       	std	Y+20, r25	; 0x14
    4118:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    411a:	8b 89       	ldd	r24, Y+19	; 0x13
    411c:	9c 89       	ldd	r25, Y+20	; 0x14
    411e:	00 97       	sbiw	r24, 0x00	; 0
    4120:	69 f7       	brne	.-38     	; 0x40fc <HLCD_Init+0x1ec>
    4122:	14 c0       	rjmp	.+40     	; 0x414c <HLCD_Init+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4124:	6d 89       	ldd	r22, Y+21	; 0x15
    4126:	7e 89       	ldd	r23, Y+22	; 0x16
    4128:	8f 89       	ldd	r24, Y+23	; 0x17
    412a:	98 8d       	ldd	r25, Y+24	; 0x18
    412c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4130:	dc 01       	movw	r26, r24
    4132:	cb 01       	movw	r24, r22
    4134:	9c 8b       	std	Y+20, r25	; 0x14
    4136:	8b 8b       	std	Y+19, r24	; 0x13
    4138:	8b 89       	ldd	r24, Y+19	; 0x13
    413a:	9c 89       	ldd	r25, Y+20	; 0x14
    413c:	98 8b       	std	Y+16, r25	; 0x10
    413e:	8f 87       	std	Y+15, r24	; 0x0f
    4140:	8f 85       	ldd	r24, Y+15	; 0x0f
    4142:	98 89       	ldd	r25, Y+16	; 0x10
    4144:	01 97       	sbiw	r24, 0x01	; 1
    4146:	f1 f7       	brne	.-4      	; 0x4144 <HLCD_Init+0x234>
    4148:	98 8b       	std	Y+16, r25	; 0x10
    414a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
	MDIO_voidSetPinValue(HLCD_EN_PIN, LOW);
    414c:	8c e0       	ldi	r24, 0x0C	; 12
    414e:	60 e0       	ldi	r22, 0x00	; 0
    4150:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
    4154:	80 e0       	ldi	r24, 0x00	; 0
    4156:	90 e0       	ldi	r25, 0x00	; 0
    4158:	a0 ef       	ldi	r26, 0xF0	; 240
    415a:	b1 e4       	ldi	r27, 0x41	; 65
    415c:	8b 87       	std	Y+11, r24	; 0x0b
    415e:	9c 87       	std	Y+12, r25	; 0x0c
    4160:	ad 87       	std	Y+13, r26	; 0x0d
    4162:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4164:	6b 85       	ldd	r22, Y+11	; 0x0b
    4166:	7c 85       	ldd	r23, Y+12	; 0x0c
    4168:	8d 85       	ldd	r24, Y+13	; 0x0d
    416a:	9e 85       	ldd	r25, Y+14	; 0x0e
    416c:	20 e0       	ldi	r18, 0x00	; 0
    416e:	30 e0       	ldi	r19, 0x00	; 0
    4170:	4a e7       	ldi	r20, 0x7A	; 122
    4172:	55 e4       	ldi	r21, 0x45	; 69
    4174:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    4178:	dc 01       	movw	r26, r24
    417a:	cb 01       	movw	r24, r22
    417c:	8f 83       	std	Y+7, r24	; 0x07
    417e:	98 87       	std	Y+8, r25	; 0x08
    4180:	a9 87       	std	Y+9, r26	; 0x09
    4182:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4184:	6f 81       	ldd	r22, Y+7	; 0x07
    4186:	78 85       	ldd	r23, Y+8	; 0x08
    4188:	89 85       	ldd	r24, Y+9	; 0x09
    418a:	9a 85       	ldd	r25, Y+10	; 0x0a
    418c:	20 e0       	ldi	r18, 0x00	; 0
    418e:	30 e0       	ldi	r19, 0x00	; 0
    4190:	40 e8       	ldi	r20, 0x80	; 128
    4192:	5f e3       	ldi	r21, 0x3F	; 63
    4194:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    4198:	88 23       	and	r24, r24
    419a:	2c f4       	brge	.+10     	; 0x41a6 <HLCD_Init+0x296>
		__ticks = 1;
    419c:	81 e0       	ldi	r24, 0x01	; 1
    419e:	90 e0       	ldi	r25, 0x00	; 0
    41a0:	9e 83       	std	Y+6, r25	; 0x06
    41a2:	8d 83       	std	Y+5, r24	; 0x05
    41a4:	3f c0       	rjmp	.+126    	; 0x4224 <HLCD_Init+0x314>
	else if (__tmp > 65535)
    41a6:	6f 81       	ldd	r22, Y+7	; 0x07
    41a8:	78 85       	ldd	r23, Y+8	; 0x08
    41aa:	89 85       	ldd	r24, Y+9	; 0x09
    41ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    41ae:	20 e0       	ldi	r18, 0x00	; 0
    41b0:	3f ef       	ldi	r19, 0xFF	; 255
    41b2:	4f e7       	ldi	r20, 0x7F	; 127
    41b4:	57 e4       	ldi	r21, 0x47	; 71
    41b6:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    41ba:	18 16       	cp	r1, r24
    41bc:	4c f5       	brge	.+82     	; 0x4210 <HLCD_Init+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41be:	6b 85       	ldd	r22, Y+11	; 0x0b
    41c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    41c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    41c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    41c6:	20 e0       	ldi	r18, 0x00	; 0
    41c8:	30 e0       	ldi	r19, 0x00	; 0
    41ca:	40 e2       	ldi	r20, 0x20	; 32
    41cc:	51 e4       	ldi	r21, 0x41	; 65
    41ce:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    41d2:	dc 01       	movw	r26, r24
    41d4:	cb 01       	movw	r24, r22
    41d6:	bc 01       	movw	r22, r24
    41d8:	cd 01       	movw	r24, r26
    41da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41de:	dc 01       	movw	r26, r24
    41e0:	cb 01       	movw	r24, r22
    41e2:	9e 83       	std	Y+6, r25	; 0x06
    41e4:	8d 83       	std	Y+5, r24	; 0x05
    41e6:	0f c0       	rjmp	.+30     	; 0x4206 <HLCD_Init+0x2f6>
    41e8:	80 e9       	ldi	r24, 0x90	; 144
    41ea:	91 e0       	ldi	r25, 0x01	; 1
    41ec:	9c 83       	std	Y+4, r25	; 0x04
    41ee:	8b 83       	std	Y+3, r24	; 0x03
    41f0:	8b 81       	ldd	r24, Y+3	; 0x03
    41f2:	9c 81       	ldd	r25, Y+4	; 0x04
    41f4:	01 97       	sbiw	r24, 0x01	; 1
    41f6:	f1 f7       	brne	.-4      	; 0x41f4 <HLCD_Init+0x2e4>
    41f8:	9c 83       	std	Y+4, r25	; 0x04
    41fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41fc:	8d 81       	ldd	r24, Y+5	; 0x05
    41fe:	9e 81       	ldd	r25, Y+6	; 0x06
    4200:	01 97       	sbiw	r24, 0x01	; 1
    4202:	9e 83       	std	Y+6, r25	; 0x06
    4204:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4206:	8d 81       	ldd	r24, Y+5	; 0x05
    4208:	9e 81       	ldd	r25, Y+6	; 0x06
    420a:	00 97       	sbiw	r24, 0x00	; 0
    420c:	69 f7       	brne	.-38     	; 0x41e8 <HLCD_Init+0x2d8>
    420e:	14 c0       	rjmp	.+40     	; 0x4238 <HLCD_Init+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4210:	6f 81       	ldd	r22, Y+7	; 0x07
    4212:	78 85       	ldd	r23, Y+8	; 0x08
    4214:	89 85       	ldd	r24, Y+9	; 0x09
    4216:	9a 85       	ldd	r25, Y+10	; 0x0a
    4218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    421c:	dc 01       	movw	r26, r24
    421e:	cb 01       	movw	r24, r22
    4220:	9e 83       	std	Y+6, r25	; 0x06
    4222:	8d 83       	std	Y+5, r24	; 0x05
    4224:	8d 81       	ldd	r24, Y+5	; 0x05
    4226:	9e 81       	ldd	r25, Y+6	; 0x06
    4228:	9a 83       	std	Y+2, r25	; 0x02
    422a:	89 83       	std	Y+1, r24	; 0x01
    422c:	89 81       	ldd	r24, Y+1	; 0x01
    422e:	9a 81       	ldd	r25, Y+2	; 0x02
    4230:	01 97       	sbiw	r24, 0x01	; 1
    4232:	f1 f7       	brne	.-4      	; 0x4230 <HLCD_Init+0x320>
    4234:	9a 83       	std	Y+2, r25	; 0x02
    4236:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(30);
		HLCD_SendCommand(HLCD_FUNCTION_SET_4Bit_2Lines_5X7);
    4238:	88 e2       	ldi	r24, 0x28	; 40
    423a:	0e 94 89 23 	call	0x4712	; 0x4712 <HLCD_SendCommand>

#endif
		//perfom Init sequence
		//display on of
		HLCD_SendCommand(HLCD_DISPLAY_ON_CURSOS_ON_BLINK_OFF);
    423e:	8e e0       	ldi	r24, 0x0E	; 14
    4240:	0e 94 89 23 	call	0x4712	; 0x4712 <HLCD_SendCommand>
		//DSPLAY CLEAR
		HLCD_SendCommand(HLCD_CLEAR);
    4244:	81 e0       	ldi	r24, 0x01	; 1
    4246:	0e 94 89 23 	call	0x4712	; 0x4712 <HLCD_SendCommand>
		//ENTRY MODE
		HLCD_SendCommand(HLCD_ENTRY_MODE_SET_INC_NO_SHIFT);
    424a:	86 e0       	ldi	r24, 0x06	; 6
    424c:	0e 94 89 23 	call	0x4712	; 0x4712 <HLCD_SendCommand>

		return SUCCES;
    4250:	82 e0       	ldi	r24, 0x02	; 2
}
    4252:	aa 96       	adiw	r28, 0x2a	; 42
    4254:	0f b6       	in	r0, 0x3f	; 63
    4256:	f8 94       	cli
    4258:	de bf       	out	0x3e, r29	; 62
    425a:	0f be       	out	0x3f, r0	; 63
    425c:	cd bf       	out	0x3d, r28	; 61
    425e:	cf 91       	pop	r28
    4260:	df 91       	pop	r29
    4262:	08 95       	ret

00004264 <HLCD_voidNLatch>:

static void HLCD_voidNLatch(u8 copy_u8Byte)
{
    4264:	df 93       	push	r29
    4266:	cf 93       	push	r28
    4268:	cd b7       	in	r28, 0x3d	; 61
    426a:	de b7       	in	r29, 0x3e	; 62
    426c:	ef 97       	sbiw	r28, 0x3f	; 63
    426e:	0f b6       	in	r0, 0x3f	; 63
    4270:	f8 94       	cli
    4272:	de bf       	out	0x3e, r29	; 62
    4274:	0f be       	out	0x3f, r0	; 63
    4276:	cd bf       	out	0x3d, r28	; 61
    4278:	8f af       	std	Y+63, r24	; 0x3f
	MDIO_voidSetPinValue(HLCD_EN_PIN, HIGH);
	_delay_ms(1);
	MDIO_voidSetPinValue(HLCD_EN_PIN, LOW);
	_delay_ms(30);
#elif (HLCD_MODE== _4BIT_)
	u8 LCdPinArr[]={HLCD_D4_PIN,HLCD_D5_PIN,HLCD_D6_PIN,HLCD_D7_PIN};
    427a:	8d e0       	ldi	r24, 0x0D	; 13
    427c:	8b af       	std	Y+59, r24	; 0x3b
    427e:	8e e0       	ldi	r24, 0x0E	; 14
    4280:	8c af       	std	Y+60, r24	; 0x3c
    4282:	8f e0       	ldi	r24, 0x0F	; 15
    4284:	8d af       	std	Y+61, r24	; 0x3d
    4286:	80 e1       	ldi	r24, 0x10	; 16
    4288:	8e af       	std	Y+62, r24	; 0x3e
	//send upper 4 bits
	MDIO_voidSetPinValue(HLCD_EN_PIN, LOW);
    428a:	8c e0       	ldi	r24, 0x0C	; 12
    428c:	60 e0       	ldi	r22, 0x00	; 0
    428e:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	for(u8 i=0;i<=3;i++)
    4292:	1a ae       	std	Y+58, r1	; 0x3a
    4294:	20 c0       	rjmp	.+64     	; 0x42d6 <HLCD_voidNLatch+0x72>
	{
		MDIO_voidSetPinValue(LCdPinArr[i], GET_BIT(copy_u8Byte,i+4));
    4296:	8a ad       	ldd	r24, Y+58	; 0x3a
    4298:	28 2f       	mov	r18, r24
    429a:	30 e0       	ldi	r19, 0x00	; 0
    429c:	ce 01       	movw	r24, r28
    429e:	cb 96       	adiw	r24, 0x3b	; 59
    42a0:	fc 01       	movw	r30, r24
    42a2:	e2 0f       	add	r30, r18
    42a4:	f3 1f       	adc	r31, r19
    42a6:	40 81       	ld	r20, Z
    42a8:	8f ad       	ldd	r24, Y+63	; 0x3f
    42aa:	28 2f       	mov	r18, r24
    42ac:	30 e0       	ldi	r19, 0x00	; 0
    42ae:	8a ad       	ldd	r24, Y+58	; 0x3a
    42b0:	88 2f       	mov	r24, r24
    42b2:	90 e0       	ldi	r25, 0x00	; 0
    42b4:	04 96       	adiw	r24, 0x04	; 4
    42b6:	b9 01       	movw	r22, r18
    42b8:	02 c0       	rjmp	.+4      	; 0x42be <HLCD_voidNLatch+0x5a>
    42ba:	75 95       	asr	r23
    42bc:	67 95       	ror	r22
    42be:	8a 95       	dec	r24
    42c0:	e2 f7       	brpl	.-8      	; 0x42ba <HLCD_voidNLatch+0x56>
    42c2:	cb 01       	movw	r24, r22
    42c4:	98 2f       	mov	r25, r24
    42c6:	91 70       	andi	r25, 0x01	; 1
    42c8:	84 2f       	mov	r24, r20
    42ca:	69 2f       	mov	r22, r25
    42cc:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	_delay_ms(30);
#elif (HLCD_MODE== _4BIT_)
	u8 LCdPinArr[]={HLCD_D4_PIN,HLCD_D5_PIN,HLCD_D6_PIN,HLCD_D7_PIN};
	//send upper 4 bits
	MDIO_voidSetPinValue(HLCD_EN_PIN, LOW);
	for(u8 i=0;i<=3;i++)
    42d0:	8a ad       	ldd	r24, Y+58	; 0x3a
    42d2:	8f 5f       	subi	r24, 0xFF	; 255
    42d4:	8a af       	std	Y+58, r24	; 0x3a
    42d6:	8a ad       	ldd	r24, Y+58	; 0x3a
    42d8:	84 30       	cpi	r24, 0x04	; 4
    42da:	e8 f2       	brcs	.-70     	; 0x4296 <HLCD_voidNLatch+0x32>
	{
		MDIO_voidSetPinValue(LCdPinArr[i], GET_BIT(copy_u8Byte,i+4));
	}

	MDIO_voidSetPinValue(HLCD_EN_PIN, HIGH);
    42dc:	8c e0       	ldi	r24, 0x0C	; 12
    42de:	61 e0       	ldi	r22, 0x01	; 1
    42e0:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
    42e4:	80 e0       	ldi	r24, 0x00	; 0
    42e6:	90 e0       	ldi	r25, 0x00	; 0
    42e8:	a0 e8       	ldi	r26, 0x80	; 128
    42ea:	bf e3       	ldi	r27, 0x3F	; 63
    42ec:	8d ab       	std	Y+53, r24	; 0x35
    42ee:	9e ab       	std	Y+54, r25	; 0x36
    42f0:	af ab       	std	Y+55, r26	; 0x37
    42f2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42f4:	6d a9       	ldd	r22, Y+53	; 0x35
    42f6:	7e a9       	ldd	r23, Y+54	; 0x36
    42f8:	8f a9       	ldd	r24, Y+55	; 0x37
    42fa:	98 ad       	ldd	r25, Y+56	; 0x38
    42fc:	20 e0       	ldi	r18, 0x00	; 0
    42fe:	30 e0       	ldi	r19, 0x00	; 0
    4300:	4a e7       	ldi	r20, 0x7A	; 122
    4302:	55 e4       	ldi	r21, 0x45	; 69
    4304:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    4308:	dc 01       	movw	r26, r24
    430a:	cb 01       	movw	r24, r22
    430c:	89 ab       	std	Y+49, r24	; 0x31
    430e:	9a ab       	std	Y+50, r25	; 0x32
    4310:	ab ab       	std	Y+51, r26	; 0x33
    4312:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4314:	69 a9       	ldd	r22, Y+49	; 0x31
    4316:	7a a9       	ldd	r23, Y+50	; 0x32
    4318:	8b a9       	ldd	r24, Y+51	; 0x33
    431a:	9c a9       	ldd	r25, Y+52	; 0x34
    431c:	20 e0       	ldi	r18, 0x00	; 0
    431e:	30 e0       	ldi	r19, 0x00	; 0
    4320:	40 e8       	ldi	r20, 0x80	; 128
    4322:	5f e3       	ldi	r21, 0x3F	; 63
    4324:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    4328:	88 23       	and	r24, r24
    432a:	2c f4       	brge	.+10     	; 0x4336 <HLCD_voidNLatch+0xd2>
		__ticks = 1;
    432c:	81 e0       	ldi	r24, 0x01	; 1
    432e:	90 e0       	ldi	r25, 0x00	; 0
    4330:	98 ab       	std	Y+48, r25	; 0x30
    4332:	8f a7       	std	Y+47, r24	; 0x2f
    4334:	3f c0       	rjmp	.+126    	; 0x43b4 <HLCD_voidNLatch+0x150>
	else if (__tmp > 65535)
    4336:	69 a9       	ldd	r22, Y+49	; 0x31
    4338:	7a a9       	ldd	r23, Y+50	; 0x32
    433a:	8b a9       	ldd	r24, Y+51	; 0x33
    433c:	9c a9       	ldd	r25, Y+52	; 0x34
    433e:	20 e0       	ldi	r18, 0x00	; 0
    4340:	3f ef       	ldi	r19, 0xFF	; 255
    4342:	4f e7       	ldi	r20, 0x7F	; 127
    4344:	57 e4       	ldi	r21, 0x47	; 71
    4346:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    434a:	18 16       	cp	r1, r24
    434c:	4c f5       	brge	.+82     	; 0x43a0 <HLCD_voidNLatch+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    434e:	6d a9       	ldd	r22, Y+53	; 0x35
    4350:	7e a9       	ldd	r23, Y+54	; 0x36
    4352:	8f a9       	ldd	r24, Y+55	; 0x37
    4354:	98 ad       	ldd	r25, Y+56	; 0x38
    4356:	20 e0       	ldi	r18, 0x00	; 0
    4358:	30 e0       	ldi	r19, 0x00	; 0
    435a:	40 e2       	ldi	r20, 0x20	; 32
    435c:	51 e4       	ldi	r21, 0x41	; 65
    435e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    4362:	dc 01       	movw	r26, r24
    4364:	cb 01       	movw	r24, r22
    4366:	bc 01       	movw	r22, r24
    4368:	cd 01       	movw	r24, r26
    436a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    436e:	dc 01       	movw	r26, r24
    4370:	cb 01       	movw	r24, r22
    4372:	98 ab       	std	Y+48, r25	; 0x30
    4374:	8f a7       	std	Y+47, r24	; 0x2f
    4376:	0f c0       	rjmp	.+30     	; 0x4396 <HLCD_voidNLatch+0x132>
    4378:	80 e9       	ldi	r24, 0x90	; 144
    437a:	91 e0       	ldi	r25, 0x01	; 1
    437c:	9e a7       	std	Y+46, r25	; 0x2e
    437e:	8d a7       	std	Y+45, r24	; 0x2d
    4380:	8d a5       	ldd	r24, Y+45	; 0x2d
    4382:	9e a5       	ldd	r25, Y+46	; 0x2e
    4384:	01 97       	sbiw	r24, 0x01	; 1
    4386:	f1 f7       	brne	.-4      	; 0x4384 <HLCD_voidNLatch+0x120>
    4388:	9e a7       	std	Y+46, r25	; 0x2e
    438a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    438c:	8f a5       	ldd	r24, Y+47	; 0x2f
    438e:	98 a9       	ldd	r25, Y+48	; 0x30
    4390:	01 97       	sbiw	r24, 0x01	; 1
    4392:	98 ab       	std	Y+48, r25	; 0x30
    4394:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4396:	8f a5       	ldd	r24, Y+47	; 0x2f
    4398:	98 a9       	ldd	r25, Y+48	; 0x30
    439a:	00 97       	sbiw	r24, 0x00	; 0
    439c:	69 f7       	brne	.-38     	; 0x4378 <HLCD_voidNLatch+0x114>
    439e:	14 c0       	rjmp	.+40     	; 0x43c8 <HLCD_voidNLatch+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43a0:	69 a9       	ldd	r22, Y+49	; 0x31
    43a2:	7a a9       	ldd	r23, Y+50	; 0x32
    43a4:	8b a9       	ldd	r24, Y+51	; 0x33
    43a6:	9c a9       	ldd	r25, Y+52	; 0x34
    43a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43ac:	dc 01       	movw	r26, r24
    43ae:	cb 01       	movw	r24, r22
    43b0:	98 ab       	std	Y+48, r25	; 0x30
    43b2:	8f a7       	std	Y+47, r24	; 0x2f
    43b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    43b6:	98 a9       	ldd	r25, Y+48	; 0x30
    43b8:	9c a7       	std	Y+44, r25	; 0x2c
    43ba:	8b a7       	std	Y+43, r24	; 0x2b
    43bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    43be:	9c a5       	ldd	r25, Y+44	; 0x2c
    43c0:	01 97       	sbiw	r24, 0x01	; 1
    43c2:	f1 f7       	brne	.-4      	; 0x43c0 <HLCD_voidNLatch+0x15c>
    43c4:	9c a7       	std	Y+44, r25	; 0x2c
    43c6:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
	MDIO_voidSetPinValue(HLCD_EN_PIN, LOW);
    43c8:	8c e0       	ldi	r24, 0x0C	; 12
    43ca:	60 e0       	ldi	r22, 0x00	; 0
    43cc:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
    43d0:	80 e0       	ldi	r24, 0x00	; 0
    43d2:	90 e0       	ldi	r25, 0x00	; 0
    43d4:	a0 ef       	ldi	r26, 0xF0	; 240
    43d6:	b1 e4       	ldi	r27, 0x41	; 65
    43d8:	8f a3       	std	Y+39, r24	; 0x27
    43da:	98 a7       	std	Y+40, r25	; 0x28
    43dc:	a9 a7       	std	Y+41, r26	; 0x29
    43de:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43e0:	6f a1       	ldd	r22, Y+39	; 0x27
    43e2:	78 a5       	ldd	r23, Y+40	; 0x28
    43e4:	89 a5       	ldd	r24, Y+41	; 0x29
    43e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    43e8:	20 e0       	ldi	r18, 0x00	; 0
    43ea:	30 e0       	ldi	r19, 0x00	; 0
    43ec:	4a e7       	ldi	r20, 0x7A	; 122
    43ee:	55 e4       	ldi	r21, 0x45	; 69
    43f0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    43f4:	dc 01       	movw	r26, r24
    43f6:	cb 01       	movw	r24, r22
    43f8:	8b a3       	std	Y+35, r24	; 0x23
    43fa:	9c a3       	std	Y+36, r25	; 0x24
    43fc:	ad a3       	std	Y+37, r26	; 0x25
    43fe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4400:	6b a1       	ldd	r22, Y+35	; 0x23
    4402:	7c a1       	ldd	r23, Y+36	; 0x24
    4404:	8d a1       	ldd	r24, Y+37	; 0x25
    4406:	9e a1       	ldd	r25, Y+38	; 0x26
    4408:	20 e0       	ldi	r18, 0x00	; 0
    440a:	30 e0       	ldi	r19, 0x00	; 0
    440c:	40 e8       	ldi	r20, 0x80	; 128
    440e:	5f e3       	ldi	r21, 0x3F	; 63
    4410:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    4414:	88 23       	and	r24, r24
    4416:	2c f4       	brge	.+10     	; 0x4422 <HLCD_voidNLatch+0x1be>
		__ticks = 1;
    4418:	81 e0       	ldi	r24, 0x01	; 1
    441a:	90 e0       	ldi	r25, 0x00	; 0
    441c:	9a a3       	std	Y+34, r25	; 0x22
    441e:	89 a3       	std	Y+33, r24	; 0x21
    4420:	3f c0       	rjmp	.+126    	; 0x44a0 <HLCD_voidNLatch+0x23c>
	else if (__tmp > 65535)
    4422:	6b a1       	ldd	r22, Y+35	; 0x23
    4424:	7c a1       	ldd	r23, Y+36	; 0x24
    4426:	8d a1       	ldd	r24, Y+37	; 0x25
    4428:	9e a1       	ldd	r25, Y+38	; 0x26
    442a:	20 e0       	ldi	r18, 0x00	; 0
    442c:	3f ef       	ldi	r19, 0xFF	; 255
    442e:	4f e7       	ldi	r20, 0x7F	; 127
    4430:	57 e4       	ldi	r21, 0x47	; 71
    4432:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    4436:	18 16       	cp	r1, r24
    4438:	4c f5       	brge	.+82     	; 0x448c <HLCD_voidNLatch+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    443a:	6f a1       	ldd	r22, Y+39	; 0x27
    443c:	78 a5       	ldd	r23, Y+40	; 0x28
    443e:	89 a5       	ldd	r24, Y+41	; 0x29
    4440:	9a a5       	ldd	r25, Y+42	; 0x2a
    4442:	20 e0       	ldi	r18, 0x00	; 0
    4444:	30 e0       	ldi	r19, 0x00	; 0
    4446:	40 e2       	ldi	r20, 0x20	; 32
    4448:	51 e4       	ldi	r21, 0x41	; 65
    444a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    444e:	dc 01       	movw	r26, r24
    4450:	cb 01       	movw	r24, r22
    4452:	bc 01       	movw	r22, r24
    4454:	cd 01       	movw	r24, r26
    4456:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    445a:	dc 01       	movw	r26, r24
    445c:	cb 01       	movw	r24, r22
    445e:	9a a3       	std	Y+34, r25	; 0x22
    4460:	89 a3       	std	Y+33, r24	; 0x21
    4462:	0f c0       	rjmp	.+30     	; 0x4482 <HLCD_voidNLatch+0x21e>
    4464:	80 e9       	ldi	r24, 0x90	; 144
    4466:	91 e0       	ldi	r25, 0x01	; 1
    4468:	98 a3       	std	Y+32, r25	; 0x20
    446a:	8f 8f       	std	Y+31, r24	; 0x1f
    446c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    446e:	98 a1       	ldd	r25, Y+32	; 0x20
    4470:	01 97       	sbiw	r24, 0x01	; 1
    4472:	f1 f7       	brne	.-4      	; 0x4470 <HLCD_voidNLatch+0x20c>
    4474:	98 a3       	std	Y+32, r25	; 0x20
    4476:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4478:	89 a1       	ldd	r24, Y+33	; 0x21
    447a:	9a a1       	ldd	r25, Y+34	; 0x22
    447c:	01 97       	sbiw	r24, 0x01	; 1
    447e:	9a a3       	std	Y+34, r25	; 0x22
    4480:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4482:	89 a1       	ldd	r24, Y+33	; 0x21
    4484:	9a a1       	ldd	r25, Y+34	; 0x22
    4486:	00 97       	sbiw	r24, 0x00	; 0
    4488:	69 f7       	brne	.-38     	; 0x4464 <HLCD_voidNLatch+0x200>
    448a:	14 c0       	rjmp	.+40     	; 0x44b4 <HLCD_voidNLatch+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    448c:	6b a1       	ldd	r22, Y+35	; 0x23
    448e:	7c a1       	ldd	r23, Y+36	; 0x24
    4490:	8d a1       	ldd	r24, Y+37	; 0x25
    4492:	9e a1       	ldd	r25, Y+38	; 0x26
    4494:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4498:	dc 01       	movw	r26, r24
    449a:	cb 01       	movw	r24, r22
    449c:	9a a3       	std	Y+34, r25	; 0x22
    449e:	89 a3       	std	Y+33, r24	; 0x21
    44a0:	89 a1       	ldd	r24, Y+33	; 0x21
    44a2:	9a a1       	ldd	r25, Y+34	; 0x22
    44a4:	9e 8f       	std	Y+30, r25	; 0x1e
    44a6:	8d 8f       	std	Y+29, r24	; 0x1d
    44a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    44aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    44ac:	01 97       	sbiw	r24, 0x01	; 1
    44ae:	f1 f7       	brne	.-4      	; 0x44ac <HLCD_voidNLatch+0x248>
    44b0:	9e 8f       	std	Y+30, r25	; 0x1e
    44b2:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(30);
		//send lower 4 bits
		MDIO_voidSetPinValue(HLCD_EN_PIN, LOW);
    44b4:	8c e0       	ldi	r24, 0x0C	; 12
    44b6:	60 e0       	ldi	r22, 0x00	; 0
    44b8:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
		for(u8 i=0;i<=3;i++)
    44bc:	19 ae       	std	Y+57, r1	; 0x39
    44be:	1f c0       	rjmp	.+62     	; 0x44fe <HLCD_voidNLatch+0x29a>
		{
			MDIO_voidSetPinValue(LCdPinArr[i], GET_BIT(copy_u8Byte,i));
    44c0:	89 ad       	ldd	r24, Y+57	; 0x39
    44c2:	28 2f       	mov	r18, r24
    44c4:	30 e0       	ldi	r19, 0x00	; 0
    44c6:	ce 01       	movw	r24, r28
    44c8:	cb 96       	adiw	r24, 0x3b	; 59
    44ca:	fc 01       	movw	r30, r24
    44cc:	e2 0f       	add	r30, r18
    44ce:	f3 1f       	adc	r31, r19
    44d0:	40 81       	ld	r20, Z
    44d2:	8f ad       	ldd	r24, Y+63	; 0x3f
    44d4:	28 2f       	mov	r18, r24
    44d6:	30 e0       	ldi	r19, 0x00	; 0
    44d8:	89 ad       	ldd	r24, Y+57	; 0x39
    44da:	88 2f       	mov	r24, r24
    44dc:	90 e0       	ldi	r25, 0x00	; 0
    44de:	b9 01       	movw	r22, r18
    44e0:	02 c0       	rjmp	.+4      	; 0x44e6 <HLCD_voidNLatch+0x282>
    44e2:	75 95       	asr	r23
    44e4:	67 95       	ror	r22
    44e6:	8a 95       	dec	r24
    44e8:	e2 f7       	brpl	.-8      	; 0x44e2 <HLCD_voidNLatch+0x27e>
    44ea:	cb 01       	movw	r24, r22
    44ec:	98 2f       	mov	r25, r24
    44ee:	91 70       	andi	r25, 0x01	; 1
    44f0:	84 2f       	mov	r24, r20
    44f2:	69 2f       	mov	r22, r25
    44f4:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
		_delay_ms(1);
	MDIO_voidSetPinValue(HLCD_EN_PIN, LOW);
		_delay_ms(30);
		//send lower 4 bits
		MDIO_voidSetPinValue(HLCD_EN_PIN, LOW);
		for(u8 i=0;i<=3;i++)
    44f8:	89 ad       	ldd	r24, Y+57	; 0x39
    44fa:	8f 5f       	subi	r24, 0xFF	; 255
    44fc:	89 af       	std	Y+57, r24	; 0x39
    44fe:	89 ad       	ldd	r24, Y+57	; 0x39
    4500:	84 30       	cpi	r24, 0x04	; 4
    4502:	f0 f2       	brcs	.-68     	; 0x44c0 <HLCD_voidNLatch+0x25c>
		{
			MDIO_voidSetPinValue(LCdPinArr[i], GET_BIT(copy_u8Byte,i));
		}

		MDIO_voidSetPinValue(HLCD_EN_PIN, HIGH);
    4504:	8c e0       	ldi	r24, 0x0C	; 12
    4506:	61 e0       	ldi	r22, 0x01	; 1
    4508:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
    450c:	80 e0       	ldi	r24, 0x00	; 0
    450e:	90 e0       	ldi	r25, 0x00	; 0
    4510:	a0 e8       	ldi	r26, 0x80	; 128
    4512:	bf e3       	ldi	r27, 0x3F	; 63
    4514:	89 8f       	std	Y+25, r24	; 0x19
    4516:	9a 8f       	std	Y+26, r25	; 0x1a
    4518:	ab 8f       	std	Y+27, r26	; 0x1b
    451a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    451c:	69 8d       	ldd	r22, Y+25	; 0x19
    451e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4520:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4522:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4524:	20 e0       	ldi	r18, 0x00	; 0
    4526:	30 e0       	ldi	r19, 0x00	; 0
    4528:	4a e7       	ldi	r20, 0x7A	; 122
    452a:	55 e4       	ldi	r21, 0x45	; 69
    452c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    4530:	dc 01       	movw	r26, r24
    4532:	cb 01       	movw	r24, r22
    4534:	8d 8b       	std	Y+21, r24	; 0x15
    4536:	9e 8b       	std	Y+22, r25	; 0x16
    4538:	af 8b       	std	Y+23, r26	; 0x17
    453a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    453c:	6d 89       	ldd	r22, Y+21	; 0x15
    453e:	7e 89       	ldd	r23, Y+22	; 0x16
    4540:	8f 89       	ldd	r24, Y+23	; 0x17
    4542:	98 8d       	ldd	r25, Y+24	; 0x18
    4544:	20 e0       	ldi	r18, 0x00	; 0
    4546:	30 e0       	ldi	r19, 0x00	; 0
    4548:	40 e8       	ldi	r20, 0x80	; 128
    454a:	5f e3       	ldi	r21, 0x3F	; 63
    454c:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    4550:	88 23       	and	r24, r24
    4552:	2c f4       	brge	.+10     	; 0x455e <HLCD_voidNLatch+0x2fa>
		__ticks = 1;
    4554:	81 e0       	ldi	r24, 0x01	; 1
    4556:	90 e0       	ldi	r25, 0x00	; 0
    4558:	9c 8b       	std	Y+20, r25	; 0x14
    455a:	8b 8b       	std	Y+19, r24	; 0x13
    455c:	3f c0       	rjmp	.+126    	; 0x45dc <HLCD_voidNLatch+0x378>
	else if (__tmp > 65535)
    455e:	6d 89       	ldd	r22, Y+21	; 0x15
    4560:	7e 89       	ldd	r23, Y+22	; 0x16
    4562:	8f 89       	ldd	r24, Y+23	; 0x17
    4564:	98 8d       	ldd	r25, Y+24	; 0x18
    4566:	20 e0       	ldi	r18, 0x00	; 0
    4568:	3f ef       	ldi	r19, 0xFF	; 255
    456a:	4f e7       	ldi	r20, 0x7F	; 127
    456c:	57 e4       	ldi	r21, 0x47	; 71
    456e:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    4572:	18 16       	cp	r1, r24
    4574:	4c f5       	brge	.+82     	; 0x45c8 <HLCD_voidNLatch+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4576:	69 8d       	ldd	r22, Y+25	; 0x19
    4578:	7a 8d       	ldd	r23, Y+26	; 0x1a
    457a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    457c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    457e:	20 e0       	ldi	r18, 0x00	; 0
    4580:	30 e0       	ldi	r19, 0x00	; 0
    4582:	40 e2       	ldi	r20, 0x20	; 32
    4584:	51 e4       	ldi	r21, 0x41	; 65
    4586:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    458a:	dc 01       	movw	r26, r24
    458c:	cb 01       	movw	r24, r22
    458e:	bc 01       	movw	r22, r24
    4590:	cd 01       	movw	r24, r26
    4592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4596:	dc 01       	movw	r26, r24
    4598:	cb 01       	movw	r24, r22
    459a:	9c 8b       	std	Y+20, r25	; 0x14
    459c:	8b 8b       	std	Y+19, r24	; 0x13
    459e:	0f c0       	rjmp	.+30     	; 0x45be <HLCD_voidNLatch+0x35a>
    45a0:	80 e9       	ldi	r24, 0x90	; 144
    45a2:	91 e0       	ldi	r25, 0x01	; 1
    45a4:	9a 8b       	std	Y+18, r25	; 0x12
    45a6:	89 8b       	std	Y+17, r24	; 0x11
    45a8:	89 89       	ldd	r24, Y+17	; 0x11
    45aa:	9a 89       	ldd	r25, Y+18	; 0x12
    45ac:	01 97       	sbiw	r24, 0x01	; 1
    45ae:	f1 f7       	brne	.-4      	; 0x45ac <HLCD_voidNLatch+0x348>
    45b0:	9a 8b       	std	Y+18, r25	; 0x12
    45b2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45b4:	8b 89       	ldd	r24, Y+19	; 0x13
    45b6:	9c 89       	ldd	r25, Y+20	; 0x14
    45b8:	01 97       	sbiw	r24, 0x01	; 1
    45ba:	9c 8b       	std	Y+20, r25	; 0x14
    45bc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45be:	8b 89       	ldd	r24, Y+19	; 0x13
    45c0:	9c 89       	ldd	r25, Y+20	; 0x14
    45c2:	00 97       	sbiw	r24, 0x00	; 0
    45c4:	69 f7       	brne	.-38     	; 0x45a0 <HLCD_voidNLatch+0x33c>
    45c6:	14 c0       	rjmp	.+40     	; 0x45f0 <HLCD_voidNLatch+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45c8:	6d 89       	ldd	r22, Y+21	; 0x15
    45ca:	7e 89       	ldd	r23, Y+22	; 0x16
    45cc:	8f 89       	ldd	r24, Y+23	; 0x17
    45ce:	98 8d       	ldd	r25, Y+24	; 0x18
    45d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45d4:	dc 01       	movw	r26, r24
    45d6:	cb 01       	movw	r24, r22
    45d8:	9c 8b       	std	Y+20, r25	; 0x14
    45da:	8b 8b       	std	Y+19, r24	; 0x13
    45dc:	8b 89       	ldd	r24, Y+19	; 0x13
    45de:	9c 89       	ldd	r25, Y+20	; 0x14
    45e0:	98 8b       	std	Y+16, r25	; 0x10
    45e2:	8f 87       	std	Y+15, r24	; 0x0f
    45e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    45e6:	98 89       	ldd	r25, Y+16	; 0x10
    45e8:	01 97       	sbiw	r24, 0x01	; 1
    45ea:	f1 f7       	brne	.-4      	; 0x45e8 <HLCD_voidNLatch+0x384>
    45ec:	98 8b       	std	Y+16, r25	; 0x10
    45ee:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1);
		MDIO_voidSetPinValue(HLCD_EN_PIN, LOW);
    45f0:	8c e0       	ldi	r24, 0x0C	; 12
    45f2:	60 e0       	ldi	r22, 0x00	; 0
    45f4:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
    45f8:	80 e0       	ldi	r24, 0x00	; 0
    45fa:	90 e0       	ldi	r25, 0x00	; 0
    45fc:	a0 ef       	ldi	r26, 0xF0	; 240
    45fe:	b1 e4       	ldi	r27, 0x41	; 65
    4600:	8b 87       	std	Y+11, r24	; 0x0b
    4602:	9c 87       	std	Y+12, r25	; 0x0c
    4604:	ad 87       	std	Y+13, r26	; 0x0d
    4606:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4608:	6b 85       	ldd	r22, Y+11	; 0x0b
    460a:	7c 85       	ldd	r23, Y+12	; 0x0c
    460c:	8d 85       	ldd	r24, Y+13	; 0x0d
    460e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4610:	20 e0       	ldi	r18, 0x00	; 0
    4612:	30 e0       	ldi	r19, 0x00	; 0
    4614:	4a e7       	ldi	r20, 0x7A	; 122
    4616:	55 e4       	ldi	r21, 0x45	; 69
    4618:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    461c:	dc 01       	movw	r26, r24
    461e:	cb 01       	movw	r24, r22
    4620:	8f 83       	std	Y+7, r24	; 0x07
    4622:	98 87       	std	Y+8, r25	; 0x08
    4624:	a9 87       	std	Y+9, r26	; 0x09
    4626:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4628:	6f 81       	ldd	r22, Y+7	; 0x07
    462a:	78 85       	ldd	r23, Y+8	; 0x08
    462c:	89 85       	ldd	r24, Y+9	; 0x09
    462e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4630:	20 e0       	ldi	r18, 0x00	; 0
    4632:	30 e0       	ldi	r19, 0x00	; 0
    4634:	40 e8       	ldi	r20, 0x80	; 128
    4636:	5f e3       	ldi	r21, 0x3F	; 63
    4638:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    463c:	88 23       	and	r24, r24
    463e:	2c f4       	brge	.+10     	; 0x464a <HLCD_voidNLatch+0x3e6>
		__ticks = 1;
    4640:	81 e0       	ldi	r24, 0x01	; 1
    4642:	90 e0       	ldi	r25, 0x00	; 0
    4644:	9e 83       	std	Y+6, r25	; 0x06
    4646:	8d 83       	std	Y+5, r24	; 0x05
    4648:	3f c0       	rjmp	.+126    	; 0x46c8 <HLCD_voidNLatch+0x464>
	else if (__tmp > 65535)
    464a:	6f 81       	ldd	r22, Y+7	; 0x07
    464c:	78 85       	ldd	r23, Y+8	; 0x08
    464e:	89 85       	ldd	r24, Y+9	; 0x09
    4650:	9a 85       	ldd	r25, Y+10	; 0x0a
    4652:	20 e0       	ldi	r18, 0x00	; 0
    4654:	3f ef       	ldi	r19, 0xFF	; 255
    4656:	4f e7       	ldi	r20, 0x7F	; 127
    4658:	57 e4       	ldi	r21, 0x47	; 71
    465a:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    465e:	18 16       	cp	r1, r24
    4660:	4c f5       	brge	.+82     	; 0x46b4 <HLCD_voidNLatch+0x450>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4662:	6b 85       	ldd	r22, Y+11	; 0x0b
    4664:	7c 85       	ldd	r23, Y+12	; 0x0c
    4666:	8d 85       	ldd	r24, Y+13	; 0x0d
    4668:	9e 85       	ldd	r25, Y+14	; 0x0e
    466a:	20 e0       	ldi	r18, 0x00	; 0
    466c:	30 e0       	ldi	r19, 0x00	; 0
    466e:	40 e2       	ldi	r20, 0x20	; 32
    4670:	51 e4       	ldi	r21, 0x41	; 65
    4672:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    4676:	dc 01       	movw	r26, r24
    4678:	cb 01       	movw	r24, r22
    467a:	bc 01       	movw	r22, r24
    467c:	cd 01       	movw	r24, r26
    467e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4682:	dc 01       	movw	r26, r24
    4684:	cb 01       	movw	r24, r22
    4686:	9e 83       	std	Y+6, r25	; 0x06
    4688:	8d 83       	std	Y+5, r24	; 0x05
    468a:	0f c0       	rjmp	.+30     	; 0x46aa <HLCD_voidNLatch+0x446>
    468c:	80 e9       	ldi	r24, 0x90	; 144
    468e:	91 e0       	ldi	r25, 0x01	; 1
    4690:	9c 83       	std	Y+4, r25	; 0x04
    4692:	8b 83       	std	Y+3, r24	; 0x03
    4694:	8b 81       	ldd	r24, Y+3	; 0x03
    4696:	9c 81       	ldd	r25, Y+4	; 0x04
    4698:	01 97       	sbiw	r24, 0x01	; 1
    469a:	f1 f7       	brne	.-4      	; 0x4698 <HLCD_voidNLatch+0x434>
    469c:	9c 83       	std	Y+4, r25	; 0x04
    469e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46a0:	8d 81       	ldd	r24, Y+5	; 0x05
    46a2:	9e 81       	ldd	r25, Y+6	; 0x06
    46a4:	01 97       	sbiw	r24, 0x01	; 1
    46a6:	9e 83       	std	Y+6, r25	; 0x06
    46a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46aa:	8d 81       	ldd	r24, Y+5	; 0x05
    46ac:	9e 81       	ldd	r25, Y+6	; 0x06
    46ae:	00 97       	sbiw	r24, 0x00	; 0
    46b0:	69 f7       	brne	.-38     	; 0x468c <HLCD_voidNLatch+0x428>
    46b2:	14 c0       	rjmp	.+40     	; 0x46dc <HLCD_voidNLatch+0x478>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46b4:	6f 81       	ldd	r22, Y+7	; 0x07
    46b6:	78 85       	ldd	r23, Y+8	; 0x08
    46b8:	89 85       	ldd	r24, Y+9	; 0x09
    46ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    46bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46c0:	dc 01       	movw	r26, r24
    46c2:	cb 01       	movw	r24, r22
    46c4:	9e 83       	std	Y+6, r25	; 0x06
    46c6:	8d 83       	std	Y+5, r24	; 0x05
    46c8:	8d 81       	ldd	r24, Y+5	; 0x05
    46ca:	9e 81       	ldd	r25, Y+6	; 0x06
    46cc:	9a 83       	std	Y+2, r25	; 0x02
    46ce:	89 83       	std	Y+1, r24	; 0x01
    46d0:	89 81       	ldd	r24, Y+1	; 0x01
    46d2:	9a 81       	ldd	r25, Y+2	; 0x02
    46d4:	01 97       	sbiw	r24, 0x01	; 1
    46d6:	f1 f7       	brne	.-4      	; 0x46d4 <HLCD_voidNLatch+0x470>
    46d8:	9a 83       	std	Y+2, r25	; 0x02
    46da:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(30);
#else
#error("wrong LCD MODE")
#endif
		//	return SUCCES;
}
    46dc:	ef 96       	adiw	r28, 0x3f	; 63
    46de:	0f b6       	in	r0, 0x3f	; 63
    46e0:	f8 94       	cli
    46e2:	de bf       	out	0x3e, r29	; 62
    46e4:	0f be       	out	0x3f, r0	; 63
    46e6:	cd bf       	out	0x3d, r28	; 61
    46e8:	cf 91       	pop	r28
    46ea:	df 91       	pop	r29
    46ec:	08 95       	ret

000046ee <HLCD_SendData>:

ErrorState_t HLCD_SendData(u8 copy_u8Data)
{
    46ee:	df 93       	push	r29
    46f0:	cf 93       	push	r28
    46f2:	0f 92       	push	r0
    46f4:	cd b7       	in	r28, 0x3d	; 61
    46f6:	de b7       	in	r29, 0x3e	; 62
    46f8:	89 83       	std	Y+1, r24	; 0x01

//SEND RS=1
	MDIO_voidSetPinValue(HLCD_RS_PIN, HIGH);
    46fa:	8b e0       	ldi	r24, 0x0B	; 11
    46fc:	61 e0       	ldi	r22, 0x01	; 1
    46fe:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	//send data as a byte to NLATCH

	HLCD_voidNLatch(copy_u8Data);
    4702:	89 81       	ldd	r24, Y+1	; 0x01
    4704:	0e 94 32 21 	call	0x4264	; 0x4264 <HLCD_voidNLatch>

	return SUCCES;
    4708:	82 e0       	ldi	r24, 0x02	; 2
}
    470a:	0f 90       	pop	r0
    470c:	cf 91       	pop	r28
    470e:	df 91       	pop	r29
    4710:	08 95       	ret

00004712 <HLCD_SendCommand>:

ErrorState_t HLCD_SendCommand(u8 copy_u8Command)
{
    4712:	df 93       	push	r29
    4714:	cf 93       	push	r28
    4716:	0f 92       	push	r0
    4718:	cd b7       	in	r28, 0x3d	; 61
    471a:	de b7       	in	r29, 0x3e	; 62
    471c:	89 83       	std	Y+1, r24	; 0x01
//SEND RS low
	MDIO_voidSetPinValue(HLCD_RS_PIN, LOW);
    471e:	8b e0       	ldi	r24, 0x0B	; 11
    4720:	60 e0       	ldi	r22, 0x00	; 0
    4722:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	HLCD_voidNLatch(copy_u8Command);
    4726:	89 81       	ldd	r24, Y+1	; 0x01
    4728:	0e 94 32 21 	call	0x4264	; 0x4264 <HLCD_voidNLatch>
	return SUCCES;
    472c:	82 e0       	ldi	r24, 0x02	; 2
}
    472e:	0f 90       	pop	r0
    4730:	cf 91       	pop	r28
    4732:	df 91       	pop	r29
    4734:	08 95       	ret

00004736 <HLCD_SendString>:
ErrorState_t HLCD_SendString(char * str)
{
    4736:	df 93       	push	r29
    4738:	cf 93       	push	r28
    473a:	00 d0       	rcall	.+0      	; 0x473c <HLCD_SendString+0x6>
    473c:	cd b7       	in	r28, 0x3d	; 61
    473e:	de b7       	in	r29, 0x3e	; 62
    4740:	9a 83       	std	Y+2, r25	; 0x02
    4742:	89 83       	std	Y+1, r24	; 0x01
    4744:	0a c0       	rjmp	.+20     	; 0x475a <HLCD_SendString+0x24>

while (*str !='\0')
{
	HLCD_SendData(*str);
    4746:	e9 81       	ldd	r30, Y+1	; 0x01
    4748:	fa 81       	ldd	r31, Y+2	; 0x02
    474a:	80 81       	ld	r24, Z
    474c:	0e 94 77 23 	call	0x46ee	; 0x46ee <HLCD_SendData>

	str++;
    4750:	89 81       	ldd	r24, Y+1	; 0x01
    4752:	9a 81       	ldd	r25, Y+2	; 0x02
    4754:	01 96       	adiw	r24, 0x01	; 1
    4756:	9a 83       	std	Y+2, r25	; 0x02
    4758:	89 83       	std	Y+1, r24	; 0x01
	return SUCCES;
}
ErrorState_t HLCD_SendString(char * str)
{

while (*str !='\0')
    475a:	e9 81       	ldd	r30, Y+1	; 0x01
    475c:	fa 81       	ldd	r31, Y+2	; 0x02
    475e:	80 81       	ld	r24, Z
    4760:	88 23       	and	r24, r24
    4762:	89 f7       	brne	.-30     	; 0x4746 <HLCD_SendString+0x10>

	str++;

}

return SUCCES;
    4764:	82 e0       	ldi	r24, 0x02	; 2

}
    4766:	0f 90       	pop	r0
    4768:	0f 90       	pop	r0
    476a:	cf 91       	pop	r28
    476c:	df 91       	pop	r29
    476e:	08 95       	ret

00004770 <HLCD_ClearDisplay>:
ErrorState_t HLCD_ClearDisplay(void)
{
    4770:	df 93       	push	r29
    4772:	cf 93       	push	r28
    4774:	cd b7       	in	r28, 0x3d	; 61
    4776:	de b7       	in	r29, 0x3e	; 62
	HLCD_SendCommand(HLCD_CLEAR);
    4778:	81 e0       	ldi	r24, 0x01	; 1
    477a:	0e 94 89 23 	call	0x4712	; 0x4712 <HLCD_SendCommand>

	return SUCCES;
    477e:	82 e0       	ldi	r24, 0x02	; 2
}
    4780:	cf 91       	pop	r28
    4782:	df 91       	pop	r29
    4784:	08 95       	ret

00004786 <HLCD_sendIntNum>:

ErrorState_t HLCD_sendIntNum(s32 copy_u32Num)
{
    4786:	af 92       	push	r10
    4788:	bf 92       	push	r11
    478a:	cf 92       	push	r12
    478c:	df 92       	push	r13
    478e:	ef 92       	push	r14
    4790:	ff 92       	push	r15
    4792:	0f 93       	push	r16
    4794:	1f 93       	push	r17
    4796:	df 93       	push	r29
    4798:	cf 93       	push	r28
    479a:	cd b7       	in	r28, 0x3d	; 61
    479c:	de b7       	in	r29, 0x3e	; 62
    479e:	c3 54       	subi	r28, 0x43	; 67
    47a0:	d0 40       	sbci	r29, 0x00	; 0
    47a2:	0f b6       	in	r0, 0x3f	; 63
    47a4:	f8 94       	cli
    47a6:	de bf       	out	0x3e, r29	; 62
    47a8:	0f be       	out	0x3f, r0	; 63
    47aa:	cd bf       	out	0x3d, r28	; 61
    47ac:	fe 01       	movw	r30, r28
    47ae:	e0 5c       	subi	r30, 0xC0	; 192
    47b0:	ff 4f       	sbci	r31, 0xFF	; 255
    47b2:	60 83       	st	Z, r22
    47b4:	71 83       	std	Z+1, r23	; 0x01
    47b6:	82 83       	std	Z+2, r24	; 0x02
    47b8:	93 83       	std	Z+3, r25	; 0x03

char str[50],temp;
s32 i=0,j=0,negativeFlag=0;
    47ba:	19 86       	std	Y+9, r1	; 0x09
    47bc:	1a 86       	std	Y+10, r1	; 0x0a
    47be:	1b 86       	std	Y+11, r1	; 0x0b
    47c0:	1c 86       	std	Y+12, r1	; 0x0c
    47c2:	1d 82       	std	Y+5, r1	; 0x05
    47c4:	1e 82       	std	Y+6, r1	; 0x06
    47c6:	1f 82       	std	Y+7, r1	; 0x07
    47c8:	18 86       	std	Y+8, r1	; 0x08
    47ca:	19 82       	std	Y+1, r1	; 0x01
    47cc:	1a 82       	std	Y+2, r1	; 0x02
    47ce:	1b 82       	std	Y+3, r1	; 0x03
    47d0:	1c 82       	std	Y+4, r1	; 0x04

if(copy_u32Num<0){
    47d2:	fe 01       	movw	r30, r28
    47d4:	e0 5c       	subi	r30, 0xC0	; 192
    47d6:	ff 4f       	sbci	r31, 0xFF	; 255
    47d8:	80 81       	ld	r24, Z
    47da:	91 81       	ldd	r25, Z+1	; 0x01
    47dc:	a2 81       	ldd	r26, Z+2	; 0x02
    47de:	b3 81       	ldd	r27, Z+3	; 0x03
    47e0:	bb 23       	and	r27, r27
    47e2:	f4 f4       	brge	.+60     	; 0x4820 <HLCD_sendIntNum+0x9a>
	negativeFlag=1;
    47e4:	81 e0       	ldi	r24, 0x01	; 1
    47e6:	90 e0       	ldi	r25, 0x00	; 0
    47e8:	a0 e0       	ldi	r26, 0x00	; 0
    47ea:	b0 e0       	ldi	r27, 0x00	; 0
    47ec:	89 83       	std	Y+1, r24	; 0x01
    47ee:	9a 83       	std	Y+2, r25	; 0x02
    47f0:	ab 83       	std	Y+3, r26	; 0x03
    47f2:	bc 83       	std	Y+4, r27	; 0x04
	copy_u32Num*=-1;
    47f4:	9e 01       	movw	r18, r28
    47f6:	20 5c       	subi	r18, 0xC0	; 192
    47f8:	3f 4f       	sbci	r19, 0xFF	; 255
    47fa:	fe 01       	movw	r30, r28
    47fc:	e0 5c       	subi	r30, 0xC0	; 192
    47fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4800:	80 81       	ld	r24, Z
    4802:	91 81       	ldd	r25, Z+1	; 0x01
    4804:	a2 81       	ldd	r26, Z+2	; 0x02
    4806:	b3 81       	ldd	r27, Z+3	; 0x03
    4808:	b0 95       	com	r27
    480a:	a0 95       	com	r26
    480c:	90 95       	com	r25
    480e:	81 95       	neg	r24
    4810:	9f 4f       	sbci	r25, 0xFF	; 255
    4812:	af 4f       	sbci	r26, 0xFF	; 255
    4814:	bf 4f       	sbci	r27, 0xFF	; 255
    4816:	f9 01       	movw	r30, r18
    4818:	80 83       	st	Z, r24
    481a:	91 83       	std	Z+1, r25	; 0x01
    481c:	a2 83       	std	Z+2, r26	; 0x02
    481e:	b3 83       	std	Z+3, r27	; 0x03
}//end if

do{
str[i++]=(copy_u32Num%10 )+ '0';
    4820:	e9 84       	ldd	r14, Y+9	; 0x09
    4822:	fa 84       	ldd	r15, Y+10	; 0x0a
    4824:	0b 85       	ldd	r16, Y+11	; 0x0b
    4826:	1c 85       	ldd	r17, Y+12	; 0x0c
    4828:	fe 01       	movw	r30, r28
    482a:	e0 5c       	subi	r30, 0xC0	; 192
    482c:	ff 4f       	sbci	r31, 0xFF	; 255
    482e:	80 81       	ld	r24, Z
    4830:	91 81       	ldd	r25, Z+1	; 0x01
    4832:	a2 81       	ldd	r26, Z+2	; 0x02
    4834:	b3 81       	ldd	r27, Z+3	; 0x03
    4836:	2a e0       	ldi	r18, 0x0A	; 10
    4838:	30 e0       	ldi	r19, 0x00	; 0
    483a:	40 e0       	ldi	r20, 0x00	; 0
    483c:	50 e0       	ldi	r21, 0x00	; 0
    483e:	bc 01       	movw	r22, r24
    4840:	cd 01       	movw	r24, r26
    4842:	0e 94 48 31 	call	0x6290	; 0x6290 <__divmodsi4>
    4846:	dc 01       	movw	r26, r24
    4848:	cb 01       	movw	r24, r22
    484a:	28 2f       	mov	r18, r24
    484c:	20 5d       	subi	r18, 0xD0	; 208
    484e:	ce 01       	movw	r24, r28
    4850:	0e 96       	adiw	r24, 0x0e	; 14
    4852:	fc 01       	movw	r30, r24
    4854:	ee 0d       	add	r30, r14
    4856:	ff 1d       	adc	r31, r15
    4858:	20 83       	st	Z, r18
    485a:	89 85       	ldd	r24, Y+9	; 0x09
    485c:	9a 85       	ldd	r25, Y+10	; 0x0a
    485e:	ab 85       	ldd	r26, Y+11	; 0x0b
    4860:	bc 85       	ldd	r27, Y+12	; 0x0c
    4862:	01 96       	adiw	r24, 0x01	; 1
    4864:	a1 1d       	adc	r26, r1
    4866:	b1 1d       	adc	r27, r1
    4868:	89 87       	std	Y+9, r24	; 0x09
    486a:	9a 87       	std	Y+10, r25	; 0x0a
    486c:	ab 87       	std	Y+11, r26	; 0x0b
    486e:	bc 87       	std	Y+12, r27	; 0x0c
copy_u32Num/=10;
    4870:	8e 01       	movw	r16, r28
    4872:	00 5c       	subi	r16, 0xC0	; 192
    4874:	1f 4f       	sbci	r17, 0xFF	; 255
    4876:	fe 01       	movw	r30, r28
    4878:	e0 5c       	subi	r30, 0xC0	; 192
    487a:	ff 4f       	sbci	r31, 0xFF	; 255
    487c:	80 81       	ld	r24, Z
    487e:	91 81       	ldd	r25, Z+1	; 0x01
    4880:	a2 81       	ldd	r26, Z+2	; 0x02
    4882:	b3 81       	ldd	r27, Z+3	; 0x03
    4884:	2a e0       	ldi	r18, 0x0A	; 10
    4886:	30 e0       	ldi	r19, 0x00	; 0
    4888:	40 e0       	ldi	r20, 0x00	; 0
    488a:	50 e0       	ldi	r21, 0x00	; 0
    488c:	bc 01       	movw	r22, r24
    488e:	cd 01       	movw	r24, r26
    4890:	0e 94 48 31 	call	0x6290	; 0x6290 <__divmodsi4>
    4894:	da 01       	movw	r26, r20
    4896:	c9 01       	movw	r24, r18
    4898:	f8 01       	movw	r30, r16
    489a:	80 83       	st	Z, r24
    489c:	91 83       	std	Z+1, r25	; 0x01
    489e:	a2 83       	std	Z+2, r26	; 0x02
    48a0:	b3 83       	std	Z+3, r27	; 0x03
}while(copy_u32Num>0);
    48a2:	fe 01       	movw	r30, r28
    48a4:	e0 5c       	subi	r30, 0xC0	; 192
    48a6:	ff 4f       	sbci	r31, 0xFF	; 255
    48a8:	80 81       	ld	r24, Z
    48aa:	91 81       	ldd	r25, Z+1	; 0x01
    48ac:	a2 81       	ldd	r26, Z+2	; 0x02
    48ae:	b3 81       	ldd	r27, Z+3	; 0x03
    48b0:	18 16       	cp	r1, r24
    48b2:	19 06       	cpc	r1, r25
    48b4:	1a 06       	cpc	r1, r26
    48b6:	1b 06       	cpc	r1, r27
    48b8:	0c f4       	brge	.+2      	; 0x48bc <HLCD_sendIntNum+0x136>
    48ba:	b2 cf       	rjmp	.-156    	; 0x4820 <HLCD_sendIntNum+0x9a>

if(negativeFlag==1)
    48bc:	89 81       	ldd	r24, Y+1	; 0x01
    48be:	9a 81       	ldd	r25, Y+2	; 0x02
    48c0:	ab 81       	ldd	r26, Y+3	; 0x03
    48c2:	bc 81       	ldd	r27, Y+4	; 0x04
    48c4:	81 30       	cpi	r24, 0x01	; 1
    48c6:	91 05       	cpc	r25, r1
    48c8:	a1 05       	cpc	r26, r1
    48ca:	b1 05       	cpc	r27, r1
    48cc:	b9 f4       	brne	.+46     	; 0x48fc <HLCD_sendIntNum+0x176>
{
str[i++]='-';
    48ce:	89 85       	ldd	r24, Y+9	; 0x09
    48d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    48d2:	ab 85       	ldd	r26, Y+11	; 0x0b
    48d4:	bc 85       	ldd	r27, Y+12	; 0x0c
    48d6:	9e 01       	movw	r18, r28
    48d8:	22 5f       	subi	r18, 0xF2	; 242
    48da:	3f 4f       	sbci	r19, 0xFF	; 255
    48dc:	f9 01       	movw	r30, r18
    48de:	e8 0f       	add	r30, r24
    48e0:	f9 1f       	adc	r31, r25
    48e2:	8d e2       	ldi	r24, 0x2D	; 45
    48e4:	80 83       	st	Z, r24
    48e6:	89 85       	ldd	r24, Y+9	; 0x09
    48e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    48ea:	ab 85       	ldd	r26, Y+11	; 0x0b
    48ec:	bc 85       	ldd	r27, Y+12	; 0x0c
    48ee:	01 96       	adiw	r24, 0x01	; 1
    48f0:	a1 1d       	adc	r26, r1
    48f2:	b1 1d       	adc	r27, r1
    48f4:	89 87       	std	Y+9, r24	; 0x09
    48f6:	9a 87       	std	Y+10, r25	; 0x0a
    48f8:	ab 87       	std	Y+11, r26	; 0x0b
    48fa:	bc 87       	std	Y+12, r27	; 0x0c
}

str[i]='\0';//null
    48fc:	89 85       	ldd	r24, Y+9	; 0x09
    48fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4900:	ab 85       	ldd	r26, Y+11	; 0x0b
    4902:	bc 85       	ldd	r27, Y+12	; 0x0c
    4904:	9e 01       	movw	r18, r28
    4906:	22 5f       	subi	r18, 0xF2	; 242
    4908:	3f 4f       	sbci	r19, 0xFF	; 255
    490a:	f9 01       	movw	r30, r18
    490c:	e8 0f       	add	r30, r24
    490e:	f9 1f       	adc	r31, r25
    4910:	10 82       	st	Z, r1
for(j=0;j<i/2;j++)
    4912:	1d 82       	std	Y+5, r1	; 0x05
    4914:	1e 82       	std	Y+6, r1	; 0x06
    4916:	1f 82       	std	Y+7, r1	; 0x07
    4918:	18 86       	std	Y+8, r1	; 0x08
    491a:	56 c0       	rjmp	.+172    	; 0x49c8 <HLCD_sendIntNum+0x242>
{
	temp=str[j];
    491c:	8d 81       	ldd	r24, Y+5	; 0x05
    491e:	9e 81       	ldd	r25, Y+6	; 0x06
    4920:	af 81       	ldd	r26, Y+7	; 0x07
    4922:	b8 85       	ldd	r27, Y+8	; 0x08
    4924:	9e 01       	movw	r18, r28
    4926:	22 5f       	subi	r18, 0xF2	; 242
    4928:	3f 4f       	sbci	r19, 0xFF	; 255
    492a:	f9 01       	movw	r30, r18
    492c:	e8 0f       	add	r30, r24
    492e:	f9 1f       	adc	r31, r25
    4930:	80 81       	ld	r24, Z
    4932:	8d 87       	std	Y+13, r24	; 0x0d
	str[j]=str[i-j-1];
    4934:	ed 80       	ldd	r14, Y+5	; 0x05
    4936:	fe 80       	ldd	r15, Y+6	; 0x06
    4938:	0f 81       	ldd	r16, Y+7	; 0x07
    493a:	18 85       	ldd	r17, Y+8	; 0x08
    493c:	29 85       	ldd	r18, Y+9	; 0x09
    493e:	3a 85       	ldd	r19, Y+10	; 0x0a
    4940:	4b 85       	ldd	r20, Y+11	; 0x0b
    4942:	5c 85       	ldd	r21, Y+12	; 0x0c
    4944:	8d 81       	ldd	r24, Y+5	; 0x05
    4946:	9e 81       	ldd	r25, Y+6	; 0x06
    4948:	af 81       	ldd	r26, Y+7	; 0x07
    494a:	b8 85       	ldd	r27, Y+8	; 0x08
    494c:	59 01       	movw	r10, r18
    494e:	6a 01       	movw	r12, r20
    4950:	a8 1a       	sub	r10, r24
    4952:	b9 0a       	sbc	r11, r25
    4954:	ca 0a       	sbc	r12, r26
    4956:	db 0a       	sbc	r13, r27
    4958:	d6 01       	movw	r26, r12
    495a:	c5 01       	movw	r24, r10
    495c:	01 97       	sbiw	r24, 0x01	; 1
    495e:	a1 09       	sbc	r26, r1
    4960:	b1 09       	sbc	r27, r1
    4962:	9e 01       	movw	r18, r28
    4964:	22 5f       	subi	r18, 0xF2	; 242
    4966:	3f 4f       	sbci	r19, 0xFF	; 255
    4968:	f9 01       	movw	r30, r18
    496a:	e8 0f       	add	r30, r24
    496c:	f9 1f       	adc	r31, r25
    496e:	20 81       	ld	r18, Z
    4970:	ce 01       	movw	r24, r28
    4972:	0e 96       	adiw	r24, 0x0e	; 14
    4974:	fc 01       	movw	r30, r24
    4976:	ee 0d       	add	r30, r14
    4978:	ff 1d       	adc	r31, r15
    497a:	20 83       	st	Z, r18
	str[i-j-1]=temp;
    497c:	29 85       	ldd	r18, Y+9	; 0x09
    497e:	3a 85       	ldd	r19, Y+10	; 0x0a
    4980:	4b 85       	ldd	r20, Y+11	; 0x0b
    4982:	5c 85       	ldd	r21, Y+12	; 0x0c
    4984:	8d 81       	ldd	r24, Y+5	; 0x05
    4986:	9e 81       	ldd	r25, Y+6	; 0x06
    4988:	af 81       	ldd	r26, Y+7	; 0x07
    498a:	b8 85       	ldd	r27, Y+8	; 0x08
    498c:	69 01       	movw	r12, r18
    498e:	7a 01       	movw	r14, r20
    4990:	c8 1a       	sub	r12, r24
    4992:	d9 0a       	sbc	r13, r25
    4994:	ea 0a       	sbc	r14, r26
    4996:	fb 0a       	sbc	r15, r27
    4998:	d7 01       	movw	r26, r14
    499a:	c6 01       	movw	r24, r12
    499c:	01 97       	sbiw	r24, 0x01	; 1
    499e:	a1 09       	sbc	r26, r1
    49a0:	b1 09       	sbc	r27, r1
    49a2:	9e 01       	movw	r18, r28
    49a4:	22 5f       	subi	r18, 0xF2	; 242
    49a6:	3f 4f       	sbci	r19, 0xFF	; 255
    49a8:	f9 01       	movw	r30, r18
    49aa:	e8 0f       	add	r30, r24
    49ac:	f9 1f       	adc	r31, r25
    49ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    49b0:	80 83       	st	Z, r24
{
str[i++]='-';
}

str[i]='\0';//null
for(j=0;j<i/2;j++)
    49b2:	8d 81       	ldd	r24, Y+5	; 0x05
    49b4:	9e 81       	ldd	r25, Y+6	; 0x06
    49b6:	af 81       	ldd	r26, Y+7	; 0x07
    49b8:	b8 85       	ldd	r27, Y+8	; 0x08
    49ba:	01 96       	adiw	r24, 0x01	; 1
    49bc:	a1 1d       	adc	r26, r1
    49be:	b1 1d       	adc	r27, r1
    49c0:	8d 83       	std	Y+5, r24	; 0x05
    49c2:	9e 83       	std	Y+6, r25	; 0x06
    49c4:	af 83       	std	Y+7, r26	; 0x07
    49c6:	b8 87       	std	Y+8, r27	; 0x08
    49c8:	89 85       	ldd	r24, Y+9	; 0x09
    49ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    49cc:	ab 85       	ldd	r26, Y+11	; 0x0b
    49ce:	bc 85       	ldd	r27, Y+12	; 0x0c
    49d0:	22 e0       	ldi	r18, 0x02	; 2
    49d2:	30 e0       	ldi	r19, 0x00	; 0
    49d4:	40 e0       	ldi	r20, 0x00	; 0
    49d6:	50 e0       	ldi	r21, 0x00	; 0
    49d8:	bc 01       	movw	r22, r24
    49da:	cd 01       	movw	r24, r26
    49dc:	0e 94 48 31 	call	0x6290	; 0x6290 <__divmodsi4>
    49e0:	da 01       	movw	r26, r20
    49e2:	c9 01       	movw	r24, r18
    49e4:	9c 01       	movw	r18, r24
    49e6:	ad 01       	movw	r20, r26
    49e8:	8d 81       	ldd	r24, Y+5	; 0x05
    49ea:	9e 81       	ldd	r25, Y+6	; 0x06
    49ec:	af 81       	ldd	r26, Y+7	; 0x07
    49ee:	b8 85       	ldd	r27, Y+8	; 0x08
    49f0:	82 17       	cp	r24, r18
    49f2:	93 07       	cpc	r25, r19
    49f4:	a4 07       	cpc	r26, r20
    49f6:	b5 07       	cpc	r27, r21
    49f8:	0c f4       	brge	.+2      	; 0x49fc <HLCD_sendIntNum+0x276>
    49fa:	90 cf       	rjmp	.-224    	; 0x491c <HLCD_sendIntNum+0x196>
{
	temp=str[j];
	str[j]=str[i-j-1];
	str[i-j-1]=temp;
}
HLCD_SendString(str);
    49fc:	ce 01       	movw	r24, r28
    49fe:	0e 96       	adiw	r24, 0x0e	; 14
    4a00:	0e 94 9b 23 	call	0x4736	; 0x4736 <HLCD_SendString>

return SUCCES;
    4a04:	82 e0       	ldi	r24, 0x02	; 2
}
    4a06:	cd 5b       	subi	r28, 0xBD	; 189
    4a08:	df 4f       	sbci	r29, 0xFF	; 255
    4a0a:	0f b6       	in	r0, 0x3f	; 63
    4a0c:	f8 94       	cli
    4a0e:	de bf       	out	0x3e, r29	; 62
    4a10:	0f be       	out	0x3f, r0	; 63
    4a12:	cd bf       	out	0x3d, r28	; 61
    4a14:	cf 91       	pop	r28
    4a16:	df 91       	pop	r29
    4a18:	1f 91       	pop	r17
    4a1a:	0f 91       	pop	r16
    4a1c:	ff 90       	pop	r15
    4a1e:	ef 90       	pop	r14
    4a20:	df 90       	pop	r13
    4a22:	cf 90       	pop	r12
    4a24:	bf 90       	pop	r11
    4a26:	af 90       	pop	r10
    4a28:	08 95       	ret

00004a2a <HLCD_gotoXY>:

ErrorState_t HLCD_gotoXY(u8 copy_u8Row,u8 copy_u8Column)
{
    4a2a:	df 93       	push	r29
    4a2c:	cf 93       	push	r28
    4a2e:	00 d0       	rcall	.+0      	; 0x4a30 <HLCD_gotoXY+0x6>
    4a30:	00 d0       	rcall	.+0      	; 0x4a32 <HLCD_gotoXY+0x8>
    4a32:	cd b7       	in	r28, 0x3d	; 61
    4a34:	de b7       	in	r29, 0x3e	; 62
    4a36:	89 83       	std	Y+1, r24	; 0x01
    4a38:	6a 83       	std	Y+2, r22	; 0x02
switch(copy_u8Row)
    4a3a:	89 81       	ldd	r24, Y+1	; 0x01
    4a3c:	28 2f       	mov	r18, r24
    4a3e:	30 e0       	ldi	r19, 0x00	; 0
    4a40:	3c 83       	std	Y+4, r19	; 0x04
    4a42:	2b 83       	std	Y+3, r18	; 0x03
    4a44:	8b 81       	ldd	r24, Y+3	; 0x03
    4a46:	9c 81       	ldd	r25, Y+4	; 0x04
    4a48:	81 30       	cpi	r24, 0x01	; 1
    4a4a:	91 05       	cpc	r25, r1
    4a4c:	31 f0       	breq	.+12     	; 0x4a5a <HLCD_gotoXY+0x30>
    4a4e:	2b 81       	ldd	r18, Y+3	; 0x03
    4a50:	3c 81       	ldd	r19, Y+4	; 0x04
    4a52:	22 30       	cpi	r18, 0x02	; 2
    4a54:	31 05       	cpc	r19, r1
    4a56:	31 f0       	breq	.+12     	; 0x4a64 <HLCD_gotoXY+0x3a>
    4a58:	0a c0       	rjmp	.+20     	; 0x4a6e <HLCD_gotoXY+0x44>
{
case ROW_1:HLCD_SendCommand(HLCD_SET_ROW1+(copy_u8Column-1));
    4a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    4a5c:	81 58       	subi	r24, 0x81	; 129
    4a5e:	0e 94 89 23 	call	0x4712	; 0x4712 <HLCD_SendCommand>
    4a62:	08 c0       	rjmp	.+16     	; 0x4a74 <HLCD_gotoXY+0x4a>
break;
case ROW_2:HLCD_SendCommand(HLCD_SET_ROW2+(copy_u8Column-1));
    4a64:	8a 81       	ldd	r24, Y+2	; 0x02
    4a66:	81 54       	subi	r24, 0x41	; 65
    4a68:	0e 94 89 23 	call	0x4712	; 0x4712 <HLCD_SendCommand>
    4a6c:	03 c0       	rjmp	.+6      	; 0x4a74 <HLCD_gotoXY+0x4a>
break;
default:
	HLCD_SendCommand(HLCD_SET_ROW1);
    4a6e:	80 e8       	ldi	r24, 0x80	; 128
    4a70:	0e 94 89 23 	call	0x4712	; 0x4712 <HLCD_SendCommand>
}

	return SUCCES;
    4a74:	82 e0       	ldi	r24, 0x02	; 2
}
    4a76:	0f 90       	pop	r0
    4a78:	0f 90       	pop	r0
    4a7a:	0f 90       	pop	r0
    4a7c:	0f 90       	pop	r0
    4a7e:	cf 91       	pop	r28
    4a80:	df 91       	pop	r29
    4a82:	08 95       	ret

00004a84 <HLCD_SendCustomChar>:

ErrorState_t HLCD_SendCustomChar(u8 copy_u8CharCode,u8 * ptrPatterCode)
{
    4a84:	df 93       	push	r29
    4a86:	cf 93       	push	r28
    4a88:	00 d0       	rcall	.+0      	; 0x4a8a <HLCD_SendCustomChar+0x6>
    4a8a:	00 d0       	rcall	.+0      	; 0x4a8c <HLCD_SendCustomChar+0x8>
    4a8c:	cd b7       	in	r28, 0x3d	; 61
    4a8e:	de b7       	in	r29, 0x3e	; 62
    4a90:	8a 83       	std	Y+2, r24	; 0x02
    4a92:	7c 83       	std	Y+4, r23	; 0x04
    4a94:	6b 83       	std	Y+3, r22	; 0x03
	u8 i=0;
    4a96:	19 82       	std	Y+1, r1	; 0x01
	if(copy_u8CharCode<8&&copy_u8CharCode>=0)
    4a98:	8a 81       	ldd	r24, Y+2	; 0x02
    4a9a:	88 30       	cpi	r24, 0x08	; 8
    4a9c:	f8 f4       	brcc	.+62     	; 0x4adc <HLCD_SendCustomChar+0x58>
	{
		HLCD_SendCommand(HLCD_GCRAM_SET+(copy_u8CharCode* GCRAM_ROW_INC));
    4a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    4aa0:	88 2f       	mov	r24, r24
    4aa2:	90 e0       	ldi	r25, 0x00	; 0
    4aa4:	08 96       	adiw	r24, 0x08	; 8
    4aa6:	88 0f       	add	r24, r24
    4aa8:	99 1f       	adc	r25, r25
    4aaa:	88 0f       	add	r24, r24
    4aac:	99 1f       	adc	r25, r25
    4aae:	88 0f       	add	r24, r24
    4ab0:	99 1f       	adc	r25, r25
    4ab2:	0e 94 89 23 	call	0x4712	; 0x4712 <HLCD_SendCommand>
		for(i=0;i<8;i++)
    4ab6:	19 82       	std	Y+1, r1	; 0x01
    4ab8:	0e c0       	rjmp	.+28     	; 0x4ad6 <HLCD_SendCustomChar+0x52>
		{
			HLCD_SendData(ptrPatterCode[i]);
    4aba:	89 81       	ldd	r24, Y+1	; 0x01
    4abc:	28 2f       	mov	r18, r24
    4abe:	30 e0       	ldi	r19, 0x00	; 0
    4ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    4ac2:	9c 81       	ldd	r25, Y+4	; 0x04
    4ac4:	fc 01       	movw	r30, r24
    4ac6:	e2 0f       	add	r30, r18
    4ac8:	f3 1f       	adc	r31, r19
    4aca:	80 81       	ld	r24, Z
    4acc:	0e 94 77 23 	call	0x46ee	; 0x46ee <HLCD_SendData>
{
	u8 i=0;
	if(copy_u8CharCode<8&&copy_u8CharCode>=0)
	{
		HLCD_SendCommand(HLCD_GCRAM_SET+(copy_u8CharCode* GCRAM_ROW_INC));
		for(i=0;i<8;i++)
    4ad0:	89 81       	ldd	r24, Y+1	; 0x01
    4ad2:	8f 5f       	subi	r24, 0xFF	; 255
    4ad4:	89 83       	std	Y+1, r24	; 0x01
    4ad6:	89 81       	ldd	r24, Y+1	; 0x01
    4ad8:	88 30       	cpi	r24, 0x08	; 8
    4ada:	78 f3       	brcs	.-34     	; 0x4aba <HLCD_SendCustomChar+0x36>
			HLCD_SendData(ptrPatterCode[i]);
		}

	}

	return SUCCES;
    4adc:	82 e0       	ldi	r24, 0x02	; 2
}
    4ade:	0f 90       	pop	r0
    4ae0:	0f 90       	pop	r0
    4ae2:	0f 90       	pop	r0
    4ae4:	0f 90       	pop	r0
    4ae6:	cf 91       	pop	r28
    4ae8:	df 91       	pop	r29
    4aea:	08 95       	ret

00004aec <HLCD_DisplayCustomeChar>:
ErrorState_t HLCD_DisplayCustomeChar(u8 copy_u8CharCode)
{
    4aec:	df 93       	push	r29
    4aee:	cf 93       	push	r28
    4af0:	0f 92       	push	r0
    4af2:	cd b7       	in	r28, 0x3d	; 61
    4af4:	de b7       	in	r29, 0x3e	; 62
    4af6:	89 83       	std	Y+1, r24	; 0x01
	HLCD_SendData(copy_u8CharCode);
    4af8:	89 81       	ldd	r24, Y+1	; 0x01
    4afa:	0e 94 77 23 	call	0x46ee	; 0x46ee <HLCD_SendData>
	return SUCCES;
    4afe:	82 e0       	ldi	r24, 0x02	; 2
}
    4b00:	0f 90       	pop	r0
    4b02:	cf 91       	pop	r28
    4b04:	df 91       	pop	r29
    4b06:	08 95       	ret

00004b08 <HKEYPAD_enInt>:
#include "HKEY_PAD_init.h"
#include <avr/delay.h>


ErrorState_t HKEYPAD_enInt(void)
{
    4b08:	df 93       	push	r29
    4b0a:	cf 93       	push	r28
    4b0c:	cd b7       	in	r28, 0x3d	; 61
    4b0e:	de b7       	in	r29, 0x3e	; 62
// config rows to be output
MDIO_SetPinDirection(HKEYPAD_R0_PIN, OUTPUT);
    4b10:	88 e1       	ldi	r24, 0x18	; 24
    4b12:	61 e0       	ldi	r22, 0x01	; 1
    4b14:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_SetPinDirection>

MDIO_SetPinDirection(HKEYPAD_R1_PIN, OUTPUT);
    4b18:	89 e1       	ldi	r24, 0x19	; 25
    4b1a:	61 e0       	ldi	r22, 0x01	; 1
    4b1c:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_SetPinDirection>
MDIO_SetPinDirection(HKEYPAD_R2_PIN, OUTPUT);
    4b20:	8a e1       	ldi	r24, 0x1A	; 26
    4b22:	61 e0       	ldi	r22, 0x01	; 1
    4b24:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_SetPinDirection>
MDIO_SetPinDirection(HKEYPAD_R3_PIN, OUTPUT);
    4b28:	8b e1       	ldi	r24, 0x1B	; 27
    4b2a:	61 e0       	ldi	r22, 0x01	; 1
    4b2c:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_SetPinDirection>


	//config columns to be input
MDIO_SetPinDirection(HKEYPAD_C0_PIN, INPUT);
    4b30:	8a e2       	ldi	r24, 0x2A	; 42
    4b32:	60 e0       	ldi	r22, 0x00	; 0
    4b34:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_SetPinDirection>
MDIO_SetPinDirection(HKEYPAD_C1_PIN, INPUT);
    4b38:	8b e2       	ldi	r24, 0x2B	; 43
    4b3a:	60 e0       	ldi	r22, 0x00	; 0
    4b3c:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_SetPinDirection>
MDIO_SetPinDirection(HKEYPAD_C2_PIN, INPUT);
    4b40:	8c e2       	ldi	r24, 0x2C	; 44
    4b42:	60 e0       	ldi	r22, 0x00	; 0
    4b44:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_SetPinDirection>
MDIO_SetPinDirection(HKEYPAD_C3_PIN, INPUT);
    4b48:	8d e2       	ldi	r24, 0x2D	; 45
    4b4a:	60 e0       	ldi	r22, 0x00	; 0
    4b4c:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_SetPinDirection>
//initial output rows(HIGH)  cause rows are the ground
MDIO_voidSetPinValue(HKEYPAD_R0_PIN, HIGH);
    4b50:	88 e1       	ldi	r24, 0x18	; 24
    4b52:	61 e0       	ldi	r22, 0x01	; 1
    4b54:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
MDIO_voidSetPinValue(HKEYPAD_R1_PIN, HIGH);
    4b58:	89 e1       	ldi	r24, 0x19	; 25
    4b5a:	61 e0       	ldi	r22, 0x01	; 1
    4b5c:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
MDIO_voidSetPinValue(HKEYPAD_R2_PIN, HIGH);
    4b60:	8a e1       	ldi	r24, 0x1A	; 26
    4b62:	61 e0       	ldi	r22, 0x01	; 1
    4b64:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
MDIO_voidSetPinValue(HKEYPAD_R3_PIN, HIGH);
    4b68:	8b e1       	ldi	r24, 0x1B	; 27
    4b6a:	61 e0       	ldi	r22, 0x01	; 1
    4b6c:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>

#if(KIT_TYPE==SIM_KIT)
MDIO_voidSetPinValue(HKEYPAD_C0_PIN, HIGH);
    4b70:	8a e2       	ldi	r24, 0x2A	; 42
    4b72:	61 e0       	ldi	r22, 0x01	; 1
    4b74:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
MDIO_voidSetPinValue(HKEYPAD_C1_PIN, HIGH);
    4b78:	8b e2       	ldi	r24, 0x2B	; 43
    4b7a:	61 e0       	ldi	r22, 0x01	; 1
    4b7c:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
MDIO_voidSetPinValue(HKEYPAD_C2_PIN, HIGH);
    4b80:	8c e2       	ldi	r24, 0x2C	; 44
    4b82:	61 e0       	ldi	r22, 0x01	; 1
    4b84:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
MDIO_voidSetPinValue(HKEYPAD_C3_PIN, HIGH);
    4b88:	8d e2       	ldi	r24, 0x2D	; 45
    4b8a:	61 e0       	ldi	r22, 0x01	; 1
    4b8c:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
#endif
return SUCCES;
    4b90:	82 e0       	ldi	r24, 0x02	; 2
}
    4b92:	cf 91       	pop	r28
    4b94:	df 91       	pop	r29
    4b96:	08 95       	ret

00004b98 <HKEYPAD_enGetPressedKey>:

ErrorState_t HKEYPAD_enGetPressedKey(u8 * ptrKey)
{
    4b98:	df 93       	push	r29
    4b9a:	cf 93       	push	r28
    4b9c:	cd b7       	in	r28, 0x3d	; 61
    4b9e:	de b7       	in	r29, 0x3e	; 62
    4ba0:	e2 97       	sbiw	r28, 0x32	; 50
    4ba2:	0f b6       	in	r0, 0x3f	; 63
    4ba4:	f8 94       	cli
    4ba6:	de bf       	out	0x3e, r29	; 62
    4ba8:	0f be       	out	0x3f, r0	; 63
    4baa:	cd bf       	out	0x3d, r28	; 61
    4bac:	9d a7       	std	Y+45, r25	; 0x2d
    4bae:	8c a7       	std	Y+44, r24	; 0x2c
		BKEY_STATE_PRESS,
		BKEY_STATE_REALESE

	}Bkeypad_Stat_t;

	u8 Local_u8PressedKey=HKEYPAD_NO_PRESSED_KEY;
    4bb0:	8f ef       	ldi	r24, 0xFF	; 255
    4bb2:	8a 8b       	std	Y+18, r24	; 0x12
u8 Local_u8PinRead;
u8	row_index;
u8	col_index;
u8 Local_u8ArrKeys[4][4]=HKEYPAD_KEYS;
    4bb4:	ce 01       	movw	r24, r28
    4bb6:	44 96       	adiw	r24, 0x14	; 20
    4bb8:	9f a7       	std	Y+47, r25	; 0x2f
    4bba:	8e a7       	std	Y+46, r24	; 0x2e
    4bbc:	eb eb       	ldi	r30, 0xBB	; 187
    4bbe:	f1 e0       	ldi	r31, 0x01	; 1
    4bc0:	f9 ab       	std	Y+49, r31	; 0x31
    4bc2:	e8 ab       	std	Y+48, r30	; 0x30
    4bc4:	f0 e1       	ldi	r31, 0x10	; 16
    4bc6:	fa ab       	std	Y+50, r31	; 0x32
    4bc8:	e8 a9       	ldd	r30, Y+48	; 0x30
    4bca:	f9 a9       	ldd	r31, Y+49	; 0x31
    4bcc:	00 80       	ld	r0, Z
    4bce:	88 a9       	ldd	r24, Y+48	; 0x30
    4bd0:	99 a9       	ldd	r25, Y+49	; 0x31
    4bd2:	01 96       	adiw	r24, 0x01	; 1
    4bd4:	99 ab       	std	Y+49, r25	; 0x31
    4bd6:	88 ab       	std	Y+48, r24	; 0x30
    4bd8:	ee a5       	ldd	r30, Y+46	; 0x2e
    4bda:	ff a5       	ldd	r31, Y+47	; 0x2f
    4bdc:	00 82       	st	Z, r0
    4bde:	8e a5       	ldd	r24, Y+46	; 0x2e
    4be0:	9f a5       	ldd	r25, Y+47	; 0x2f
    4be2:	01 96       	adiw	r24, 0x01	; 1
    4be4:	9f a7       	std	Y+47, r25	; 0x2f
    4be6:	8e a7       	std	Y+46, r24	; 0x2e
    4be8:	9a a9       	ldd	r25, Y+50	; 0x32
    4bea:	91 50       	subi	r25, 0x01	; 1
    4bec:	9a ab       	std	Y+50, r25	; 0x32
    4bee:	ea a9       	ldd	r30, Y+50	; 0x32
    4bf0:	ee 23       	and	r30, r30
    4bf2:	51 f7       	brne	.-44     	; 0x4bc8 <HKEYPAD_enGetPressedKey+0x30>
u8 flag=0;
    4bf4:	1f 86       	std	Y+15, r1	; 0x0f
//cause the ports were in  sequence we can start and end the for by r0 till r3
//to make it generic

u8 rowArr[]={HKEYPAD_R0_PIN,HKEYPAD_R1_PIN,HKEYPAD_R2_PIN,HKEYPAD_R3_PIN};
    4bf6:	88 e1       	ldi	r24, 0x18	; 24
    4bf8:	8c a3       	std	Y+36, r24	; 0x24
    4bfa:	89 e1       	ldi	r24, 0x19	; 25
    4bfc:	8d a3       	std	Y+37, r24	; 0x25
    4bfe:	8a e1       	ldi	r24, 0x1A	; 26
    4c00:	8e a3       	std	Y+38, r24	; 0x26
    4c02:	8b e1       	ldi	r24, 0x1B	; 27
    4c04:	8f a3       	std	Y+39, r24	; 0x27
u8 colArr[]={HKEYPAD_C0_PIN,HKEYPAD_C1_PIN,HKEYPAD_C2_PIN,HKEYPAD_C3_PIN};
    4c06:	8a e2       	ldi	r24, 0x2A	; 42
    4c08:	88 a7       	std	Y+40, r24	; 0x28
    4c0a:	8b e2       	ldi	r24, 0x2B	; 43
    4c0c:	89 a7       	std	Y+41, r24	; 0x29
    4c0e:	8c e2       	ldi	r24, 0x2C	; 44
    4c10:	8a a7       	std	Y+42, r24	; 0x2a
    4c12:	8d e2       	ldi	r24, 0x2D	; 45
    4c14:	8b a7       	std	Y+43, r24	; 0x2b
for(row_index=0 ;row_index<=3&&flag==0 ;row_index++)
    4c16:	19 8a       	std	Y+17, r1	; 0x11
    4c18:	e5 c0       	rjmp	.+458    	; 0x4de4 <HKEYPAD_enGetPressedKey+0x24c>
{	//output 0(ground) on row
	MDIO_voidSetPinValue(rowArr[row_index],LOW);
    4c1a:	89 89       	ldd	r24, Y+17	; 0x11
    4c1c:	28 2f       	mov	r18, r24
    4c1e:	30 e0       	ldi	r19, 0x00	; 0
    4c20:	ce 01       	movw	r24, r28
    4c22:	84 96       	adiw	r24, 0x24	; 36
    4c24:	fc 01       	movw	r30, r24
    4c26:	e2 0f       	add	r30, r18
    4c28:	f3 1f       	adc	r31, r19
    4c2a:	80 81       	ld	r24, Z
    4c2c:	60 e0       	ldi	r22, 0x00	; 0
    4c2e:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	for(col_index=0;col_index<=3 ;col_index++)
    4c32:	18 8a       	std	Y+16, r1	; 0x10
    4c34:	c4 c0       	rjmp	.+392    	; 0x4dbe <HKEYPAD_enGetPressedKey+0x226>
	{//read the colimn
		MDIO_voidGetPinValue(colArr[col_index],&Local_u8PinRead);
    4c36:	88 89       	ldd	r24, Y+16	; 0x10
    4c38:	28 2f       	mov	r18, r24
    4c3a:	30 e0       	ldi	r19, 0x00	; 0
    4c3c:	ce 01       	movw	r24, r28
    4c3e:	88 96       	adiw	r24, 0x28	; 40
    4c40:	fc 01       	movw	r30, r24
    4c42:	e2 0f       	add	r30, r18
    4c44:	f3 1f       	adc	r31, r19
    4c46:	80 81       	ld	r24, Z
    4c48:	9e 01       	movw	r18, r28
    4c4a:	2d 5e       	subi	r18, 0xED	; 237
    4c4c:	3f 4f       	sbci	r19, 0xFF	; 255
    4c4e:	b9 01       	movw	r22, r18
    4c50:	0e 94 69 14 	call	0x28d2	; 0x28d2 <MDIO_voidGetPinValue>

		if(Local_u8PinRead== HKEYPAD_KEY_PRESSED )
    4c54:	8b 89       	ldd	r24, Y+19	; 0x13
    4c56:	88 23       	and	r24, r24
    4c58:	09 f0       	breq	.+2      	; 0x4c5c <HKEYPAD_enGetPressedKey+0xc4>
    4c5a:	ae c0       	rjmp	.+348    	; 0x4db8 <HKEYPAD_enGetPressedKey+0x220>
    4c5c:	80 e0       	ldi	r24, 0x00	; 0
    4c5e:	90 e0       	ldi	r25, 0x00	; 0
    4c60:	a8 e4       	ldi	r26, 0x48	; 72
    4c62:	b2 e4       	ldi	r27, 0x42	; 66
    4c64:	8b 87       	std	Y+11, r24	; 0x0b
    4c66:	9c 87       	std	Y+12, r25	; 0x0c
    4c68:	ad 87       	std	Y+13, r26	; 0x0d
    4c6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c70:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c72:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c74:	20 e0       	ldi	r18, 0x00	; 0
    4c76:	30 e0       	ldi	r19, 0x00	; 0
    4c78:	4a e7       	ldi	r20, 0x7A	; 122
    4c7a:	55 e4       	ldi	r21, 0x45	; 69
    4c7c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    4c80:	dc 01       	movw	r26, r24
    4c82:	cb 01       	movw	r24, r22
    4c84:	8f 83       	std	Y+7, r24	; 0x07
    4c86:	98 87       	std	Y+8, r25	; 0x08
    4c88:	a9 87       	std	Y+9, r26	; 0x09
    4c8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c8c:	6f 81       	ldd	r22, Y+7	; 0x07
    4c8e:	78 85       	ldd	r23, Y+8	; 0x08
    4c90:	89 85       	ldd	r24, Y+9	; 0x09
    4c92:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c94:	20 e0       	ldi	r18, 0x00	; 0
    4c96:	30 e0       	ldi	r19, 0x00	; 0
    4c98:	40 e8       	ldi	r20, 0x80	; 128
    4c9a:	5f e3       	ldi	r21, 0x3F	; 63
    4c9c:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    4ca0:	88 23       	and	r24, r24
    4ca2:	2c f4       	brge	.+10     	; 0x4cae <HKEYPAD_enGetPressedKey+0x116>
		__ticks = 1;
    4ca4:	81 e0       	ldi	r24, 0x01	; 1
    4ca6:	90 e0       	ldi	r25, 0x00	; 0
    4ca8:	9e 83       	std	Y+6, r25	; 0x06
    4caa:	8d 83       	std	Y+5, r24	; 0x05
    4cac:	3f c0       	rjmp	.+126    	; 0x4d2c <HKEYPAD_enGetPressedKey+0x194>
	else if (__tmp > 65535)
    4cae:	6f 81       	ldd	r22, Y+7	; 0x07
    4cb0:	78 85       	ldd	r23, Y+8	; 0x08
    4cb2:	89 85       	ldd	r24, Y+9	; 0x09
    4cb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cb6:	20 e0       	ldi	r18, 0x00	; 0
    4cb8:	3f ef       	ldi	r19, 0xFF	; 255
    4cba:	4f e7       	ldi	r20, 0x7F	; 127
    4cbc:	57 e4       	ldi	r21, 0x47	; 71
    4cbe:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    4cc2:	18 16       	cp	r1, r24
    4cc4:	4c f5       	brge	.+82     	; 0x4d18 <HKEYPAD_enGetPressedKey+0x180>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    4cc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    4cca:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ccc:	9e 85       	ldd	r25, Y+14	; 0x0e
    4cce:	20 e0       	ldi	r18, 0x00	; 0
    4cd0:	30 e0       	ldi	r19, 0x00	; 0
    4cd2:	40 e2       	ldi	r20, 0x20	; 32
    4cd4:	51 e4       	ldi	r21, 0x41	; 65
    4cd6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    4cda:	dc 01       	movw	r26, r24
    4cdc:	cb 01       	movw	r24, r22
    4cde:	bc 01       	movw	r22, r24
    4ce0:	cd 01       	movw	r24, r26
    4ce2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ce6:	dc 01       	movw	r26, r24
    4ce8:	cb 01       	movw	r24, r22
    4cea:	9e 83       	std	Y+6, r25	; 0x06
    4cec:	8d 83       	std	Y+5, r24	; 0x05
    4cee:	0f c0       	rjmp	.+30     	; 0x4d0e <HKEYPAD_enGetPressedKey+0x176>
    4cf0:	80 e9       	ldi	r24, 0x90	; 144
    4cf2:	91 e0       	ldi	r25, 0x01	; 1
    4cf4:	9c 83       	std	Y+4, r25	; 0x04
    4cf6:	8b 83       	std	Y+3, r24	; 0x03
    4cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    4cfa:	9c 81       	ldd	r25, Y+4	; 0x04
    4cfc:	01 97       	sbiw	r24, 0x01	; 1
    4cfe:	f1 f7       	brne	.-4      	; 0x4cfc <HKEYPAD_enGetPressedKey+0x164>
    4d00:	9c 83       	std	Y+4, r25	; 0x04
    4d02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d04:	8d 81       	ldd	r24, Y+5	; 0x05
    4d06:	9e 81       	ldd	r25, Y+6	; 0x06
    4d08:	01 97       	sbiw	r24, 0x01	; 1
    4d0a:	9e 83       	std	Y+6, r25	; 0x06
    4d0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d0e:	8d 81       	ldd	r24, Y+5	; 0x05
    4d10:	9e 81       	ldd	r25, Y+6	; 0x06
    4d12:	00 97       	sbiw	r24, 0x00	; 0
    4d14:	69 f7       	brne	.-38     	; 0x4cf0 <HKEYPAD_enGetPressedKey+0x158>
    4d16:	14 c0       	rjmp	.+40     	; 0x4d40 <HKEYPAD_enGetPressedKey+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d18:	6f 81       	ldd	r22, Y+7	; 0x07
    4d1a:	78 85       	ldd	r23, Y+8	; 0x08
    4d1c:	89 85       	ldd	r24, Y+9	; 0x09
    4d1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d24:	dc 01       	movw	r26, r24
    4d26:	cb 01       	movw	r24, r22
    4d28:	9e 83       	std	Y+6, r25	; 0x06
    4d2a:	8d 83       	std	Y+5, r24	; 0x05
    4d2c:	8d 81       	ldd	r24, Y+5	; 0x05
    4d2e:	9e 81       	ldd	r25, Y+6	; 0x06
    4d30:	9a 83       	std	Y+2, r25	; 0x02
    4d32:	89 83       	std	Y+1, r24	; 0x01
    4d34:	89 81       	ldd	r24, Y+1	; 0x01
    4d36:	9a 81       	ldd	r25, Y+2	; 0x02
    4d38:	01 97       	sbiw	r24, 0x01	; 1
    4d3a:	f1 f7       	brne	.-4      	; 0x4d38 <HKEYPAD_enGetPressedKey+0x1a0>
    4d3c:	9a 83       	std	Y+2, r25	; 0x02
    4d3e:	89 83       	std	Y+1, r24	; 0x01
		{//for debpuncing
			_delay_ms(50);
			//socend read
			MDIO_voidGetPinValue(colArr[col_index],&Local_u8PinRead);
    4d40:	88 89       	ldd	r24, Y+16	; 0x10
    4d42:	28 2f       	mov	r18, r24
    4d44:	30 e0       	ldi	r19, 0x00	; 0
    4d46:	ce 01       	movw	r24, r28
    4d48:	88 96       	adiw	r24, 0x28	; 40
    4d4a:	fc 01       	movw	r30, r24
    4d4c:	e2 0f       	add	r30, r18
    4d4e:	f3 1f       	adc	r31, r19
    4d50:	80 81       	ld	r24, Z
    4d52:	9e 01       	movw	r18, r28
    4d54:	2d 5e       	subi	r18, 0xED	; 237
    4d56:	3f 4f       	sbci	r19, 0xFF	; 255
    4d58:	b9 01       	movw	r22, r18
    4d5a:	0e 94 69 14 	call	0x28d2	; 0x28d2 <MDIO_voidGetPinValue>
			if(Local_u8PinRead== HKEYPAD_KEY_PRESSED )
    4d5e:	8b 89       	ldd	r24, Y+19	; 0x13
    4d60:	88 23       	and	r24, r24
    4d62:	51 f5       	brne	.+84     	; 0x4db8 <HKEYPAD_enGetPressedKey+0x220>
    4d64:	0f c0       	rjmp	.+30     	; 0x4d84 <HKEYPAD_enGetPressedKey+0x1ec>

				}//end switch case
			}//end while*/
				while(Local_u8PinRead== HKEYPAD_KEY_PRESSED )
				{
					MDIO_voidGetPinValue(colArr[col_index],&Local_u8PinRead);
    4d66:	88 89       	ldd	r24, Y+16	; 0x10
    4d68:	28 2f       	mov	r18, r24
    4d6a:	30 e0       	ldi	r19, 0x00	; 0
    4d6c:	ce 01       	movw	r24, r28
    4d6e:	88 96       	adiw	r24, 0x28	; 40
    4d70:	fc 01       	movw	r30, r24
    4d72:	e2 0f       	add	r30, r18
    4d74:	f3 1f       	adc	r31, r19
    4d76:	80 81       	ld	r24, Z
    4d78:	9e 01       	movw	r18, r28
    4d7a:	2d 5e       	subi	r18, 0xED	; 237
    4d7c:	3f 4f       	sbci	r19, 0xFF	; 255
    4d7e:	b9 01       	movw	r22, r18
    4d80:	0e 94 69 14 	call	0x28d2	; 0x28d2 <MDIO_voidGetPinValue>
					break;


				}//end switch case
			}//end while*/
				while(Local_u8PinRead== HKEYPAD_KEY_PRESSED )
    4d84:	8b 89       	ldd	r24, Y+19	; 0x13
    4d86:	88 23       	and	r24, r24
    4d88:	71 f3       	breq	.-36     	; 0x4d66 <HKEYPAD_enGetPressedKey+0x1ce>
				{
					MDIO_voidGetPinValue(colArr[col_index],&Local_u8PinRead);
					//check if the button is still pressed or not

				}//end while
				Local_u8PressedKey=Local_u8ArrKeys[row_index][col_index];
    4d8a:	89 89       	ldd	r24, Y+17	; 0x11
    4d8c:	28 2f       	mov	r18, r24
    4d8e:	30 e0       	ldi	r19, 0x00	; 0
    4d90:	88 89       	ldd	r24, Y+16	; 0x10
    4d92:	48 2f       	mov	r20, r24
    4d94:	50 e0       	ldi	r21, 0x00	; 0
    4d96:	22 0f       	add	r18, r18
    4d98:	33 1f       	adc	r19, r19
    4d9a:	22 0f       	add	r18, r18
    4d9c:	33 1f       	adc	r19, r19
    4d9e:	ce 01       	movw	r24, r28
    4da0:	01 96       	adiw	r24, 0x01	; 1
    4da2:	82 0f       	add	r24, r18
    4da4:	93 1f       	adc	r25, r19
    4da6:	84 0f       	add	r24, r20
    4da8:	95 1f       	adc	r25, r21
    4daa:	fc 01       	movw	r30, r24
    4dac:	73 96       	adiw	r30, 0x13	; 19
    4dae:	80 81       	ld	r24, Z
    4db0:	8a 8b       	std	Y+18, r24	; 0x12
				flag++;//flag for not intering the socend loop an return with the last update,
    4db2:	8f 85       	ldd	r24, Y+15	; 0x0f
    4db4:	8f 5f       	subi	r24, 0xFF	; 255
    4db6:	8f 87       	std	Y+15, r24	; 0x0f
u8 rowArr[]={HKEYPAD_R0_PIN,HKEYPAD_R1_PIN,HKEYPAD_R2_PIN,HKEYPAD_R3_PIN};
u8 colArr[]={HKEYPAD_C0_PIN,HKEYPAD_C1_PIN,HKEYPAD_C2_PIN,HKEYPAD_C3_PIN};
for(row_index=0 ;row_index<=3&&flag==0 ;row_index++)
{	//output 0(ground) on row
	MDIO_voidSetPinValue(rowArr[row_index],LOW);
	for(col_index=0;col_index<=3 ;col_index++)
    4db8:	88 89       	ldd	r24, Y+16	; 0x10
    4dba:	8f 5f       	subi	r24, 0xFF	; 255
    4dbc:	88 8b       	std	Y+16, r24	; 0x10
    4dbe:	88 89       	ldd	r24, Y+16	; 0x10
    4dc0:	84 30       	cpi	r24, 0x04	; 4
    4dc2:	08 f4       	brcc	.+2      	; 0x4dc6 <HKEYPAD_enGetPressedKey+0x22e>
    4dc4:	38 cf       	rjmp	.-400    	; 0x4c36 <HKEYPAD_enGetPressedKey+0x9e>

//break;

	}//inner for

	MDIO_voidSetPinValue(rowArr[row_index], HIGH);
    4dc6:	89 89       	ldd	r24, Y+17	; 0x11
    4dc8:	28 2f       	mov	r18, r24
    4dca:	30 e0       	ldi	r19, 0x00	; 0
    4dcc:	ce 01       	movw	r24, r28
    4dce:	84 96       	adiw	r24, 0x24	; 36
    4dd0:	fc 01       	movw	r30, r24
    4dd2:	e2 0f       	add	r30, r18
    4dd4:	f3 1f       	adc	r31, r19
    4dd6:	80 81       	ld	r24, Z
    4dd8:	61 e0       	ldi	r22, 0x01	; 1
    4dda:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
//cause the ports were in  sequence we can start and end the for by r0 till r3
//to make it generic

u8 rowArr[]={HKEYPAD_R0_PIN,HKEYPAD_R1_PIN,HKEYPAD_R2_PIN,HKEYPAD_R3_PIN};
u8 colArr[]={HKEYPAD_C0_PIN,HKEYPAD_C1_PIN,HKEYPAD_C2_PIN,HKEYPAD_C3_PIN};
for(row_index=0 ;row_index<=3&&flag==0 ;row_index++)
    4dde:	89 89       	ldd	r24, Y+17	; 0x11
    4de0:	8f 5f       	subi	r24, 0xFF	; 255
    4de2:	89 8b       	std	Y+17, r24	; 0x11
    4de4:	89 89       	ldd	r24, Y+17	; 0x11
    4de6:	84 30       	cpi	r24, 0x04	; 4
    4de8:	20 f4       	brcc	.+8      	; 0x4df2 <HKEYPAD_enGetPressedKey+0x25a>
    4dea:	8f 85       	ldd	r24, Y+15	; 0x0f
    4dec:	88 23       	and	r24, r24
    4dee:	09 f4       	brne	.+2      	; 0x4df2 <HKEYPAD_enGetPressedKey+0x25a>
    4df0:	14 cf       	rjmp	.-472    	; 0x4c1a <HKEYPAD_enGetPressedKey+0x82>
	}//inner for

	MDIO_voidSetPinValue(rowArr[row_index], HIGH);

}//outer for
*ptrKey=Local_u8PressedKey;
    4df2:	ec a5       	ldd	r30, Y+44	; 0x2c
    4df4:	fd a5       	ldd	r31, Y+45	; 0x2d
    4df6:	8a 89       	ldd	r24, Y+18	; 0x12
    4df8:	80 83       	st	Z, r24
return SUCCES;
    4dfa:	82 e0       	ldi	r24, 0x02	; 2
}
    4dfc:	e2 96       	adiw	r28, 0x32	; 50
    4dfe:	0f b6       	in	r0, 0x3f	; 63
    4e00:	f8 94       	cli
    4e02:	de bf       	out	0x3e, r29	; 62
    4e04:	0f be       	out	0x3f, r0	; 63
    4e06:	cd bf       	out	0x3d, r28	; 61
    4e08:	cf 91       	pop	r28
    4e0a:	df 91       	pop	r29
    4e0c:	08 95       	ret

00004e0e <HEEPROM_enInit>:
#include "MTWI_int.h"
#include "HEEPROM_config.h"
#include "HEEPROM_int.h"

ErrorState_t HEEPROM_enInit(void)
{
    4e0e:	df 93       	push	r29
    4e10:	cf 93       	push	r28
    4e12:	cd b7       	in	r28, 0x3d	; 61
    4e14:	de b7       	in	r29, 0x3e	; 62
	// init TWI
	MTWI_enInit();
    4e16:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <MTWI_enInit>
	return SUCCES;
    4e1a:	82 e0       	ldi	r24, 0x02	; 2
}
    4e1c:	cf 91       	pop	r28
    4e1e:	df 91       	pop	r29
    4e20:	08 95       	ret

00004e22 <HEEPROM_enWriteByte>:

ErrorState_t HEEPROM_enWriteByte(u16 copy_u16Address, u8 copy_u8DByte)
{
    4e22:	df 93       	push	r29
    4e24:	cf 93       	push	r28
    4e26:	00 d0       	rcall	.+0      	; 0x4e28 <HEEPROM_enWriteByte+0x6>
    4e28:	00 d0       	rcall	.+0      	; 0x4e2a <HEEPROM_enWriteByte+0x8>
    4e2a:	0f 92       	push	r0
    4e2c:	cd b7       	in	r28, 0x3d	; 61
    4e2e:	de b7       	in	r29, 0x3e	; 62
    4e30:	9b 83       	std	Y+3, r25	; 0x03
    4e32:	8a 83       	std	Y+2, r24	; 0x02
    4e34:	6c 83       	std	Y+4, r22	; 0x04
	u8 Status;
	// Step 1 : Send Start
	MTWI_enSendStart();
    4e36:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <MTWI_enSendStart>
	// Step 2 : Check Status
	MTWI_enReadStatus(&Status);
    4e3a:	ce 01       	movw	r24, r28
    4e3c:	01 96       	adiw	r24, 0x01	; 1
    4e3e:	0e 94 34 10 	call	0x2068	; 0x2068 <MTWI_enReadStatus>
	if(Status != MTWI_MT_START_SUCCESS)
    4e42:	89 81       	ldd	r24, Y+1	; 0x01
    4e44:	88 30       	cpi	r24, 0x08	; 8
    4e46:	19 f0       	breq	.+6      	; 0x4e4e <HEEPROM_enWriteByte+0x2c>
	{
		return FAILIUR;
    4e48:	83 e0       	ldi	r24, 0x03	; 3
    4e4a:	8d 83       	std	Y+5, r24	; 0x05
    4e4c:	3b c0       	rjmp	.+118    	; 0x4ec4 <HEEPROM_enWriteByte+0xa2>
	}

	// Step 3 : Send Address 1010 + A10 A9 A8 + W (W = 0)
//	u8 _3MSB = (u8)((copy_u16Address & 0x0700) >> 7);
	//MTWI_enSendByte(_3MSB| 0xA0);
MTWI_enSendByte(0xA0);
    4e4e:	80 ea       	ldi	r24, 0xA0	; 160
    4e50:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <MTWI_enSendByte>
	// Step 4 : Check Status
	MTWI_enReadStatus(&Status);
    4e54:	ce 01       	movw	r24, r28
    4e56:	01 96       	adiw	r24, 0x01	; 1
    4e58:	0e 94 34 10 	call	0x2068	; 0x2068 <MTWI_enReadStatus>
	if(Status != MTWI_MT_SLA_W_ACK)
    4e5c:	89 81       	ldd	r24, Y+1	; 0x01
    4e5e:	88 31       	cpi	r24, 0x18	; 24
    4e60:	19 f0       	breq	.+6      	; 0x4e68 <HEEPROM_enWriteByte+0x46>
	{
		return FAILIUR;
    4e62:	83 e0       	ldi	r24, 0x03	; 3
    4e64:	8d 83       	std	Y+5, r24	; 0x05
    4e66:	2e c0       	rjmp	.+92     	; 0x4ec4 <HEEPROM_enWriteByte+0xa2>
	}

	// Step 5 : Send rest of Byte address as data A7 ... A0
	MTWI_enSendByte((u8) (copy_u16Address>>8));
    4e68:	8a 81       	ldd	r24, Y+2	; 0x02
    4e6a:	9b 81       	ldd	r25, Y+3	; 0x03
    4e6c:	89 2f       	mov	r24, r25
    4e6e:	99 27       	eor	r25, r25
    4e70:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <MTWI_enSendByte>

	// Step 6 : Check Status
	MTWI_enReadStatus(&Status);
    4e74:	ce 01       	movw	r24, r28
    4e76:	01 96       	adiw	r24, 0x01	; 1
    4e78:	0e 94 34 10 	call	0x2068	; 0x2068 <MTWI_enReadStatus>
	if(Status != MTWI_MT_DATA_ACK)
    4e7c:	89 81       	ldd	r24, Y+1	; 0x01
    4e7e:	88 32       	cpi	r24, 0x28	; 40
    4e80:	19 f0       	breq	.+6      	; 0x4e88 <HEEPROM_enWriteByte+0x66>
	{
		return FAILIUR;
    4e82:	83 e0       	ldi	r24, 0x03	; 3
    4e84:	8d 83       	std	Y+5, r24	; 0x05
    4e86:	1e c0       	rjmp	.+60     	; 0x4ec4 <HEEPROM_enWriteByte+0xa2>
	}
	MTWI_enSendByte((u8) copy_u16Address);
    4e88:	8a 81       	ldd	r24, Y+2	; 0x02
    4e8a:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <MTWI_enSendByte>

	// Step 6 : Check Status
	MTWI_enReadStatus(&Status);
    4e8e:	ce 01       	movw	r24, r28
    4e90:	01 96       	adiw	r24, 0x01	; 1
    4e92:	0e 94 34 10 	call	0x2068	; 0x2068 <MTWI_enReadStatus>
	if(Status != MTWI_MT_DATA_ACK)
    4e96:	89 81       	ldd	r24, Y+1	; 0x01
    4e98:	88 32       	cpi	r24, 0x28	; 40
    4e9a:	19 f0       	breq	.+6      	; 0x4ea2 <HEEPROM_enWriteByte+0x80>
	{
		return FAILIUR;
    4e9c:	83 e0       	ldi	r24, 0x03	; 3
    4e9e:	8d 83       	std	Y+5, r24	; 0x05
    4ea0:	11 c0       	rjmp	.+34     	; 0x4ec4 <HEEPROM_enWriteByte+0xa2>
	}

	// Step 7 : Send Byte to be written
	MTWI_enSendByte((u8) copy_u8DByte);
    4ea2:	8c 81       	ldd	r24, Y+4	; 0x04
    4ea4:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <MTWI_enSendByte>

	// Step 8 : Check Status
	MTWI_enReadStatus(&Status);
    4ea8:	ce 01       	movw	r24, r28
    4eaa:	01 96       	adiw	r24, 0x01	; 1
    4eac:	0e 94 34 10 	call	0x2068	; 0x2068 <MTWI_enReadStatus>
	if(Status != MTWI_MT_DATA_ACK)
    4eb0:	89 81       	ldd	r24, Y+1	; 0x01
    4eb2:	88 32       	cpi	r24, 0x28	; 40
    4eb4:	19 f0       	breq	.+6      	; 0x4ebc <HEEPROM_enWriteByte+0x9a>
	{
		return FAILIUR;
    4eb6:	83 e0       	ldi	r24, 0x03	; 3
    4eb8:	8d 83       	std	Y+5, r24	; 0x05
    4eba:	04 c0       	rjmp	.+8      	; 0x4ec4 <HEEPROM_enWriteByte+0xa2>
	}

	// Step 9 : Send Stop
	MTWI_enSendStop();
    4ebc:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <MTWI_enSendStop>

	return SUCCES;
    4ec0:	82 e0       	ldi	r24, 0x02	; 2
    4ec2:	8d 83       	std	Y+5, r24	; 0x05
    4ec4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4ec6:	0f 90       	pop	r0
    4ec8:	0f 90       	pop	r0
    4eca:	0f 90       	pop	r0
    4ecc:	0f 90       	pop	r0
    4ece:	0f 90       	pop	r0
    4ed0:	cf 91       	pop	r28
    4ed2:	df 91       	pop	r29
    4ed4:	08 95       	ret

00004ed6 <HEEPROM_enReadByte>:

ErrorState_t HEEPROM_enReadByte(u16 copy_u16Address, u8 *PtrRecData)
{
    4ed6:	df 93       	push	r29
    4ed8:	cf 93       	push	r28
    4eda:	00 d0       	rcall	.+0      	; 0x4edc <HEEPROM_enReadByte+0x6>
    4edc:	00 d0       	rcall	.+0      	; 0x4ede <HEEPROM_enReadByte+0x8>
    4ede:	00 d0       	rcall	.+0      	; 0x4ee0 <HEEPROM_enReadByte+0xa>
    4ee0:	cd b7       	in	r28, 0x3d	; 61
    4ee2:	de b7       	in	r29, 0x3e	; 62
    4ee4:	9b 83       	std	Y+3, r25	; 0x03
    4ee6:	8a 83       	std	Y+2, r24	; 0x02
    4ee8:	7d 83       	std	Y+5, r23	; 0x05
    4eea:	6c 83       	std	Y+4, r22	; 0x04
	u8 Status;
		// Step 1 : Send Start
		MTWI_enSendStart();
    4eec:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <MTWI_enSendStart>
		// Step 2 : Check Status
		MTWI_enReadStatus(&Status);
    4ef0:	ce 01       	movw	r24, r28
    4ef2:	01 96       	adiw	r24, 0x01	; 1
    4ef4:	0e 94 34 10 	call	0x2068	; 0x2068 <MTWI_enReadStatus>
		if(Status != MTWI_MT_START_SUCCESS)
    4ef8:	89 81       	ldd	r24, Y+1	; 0x01
    4efa:	88 30       	cpi	r24, 0x08	; 8
    4efc:	19 f0       	breq	.+6      	; 0x4f04 <HEEPROM_enReadByte+0x2e>
		{
			return FAILIUR;
    4efe:	83 e0       	ldi	r24, 0x03	; 3
    4f00:	8e 83       	std	Y+6, r24	; 0x06
    4f02:	58 c0       	rjmp	.+176    	; 0x4fb4 <HEEPROM_enReadByte+0xde>
		//MTWI_enSendByte(_3MSB| 0xA0);



		// Step 4 : Check Status
		MTWI_enSendByte(0xA0);
    4f04:	80 ea       	ldi	r24, 0xA0	; 160
    4f06:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <MTWI_enSendByte>
			// Step 4 : Check Status
			MTWI_enReadStatus(&Status);
    4f0a:	ce 01       	movw	r24, r28
    4f0c:	01 96       	adiw	r24, 0x01	; 1
    4f0e:	0e 94 34 10 	call	0x2068	; 0x2068 <MTWI_enReadStatus>
			if(Status != MTWI_MT_SLA_W_ACK)
    4f12:	89 81       	ldd	r24, Y+1	; 0x01
    4f14:	88 31       	cpi	r24, 0x18	; 24
    4f16:	19 f0       	breq	.+6      	; 0x4f1e <HEEPROM_enReadByte+0x48>
			{
				return FAILIUR;
    4f18:	83 e0       	ldi	r24, 0x03	; 3
    4f1a:	8e 83       	std	Y+6, r24	; 0x06
    4f1c:	4b c0       	rjmp	.+150    	; 0x4fb4 <HEEPROM_enReadByte+0xde>
			}

			// Step 5 : Send rest of Byte address as data A7 ... A0
			MTWI_enSendByte((u8) (copy_u16Address>>8));
    4f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    4f20:	9b 81       	ldd	r25, Y+3	; 0x03
    4f22:	89 2f       	mov	r24, r25
    4f24:	99 27       	eor	r25, r25
    4f26:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <MTWI_enSendByte>

			// Step 6 : Check Status
			MTWI_enReadStatus(&Status);
    4f2a:	ce 01       	movw	r24, r28
    4f2c:	01 96       	adiw	r24, 0x01	; 1
    4f2e:	0e 94 34 10 	call	0x2068	; 0x2068 <MTWI_enReadStatus>
			if(Status != MTWI_MT_DATA_ACK)
    4f32:	89 81       	ldd	r24, Y+1	; 0x01
    4f34:	88 32       	cpi	r24, 0x28	; 40
    4f36:	19 f0       	breq	.+6      	; 0x4f3e <HEEPROM_enReadByte+0x68>
			{
				return FAILIUR;
    4f38:	83 e0       	ldi	r24, 0x03	; 3
    4f3a:	8e 83       	std	Y+6, r24	; 0x06
    4f3c:	3b c0       	rjmp	.+118    	; 0x4fb4 <HEEPROM_enReadByte+0xde>
			}
			MTWI_enSendByte((u8) copy_u16Address);
    4f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    4f40:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <MTWI_enSendByte>

		// Step 5 : Send rest of Byte address as data A7 ... A0
		MTWI_enSendByte((u8) copy_u16Address);
    4f44:	8a 81       	ldd	r24, Y+2	; 0x02
    4f46:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <MTWI_enSendByte>

		// Step 6 : Check Status
		MTWI_enReadStatus(&Status);
    4f4a:	ce 01       	movw	r24, r28
    4f4c:	01 96       	adiw	r24, 0x01	; 1
    4f4e:	0e 94 34 10 	call	0x2068	; 0x2068 <MTWI_enReadStatus>
		if(Status != MTWI_MT_DATA_ACK)
    4f52:	89 81       	ldd	r24, Y+1	; 0x01
    4f54:	88 32       	cpi	r24, 0x28	; 40
    4f56:	19 f0       	breq	.+6      	; 0x4f5e <HEEPROM_enReadByte+0x88>
		{
			return FAILIUR;
    4f58:	83 e0       	ldi	r24, 0x03	; 3
    4f5a:	8e 83       	std	Y+6, r24	; 0x06
    4f5c:	2b c0       	rjmp	.+86     	; 0x4fb4 <HEEPROM_enReadByte+0xde>
		}
		//Step 7 : Send Repeated Start
		MTWI_enSendStart();
    4f5e:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <MTWI_enSendStart>

		// Step 8 : Check Status
		MTWI_enReadStatus(&Status);
    4f62:	ce 01       	movw	r24, r28
    4f64:	01 96       	adiw	r24, 0x01	; 1
    4f66:	0e 94 34 10 	call	0x2068	; 0x2068 <MTWI_enReadStatus>
		if(Status != MTWI_MR_REPEATED_START_SUCCESS)
    4f6a:	89 81       	ldd	r24, Y+1	; 0x01
    4f6c:	80 31       	cpi	r24, 0x10	; 16
    4f6e:	19 f0       	breq	.+6      	; 0x4f76 <HEEPROM_enReadByte+0xa0>
		{
			return FAILIUR;
    4f70:	83 e0       	ldi	r24, 0x03	; 3
    4f72:	8e 83       	std	Y+6, r24	; 0x06
    4f74:	1f c0       	rjmp	.+62     	; 0x4fb4 <HEEPROM_enReadByte+0xde>
		}

		// Step 9 : Send Address 1010 + 000 + R
		MTWI_enSendByte(0xA0 | 0x01);
    4f76:	81 ea       	ldi	r24, 0xA1	; 161
    4f78:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <MTWI_enSendByte>

		// Step 10 : Check Status
		MTWI_enReadStatus(&Status);
    4f7c:	ce 01       	movw	r24, r28
    4f7e:	01 96       	adiw	r24, 0x01	; 1
    4f80:	0e 94 34 10 	call	0x2068	; 0x2068 <MTWI_enReadStatus>
		if(Status != MTWI_MR_SLA_R_ACK)
    4f84:	89 81       	ldd	r24, Y+1	; 0x01
    4f86:	80 34       	cpi	r24, 0x40	; 64
    4f88:	19 f0       	breq	.+6      	; 0x4f90 <HEEPROM_enReadByte+0xba>
		{
			return FAILIUR;
    4f8a:	83 e0       	ldi	r24, 0x03	; 3
    4f8c:	8e 83       	std	Y+6, r24	; 0x06
    4f8e:	12 c0       	rjmp	.+36     	; 0x4fb4 <HEEPROM_enReadByte+0xde>
		}

		//Step 11 : Read Data
		MTWI_enRecByteAck(PtrRecData);
    4f90:	8c 81       	ldd	r24, Y+4	; 0x04
    4f92:	9d 81       	ldd	r25, Y+5	; 0x05
    4f94:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <MTWI_enRecByteAck>

		// Step 12 : Check Status
		MTWI_enReadStatus(&Status);
    4f98:	ce 01       	movw	r24, r28
    4f9a:	01 96       	adiw	r24, 0x01	; 1
    4f9c:	0e 94 34 10 	call	0x2068	; 0x2068 <MTWI_enReadStatus>
		if(Status != MTWI_MR_DATA_ACK)
    4fa0:	89 81       	ldd	r24, Y+1	; 0x01
    4fa2:	80 35       	cpi	r24, 0x50	; 80
    4fa4:	19 f0       	breq	.+6      	; 0x4fac <HEEPROM_enReadByte+0xd6>
		{
			return FAILIUR;
    4fa6:	83 e0       	ldi	r24, 0x03	; 3
    4fa8:	8e 83       	std	Y+6, r24	; 0x06
    4faa:	04 c0       	rjmp	.+8      	; 0x4fb4 <HEEPROM_enReadByte+0xde>
		}

		// Step 13 : Send Stop
		MTWI_enSendStop();
    4fac:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <MTWI_enSendStop>
	return SUCCES;
    4fb0:	82 e0       	ldi	r24, 0x02	; 2
    4fb2:	8e 83       	std	Y+6, r24	; 0x06
    4fb4:	8e 81       	ldd	r24, Y+6	; 0x06
}
    4fb6:	26 96       	adiw	r28, 0x06	; 6
    4fb8:	0f b6       	in	r0, 0x3f	; 63
    4fba:	f8 94       	cli
    4fbc:	de bf       	out	0x3e, r29	; 62
    4fbe:	0f be       	out	0x3f, r0	; 63
    4fc0:	cd bf       	out	0x3d, r28	; 61
    4fc2:	cf 91       	pop	r28
    4fc4:	df 91       	pop	r29
    4fc6:	08 95       	ret

00004fc8 <HDCM_enInit>:
#include "MTIMER0_int.h"
#include "HDC_MOTOR_priv.h"
#include "HDC_MOTOR_config.h"
#include "HDC_MOTOR_init.h"

ErrorState_t HDCM_enInit(void){
    4fc8:	df 93       	push	r29
    4fca:	cf 93       	push	r28
    4fcc:	cd b7       	in	r28, 0x3d	; 61
    4fce:	de b7       	in	r29, 0x3e	; 62

	MDIO_SetPinDirection(PB3,OUTPUT);
    4fd0:	87 e1       	ldi	r24, 0x17	; 23
    4fd2:	61 e0       	ldi	r22, 0x01	; 1
    4fd4:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(PD7,OUTPUT);
    4fd8:	8f e2       	ldi	r24, 0x2F	; 47
    4fda:	61 e0       	ldi	r22, 0x01	; 1
    4fdc:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_SetPinDirection>
#if (HBRIDGE_MODE==MOTOR_WITH_EN)
	MDIO_SetPinDirection(PD6,OUTPUT);
#endif
	MTIMER0_enInit();
    4fe0:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <MTIMER0_enInit>
	MTIMER0_enStart();
    4fe4:	0e 94 f5 08 	call	0x11ea	; 0x11ea <MTIMER0_enStart>
	MTIMER0_enSetFastPWM(0);
    4fe8:	80 e0       	ldi	r24, 0x00	; 0
    4fea:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MTIMER0_enSetFastPWM>

return SUCCES;
    4fee:	82 e0       	ldi	r24, 0x02	; 2
}
    4ff0:	cf 91       	pop	r28
    4ff2:	df 91       	pop	r29
    4ff4:	08 95       	ret

00004ff6 <HDCM_enStart>:
ErrorState_t HDCM_enStart(direction_t copy_enDirection,u8 copy_u8Duty)
{
    4ff6:	df 93       	push	r29
    4ff8:	cf 93       	push	r28
    4ffa:	00 d0       	rcall	.+0      	; 0x4ffc <HDCM_enStart+0x6>
    4ffc:	00 d0       	rcall	.+0      	; 0x4ffe <HDCM_enStart+0x8>
    4ffe:	0f 92       	push	r0
    5000:	cd b7       	in	r28, 0x3d	; 61
    5002:	de b7       	in	r29, 0x3e	; 62
    5004:	8a 83       	std	Y+2, r24	; 0x02
    5006:	6b 83       	std	Y+3, r22	; 0x03

ErrorState_t Local_enStauts=SUCCES;
    5008:	82 e0       	ldi	r24, 0x02	; 2
    500a:	89 83       	std	Y+1, r24	; 0x01
//MTIMER0_enStart();
if(copy_u8Duty<=100&&copy_u8Duty>=0)
    500c:	8b 81       	ldd	r24, Y+3	; 0x03
    500e:	85 36       	cpi	r24, 0x65	; 101
    5010:	18 f5       	brcc	.+70     	; 0x5058 <HDCM_enStart+0x62>
{


#if (HBRIDGE_MODE==MOTOR_WITHOUT_EN)
	//MTIMER0_enStart();
	switch(copy_enDirection){
    5012:	8a 81       	ldd	r24, Y+2	; 0x02
    5014:	28 2f       	mov	r18, r24
    5016:	30 e0       	ldi	r19, 0x00	; 0
    5018:	3d 83       	std	Y+5, r19	; 0x05
    501a:	2c 83       	std	Y+4, r18	; 0x04
    501c:	8c 81       	ldd	r24, Y+4	; 0x04
    501e:	9d 81       	ldd	r25, Y+5	; 0x05
    5020:	00 97       	sbiw	r24, 0x00	; 0
    5022:	31 f0       	breq	.+12     	; 0x5030 <HDCM_enStart+0x3a>
    5024:	2c 81       	ldd	r18, Y+4	; 0x04
    5026:	3d 81       	ldd	r19, Y+5	; 0x05
    5028:	21 30       	cpi	r18, 0x01	; 1
    502a:	31 05       	cpc	r19, r1
    502c:	49 f0       	breq	.+18     	; 0x5040 <HDCM_enStart+0x4a>
    502e:	12 c0       	rjmp	.+36     	; 0x5054 <HDCM_enStart+0x5e>
	case forward:
		MTIMER0_enSetFastPWM(copy_u8Duty);
    5030:	8b 81       	ldd	r24, Y+3	; 0x03
    5032:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MTIMER0_enSetFastPWM>
		MDIO_voidSetPinValue(PD7, LOW);
    5036:	8f e2       	ldi	r24, 0x2F	; 47
    5038:	60 e0       	ldi	r22, 0x00	; 0
    503a:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
    503e:	0d c0       	rjmp	.+26     	; 0x505a <HDCM_enStart+0x64>
		break;
	case reverse:
				MTIMER0_enSetFastPWM(100-copy_u8Duty);
    5040:	84 e6       	ldi	r24, 0x64	; 100
    5042:	9b 81       	ldd	r25, Y+3	; 0x03
    5044:	89 1b       	sub	r24, r25
    5046:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MTIMER0_enSetFastPWM>
				MDIO_voidSetPinValue(PD7, HIGH);
    504a:	8f e2       	ldi	r24, 0x2F	; 47
    504c:	61 e0       	ldi	r22, 0x01	; 1
    504e:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
    5052:	03 c0       	rjmp	.+6      	; 0x505a <HDCM_enStart+0x64>
				break;
	default:
		Local_enStauts=OUT_OF_RANGE;
    5054:	19 82       	std	Y+1, r1	; 0x01
    5056:	01 c0       	rjmp	.+2      	; 0x505a <HDCM_enStart+0x64>

		//MTIMER0_enStop();
}
else
{
	Local_enStauts=OUT_OF_RANGE;
    5058:	19 82       	std	Y+1, r1	; 0x01
}
return Local_enStauts;
    505a:	89 81       	ldd	r24, Y+1	; 0x01

}
    505c:	0f 90       	pop	r0
    505e:	0f 90       	pop	r0
    5060:	0f 90       	pop	r0
    5062:	0f 90       	pop	r0
    5064:	0f 90       	pop	r0
    5066:	cf 91       	pop	r28
    5068:	df 91       	pop	r29
    506a:	08 95       	ret

0000506c <HDCM_enStop>:
ErrorState_t HDCM_enStop(void)
{
    506c:	df 93       	push	r29
    506e:	cf 93       	push	r28
    5070:	cd b7       	in	r28, 0x3d	; 61
    5072:	de b7       	in	r29, 0x3e	; 62
	//MTIMER0_enStop();

	MTIMER0_enSetFastPWM(0);
    5074:	80 e0       	ldi	r24, 0x00	; 0
    5076:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MTIMER0_enSetFastPWM>
	//MDIO_voidSetPinValue(PB3, LOW);
	MDIO_voidSetPinValue(PD7, LOW);
    507a:	8f e2       	ldi	r24, 0x2F	; 47
    507c:	60 e0       	ldi	r22, 0x00	; 0
    507e:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>




return SUCCES;
    5082:	82 e0       	ldi	r24, 0x02	; 2
}
    5084:	cf 91       	pop	r28
    5086:	df 91       	pop	r29
    5088:	08 95       	ret

0000508a <HBUZ_voidInit>:
#include "HBUZ_priv.h"
#include "HBUZ_config.h"
#include "HBUZ_init.h"

void HBUZ_voidInit(void)
{
    508a:	df 93       	push	r29
    508c:	cf 93       	push	r28
    508e:	cd b7       	in	r28, 0x3d	; 61
    5090:	de b7       	in	r29, 0x3e	; 62

	MDIO_SetPinDirection(HBUZ_PIN,OUTPUT);
    5092:	83 e2       	ldi	r24, 0x23	; 35
    5094:	61 e0       	ldi	r22, 0x01	; 1
    5096:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_SetPinDirection>
}
    509a:	cf 91       	pop	r28
    509c:	df 91       	pop	r29
    509e:	08 95       	ret

000050a0 <HBUZ_enOn>:

ErrorState_t HBUZ_enOn(void)
{
    50a0:	df 93       	push	r29
    50a2:	cf 93       	push	r28
    50a4:	0f 92       	push	r0
    50a6:	cd b7       	in	r28, 0x3d	; 61
    50a8:	de b7       	in	r29, 0x3e	; 62
ErrorState_t Local_State=SUCCES;
    50aa:	82 e0       	ldi	r24, 0x02	; 2
    50ac:	89 83       	std	Y+1, r24	; 0x01
MDIO_voidSetPinValue(HBUZ_PIN, HIGH);
    50ae:	83 e2       	ldi	r24, 0x23	; 35
    50b0:	61 e0       	ldi	r22, 0x01	; 1
    50b2:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
return Local_State;
    50b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    50b8:	0f 90       	pop	r0
    50ba:	cf 91       	pop	r28
    50bc:	df 91       	pop	r29
    50be:	08 95       	ret

000050c0 <HBUZ_enOff>:

ErrorState_t HBUZ_enOff(void)
{
    50c0:	df 93       	push	r29
    50c2:	cf 93       	push	r28
    50c4:	0f 92       	push	r0
    50c6:	cd b7       	in	r28, 0x3d	; 61
    50c8:	de b7       	in	r29, 0x3e	; 62
ErrorState_t Local_State=SUCCES;
    50ca:	82 e0       	ldi	r24, 0x02	; 2
    50cc:	89 83       	std	Y+1, r24	; 0x01
MDIO_voidSetPinValue(HBUZ_PIN, LOW);
    50ce:	83 e2       	ldi	r24, 0x23	; 35
    50d0:	60 e0       	ldi	r22, 0x00	; 0
    50d2:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
return Local_State;
    50d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    50d8:	0f 90       	pop	r0
    50da:	cf 91       	pop	r28
    50dc:	df 91       	pop	r29
    50de:	08 95       	ret

000050e0 <HBUZ_enOnce>:

ErrorState_t HBUZ_enOnce(u64 copy_u64BuzzPeriod)
{ErrorState_t Local_State=SUCCES;
    50e0:	df 93       	push	r29
    50e2:	cf 93       	push	r28
    50e4:	cd b7       	in	r28, 0x3d	; 61
    50e6:	de b7       	in	r29, 0x3e	; 62
    50e8:	a5 97       	sbiw	r28, 0x25	; 37
    50ea:	0f b6       	in	r0, 0x3f	; 63
    50ec:	f8 94       	cli
    50ee:	de bf       	out	0x3e, r29	; 62
    50f0:	0f be       	out	0x3f, r0	; 63
    50f2:	cd bf       	out	0x3d, r28	; 61
    50f4:	2e 8f       	std	Y+30, r18	; 0x1e
    50f6:	3f 8f       	std	Y+31, r19	; 0x1f
    50f8:	48 a3       	std	Y+32, r20	; 0x20
    50fa:	59 a3       	std	Y+33, r21	; 0x21
    50fc:	6a a3       	std	Y+34, r22	; 0x22
    50fe:	7b a3       	std	Y+35, r23	; 0x23
    5100:	8c a3       	std	Y+36, r24	; 0x24
    5102:	9d a3       	std	Y+37, r25	; 0x25
    5104:	82 e0       	ldi	r24, 0x02	; 2
    5106:	8d 8f       	std	Y+29, r24	; 0x1d
	MDIO_voidSetPinValue(HBUZ_PIN, HIGH);
    5108:	83 e2       	ldi	r24, 0x23	; 35
    510a:	61 e0       	ldi	r22, 0x01	; 1
    510c:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	_delay_ms(copy_u64BuzzPeriod);
    5110:	2e 8d       	ldd	r18, Y+30	; 0x1e
    5112:	3f 8d       	ldd	r19, Y+31	; 0x1f
    5114:	48 a1       	ldd	r20, Y+32	; 0x20
    5116:	59 a1       	ldd	r21, Y+33	; 0x21
    5118:	6a a1       	ldd	r22, Y+34	; 0x22
    511a:	7b a1       	ldd	r23, Y+35	; 0x23
    511c:	8c a1       	ldd	r24, Y+36	; 0x24
    511e:	9d a1       	ldd	r25, Y+37	; 0x25
    5120:	0e 94 75 00 	call	0xea	; 0xea <__floatundisf>
    5124:	dc 01       	movw	r26, r24
    5126:	cb 01       	movw	r24, r22
    5128:	89 8f       	std	Y+25, r24	; 0x19
    512a:	9a 8f       	std	Y+26, r25	; 0x1a
    512c:	ab 8f       	std	Y+27, r26	; 0x1b
    512e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5130:	69 8d       	ldd	r22, Y+25	; 0x19
    5132:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5134:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5136:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5138:	20 e0       	ldi	r18, 0x00	; 0
    513a:	30 e0       	ldi	r19, 0x00	; 0
    513c:	4a e7       	ldi	r20, 0x7A	; 122
    513e:	55 e4       	ldi	r21, 0x45	; 69
    5140:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    5144:	dc 01       	movw	r26, r24
    5146:	cb 01       	movw	r24, r22
    5148:	8d 8b       	std	Y+21, r24	; 0x15
    514a:	9e 8b       	std	Y+22, r25	; 0x16
    514c:	af 8b       	std	Y+23, r26	; 0x17
    514e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5150:	6d 89       	ldd	r22, Y+21	; 0x15
    5152:	7e 89       	ldd	r23, Y+22	; 0x16
    5154:	8f 89       	ldd	r24, Y+23	; 0x17
    5156:	98 8d       	ldd	r25, Y+24	; 0x18
    5158:	20 e0       	ldi	r18, 0x00	; 0
    515a:	30 e0       	ldi	r19, 0x00	; 0
    515c:	40 e8       	ldi	r20, 0x80	; 128
    515e:	5f e3       	ldi	r21, 0x3F	; 63
    5160:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    5164:	88 23       	and	r24, r24
    5166:	2c f4       	brge	.+10     	; 0x5172 <HBUZ_enOnce+0x92>
		__ticks = 1;
    5168:	81 e0       	ldi	r24, 0x01	; 1
    516a:	90 e0       	ldi	r25, 0x00	; 0
    516c:	9c 8b       	std	Y+20, r25	; 0x14
    516e:	8b 8b       	std	Y+19, r24	; 0x13
    5170:	3f c0       	rjmp	.+126    	; 0x51f0 <HBUZ_enOnce+0x110>
	else if (__tmp > 65535)
    5172:	6d 89       	ldd	r22, Y+21	; 0x15
    5174:	7e 89       	ldd	r23, Y+22	; 0x16
    5176:	8f 89       	ldd	r24, Y+23	; 0x17
    5178:	98 8d       	ldd	r25, Y+24	; 0x18
    517a:	20 e0       	ldi	r18, 0x00	; 0
    517c:	3f ef       	ldi	r19, 0xFF	; 255
    517e:	4f e7       	ldi	r20, 0x7F	; 127
    5180:	57 e4       	ldi	r21, 0x47	; 71
    5182:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    5186:	18 16       	cp	r1, r24
    5188:	4c f5       	brge	.+82     	; 0x51dc <HBUZ_enOnce+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    518a:	69 8d       	ldd	r22, Y+25	; 0x19
    518c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    518e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5190:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5192:	20 e0       	ldi	r18, 0x00	; 0
    5194:	30 e0       	ldi	r19, 0x00	; 0
    5196:	40 e2       	ldi	r20, 0x20	; 32
    5198:	51 e4       	ldi	r21, 0x41	; 65
    519a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    519e:	dc 01       	movw	r26, r24
    51a0:	cb 01       	movw	r24, r22
    51a2:	bc 01       	movw	r22, r24
    51a4:	cd 01       	movw	r24, r26
    51a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51aa:	dc 01       	movw	r26, r24
    51ac:	cb 01       	movw	r24, r22
    51ae:	9c 8b       	std	Y+20, r25	; 0x14
    51b0:	8b 8b       	std	Y+19, r24	; 0x13
    51b2:	0f c0       	rjmp	.+30     	; 0x51d2 <HBUZ_enOnce+0xf2>
    51b4:	80 e9       	ldi	r24, 0x90	; 144
    51b6:	91 e0       	ldi	r25, 0x01	; 1
    51b8:	9a 8b       	std	Y+18, r25	; 0x12
    51ba:	89 8b       	std	Y+17, r24	; 0x11
    51bc:	89 89       	ldd	r24, Y+17	; 0x11
    51be:	9a 89       	ldd	r25, Y+18	; 0x12
    51c0:	01 97       	sbiw	r24, 0x01	; 1
    51c2:	f1 f7       	brne	.-4      	; 0x51c0 <HBUZ_enOnce+0xe0>
    51c4:	9a 8b       	std	Y+18, r25	; 0x12
    51c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51c8:	8b 89       	ldd	r24, Y+19	; 0x13
    51ca:	9c 89       	ldd	r25, Y+20	; 0x14
    51cc:	01 97       	sbiw	r24, 0x01	; 1
    51ce:	9c 8b       	std	Y+20, r25	; 0x14
    51d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51d2:	8b 89       	ldd	r24, Y+19	; 0x13
    51d4:	9c 89       	ldd	r25, Y+20	; 0x14
    51d6:	00 97       	sbiw	r24, 0x00	; 0
    51d8:	69 f7       	brne	.-38     	; 0x51b4 <HBUZ_enOnce+0xd4>
    51da:	14 c0       	rjmp	.+40     	; 0x5204 <HBUZ_enOnce+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51dc:	6d 89       	ldd	r22, Y+21	; 0x15
    51de:	7e 89       	ldd	r23, Y+22	; 0x16
    51e0:	8f 89       	ldd	r24, Y+23	; 0x17
    51e2:	98 8d       	ldd	r25, Y+24	; 0x18
    51e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51e8:	dc 01       	movw	r26, r24
    51ea:	cb 01       	movw	r24, r22
    51ec:	9c 8b       	std	Y+20, r25	; 0x14
    51ee:	8b 8b       	std	Y+19, r24	; 0x13
    51f0:	8b 89       	ldd	r24, Y+19	; 0x13
    51f2:	9c 89       	ldd	r25, Y+20	; 0x14
    51f4:	98 8b       	std	Y+16, r25	; 0x10
    51f6:	8f 87       	std	Y+15, r24	; 0x0f
    51f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    51fa:	98 89       	ldd	r25, Y+16	; 0x10
    51fc:	01 97       	sbiw	r24, 0x01	; 1
    51fe:	f1 f7       	brne	.-4      	; 0x51fc <HBUZ_enOnce+0x11c>
    5200:	98 8b       	std	Y+16, r25	; 0x10
    5202:	8f 87       	std	Y+15, r24	; 0x0f
	MDIO_voidSetPinValue(HBUZ_PIN, LOW);
    5204:	83 e2       	ldi	r24, 0x23	; 35
    5206:	60 e0       	ldi	r22, 0x00	; 0
    5208:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	_delay_ms(copy_u64BuzzPeriod);
    520c:	2e 8d       	ldd	r18, Y+30	; 0x1e
    520e:	3f 8d       	ldd	r19, Y+31	; 0x1f
    5210:	48 a1       	ldd	r20, Y+32	; 0x20
    5212:	59 a1       	ldd	r21, Y+33	; 0x21
    5214:	6a a1       	ldd	r22, Y+34	; 0x22
    5216:	7b a1       	ldd	r23, Y+35	; 0x23
    5218:	8c a1       	ldd	r24, Y+36	; 0x24
    521a:	9d a1       	ldd	r25, Y+37	; 0x25
    521c:	0e 94 75 00 	call	0xea	; 0xea <__floatundisf>
    5220:	dc 01       	movw	r26, r24
    5222:	cb 01       	movw	r24, r22
    5224:	8b 87       	std	Y+11, r24	; 0x0b
    5226:	9c 87       	std	Y+12, r25	; 0x0c
    5228:	ad 87       	std	Y+13, r26	; 0x0d
    522a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    522c:	6b 85       	ldd	r22, Y+11	; 0x0b
    522e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5230:	8d 85       	ldd	r24, Y+13	; 0x0d
    5232:	9e 85       	ldd	r25, Y+14	; 0x0e
    5234:	20 e0       	ldi	r18, 0x00	; 0
    5236:	30 e0       	ldi	r19, 0x00	; 0
    5238:	4a e7       	ldi	r20, 0x7A	; 122
    523a:	55 e4       	ldi	r21, 0x45	; 69
    523c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    5240:	dc 01       	movw	r26, r24
    5242:	cb 01       	movw	r24, r22
    5244:	8f 83       	std	Y+7, r24	; 0x07
    5246:	98 87       	std	Y+8, r25	; 0x08
    5248:	a9 87       	std	Y+9, r26	; 0x09
    524a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    524c:	6f 81       	ldd	r22, Y+7	; 0x07
    524e:	78 85       	ldd	r23, Y+8	; 0x08
    5250:	89 85       	ldd	r24, Y+9	; 0x09
    5252:	9a 85       	ldd	r25, Y+10	; 0x0a
    5254:	20 e0       	ldi	r18, 0x00	; 0
    5256:	30 e0       	ldi	r19, 0x00	; 0
    5258:	40 e8       	ldi	r20, 0x80	; 128
    525a:	5f e3       	ldi	r21, 0x3F	; 63
    525c:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    5260:	88 23       	and	r24, r24
    5262:	2c f4       	brge	.+10     	; 0x526e <HBUZ_enOnce+0x18e>
		__ticks = 1;
    5264:	81 e0       	ldi	r24, 0x01	; 1
    5266:	90 e0       	ldi	r25, 0x00	; 0
    5268:	9e 83       	std	Y+6, r25	; 0x06
    526a:	8d 83       	std	Y+5, r24	; 0x05
    526c:	3f c0       	rjmp	.+126    	; 0x52ec <HBUZ_enOnce+0x20c>
	else if (__tmp > 65535)
    526e:	6f 81       	ldd	r22, Y+7	; 0x07
    5270:	78 85       	ldd	r23, Y+8	; 0x08
    5272:	89 85       	ldd	r24, Y+9	; 0x09
    5274:	9a 85       	ldd	r25, Y+10	; 0x0a
    5276:	20 e0       	ldi	r18, 0x00	; 0
    5278:	3f ef       	ldi	r19, 0xFF	; 255
    527a:	4f e7       	ldi	r20, 0x7F	; 127
    527c:	57 e4       	ldi	r21, 0x47	; 71
    527e:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    5282:	18 16       	cp	r1, r24
    5284:	4c f5       	brge	.+82     	; 0x52d8 <HBUZ_enOnce+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5286:	6b 85       	ldd	r22, Y+11	; 0x0b
    5288:	7c 85       	ldd	r23, Y+12	; 0x0c
    528a:	8d 85       	ldd	r24, Y+13	; 0x0d
    528c:	9e 85       	ldd	r25, Y+14	; 0x0e
    528e:	20 e0       	ldi	r18, 0x00	; 0
    5290:	30 e0       	ldi	r19, 0x00	; 0
    5292:	40 e2       	ldi	r20, 0x20	; 32
    5294:	51 e4       	ldi	r21, 0x41	; 65
    5296:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    529a:	dc 01       	movw	r26, r24
    529c:	cb 01       	movw	r24, r22
    529e:	bc 01       	movw	r22, r24
    52a0:	cd 01       	movw	r24, r26
    52a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52a6:	dc 01       	movw	r26, r24
    52a8:	cb 01       	movw	r24, r22
    52aa:	9e 83       	std	Y+6, r25	; 0x06
    52ac:	8d 83       	std	Y+5, r24	; 0x05
    52ae:	0f c0       	rjmp	.+30     	; 0x52ce <HBUZ_enOnce+0x1ee>
    52b0:	80 e9       	ldi	r24, 0x90	; 144
    52b2:	91 e0       	ldi	r25, 0x01	; 1
    52b4:	9c 83       	std	Y+4, r25	; 0x04
    52b6:	8b 83       	std	Y+3, r24	; 0x03
    52b8:	8b 81       	ldd	r24, Y+3	; 0x03
    52ba:	9c 81       	ldd	r25, Y+4	; 0x04
    52bc:	01 97       	sbiw	r24, 0x01	; 1
    52be:	f1 f7       	brne	.-4      	; 0x52bc <HBUZ_enOnce+0x1dc>
    52c0:	9c 83       	std	Y+4, r25	; 0x04
    52c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52c4:	8d 81       	ldd	r24, Y+5	; 0x05
    52c6:	9e 81       	ldd	r25, Y+6	; 0x06
    52c8:	01 97       	sbiw	r24, 0x01	; 1
    52ca:	9e 83       	std	Y+6, r25	; 0x06
    52cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52ce:	8d 81       	ldd	r24, Y+5	; 0x05
    52d0:	9e 81       	ldd	r25, Y+6	; 0x06
    52d2:	00 97       	sbiw	r24, 0x00	; 0
    52d4:	69 f7       	brne	.-38     	; 0x52b0 <HBUZ_enOnce+0x1d0>
    52d6:	14 c0       	rjmp	.+40     	; 0x5300 <HBUZ_enOnce+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52d8:	6f 81       	ldd	r22, Y+7	; 0x07
    52da:	78 85       	ldd	r23, Y+8	; 0x08
    52dc:	89 85       	ldd	r24, Y+9	; 0x09
    52de:	9a 85       	ldd	r25, Y+10	; 0x0a
    52e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52e4:	dc 01       	movw	r26, r24
    52e6:	cb 01       	movw	r24, r22
    52e8:	9e 83       	std	Y+6, r25	; 0x06
    52ea:	8d 83       	std	Y+5, r24	; 0x05
    52ec:	8d 81       	ldd	r24, Y+5	; 0x05
    52ee:	9e 81       	ldd	r25, Y+6	; 0x06
    52f0:	9a 83       	std	Y+2, r25	; 0x02
    52f2:	89 83       	std	Y+1, r24	; 0x01
    52f4:	89 81       	ldd	r24, Y+1	; 0x01
    52f6:	9a 81       	ldd	r25, Y+2	; 0x02
    52f8:	01 97       	sbiw	r24, 0x01	; 1
    52fa:	f1 f7       	brne	.-4      	; 0x52f8 <HBUZ_enOnce+0x218>
    52fc:	9a 83       	std	Y+2, r25	; 0x02
    52fe:	89 83       	std	Y+1, r24	; 0x01
	return Local_State;
    5300:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    5302:	a5 96       	adiw	r28, 0x25	; 37
    5304:	0f b6       	in	r0, 0x3f	; 63
    5306:	f8 94       	cli
    5308:	de bf       	out	0x3e, r29	; 62
    530a:	0f be       	out	0x3f, r0	; 63
    530c:	cd bf       	out	0x3d, r28	; 61
    530e:	cf 91       	pop	r28
    5310:	df 91       	pop	r29
    5312:	08 95       	ret

00005314 <HBUZ_enTwice>:

ErrorState_t HBUZ_enTwice(u64 copy_u64BuzzPeriod)
{ErrorState_t Local_State=SUCCES;
    5314:	df 93       	push	r29
    5316:	cf 93       	push	r28
    5318:	cd b7       	in	r28, 0x3d	; 61
    531a:	de b7       	in	r29, 0x3e	; 62
    531c:	c1 54       	subi	r28, 0x41	; 65
    531e:	d0 40       	sbci	r29, 0x00	; 0
    5320:	0f b6       	in	r0, 0x3f	; 63
    5322:	f8 94       	cli
    5324:	de bf       	out	0x3e, r29	; 62
    5326:	0f be       	out	0x3f, r0	; 63
    5328:	cd bf       	out	0x3d, r28	; 61
    532a:	fe 01       	movw	r30, r28
    532c:	fa 96       	adiw	r30, 0x3a	; 58
    532e:	20 83       	st	Z, r18
    5330:	31 83       	std	Z+1, r19	; 0x01
    5332:	42 83       	std	Z+2, r20	; 0x02
    5334:	53 83       	std	Z+3, r21	; 0x03
    5336:	64 83       	std	Z+4, r22	; 0x04
    5338:	75 83       	std	Z+5, r23	; 0x05
    533a:	86 83       	std	Z+6, r24	; 0x06
    533c:	97 83       	std	Z+7, r25	; 0x07
    533e:	82 e0       	ldi	r24, 0x02	; 2
    5340:	89 af       	std	Y+57, r24	; 0x39
	MDIO_voidSetPinValue(HBUZ_PIN, HIGH);
    5342:	83 e2       	ldi	r24, 0x23	; 35
    5344:	61 e0       	ldi	r22, 0x01	; 1
    5346:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	_delay_ms(copy_u64BuzzPeriod);
    534a:	fe 01       	movw	r30, r28
    534c:	fa 96       	adiw	r30, 0x3a	; 58
    534e:	20 81       	ld	r18, Z
    5350:	31 81       	ldd	r19, Z+1	; 0x01
    5352:	42 81       	ldd	r20, Z+2	; 0x02
    5354:	53 81       	ldd	r21, Z+3	; 0x03
    5356:	64 81       	ldd	r22, Z+4	; 0x04
    5358:	75 81       	ldd	r23, Z+5	; 0x05
    535a:	86 81       	ldd	r24, Z+6	; 0x06
    535c:	97 81       	ldd	r25, Z+7	; 0x07
    535e:	0e 94 75 00 	call	0xea	; 0xea <__floatundisf>
    5362:	dc 01       	movw	r26, r24
    5364:	cb 01       	movw	r24, r22
    5366:	8d ab       	std	Y+53, r24	; 0x35
    5368:	9e ab       	std	Y+54, r25	; 0x36
    536a:	af ab       	std	Y+55, r26	; 0x37
    536c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    536e:	6d a9       	ldd	r22, Y+53	; 0x35
    5370:	7e a9       	ldd	r23, Y+54	; 0x36
    5372:	8f a9       	ldd	r24, Y+55	; 0x37
    5374:	98 ad       	ldd	r25, Y+56	; 0x38
    5376:	20 e0       	ldi	r18, 0x00	; 0
    5378:	30 e0       	ldi	r19, 0x00	; 0
    537a:	4a e7       	ldi	r20, 0x7A	; 122
    537c:	55 e4       	ldi	r21, 0x45	; 69
    537e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    5382:	dc 01       	movw	r26, r24
    5384:	cb 01       	movw	r24, r22
    5386:	89 ab       	std	Y+49, r24	; 0x31
    5388:	9a ab       	std	Y+50, r25	; 0x32
    538a:	ab ab       	std	Y+51, r26	; 0x33
    538c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    538e:	69 a9       	ldd	r22, Y+49	; 0x31
    5390:	7a a9       	ldd	r23, Y+50	; 0x32
    5392:	8b a9       	ldd	r24, Y+51	; 0x33
    5394:	9c a9       	ldd	r25, Y+52	; 0x34
    5396:	20 e0       	ldi	r18, 0x00	; 0
    5398:	30 e0       	ldi	r19, 0x00	; 0
    539a:	40 e8       	ldi	r20, 0x80	; 128
    539c:	5f e3       	ldi	r21, 0x3F	; 63
    539e:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    53a2:	88 23       	and	r24, r24
    53a4:	2c f4       	brge	.+10     	; 0x53b0 <HBUZ_enTwice+0x9c>
		__ticks = 1;
    53a6:	81 e0       	ldi	r24, 0x01	; 1
    53a8:	90 e0       	ldi	r25, 0x00	; 0
    53aa:	98 ab       	std	Y+48, r25	; 0x30
    53ac:	8f a7       	std	Y+47, r24	; 0x2f
    53ae:	3f c0       	rjmp	.+126    	; 0x542e <HBUZ_enTwice+0x11a>
	else if (__tmp > 65535)
    53b0:	69 a9       	ldd	r22, Y+49	; 0x31
    53b2:	7a a9       	ldd	r23, Y+50	; 0x32
    53b4:	8b a9       	ldd	r24, Y+51	; 0x33
    53b6:	9c a9       	ldd	r25, Y+52	; 0x34
    53b8:	20 e0       	ldi	r18, 0x00	; 0
    53ba:	3f ef       	ldi	r19, 0xFF	; 255
    53bc:	4f e7       	ldi	r20, 0x7F	; 127
    53be:	57 e4       	ldi	r21, 0x47	; 71
    53c0:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    53c4:	18 16       	cp	r1, r24
    53c6:	4c f5       	brge	.+82     	; 0x541a <HBUZ_enTwice+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53c8:	6d a9       	ldd	r22, Y+53	; 0x35
    53ca:	7e a9       	ldd	r23, Y+54	; 0x36
    53cc:	8f a9       	ldd	r24, Y+55	; 0x37
    53ce:	98 ad       	ldd	r25, Y+56	; 0x38
    53d0:	20 e0       	ldi	r18, 0x00	; 0
    53d2:	30 e0       	ldi	r19, 0x00	; 0
    53d4:	40 e2       	ldi	r20, 0x20	; 32
    53d6:	51 e4       	ldi	r21, 0x41	; 65
    53d8:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    53dc:	dc 01       	movw	r26, r24
    53de:	cb 01       	movw	r24, r22
    53e0:	bc 01       	movw	r22, r24
    53e2:	cd 01       	movw	r24, r26
    53e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53e8:	dc 01       	movw	r26, r24
    53ea:	cb 01       	movw	r24, r22
    53ec:	98 ab       	std	Y+48, r25	; 0x30
    53ee:	8f a7       	std	Y+47, r24	; 0x2f
    53f0:	0f c0       	rjmp	.+30     	; 0x5410 <HBUZ_enTwice+0xfc>
    53f2:	80 e9       	ldi	r24, 0x90	; 144
    53f4:	91 e0       	ldi	r25, 0x01	; 1
    53f6:	9e a7       	std	Y+46, r25	; 0x2e
    53f8:	8d a7       	std	Y+45, r24	; 0x2d
    53fa:	8d a5       	ldd	r24, Y+45	; 0x2d
    53fc:	9e a5       	ldd	r25, Y+46	; 0x2e
    53fe:	01 97       	sbiw	r24, 0x01	; 1
    5400:	f1 f7       	brne	.-4      	; 0x53fe <HBUZ_enTwice+0xea>
    5402:	9e a7       	std	Y+46, r25	; 0x2e
    5404:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5406:	8f a5       	ldd	r24, Y+47	; 0x2f
    5408:	98 a9       	ldd	r25, Y+48	; 0x30
    540a:	01 97       	sbiw	r24, 0x01	; 1
    540c:	98 ab       	std	Y+48, r25	; 0x30
    540e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5410:	8f a5       	ldd	r24, Y+47	; 0x2f
    5412:	98 a9       	ldd	r25, Y+48	; 0x30
    5414:	00 97       	sbiw	r24, 0x00	; 0
    5416:	69 f7       	brne	.-38     	; 0x53f2 <HBUZ_enTwice+0xde>
    5418:	14 c0       	rjmp	.+40     	; 0x5442 <HBUZ_enTwice+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    541a:	69 a9       	ldd	r22, Y+49	; 0x31
    541c:	7a a9       	ldd	r23, Y+50	; 0x32
    541e:	8b a9       	ldd	r24, Y+51	; 0x33
    5420:	9c a9       	ldd	r25, Y+52	; 0x34
    5422:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5426:	dc 01       	movw	r26, r24
    5428:	cb 01       	movw	r24, r22
    542a:	98 ab       	std	Y+48, r25	; 0x30
    542c:	8f a7       	std	Y+47, r24	; 0x2f
    542e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5430:	98 a9       	ldd	r25, Y+48	; 0x30
    5432:	9c a7       	std	Y+44, r25	; 0x2c
    5434:	8b a7       	std	Y+43, r24	; 0x2b
    5436:	8b a5       	ldd	r24, Y+43	; 0x2b
    5438:	9c a5       	ldd	r25, Y+44	; 0x2c
    543a:	01 97       	sbiw	r24, 0x01	; 1
    543c:	f1 f7       	brne	.-4      	; 0x543a <HBUZ_enTwice+0x126>
    543e:	9c a7       	std	Y+44, r25	; 0x2c
    5440:	8b a7       	std	Y+43, r24	; 0x2b
	MDIO_voidSetPinValue(HBUZ_PIN, LOW);
    5442:	83 e2       	ldi	r24, 0x23	; 35
    5444:	60 e0       	ldi	r22, 0x00	; 0
    5446:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
    544a:	80 e0       	ldi	r24, 0x00	; 0
    544c:	90 e0       	ldi	r25, 0x00	; 0
    544e:	a8 ec       	ldi	r26, 0xC8	; 200
    5450:	b2 e4       	ldi	r27, 0x42	; 66
    5452:	8f a3       	std	Y+39, r24	; 0x27
    5454:	98 a7       	std	Y+40, r25	; 0x28
    5456:	a9 a7       	std	Y+41, r26	; 0x29
    5458:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    545a:	6f a1       	ldd	r22, Y+39	; 0x27
    545c:	78 a5       	ldd	r23, Y+40	; 0x28
    545e:	89 a5       	ldd	r24, Y+41	; 0x29
    5460:	9a a5       	ldd	r25, Y+42	; 0x2a
    5462:	20 e0       	ldi	r18, 0x00	; 0
    5464:	30 e0       	ldi	r19, 0x00	; 0
    5466:	4a e7       	ldi	r20, 0x7A	; 122
    5468:	55 e4       	ldi	r21, 0x45	; 69
    546a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    546e:	dc 01       	movw	r26, r24
    5470:	cb 01       	movw	r24, r22
    5472:	8b a3       	std	Y+35, r24	; 0x23
    5474:	9c a3       	std	Y+36, r25	; 0x24
    5476:	ad a3       	std	Y+37, r26	; 0x25
    5478:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    547a:	6b a1       	ldd	r22, Y+35	; 0x23
    547c:	7c a1       	ldd	r23, Y+36	; 0x24
    547e:	8d a1       	ldd	r24, Y+37	; 0x25
    5480:	9e a1       	ldd	r25, Y+38	; 0x26
    5482:	20 e0       	ldi	r18, 0x00	; 0
    5484:	30 e0       	ldi	r19, 0x00	; 0
    5486:	40 e8       	ldi	r20, 0x80	; 128
    5488:	5f e3       	ldi	r21, 0x3F	; 63
    548a:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    548e:	88 23       	and	r24, r24
    5490:	2c f4       	brge	.+10     	; 0x549c <HBUZ_enTwice+0x188>
		__ticks = 1;
    5492:	81 e0       	ldi	r24, 0x01	; 1
    5494:	90 e0       	ldi	r25, 0x00	; 0
    5496:	9a a3       	std	Y+34, r25	; 0x22
    5498:	89 a3       	std	Y+33, r24	; 0x21
    549a:	3f c0       	rjmp	.+126    	; 0x551a <HBUZ_enTwice+0x206>
	else if (__tmp > 65535)
    549c:	6b a1       	ldd	r22, Y+35	; 0x23
    549e:	7c a1       	ldd	r23, Y+36	; 0x24
    54a0:	8d a1       	ldd	r24, Y+37	; 0x25
    54a2:	9e a1       	ldd	r25, Y+38	; 0x26
    54a4:	20 e0       	ldi	r18, 0x00	; 0
    54a6:	3f ef       	ldi	r19, 0xFF	; 255
    54a8:	4f e7       	ldi	r20, 0x7F	; 127
    54aa:	57 e4       	ldi	r21, 0x47	; 71
    54ac:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    54b0:	18 16       	cp	r1, r24
    54b2:	4c f5       	brge	.+82     	; 0x5506 <HBUZ_enTwice+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54b4:	6f a1       	ldd	r22, Y+39	; 0x27
    54b6:	78 a5       	ldd	r23, Y+40	; 0x28
    54b8:	89 a5       	ldd	r24, Y+41	; 0x29
    54ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    54bc:	20 e0       	ldi	r18, 0x00	; 0
    54be:	30 e0       	ldi	r19, 0x00	; 0
    54c0:	40 e2       	ldi	r20, 0x20	; 32
    54c2:	51 e4       	ldi	r21, 0x41	; 65
    54c4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    54c8:	dc 01       	movw	r26, r24
    54ca:	cb 01       	movw	r24, r22
    54cc:	bc 01       	movw	r22, r24
    54ce:	cd 01       	movw	r24, r26
    54d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54d4:	dc 01       	movw	r26, r24
    54d6:	cb 01       	movw	r24, r22
    54d8:	9a a3       	std	Y+34, r25	; 0x22
    54da:	89 a3       	std	Y+33, r24	; 0x21
    54dc:	0f c0       	rjmp	.+30     	; 0x54fc <HBUZ_enTwice+0x1e8>
    54de:	80 e9       	ldi	r24, 0x90	; 144
    54e0:	91 e0       	ldi	r25, 0x01	; 1
    54e2:	98 a3       	std	Y+32, r25	; 0x20
    54e4:	8f 8f       	std	Y+31, r24	; 0x1f
    54e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    54e8:	98 a1       	ldd	r25, Y+32	; 0x20
    54ea:	01 97       	sbiw	r24, 0x01	; 1
    54ec:	f1 f7       	brne	.-4      	; 0x54ea <HBUZ_enTwice+0x1d6>
    54ee:	98 a3       	std	Y+32, r25	; 0x20
    54f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54f2:	89 a1       	ldd	r24, Y+33	; 0x21
    54f4:	9a a1       	ldd	r25, Y+34	; 0x22
    54f6:	01 97       	sbiw	r24, 0x01	; 1
    54f8:	9a a3       	std	Y+34, r25	; 0x22
    54fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54fc:	89 a1       	ldd	r24, Y+33	; 0x21
    54fe:	9a a1       	ldd	r25, Y+34	; 0x22
    5500:	00 97       	sbiw	r24, 0x00	; 0
    5502:	69 f7       	brne	.-38     	; 0x54de <HBUZ_enTwice+0x1ca>
    5504:	14 c0       	rjmp	.+40     	; 0x552e <HBUZ_enTwice+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5506:	6b a1       	ldd	r22, Y+35	; 0x23
    5508:	7c a1       	ldd	r23, Y+36	; 0x24
    550a:	8d a1       	ldd	r24, Y+37	; 0x25
    550c:	9e a1       	ldd	r25, Y+38	; 0x26
    550e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5512:	dc 01       	movw	r26, r24
    5514:	cb 01       	movw	r24, r22
    5516:	9a a3       	std	Y+34, r25	; 0x22
    5518:	89 a3       	std	Y+33, r24	; 0x21
    551a:	89 a1       	ldd	r24, Y+33	; 0x21
    551c:	9a a1       	ldd	r25, Y+34	; 0x22
    551e:	9e 8f       	std	Y+30, r25	; 0x1e
    5520:	8d 8f       	std	Y+29, r24	; 0x1d
    5522:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5524:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5526:	01 97       	sbiw	r24, 0x01	; 1
    5528:	f1 f7       	brne	.-4      	; 0x5526 <HBUZ_enTwice+0x212>
    552a:	9e 8f       	std	Y+30, r25	; 0x1e
    552c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(100);
	MDIO_voidSetPinValue(HBUZ_PIN, HIGH);
    552e:	83 e2       	ldi	r24, 0x23	; 35
    5530:	61 e0       	ldi	r22, 0x01	; 1
    5532:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	_delay_ms(copy_u64BuzzPeriod);
    5536:	fe 01       	movw	r30, r28
    5538:	fa 96       	adiw	r30, 0x3a	; 58
    553a:	20 81       	ld	r18, Z
    553c:	31 81       	ldd	r19, Z+1	; 0x01
    553e:	42 81       	ldd	r20, Z+2	; 0x02
    5540:	53 81       	ldd	r21, Z+3	; 0x03
    5542:	64 81       	ldd	r22, Z+4	; 0x04
    5544:	75 81       	ldd	r23, Z+5	; 0x05
    5546:	86 81       	ldd	r24, Z+6	; 0x06
    5548:	97 81       	ldd	r25, Z+7	; 0x07
    554a:	0e 94 75 00 	call	0xea	; 0xea <__floatundisf>
    554e:	dc 01       	movw	r26, r24
    5550:	cb 01       	movw	r24, r22
    5552:	89 8f       	std	Y+25, r24	; 0x19
    5554:	9a 8f       	std	Y+26, r25	; 0x1a
    5556:	ab 8f       	std	Y+27, r26	; 0x1b
    5558:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    555a:	69 8d       	ldd	r22, Y+25	; 0x19
    555c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    555e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5560:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5562:	20 e0       	ldi	r18, 0x00	; 0
    5564:	30 e0       	ldi	r19, 0x00	; 0
    5566:	4a e7       	ldi	r20, 0x7A	; 122
    5568:	55 e4       	ldi	r21, 0x45	; 69
    556a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    556e:	dc 01       	movw	r26, r24
    5570:	cb 01       	movw	r24, r22
    5572:	8d 8b       	std	Y+21, r24	; 0x15
    5574:	9e 8b       	std	Y+22, r25	; 0x16
    5576:	af 8b       	std	Y+23, r26	; 0x17
    5578:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    557a:	6d 89       	ldd	r22, Y+21	; 0x15
    557c:	7e 89       	ldd	r23, Y+22	; 0x16
    557e:	8f 89       	ldd	r24, Y+23	; 0x17
    5580:	98 8d       	ldd	r25, Y+24	; 0x18
    5582:	20 e0       	ldi	r18, 0x00	; 0
    5584:	30 e0       	ldi	r19, 0x00	; 0
    5586:	40 e8       	ldi	r20, 0x80	; 128
    5588:	5f e3       	ldi	r21, 0x3F	; 63
    558a:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    558e:	88 23       	and	r24, r24
    5590:	2c f4       	brge	.+10     	; 0x559c <HBUZ_enTwice+0x288>
		__ticks = 1;
    5592:	81 e0       	ldi	r24, 0x01	; 1
    5594:	90 e0       	ldi	r25, 0x00	; 0
    5596:	9c 8b       	std	Y+20, r25	; 0x14
    5598:	8b 8b       	std	Y+19, r24	; 0x13
    559a:	3f c0       	rjmp	.+126    	; 0x561a <HBUZ_enTwice+0x306>
	else if (__tmp > 65535)
    559c:	6d 89       	ldd	r22, Y+21	; 0x15
    559e:	7e 89       	ldd	r23, Y+22	; 0x16
    55a0:	8f 89       	ldd	r24, Y+23	; 0x17
    55a2:	98 8d       	ldd	r25, Y+24	; 0x18
    55a4:	20 e0       	ldi	r18, 0x00	; 0
    55a6:	3f ef       	ldi	r19, 0xFF	; 255
    55a8:	4f e7       	ldi	r20, 0x7F	; 127
    55aa:	57 e4       	ldi	r21, 0x47	; 71
    55ac:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    55b0:	18 16       	cp	r1, r24
    55b2:	4c f5       	brge	.+82     	; 0x5606 <HBUZ_enTwice+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55b4:	69 8d       	ldd	r22, Y+25	; 0x19
    55b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    55b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    55ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    55bc:	20 e0       	ldi	r18, 0x00	; 0
    55be:	30 e0       	ldi	r19, 0x00	; 0
    55c0:	40 e2       	ldi	r20, 0x20	; 32
    55c2:	51 e4       	ldi	r21, 0x41	; 65
    55c4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    55c8:	dc 01       	movw	r26, r24
    55ca:	cb 01       	movw	r24, r22
    55cc:	bc 01       	movw	r22, r24
    55ce:	cd 01       	movw	r24, r26
    55d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55d4:	dc 01       	movw	r26, r24
    55d6:	cb 01       	movw	r24, r22
    55d8:	9c 8b       	std	Y+20, r25	; 0x14
    55da:	8b 8b       	std	Y+19, r24	; 0x13
    55dc:	0f c0       	rjmp	.+30     	; 0x55fc <HBUZ_enTwice+0x2e8>
    55de:	80 e9       	ldi	r24, 0x90	; 144
    55e0:	91 e0       	ldi	r25, 0x01	; 1
    55e2:	9a 8b       	std	Y+18, r25	; 0x12
    55e4:	89 8b       	std	Y+17, r24	; 0x11
    55e6:	89 89       	ldd	r24, Y+17	; 0x11
    55e8:	9a 89       	ldd	r25, Y+18	; 0x12
    55ea:	01 97       	sbiw	r24, 0x01	; 1
    55ec:	f1 f7       	brne	.-4      	; 0x55ea <HBUZ_enTwice+0x2d6>
    55ee:	9a 8b       	std	Y+18, r25	; 0x12
    55f0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55f2:	8b 89       	ldd	r24, Y+19	; 0x13
    55f4:	9c 89       	ldd	r25, Y+20	; 0x14
    55f6:	01 97       	sbiw	r24, 0x01	; 1
    55f8:	9c 8b       	std	Y+20, r25	; 0x14
    55fa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55fc:	8b 89       	ldd	r24, Y+19	; 0x13
    55fe:	9c 89       	ldd	r25, Y+20	; 0x14
    5600:	00 97       	sbiw	r24, 0x00	; 0
    5602:	69 f7       	brne	.-38     	; 0x55de <HBUZ_enTwice+0x2ca>
    5604:	14 c0       	rjmp	.+40     	; 0x562e <HBUZ_enTwice+0x31a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5606:	6d 89       	ldd	r22, Y+21	; 0x15
    5608:	7e 89       	ldd	r23, Y+22	; 0x16
    560a:	8f 89       	ldd	r24, Y+23	; 0x17
    560c:	98 8d       	ldd	r25, Y+24	; 0x18
    560e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5612:	dc 01       	movw	r26, r24
    5614:	cb 01       	movw	r24, r22
    5616:	9c 8b       	std	Y+20, r25	; 0x14
    5618:	8b 8b       	std	Y+19, r24	; 0x13
    561a:	8b 89       	ldd	r24, Y+19	; 0x13
    561c:	9c 89       	ldd	r25, Y+20	; 0x14
    561e:	98 8b       	std	Y+16, r25	; 0x10
    5620:	8f 87       	std	Y+15, r24	; 0x0f
    5622:	8f 85       	ldd	r24, Y+15	; 0x0f
    5624:	98 89       	ldd	r25, Y+16	; 0x10
    5626:	01 97       	sbiw	r24, 0x01	; 1
    5628:	f1 f7       	brne	.-4      	; 0x5626 <HBUZ_enTwice+0x312>
    562a:	98 8b       	std	Y+16, r25	; 0x10
    562c:	8f 87       	std	Y+15, r24	; 0x0f
	MDIO_voidSetPinValue(HBUZ_PIN, LOW);
    562e:	83 e2       	ldi	r24, 0x23	; 35
    5630:	60 e0       	ldi	r22, 0x00	; 0
    5632:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	_delay_ms(copy_u64BuzzPeriod);
    5636:	fe 01       	movw	r30, r28
    5638:	fa 96       	adiw	r30, 0x3a	; 58
    563a:	20 81       	ld	r18, Z
    563c:	31 81       	ldd	r19, Z+1	; 0x01
    563e:	42 81       	ldd	r20, Z+2	; 0x02
    5640:	53 81       	ldd	r21, Z+3	; 0x03
    5642:	64 81       	ldd	r22, Z+4	; 0x04
    5644:	75 81       	ldd	r23, Z+5	; 0x05
    5646:	86 81       	ldd	r24, Z+6	; 0x06
    5648:	97 81       	ldd	r25, Z+7	; 0x07
    564a:	0e 94 75 00 	call	0xea	; 0xea <__floatundisf>
    564e:	dc 01       	movw	r26, r24
    5650:	cb 01       	movw	r24, r22
    5652:	8b 87       	std	Y+11, r24	; 0x0b
    5654:	9c 87       	std	Y+12, r25	; 0x0c
    5656:	ad 87       	std	Y+13, r26	; 0x0d
    5658:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    565a:	6b 85       	ldd	r22, Y+11	; 0x0b
    565c:	7c 85       	ldd	r23, Y+12	; 0x0c
    565e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5660:	9e 85       	ldd	r25, Y+14	; 0x0e
    5662:	20 e0       	ldi	r18, 0x00	; 0
    5664:	30 e0       	ldi	r19, 0x00	; 0
    5666:	4a e7       	ldi	r20, 0x7A	; 122
    5668:	55 e4       	ldi	r21, 0x45	; 69
    566a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    566e:	dc 01       	movw	r26, r24
    5670:	cb 01       	movw	r24, r22
    5672:	8f 83       	std	Y+7, r24	; 0x07
    5674:	98 87       	std	Y+8, r25	; 0x08
    5676:	a9 87       	std	Y+9, r26	; 0x09
    5678:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    567a:	6f 81       	ldd	r22, Y+7	; 0x07
    567c:	78 85       	ldd	r23, Y+8	; 0x08
    567e:	89 85       	ldd	r24, Y+9	; 0x09
    5680:	9a 85       	ldd	r25, Y+10	; 0x0a
    5682:	20 e0       	ldi	r18, 0x00	; 0
    5684:	30 e0       	ldi	r19, 0x00	; 0
    5686:	40 e8       	ldi	r20, 0x80	; 128
    5688:	5f e3       	ldi	r21, 0x3F	; 63
    568a:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    568e:	88 23       	and	r24, r24
    5690:	2c f4       	brge	.+10     	; 0x569c <HBUZ_enTwice+0x388>
		__ticks = 1;
    5692:	81 e0       	ldi	r24, 0x01	; 1
    5694:	90 e0       	ldi	r25, 0x00	; 0
    5696:	9e 83       	std	Y+6, r25	; 0x06
    5698:	8d 83       	std	Y+5, r24	; 0x05
    569a:	3f c0       	rjmp	.+126    	; 0x571a <HBUZ_enTwice+0x406>
	else if (__tmp > 65535)
    569c:	6f 81       	ldd	r22, Y+7	; 0x07
    569e:	78 85       	ldd	r23, Y+8	; 0x08
    56a0:	89 85       	ldd	r24, Y+9	; 0x09
    56a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    56a4:	20 e0       	ldi	r18, 0x00	; 0
    56a6:	3f ef       	ldi	r19, 0xFF	; 255
    56a8:	4f e7       	ldi	r20, 0x7F	; 127
    56aa:	57 e4       	ldi	r21, 0x47	; 71
    56ac:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    56b0:	18 16       	cp	r1, r24
    56b2:	4c f5       	brge	.+82     	; 0x5706 <HBUZ_enTwice+0x3f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    56b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    56b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    56ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    56bc:	20 e0       	ldi	r18, 0x00	; 0
    56be:	30 e0       	ldi	r19, 0x00	; 0
    56c0:	40 e2       	ldi	r20, 0x20	; 32
    56c2:	51 e4       	ldi	r21, 0x41	; 65
    56c4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    56c8:	dc 01       	movw	r26, r24
    56ca:	cb 01       	movw	r24, r22
    56cc:	bc 01       	movw	r22, r24
    56ce:	cd 01       	movw	r24, r26
    56d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56d4:	dc 01       	movw	r26, r24
    56d6:	cb 01       	movw	r24, r22
    56d8:	9e 83       	std	Y+6, r25	; 0x06
    56da:	8d 83       	std	Y+5, r24	; 0x05
    56dc:	0f c0       	rjmp	.+30     	; 0x56fc <HBUZ_enTwice+0x3e8>
    56de:	80 e9       	ldi	r24, 0x90	; 144
    56e0:	91 e0       	ldi	r25, 0x01	; 1
    56e2:	9c 83       	std	Y+4, r25	; 0x04
    56e4:	8b 83       	std	Y+3, r24	; 0x03
    56e6:	8b 81       	ldd	r24, Y+3	; 0x03
    56e8:	9c 81       	ldd	r25, Y+4	; 0x04
    56ea:	01 97       	sbiw	r24, 0x01	; 1
    56ec:	f1 f7       	brne	.-4      	; 0x56ea <HBUZ_enTwice+0x3d6>
    56ee:	9c 83       	std	Y+4, r25	; 0x04
    56f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56f2:	8d 81       	ldd	r24, Y+5	; 0x05
    56f4:	9e 81       	ldd	r25, Y+6	; 0x06
    56f6:	01 97       	sbiw	r24, 0x01	; 1
    56f8:	9e 83       	std	Y+6, r25	; 0x06
    56fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56fc:	8d 81       	ldd	r24, Y+5	; 0x05
    56fe:	9e 81       	ldd	r25, Y+6	; 0x06
    5700:	00 97       	sbiw	r24, 0x00	; 0
    5702:	69 f7       	brne	.-38     	; 0x56de <HBUZ_enTwice+0x3ca>
    5704:	14 c0       	rjmp	.+40     	; 0x572e <HBUZ_enTwice+0x41a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5706:	6f 81       	ldd	r22, Y+7	; 0x07
    5708:	78 85       	ldd	r23, Y+8	; 0x08
    570a:	89 85       	ldd	r24, Y+9	; 0x09
    570c:	9a 85       	ldd	r25, Y+10	; 0x0a
    570e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5712:	dc 01       	movw	r26, r24
    5714:	cb 01       	movw	r24, r22
    5716:	9e 83       	std	Y+6, r25	; 0x06
    5718:	8d 83       	std	Y+5, r24	; 0x05
    571a:	8d 81       	ldd	r24, Y+5	; 0x05
    571c:	9e 81       	ldd	r25, Y+6	; 0x06
    571e:	9a 83       	std	Y+2, r25	; 0x02
    5720:	89 83       	std	Y+1, r24	; 0x01
    5722:	89 81       	ldd	r24, Y+1	; 0x01
    5724:	9a 81       	ldd	r25, Y+2	; 0x02
    5726:	01 97       	sbiw	r24, 0x01	; 1
    5728:	f1 f7       	brne	.-4      	; 0x5726 <HBUZ_enTwice+0x412>
    572a:	9a 83       	std	Y+2, r25	; 0x02
    572c:	89 83       	std	Y+1, r24	; 0x01
	return Local_State;
    572e:	89 ad       	ldd	r24, Y+57	; 0x39
}
    5730:	cf 5b       	subi	r28, 0xBF	; 191
    5732:	df 4f       	sbci	r29, 0xFF	; 255
    5734:	0f b6       	in	r0, 0x3f	; 63
    5736:	f8 94       	cli
    5738:	de bf       	out	0x3e, r29	; 62
    573a:	0f be       	out	0x3f, r0	; 63
    573c:	cd bf       	out	0x3d, r28	; 61
    573e:	cf 91       	pop	r28
    5740:	df 91       	pop	r29
    5742:	08 95       	ret

00005744 <AC_ON>:
#include "HDC_MOTOR_init.h"
#include "Home_system.h"
#include "HLM35_int.h"


void AC_ON(s8 copy_s8ACtemp) {
    5744:	df 93       	push	r29
    5746:	cf 93       	push	r28
    5748:	00 d0       	rcall	.+0      	; 0x574a <AC_ON+0x6>
    574a:	00 d0       	rcall	.+0      	; 0x574c <AC_ON+0x8>
    574c:	0f 92       	push	r0
    574e:	cd b7       	in	r28, 0x3d	; 61
    5750:	de b7       	in	r29, 0x3e	; 62
    5752:	8d 83       	std	Y+5, r24	; 0x05
	u8 temp;
	//s8 ACTemp=25;
	s8 Initial_speed = 25; //25%
    5754:	89 e1       	ldi	r24, 0x19	; 25
    5756:	8b 83       	std	Y+3, r24	; 0x03
	s8 productValue = 0;
    5758:	1a 82       	std	Y+2, r1	; 0x02
	s8 finalspeed;
	HLM35_enTempRead(&temp);
    575a:	ce 01       	movw	r24, r28
    575c:	04 96       	adiw	r24, 0x04	; 4
    575e:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <HLM35_enTempRead>
	 HLCD_SendString("C");
	 HLCD_sendIntNum(copy_s8ACtemp);
	 HLCD_SendString("C");
	 HLCD_SendString("  ");
	 */
	if ((s8) temp > copy_s8ACtemp) {	//HLCD_ClearDisplay();
    5762:	8c 81       	ldd	r24, Y+4	; 0x04
    5764:	98 2f       	mov	r25, r24
    5766:	8d 81       	ldd	r24, Y+5	; 0x05
    5768:	89 17       	cp	r24, r25
    576a:	34 f5       	brge	.+76     	; 0x57b8 <AC_ON+0x74>
		HLCD_gotoXY(1, 13);
    576c:	81 e0       	ldi	r24, 0x01	; 1
    576e:	6d e0       	ldi	r22, 0x0D	; 13
    5770:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <HLCD_gotoXY>
		HLCD_DisplayCustomeChar(ICE);							//HLCD_SendString("FAN ON");
    5774:	81 e0       	ldi	r24, 0x01	; 1
    5776:	0e 94 76 25 	call	0x4aec	; 0x4aec <HLCD_DisplayCustomeChar>
		productValue = (s8) temp - copy_s8ACtemp;
    577a:	9c 81       	ldd	r25, Y+4	; 0x04
    577c:	8d 81       	ldd	r24, Y+5	; 0x05
    577e:	29 2f       	mov	r18, r25
    5780:	28 1b       	sub	r18, r24
    5782:	82 2f       	mov	r24, r18
    5784:	8a 83       	std	Y+2, r24	; 0x02
		finalspeed = Initial_speed + (productValue * 5);
    5786:	8a 81       	ldd	r24, Y+2	; 0x02
    5788:	28 2f       	mov	r18, r24
    578a:	33 27       	eor	r19, r19
    578c:	27 fd       	sbrc	r18, 7
    578e:	30 95       	com	r19
    5790:	c9 01       	movw	r24, r18
    5792:	88 0f       	add	r24, r24
    5794:	99 1f       	adc	r25, r25
    5796:	88 0f       	add	r24, r24
    5798:	99 1f       	adc	r25, r25
    579a:	82 0f       	add	r24, r18
    579c:	93 1f       	adc	r25, r19
    579e:	98 2f       	mov	r25, r24
    57a0:	8b 81       	ldd	r24, Y+3	; 0x03
    57a2:	89 0f       	add	r24, r25
    57a4:	89 83       	std	Y+1, r24	; 0x01
		if (finalspeed >= 0) {
    57a6:	89 81       	ldd	r24, Y+1	; 0x01
    57a8:	88 23       	and	r24, r24
    57aa:	ac f0       	brlt	.+42     	; 0x57d6 <AC_ON+0x92>
			HDCM_enStart(forward, (u8) finalspeed);
    57ac:	99 81       	ldd	r25, Y+1	; 0x01
    57ae:	80 e0       	ldi	r24, 0x00	; 0
    57b0:	69 2f       	mov	r22, r25
    57b2:	0e 94 fb 27 	call	0x4ff6	; 0x4ff6 <HDCM_enStart>
    57b6:	0f c0       	rjmp	.+30     	; 0x57d6 <AC_ON+0x92>

		else {

		}
	} //end temp if
	else if ((s8) temp <= copy_s8ACtemp) {
    57b8:	8c 81       	ldd	r24, Y+4	; 0x04
    57ba:	98 2f       	mov	r25, r24
    57bc:	8d 81       	ldd	r24, Y+5	; 0x05
    57be:	89 17       	cp	r24, r25
    57c0:	54 f0       	brlt	.+20     	; 0x57d6 <AC_ON+0x92>
		//HLCD_ClearDisplay();
		//HLCD_SendString("FAN OFF");
		HDCM_enStop();
    57c2:	0e 94 36 28 	call	0x506c	; 0x506c <HDCM_enStop>
		HLCD_gotoXY(1, 13);
    57c6:	81 e0       	ldi	r24, 0x01	; 1
    57c8:	6d e0       	ldi	r22, 0x0D	; 13
    57ca:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <HLCD_gotoXY>
		HLCD_SendString(" ");
    57ce:	80 e6       	ldi	r24, 0x60	; 96
    57d0:	90 e0       	ldi	r25, 0x00	; 0
    57d2:	0e 94 9b 23 	call	0x4736	; 0x4736 <HLCD_SendString>

	}
}
    57d6:	0f 90       	pop	r0
    57d8:	0f 90       	pop	r0
    57da:	0f 90       	pop	r0
    57dc:	0f 90       	pop	r0
    57de:	0f 90       	pop	r0
    57e0:	cf 91       	pop	r28
    57e2:	df 91       	pop	r29
    57e4:	08 95       	ret

000057e6 <AC_OFF>:
void AC_OFF(void) {
    57e6:	df 93       	push	r29
    57e8:	cf 93       	push	r28
    57ea:	cd b7       	in	r28, 0x3d	; 61
    57ec:	de b7       	in	r29, 0x3e	; 62
	HDCM_enStop();
    57ee:	0e 94 36 28 	call	0x506c	; 0x506c <HDCM_enStop>

}
    57f2:	cf 91       	pop	r28
    57f4:	df 91       	pop	r29
    57f6:	08 95       	ret

000057f8 <Sytem_flag_recived>:
//#define TRIG_PIN PC7
//costume carecters
volatile u8 Recived_DATA=0;
void Sytem_flag_recived(void);
void Sytem_flag_recived(void)
{
    57f8:	df 93       	push	r29
    57fa:	cf 93       	push	r28
    57fc:	cd b7       	in	r28, 0x3d	; 61
    57fe:	de b7       	in	r29, 0x3e	; 62
UART_ReceiveNoBlock((u8 *)&Recived_DATA);
    5800:	8e e2       	ldi	r24, 0x2E	; 46
    5802:	92 e0       	ldi	r25, 0x02	; 2
    5804:	0e 94 41 0c 	call	0x1882	; 0x1882 <UART_ReceiveNoBlock>


}
    5808:	cf 91       	pop	r28
    580a:	df 91       	pop	r29
    580c:	08 95       	ret

0000580e <main>:


void main(void) {
    580e:	df 93       	push	r29
    5810:	cf 93       	push	r28
    5812:	cd b7       	in	r28, 0x3d	; 61
    5814:	de b7       	in	r29, 0x3e	; 62
    5816:	c4 58       	subi	r28, 0x84	; 132
    5818:	d0 40       	sbci	r29, 0x00	; 0
    581a:	0f b6       	in	r0, 0x3f	; 63
    581c:	f8 94       	cli
    581e:	de bf       	out	0x3e, r29	; 62
    5820:	0f be       	out	0x3f, r0	; 63
    5822:	cd bf       	out	0x3d, r28	; 61
	/*************************** MAIN DEFINITIONS ***************************/

	u8 ACflag = 0, Sflag = 0;
    5824:	1e ae       	std	Y+62, r1	; 0x3e
    5826:	1d ae       	std	Y+61, r1	; 0x3d

	u8 Temp,key = HKEYPAD_NO_PRESSED_KEY;
    5828:	8f ef       	ldi	r24, 0xFF	; 255
    582a:	fe 01       	movw	r30, r28
    582c:	e0 5c       	subi	r30, 0xC0	; 192
    582e:	ff 4f       	sbci	r31, 0xFF	; 255
    5830:	80 83       	st	Z, r24
	s8 ACTemp = 25;
    5832:	89 e1       	ldi	r24, 0x19	; 25
    5834:	8c af       	std	Y+60, r24	; 0x3c
	u8 lamp1F=0,lamp2F=0,lamp3F=0;
    5836:	1b ae       	std	Y+59, r1	; 0x3b
    5838:	1a ae       	std	Y+58, r1	; 0x3a
    583a:	19 ae       	std	Y+57, r1	; 0x39
	u8 smile[] = { 0x00, 0x0A, 0x00, 0x11, 0x0E, 0x00, 0x00, 0x00 };
    583c:	9e 01       	movw	r18, r28
    583e:	2f 5b       	subi	r18, 0xBF	; 191
    5840:	3f 4f       	sbci	r19, 0xFF	; 255
    5842:	ae 96       	adiw	r28, 0x2e	; 46
    5844:	3f af       	std	Y+63, r19	; 0x3f
    5846:	2e af       	std	Y+62, r18	; 0x3e
    5848:	ae 97       	sbiw	r28, 0x2e	; 46
    584a:	8b ee       	ldi	r24, 0xEB	; 235
    584c:	91 e0       	ldi	r25, 0x01	; 1
    584e:	e0 96       	adiw	r28, 0x30	; 48
    5850:	9f af       	std	Y+63, r25	; 0x3f
    5852:	8e af       	std	Y+62, r24	; 0x3e
    5854:	e0 97       	sbiw	r28, 0x30	; 48
    5856:	98 e0       	ldi	r25, 0x08	; 8
    5858:	e1 96       	adiw	r28, 0x31	; 49
    585a:	9f af       	std	Y+63, r25	; 0x3f
    585c:	e1 97       	sbiw	r28, 0x31	; 49
    585e:	e0 96       	adiw	r28, 0x30	; 48
    5860:	ee ad       	ldd	r30, Y+62	; 0x3e
    5862:	ff ad       	ldd	r31, Y+63	; 0x3f
    5864:	e0 97       	sbiw	r28, 0x30	; 48
    5866:	00 80       	ld	r0, Z
    5868:	e0 96       	adiw	r28, 0x30	; 48
    586a:	2e ad       	ldd	r18, Y+62	; 0x3e
    586c:	3f ad       	ldd	r19, Y+63	; 0x3f
    586e:	e0 97       	sbiw	r28, 0x30	; 48
    5870:	2f 5f       	subi	r18, 0xFF	; 255
    5872:	3f 4f       	sbci	r19, 0xFF	; 255
    5874:	e0 96       	adiw	r28, 0x30	; 48
    5876:	3f af       	std	Y+63, r19	; 0x3f
    5878:	2e af       	std	Y+62, r18	; 0x3e
    587a:	e0 97       	sbiw	r28, 0x30	; 48
    587c:	ae 96       	adiw	r28, 0x2e	; 46
    587e:	ee ad       	ldd	r30, Y+62	; 0x3e
    5880:	ff ad       	ldd	r31, Y+63	; 0x3f
    5882:	ae 97       	sbiw	r28, 0x2e	; 46
    5884:	00 82       	st	Z, r0
    5886:	ae 96       	adiw	r28, 0x2e	; 46
    5888:	2e ad       	ldd	r18, Y+62	; 0x3e
    588a:	3f ad       	ldd	r19, Y+63	; 0x3f
    588c:	ae 97       	sbiw	r28, 0x2e	; 46
    588e:	2f 5f       	subi	r18, 0xFF	; 255
    5890:	3f 4f       	sbci	r19, 0xFF	; 255
    5892:	ae 96       	adiw	r28, 0x2e	; 46
    5894:	3f af       	std	Y+63, r19	; 0x3f
    5896:	2e af       	std	Y+62, r18	; 0x3e
    5898:	ae 97       	sbiw	r28, 0x2e	; 46
    589a:	e1 96       	adiw	r28, 0x31	; 49
    589c:	3f ad       	ldd	r19, Y+63	; 0x3f
    589e:	e1 97       	sbiw	r28, 0x31	; 49
    58a0:	31 50       	subi	r19, 0x01	; 1
    58a2:	e1 96       	adiw	r28, 0x31	; 49
    58a4:	3f af       	std	Y+63, r19	; 0x3f
    58a6:	e1 97       	sbiw	r28, 0x31	; 49
    58a8:	e1 96       	adiw	r28, 0x31	; 49
    58aa:	8f ad       	ldd	r24, Y+63	; 0x3f
    58ac:	e1 97       	sbiw	r28, 0x31	; 49
    58ae:	88 23       	and	r24, r24
    58b0:	b1 f6       	brne	.-84     	; 0x585e <main+0x50>
	u8 sad[] = { 0x00, 0x00, 0x0A, 0x00, 0x0E, 0x11, 0x00, 0x00 };
    58b2:	ce 01       	movw	r24, r28
    58b4:	87 5b       	subi	r24, 0xB7	; 183
    58b6:	9f 4f       	sbci	r25, 0xFF	; 255
    58b8:	e3 96       	adiw	r28, 0x33	; 51
    58ba:	9f af       	std	Y+63, r25	; 0x3f
    58bc:	8e af       	std	Y+62, r24	; 0x3e
    58be:	e3 97       	sbiw	r28, 0x33	; 51
    58c0:	e3 ee       	ldi	r30, 0xE3	; 227
    58c2:	f1 e0       	ldi	r31, 0x01	; 1
    58c4:	e5 96       	adiw	r28, 0x35	; 53
    58c6:	ff af       	std	Y+63, r31	; 0x3f
    58c8:	ee af       	std	Y+62, r30	; 0x3e
    58ca:	e5 97       	sbiw	r28, 0x35	; 53
    58cc:	f8 e0       	ldi	r31, 0x08	; 8
    58ce:	e6 96       	adiw	r28, 0x36	; 54
    58d0:	ff af       	std	Y+63, r31	; 0x3f
    58d2:	e6 97       	sbiw	r28, 0x36	; 54
    58d4:	e5 96       	adiw	r28, 0x35	; 53
    58d6:	ee ad       	ldd	r30, Y+62	; 0x3e
    58d8:	ff ad       	ldd	r31, Y+63	; 0x3f
    58da:	e5 97       	sbiw	r28, 0x35	; 53
    58dc:	00 80       	ld	r0, Z
    58de:	e5 96       	adiw	r28, 0x35	; 53
    58e0:	2e ad       	ldd	r18, Y+62	; 0x3e
    58e2:	3f ad       	ldd	r19, Y+63	; 0x3f
    58e4:	e5 97       	sbiw	r28, 0x35	; 53
    58e6:	2f 5f       	subi	r18, 0xFF	; 255
    58e8:	3f 4f       	sbci	r19, 0xFF	; 255
    58ea:	e5 96       	adiw	r28, 0x35	; 53
    58ec:	3f af       	std	Y+63, r19	; 0x3f
    58ee:	2e af       	std	Y+62, r18	; 0x3e
    58f0:	e5 97       	sbiw	r28, 0x35	; 53
    58f2:	e3 96       	adiw	r28, 0x33	; 51
    58f4:	ee ad       	ldd	r30, Y+62	; 0x3e
    58f6:	ff ad       	ldd	r31, Y+63	; 0x3f
    58f8:	e3 97       	sbiw	r28, 0x33	; 51
    58fa:	00 82       	st	Z, r0
    58fc:	e3 96       	adiw	r28, 0x33	; 51
    58fe:	2e ad       	ldd	r18, Y+62	; 0x3e
    5900:	3f ad       	ldd	r19, Y+63	; 0x3f
    5902:	e3 97       	sbiw	r28, 0x33	; 51
    5904:	2f 5f       	subi	r18, 0xFF	; 255
    5906:	3f 4f       	sbci	r19, 0xFF	; 255
    5908:	e3 96       	adiw	r28, 0x33	; 51
    590a:	3f af       	std	Y+63, r19	; 0x3f
    590c:	2e af       	std	Y+62, r18	; 0x3e
    590e:	e3 97       	sbiw	r28, 0x33	; 51
    5910:	e6 96       	adiw	r28, 0x36	; 54
    5912:	3f ad       	ldd	r19, Y+63	; 0x3f
    5914:	e6 97       	sbiw	r28, 0x36	; 54
    5916:	31 50       	subi	r19, 0x01	; 1
    5918:	e6 96       	adiw	r28, 0x36	; 54
    591a:	3f af       	std	Y+63, r19	; 0x3f
    591c:	e6 97       	sbiw	r28, 0x36	; 54
    591e:	e6 96       	adiw	r28, 0x36	; 54
    5920:	8f ad       	ldd	r24, Y+63	; 0x3f
    5922:	e6 97       	sbiw	r28, 0x36	; 54
    5924:	88 23       	and	r24, r24
    5926:	b1 f6       	brne	.-84     	; 0x58d4 <main+0xc6>
	u8 House[] = { 0x04, 0x0E, 0x1F, 0x15, 0x15, 0x1F, 0x1B, 0x1B };
    5928:	ce 01       	movw	r24, r28
    592a:	8f 5a       	subi	r24, 0xAF	; 175
    592c:	9f 4f       	sbci	r25, 0xFF	; 255
    592e:	e8 96       	adiw	r28, 0x38	; 56
    5930:	9f af       	std	Y+63, r25	; 0x3f
    5932:	8e af       	std	Y+62, r24	; 0x3e
    5934:	e8 97       	sbiw	r28, 0x38	; 56
    5936:	eb ed       	ldi	r30, 0xDB	; 219
    5938:	f1 e0       	ldi	r31, 0x01	; 1
    593a:	ea 96       	adiw	r28, 0x3a	; 58
    593c:	ff af       	std	Y+63, r31	; 0x3f
    593e:	ee af       	std	Y+62, r30	; 0x3e
    5940:	ea 97       	sbiw	r28, 0x3a	; 58
    5942:	f8 e0       	ldi	r31, 0x08	; 8
    5944:	eb 96       	adiw	r28, 0x3b	; 59
    5946:	ff af       	std	Y+63, r31	; 0x3f
    5948:	eb 97       	sbiw	r28, 0x3b	; 59
    594a:	ea 96       	adiw	r28, 0x3a	; 58
    594c:	ee ad       	ldd	r30, Y+62	; 0x3e
    594e:	ff ad       	ldd	r31, Y+63	; 0x3f
    5950:	ea 97       	sbiw	r28, 0x3a	; 58
    5952:	00 80       	ld	r0, Z
    5954:	ea 96       	adiw	r28, 0x3a	; 58
    5956:	2e ad       	ldd	r18, Y+62	; 0x3e
    5958:	3f ad       	ldd	r19, Y+63	; 0x3f
    595a:	ea 97       	sbiw	r28, 0x3a	; 58
    595c:	2f 5f       	subi	r18, 0xFF	; 255
    595e:	3f 4f       	sbci	r19, 0xFF	; 255
    5960:	ea 96       	adiw	r28, 0x3a	; 58
    5962:	3f af       	std	Y+63, r19	; 0x3f
    5964:	2e af       	std	Y+62, r18	; 0x3e
    5966:	ea 97       	sbiw	r28, 0x3a	; 58
    5968:	e8 96       	adiw	r28, 0x38	; 56
    596a:	ee ad       	ldd	r30, Y+62	; 0x3e
    596c:	ff ad       	ldd	r31, Y+63	; 0x3f
    596e:	e8 97       	sbiw	r28, 0x38	; 56
    5970:	00 82       	st	Z, r0
    5972:	e8 96       	adiw	r28, 0x38	; 56
    5974:	2e ad       	ldd	r18, Y+62	; 0x3e
    5976:	3f ad       	ldd	r19, Y+63	; 0x3f
    5978:	e8 97       	sbiw	r28, 0x38	; 56
    597a:	2f 5f       	subi	r18, 0xFF	; 255
    597c:	3f 4f       	sbci	r19, 0xFF	; 255
    597e:	e8 96       	adiw	r28, 0x38	; 56
    5980:	3f af       	std	Y+63, r19	; 0x3f
    5982:	2e af       	std	Y+62, r18	; 0x3e
    5984:	e8 97       	sbiw	r28, 0x38	; 56
    5986:	eb 96       	adiw	r28, 0x3b	; 59
    5988:	3f ad       	ldd	r19, Y+63	; 0x3f
    598a:	eb 97       	sbiw	r28, 0x3b	; 59
    598c:	31 50       	subi	r19, 0x01	; 1
    598e:	eb 96       	adiw	r28, 0x3b	; 59
    5990:	3f af       	std	Y+63, r19	; 0x3f
    5992:	eb 97       	sbiw	r28, 0x3b	; 59
    5994:	eb 96       	adiw	r28, 0x3b	; 59
    5996:	8f ad       	ldd	r24, Y+63	; 0x3f
    5998:	eb 97       	sbiw	r28, 0x3b	; 59
    599a:	88 23       	and	r24, r24
    599c:	b1 f6       	brne	.-84     	; 0x594a <main+0x13c>
	u8 Ice[] = { 0x04, 0x15, 0x0E, 0x1F, 0x0E, 0x15, 0x04, 0x00 };
    599e:	ce 01       	movw	r24, r28
    59a0:	87 5a       	subi	r24, 0xA7	; 167
    59a2:	9f 4f       	sbci	r25, 0xFF	; 255
    59a4:	ed 96       	adiw	r28, 0x3d	; 61
    59a6:	9f af       	std	Y+63, r25	; 0x3f
    59a8:	8e af       	std	Y+62, r24	; 0x3e
    59aa:	ed 97       	sbiw	r28, 0x3d	; 61
    59ac:	e3 ed       	ldi	r30, 0xD3	; 211
    59ae:	f1 e0       	ldi	r31, 0x01	; 1
    59b0:	ef 96       	adiw	r28, 0x3f	; 63
    59b2:	ff af       	std	Y+63, r31	; 0x3f
    59b4:	ee af       	std	Y+62, r30	; 0x3e
    59b6:	ef 97       	sbiw	r28, 0x3f	; 63
    59b8:	f8 e0       	ldi	r31, 0x08	; 8
    59ba:	c1 58       	subi	r28, 0x81	; 129
    59bc:	df 4f       	sbci	r29, 0xFF	; 255
    59be:	f8 83       	st	Y, r31
    59c0:	cf 57       	subi	r28, 0x7F	; 127
    59c2:	d0 40       	sbci	r29, 0x00	; 0
    59c4:	ef 96       	adiw	r28, 0x3f	; 63
    59c6:	ee ad       	ldd	r30, Y+62	; 0x3e
    59c8:	ff ad       	ldd	r31, Y+63	; 0x3f
    59ca:	ef 97       	sbiw	r28, 0x3f	; 63
    59cc:	00 80       	ld	r0, Z
    59ce:	ef 96       	adiw	r28, 0x3f	; 63
    59d0:	2e ad       	ldd	r18, Y+62	; 0x3e
    59d2:	3f ad       	ldd	r19, Y+63	; 0x3f
    59d4:	ef 97       	sbiw	r28, 0x3f	; 63
    59d6:	2f 5f       	subi	r18, 0xFF	; 255
    59d8:	3f 4f       	sbci	r19, 0xFF	; 255
    59da:	ef 96       	adiw	r28, 0x3f	; 63
    59dc:	3f af       	std	Y+63, r19	; 0x3f
    59de:	2e af       	std	Y+62, r18	; 0x3e
    59e0:	ef 97       	sbiw	r28, 0x3f	; 63
    59e2:	ed 96       	adiw	r28, 0x3d	; 61
    59e4:	ee ad       	ldd	r30, Y+62	; 0x3e
    59e6:	ff ad       	ldd	r31, Y+63	; 0x3f
    59e8:	ed 97       	sbiw	r28, 0x3d	; 61
    59ea:	00 82       	st	Z, r0
    59ec:	ed 96       	adiw	r28, 0x3d	; 61
    59ee:	2e ad       	ldd	r18, Y+62	; 0x3e
    59f0:	3f ad       	ldd	r19, Y+63	; 0x3f
    59f2:	ed 97       	sbiw	r28, 0x3d	; 61
    59f4:	2f 5f       	subi	r18, 0xFF	; 255
    59f6:	3f 4f       	sbci	r19, 0xFF	; 255
    59f8:	ed 96       	adiw	r28, 0x3d	; 61
    59fa:	3f af       	std	Y+63, r19	; 0x3f
    59fc:	2e af       	std	Y+62, r18	; 0x3e
    59fe:	ed 97       	sbiw	r28, 0x3d	; 61
    5a00:	c1 58       	subi	r28, 0x81	; 129
    5a02:	df 4f       	sbci	r29, 0xFF	; 255
    5a04:	38 81       	ld	r19, Y
    5a06:	cf 57       	subi	r28, 0x7F	; 127
    5a08:	d0 40       	sbci	r29, 0x00	; 0
    5a0a:	31 50       	subi	r19, 0x01	; 1
    5a0c:	c1 58       	subi	r28, 0x81	; 129
    5a0e:	df 4f       	sbci	r29, 0xFF	; 255
    5a10:	38 83       	st	Y, r19
    5a12:	cf 57       	subi	r28, 0x7F	; 127
    5a14:	d0 40       	sbci	r29, 0x00	; 0
    5a16:	c1 58       	subi	r28, 0x81	; 129
    5a18:	df 4f       	sbci	r29, 0xFF	; 255
    5a1a:	88 81       	ld	r24, Y
    5a1c:	cf 57       	subi	r28, 0x7F	; 127
    5a1e:	d0 40       	sbci	r29, 0x00	; 0
    5a20:	88 23       	and	r24, r24
    5a22:	81 f6       	brne	.-96     	; 0x59c4 <main+0x1b6>
	u8 Lamp[] = { 0x1F, 0x1F, 0x0E, 0x1F, 0x15, 0x11, 0x0E, 0x00 };
    5a24:	ce 01       	movw	r24, r28
    5a26:	8f 59       	subi	r24, 0x9F	; 159
    5a28:	9f 4f       	sbci	r25, 0xFF	; 255
    5a2a:	c0 58       	subi	r28, 0x80	; 128
    5a2c:	df 4f       	sbci	r29, 0xFF	; 255
    5a2e:	99 83       	std	Y+1, r25	; 0x01
    5a30:	88 83       	st	Y, r24
    5a32:	c0 58       	subi	r28, 0x80	; 128
    5a34:	d0 40       	sbci	r29, 0x00	; 0
    5a36:	eb ec       	ldi	r30, 0xCB	; 203
    5a38:	f1 e0       	ldi	r31, 0x01	; 1
    5a3a:	ce 57       	subi	r28, 0x7E	; 126
    5a3c:	df 4f       	sbci	r29, 0xFF	; 255
    5a3e:	f9 83       	std	Y+1, r31	; 0x01
    5a40:	e8 83       	st	Y, r30
    5a42:	c2 58       	subi	r28, 0x82	; 130
    5a44:	d0 40       	sbci	r29, 0x00	; 0
    5a46:	f8 e0       	ldi	r31, 0x08	; 8
    5a48:	cc 57       	subi	r28, 0x7C	; 124
    5a4a:	df 4f       	sbci	r29, 0xFF	; 255
    5a4c:	f8 83       	st	Y, r31
    5a4e:	c4 58       	subi	r28, 0x84	; 132
    5a50:	d0 40       	sbci	r29, 0x00	; 0
    5a52:	ce 57       	subi	r28, 0x7E	; 126
    5a54:	df 4f       	sbci	r29, 0xFF	; 255
    5a56:	e8 81       	ld	r30, Y
    5a58:	f9 81       	ldd	r31, Y+1	; 0x01
    5a5a:	c2 58       	subi	r28, 0x82	; 130
    5a5c:	d0 40       	sbci	r29, 0x00	; 0
    5a5e:	00 80       	ld	r0, Z
    5a60:	ce 57       	subi	r28, 0x7E	; 126
    5a62:	df 4f       	sbci	r29, 0xFF	; 255
    5a64:	28 81       	ld	r18, Y
    5a66:	39 81       	ldd	r19, Y+1	; 0x01
    5a68:	c2 58       	subi	r28, 0x82	; 130
    5a6a:	d0 40       	sbci	r29, 0x00	; 0
    5a6c:	2f 5f       	subi	r18, 0xFF	; 255
    5a6e:	3f 4f       	sbci	r19, 0xFF	; 255
    5a70:	ce 57       	subi	r28, 0x7E	; 126
    5a72:	df 4f       	sbci	r29, 0xFF	; 255
    5a74:	39 83       	std	Y+1, r19	; 0x01
    5a76:	28 83       	st	Y, r18
    5a78:	c2 58       	subi	r28, 0x82	; 130
    5a7a:	d0 40       	sbci	r29, 0x00	; 0
    5a7c:	c0 58       	subi	r28, 0x80	; 128
    5a7e:	df 4f       	sbci	r29, 0xFF	; 255
    5a80:	e8 81       	ld	r30, Y
    5a82:	f9 81       	ldd	r31, Y+1	; 0x01
    5a84:	c0 58       	subi	r28, 0x80	; 128
    5a86:	d0 40       	sbci	r29, 0x00	; 0
    5a88:	00 82       	st	Z, r0
    5a8a:	c0 58       	subi	r28, 0x80	; 128
    5a8c:	df 4f       	sbci	r29, 0xFF	; 255
    5a8e:	28 81       	ld	r18, Y
    5a90:	39 81       	ldd	r19, Y+1	; 0x01
    5a92:	c0 58       	subi	r28, 0x80	; 128
    5a94:	d0 40       	sbci	r29, 0x00	; 0
    5a96:	2f 5f       	subi	r18, 0xFF	; 255
    5a98:	3f 4f       	sbci	r19, 0xFF	; 255
    5a9a:	c0 58       	subi	r28, 0x80	; 128
    5a9c:	df 4f       	sbci	r29, 0xFF	; 255
    5a9e:	39 83       	std	Y+1, r19	; 0x01
    5aa0:	28 83       	st	Y, r18
    5aa2:	c0 58       	subi	r28, 0x80	; 128
    5aa4:	d0 40       	sbci	r29, 0x00	; 0
    5aa6:	cc 57       	subi	r28, 0x7C	; 124
    5aa8:	df 4f       	sbci	r29, 0xFF	; 255
    5aaa:	38 81       	ld	r19, Y
    5aac:	c4 58       	subi	r28, 0x84	; 132
    5aae:	d0 40       	sbci	r29, 0x00	; 0
    5ab0:	31 50       	subi	r19, 0x01	; 1
    5ab2:	cc 57       	subi	r28, 0x7C	; 124
    5ab4:	df 4f       	sbci	r29, 0xFF	; 255
    5ab6:	38 83       	st	Y, r19
    5ab8:	c4 58       	subi	r28, 0x84	; 132
    5aba:	d0 40       	sbci	r29, 0x00	; 0
    5abc:	cc 57       	subi	r28, 0x7C	; 124
    5abe:	df 4f       	sbci	r29, 0xFF	; 255
    5ac0:	88 81       	ld	r24, Y
    5ac2:	c4 58       	subi	r28, 0x84	; 132
    5ac4:	d0 40       	sbci	r29, 0x00	; 0
    5ac6:	88 23       	and	r24, r24
    5ac8:	21 f6       	brne	.-120    	; 0x5a52 <main+0x244>

	/**************************** INITIALIZATION ****************************/

	/* initialize The MCAL Drivers*/

	MDIO_SetPinDirection(PD0, INPUT);
    5aca:	88 e2       	ldi	r24, 0x28	; 40
    5acc:	60 e0       	ldi	r22, 0x00	; 0
    5ace:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_SetPinDirection>
	MDIO_voidSetPinValue(PD0, HIGH);
    5ad2:	88 e2       	ldi	r24, 0x28	; 40
    5ad4:	61 e0       	ldi	r22, 0x01	; 1
    5ad6:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_voidSetPinValue>
	MUART_enInit();
    5ada:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <MUART_enInit>
	MUART_enRx_interruptENable();
    5ade:	0e 94 a4 0c 	call	0x1948	; 0x1948 <MUART_enRx_interruptENable>
	MUART_RX_Setcallback(Sytem_flag_recived);
    5ae2:	8c ef       	ldi	r24, 0xFC	; 252
    5ae4:	9b e2       	ldi	r25, 0x2B	; 43
    5ae6:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <MUART_RX_Setcallback>
	MGIE_enEnable();
    5aea:	0e 94 48 10 	call	0x2090	; 0x2090 <MGIE_enEnable>

	/* initialize The HAL Drivers*/
	HLED_enInit(HLED_RED_ID);
    5aee:	81 e0       	ldi	r24, 0x01	; 1
    5af0:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <HLED_enInit>
	HLED_enInit(HLED_BLUE_ID);
    5af4:	82 e0       	ldi	r24, 0x02	; 2
    5af6:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <HLED_enInit>
	HLED_enInit(HLED_GRN_ID);
    5afa:	83 e0       	ldi	r24, 0x03	; 3
    5afc:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <HLED_enInit>
	HLCD_Init();
    5b00:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <HLCD_Init>
	HKEYPAD_enInt();
    5b04:	0e 94 84 25 	call	0x4b08	; 0x4b08 <HKEYPAD_enInt>
	HLM35_enInit();
    5b08:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <HLM35_enInit>
	HDCM_enInit();
    5b0c:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <HDCM_enInit>
	HBUZ_voidInit();
    5b10:	0e 94 45 28 	call	0x508a	; 0x508a <HBUZ_voidInit>
	HSSD_enInit();
    5b14:	0e 94 bf 19 	call	0x337e	; 0x337e <HSSD_enInit>
	//HRELAY_enInit();
	HLED_enInit(HLED_RED_ID);
    5b18:	81 e0       	ldi	r24, 0x01	; 1
    5b1a:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <HLED_enInit>
	HLED_enInit(HLED_BLUE_ID);
    5b1e:	82 e0       	ldi	r24, 0x02	; 2
    5b20:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <HLED_enInit>
	HLED_enInit(HLED_GRN_ID);
    5b24:	83 e0       	ldi	r24, 0x03	; 3
    5b26:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <HLED_enInit>
	//MSPI_enSPI_MasterInit();
	//MSPI_enSPI_SlaveInit();

	/*************************** SMART HOME CODE ***************************/

	HLCD_SendString("System Off");
    5b2a:	82 e6       	ldi	r24, 0x62	; 98
    5b2c:	90 e0       	ldi	r25, 0x00	; 0
    5b2e:	0e 94 9b 23 	call	0x4736	; 0x4736 <HLCD_SendString>
	HLCD_SendCustomChar(HOUSE, House);
    5b32:	9e 01       	movw	r18, r28
    5b34:	2f 5a       	subi	r18, 0xAF	; 175
    5b36:	3f 4f       	sbci	r19, 0xFF	; 255
    5b38:	80 e0       	ldi	r24, 0x00	; 0
    5b3a:	b9 01       	movw	r22, r18
    5b3c:	0e 94 42 25 	call	0x4a84	; 0x4a84 <HLCD_SendCustomChar>
	HLCD_SendCustomChar(ICE, Ice);
    5b40:	9e 01       	movw	r18, r28
    5b42:	27 5a       	subi	r18, 0xA7	; 167
    5b44:	3f 4f       	sbci	r19, 0xFF	; 255
    5b46:	81 e0       	ldi	r24, 0x01	; 1
    5b48:	b9 01       	movw	r22, r18
    5b4a:	0e 94 42 25 	call	0x4a84	; 0x4a84 <HLCD_SendCustomChar>
	HLCD_SendCustomChar(SMILE, smile);
    5b4e:	9e 01       	movw	r18, r28
    5b50:	2f 5b       	subi	r18, 0xBF	; 191
    5b52:	3f 4f       	sbci	r19, 0xFF	; 255
    5b54:	82 e0       	ldi	r24, 0x02	; 2
    5b56:	b9 01       	movw	r22, r18
    5b58:	0e 94 42 25 	call	0x4a84	; 0x4a84 <HLCD_SendCustomChar>
	HLCD_SendCustomChar(SAD, sad);
    5b5c:	9e 01       	movw	r18, r28
    5b5e:	27 5b       	subi	r18, 0xB7	; 183
    5b60:	3f 4f       	sbci	r19, 0xFF	; 255
    5b62:	83 e0       	ldi	r24, 0x03	; 3
    5b64:	b9 01       	movw	r22, r18
    5b66:	0e 94 42 25 	call	0x4a84	; 0x4a84 <HLCD_SendCustomChar>
	HLCD_SendCustomChar(LAMP, Lamp);
    5b6a:	9e 01       	movw	r18, r28
    5b6c:	2f 59       	subi	r18, 0x9F	; 159
    5b6e:	3f 4f       	sbci	r19, 0xFF	; 255
    5b70:	84 e0       	ldi	r24, 0x04	; 4
    5b72:	b9 01       	movw	r22, r18
    5b74:	0e 94 42 25 	call	0x4a84	; 0x4a84 <HLCD_SendCustomChar>
	HLCD_gotoXY(1, 11);
    5b78:	81 e0       	ldi	r24, 0x01	; 1
    5b7a:	6b e0       	ldi	r22, 0x0B	; 11
    5b7c:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <HLCD_gotoXY>
	HLCD_DisplayCustomeChar(SAD);
    5b80:	83 e0       	ldi	r24, 0x03	; 3
    5b82:	0e 94 76 25 	call	0x4aec	; 0x4aec <HLCD_DisplayCustomeChar>
	//HLCD_SendData(1);
	Value_t SystemFlag=LOW ;
    5b86:	fe 01       	movw	r30, r28
    5b88:	e7 59       	subi	r30, 0x97	; 151
    5b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    5b8c:	10 82       	st	Z, r1
	key = HKEYPAD_NO_PRESSED_KEY;
    5b8e:	8f ef       	ldi	r24, 0xFF	; 255
    5b90:	fe 01       	movw	r30, r28
    5b92:	e0 5c       	subi	r30, 0xC0	; 192
    5b94:	ff 4f       	sbci	r31, 0xFF	; 255
    5b96:	80 83       	st	Z, r24
	while (1) {

		MDIO_voidGetPinValue(PD0, &SystemFlag);
    5b98:	9e 01       	movw	r18, r28
    5b9a:	27 59       	subi	r18, 0x97	; 151
    5b9c:	3f 4f       	sbci	r19, 0xFF	; 255
    5b9e:	88 e2       	ldi	r24, 0x28	; 40
    5ba0:	b9 01       	movw	r22, r18
    5ba2:	0e 94 69 14 	call	0x28d2	; 0x28d2 <MDIO_voidGetPinValue>
//HUltrasonic_enStartReading(TRIG_PIN,&Distance);
		//if (SystemFlag ==LOW) {
	if(Recived_DATA=='o'){
    5ba6:	80 91 2e 02 	lds	r24, 0x022E
    5baa:	8f 36       	cpi	r24, 0x6F	; 111
    5bac:	09 f0       	breq	.+2      	; 0x5bb0 <main+0x3a2>
    5bae:	fd c2       	rjmp	.+1530   	; 0x61aa <main+0x99c>
		if (Sflag == 0) {
    5bb0:	8d ad       	ldd	r24, Y+61	; 0x3d
    5bb2:	88 23       	and	r24, r24
    5bb4:	09 f0       	breq	.+2      	; 0x5bb8 <main+0x3aa>
    5bb6:	e2 c1       	rjmp	.+964    	; 0x5f7c <main+0x76e>
    5bb8:	80 e0       	ldi	r24, 0x00	; 0
    5bba:	90 e0       	ldi	r25, 0x00	; 0
    5bbc:	a8 ec       	ldi	r26, 0xC8	; 200
    5bbe:	b2 e4       	ldi	r27, 0x42	; 66
    5bc0:	8d ab       	std	Y+53, r24	; 0x35
    5bc2:	9e ab       	std	Y+54, r25	; 0x36
    5bc4:	af ab       	std	Y+55, r26	; 0x37
    5bc6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5bc8:	6d a9       	ldd	r22, Y+53	; 0x35
    5bca:	7e a9       	ldd	r23, Y+54	; 0x36
    5bcc:	8f a9       	ldd	r24, Y+55	; 0x37
    5bce:	98 ad       	ldd	r25, Y+56	; 0x38
    5bd0:	20 e0       	ldi	r18, 0x00	; 0
    5bd2:	30 e0       	ldi	r19, 0x00	; 0
    5bd4:	4a e7       	ldi	r20, 0x7A	; 122
    5bd6:	55 e4       	ldi	r21, 0x45	; 69
    5bd8:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    5bdc:	dc 01       	movw	r26, r24
    5bde:	cb 01       	movw	r24, r22
    5be0:	89 ab       	std	Y+49, r24	; 0x31
    5be2:	9a ab       	std	Y+50, r25	; 0x32
    5be4:	ab ab       	std	Y+51, r26	; 0x33
    5be6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5be8:	69 a9       	ldd	r22, Y+49	; 0x31
    5bea:	7a a9       	ldd	r23, Y+50	; 0x32
    5bec:	8b a9       	ldd	r24, Y+51	; 0x33
    5bee:	9c a9       	ldd	r25, Y+52	; 0x34
    5bf0:	20 e0       	ldi	r18, 0x00	; 0
    5bf2:	30 e0       	ldi	r19, 0x00	; 0
    5bf4:	40 e8       	ldi	r20, 0x80	; 128
    5bf6:	5f e3       	ldi	r21, 0x3F	; 63
    5bf8:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    5bfc:	88 23       	and	r24, r24
    5bfe:	2c f4       	brge	.+10     	; 0x5c0a <main+0x3fc>
		__ticks = 1;
    5c00:	81 e0       	ldi	r24, 0x01	; 1
    5c02:	90 e0       	ldi	r25, 0x00	; 0
    5c04:	98 ab       	std	Y+48, r25	; 0x30
    5c06:	8f a7       	std	Y+47, r24	; 0x2f
    5c08:	3f c0       	rjmp	.+126    	; 0x5c88 <main+0x47a>
	else if (__tmp > 65535)
    5c0a:	69 a9       	ldd	r22, Y+49	; 0x31
    5c0c:	7a a9       	ldd	r23, Y+50	; 0x32
    5c0e:	8b a9       	ldd	r24, Y+51	; 0x33
    5c10:	9c a9       	ldd	r25, Y+52	; 0x34
    5c12:	20 e0       	ldi	r18, 0x00	; 0
    5c14:	3f ef       	ldi	r19, 0xFF	; 255
    5c16:	4f e7       	ldi	r20, 0x7F	; 127
    5c18:	57 e4       	ldi	r21, 0x47	; 71
    5c1a:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    5c1e:	18 16       	cp	r1, r24
    5c20:	4c f5       	brge	.+82     	; 0x5c74 <main+0x466>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c22:	6d a9       	ldd	r22, Y+53	; 0x35
    5c24:	7e a9       	ldd	r23, Y+54	; 0x36
    5c26:	8f a9       	ldd	r24, Y+55	; 0x37
    5c28:	98 ad       	ldd	r25, Y+56	; 0x38
    5c2a:	20 e0       	ldi	r18, 0x00	; 0
    5c2c:	30 e0       	ldi	r19, 0x00	; 0
    5c2e:	40 e2       	ldi	r20, 0x20	; 32
    5c30:	51 e4       	ldi	r21, 0x41	; 65
    5c32:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    5c36:	dc 01       	movw	r26, r24
    5c38:	cb 01       	movw	r24, r22
    5c3a:	bc 01       	movw	r22, r24
    5c3c:	cd 01       	movw	r24, r26
    5c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c42:	dc 01       	movw	r26, r24
    5c44:	cb 01       	movw	r24, r22
    5c46:	98 ab       	std	Y+48, r25	; 0x30
    5c48:	8f a7       	std	Y+47, r24	; 0x2f
    5c4a:	0f c0       	rjmp	.+30     	; 0x5c6a <main+0x45c>
    5c4c:	80 e9       	ldi	r24, 0x90	; 144
    5c4e:	91 e0       	ldi	r25, 0x01	; 1
    5c50:	9e a7       	std	Y+46, r25	; 0x2e
    5c52:	8d a7       	std	Y+45, r24	; 0x2d
    5c54:	8d a5       	ldd	r24, Y+45	; 0x2d
    5c56:	9e a5       	ldd	r25, Y+46	; 0x2e
    5c58:	01 97       	sbiw	r24, 0x01	; 1
    5c5a:	f1 f7       	brne	.-4      	; 0x5c58 <main+0x44a>
    5c5c:	9e a7       	std	Y+46, r25	; 0x2e
    5c5e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c60:	8f a5       	ldd	r24, Y+47	; 0x2f
    5c62:	98 a9       	ldd	r25, Y+48	; 0x30
    5c64:	01 97       	sbiw	r24, 0x01	; 1
    5c66:	98 ab       	std	Y+48, r25	; 0x30
    5c68:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    5c6c:	98 a9       	ldd	r25, Y+48	; 0x30
    5c6e:	00 97       	sbiw	r24, 0x00	; 0
    5c70:	69 f7       	brne	.-38     	; 0x5c4c <main+0x43e>
    5c72:	14 c0       	rjmp	.+40     	; 0x5c9c <main+0x48e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c74:	69 a9       	ldd	r22, Y+49	; 0x31
    5c76:	7a a9       	ldd	r23, Y+50	; 0x32
    5c78:	8b a9       	ldd	r24, Y+51	; 0x33
    5c7a:	9c a9       	ldd	r25, Y+52	; 0x34
    5c7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c80:	dc 01       	movw	r26, r24
    5c82:	cb 01       	movw	r24, r22
    5c84:	98 ab       	std	Y+48, r25	; 0x30
    5c86:	8f a7       	std	Y+47, r24	; 0x2f
    5c88:	8f a5       	ldd	r24, Y+47	; 0x2f
    5c8a:	98 a9       	ldd	r25, Y+48	; 0x30
    5c8c:	9c a7       	std	Y+44, r25	; 0x2c
    5c8e:	8b a7       	std	Y+43, r24	; 0x2b
    5c90:	8b a5       	ldd	r24, Y+43	; 0x2b
    5c92:	9c a5       	ldd	r25, Y+44	; 0x2c
    5c94:	01 97       	sbiw	r24, 0x01	; 1
    5c96:	f1 f7       	brne	.-4      	; 0x5c94 <main+0x486>
    5c98:	9c a7       	std	Y+44, r25	; 0x2c
    5c9a:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(100);
				HLCD_ClearDisplay();
    5c9c:	0e 94 b8 23 	call	0x4770	; 0x4770 <HLCD_ClearDisplay>
    5ca0:	80 e0       	ldi	r24, 0x00	; 0
    5ca2:	90 e0       	ldi	r25, 0x00	; 0
    5ca4:	a8 ec       	ldi	r26, 0xC8	; 200
    5ca6:	b2 e4       	ldi	r27, 0x42	; 66
    5ca8:	8f a3       	std	Y+39, r24	; 0x27
    5caa:	98 a7       	std	Y+40, r25	; 0x28
    5cac:	a9 a7       	std	Y+41, r26	; 0x29
    5cae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5cb0:	6f a1       	ldd	r22, Y+39	; 0x27
    5cb2:	78 a5       	ldd	r23, Y+40	; 0x28
    5cb4:	89 a5       	ldd	r24, Y+41	; 0x29
    5cb6:	9a a5       	ldd	r25, Y+42	; 0x2a
    5cb8:	20 e0       	ldi	r18, 0x00	; 0
    5cba:	30 e0       	ldi	r19, 0x00	; 0
    5cbc:	4a e7       	ldi	r20, 0x7A	; 122
    5cbe:	55 e4       	ldi	r21, 0x45	; 69
    5cc0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    5cc4:	dc 01       	movw	r26, r24
    5cc6:	cb 01       	movw	r24, r22
    5cc8:	8b a3       	std	Y+35, r24	; 0x23
    5cca:	9c a3       	std	Y+36, r25	; 0x24
    5ccc:	ad a3       	std	Y+37, r26	; 0x25
    5cce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5cd0:	6b a1       	ldd	r22, Y+35	; 0x23
    5cd2:	7c a1       	ldd	r23, Y+36	; 0x24
    5cd4:	8d a1       	ldd	r24, Y+37	; 0x25
    5cd6:	9e a1       	ldd	r25, Y+38	; 0x26
    5cd8:	20 e0       	ldi	r18, 0x00	; 0
    5cda:	30 e0       	ldi	r19, 0x00	; 0
    5cdc:	40 e8       	ldi	r20, 0x80	; 128
    5cde:	5f e3       	ldi	r21, 0x3F	; 63
    5ce0:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    5ce4:	88 23       	and	r24, r24
    5ce6:	2c f4       	brge	.+10     	; 0x5cf2 <main+0x4e4>
		__ticks = 1;
    5ce8:	81 e0       	ldi	r24, 0x01	; 1
    5cea:	90 e0       	ldi	r25, 0x00	; 0
    5cec:	9a a3       	std	Y+34, r25	; 0x22
    5cee:	89 a3       	std	Y+33, r24	; 0x21
    5cf0:	3f c0       	rjmp	.+126    	; 0x5d70 <main+0x562>
	else if (__tmp > 65535)
    5cf2:	6b a1       	ldd	r22, Y+35	; 0x23
    5cf4:	7c a1       	ldd	r23, Y+36	; 0x24
    5cf6:	8d a1       	ldd	r24, Y+37	; 0x25
    5cf8:	9e a1       	ldd	r25, Y+38	; 0x26
    5cfa:	20 e0       	ldi	r18, 0x00	; 0
    5cfc:	3f ef       	ldi	r19, 0xFF	; 255
    5cfe:	4f e7       	ldi	r20, 0x7F	; 127
    5d00:	57 e4       	ldi	r21, 0x47	; 71
    5d02:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    5d06:	18 16       	cp	r1, r24
    5d08:	4c f5       	brge	.+82     	; 0x5d5c <main+0x54e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d0a:	6f a1       	ldd	r22, Y+39	; 0x27
    5d0c:	78 a5       	ldd	r23, Y+40	; 0x28
    5d0e:	89 a5       	ldd	r24, Y+41	; 0x29
    5d10:	9a a5       	ldd	r25, Y+42	; 0x2a
    5d12:	20 e0       	ldi	r18, 0x00	; 0
    5d14:	30 e0       	ldi	r19, 0x00	; 0
    5d16:	40 e2       	ldi	r20, 0x20	; 32
    5d18:	51 e4       	ldi	r21, 0x41	; 65
    5d1a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    5d1e:	dc 01       	movw	r26, r24
    5d20:	cb 01       	movw	r24, r22
    5d22:	bc 01       	movw	r22, r24
    5d24:	cd 01       	movw	r24, r26
    5d26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d2a:	dc 01       	movw	r26, r24
    5d2c:	cb 01       	movw	r24, r22
    5d2e:	9a a3       	std	Y+34, r25	; 0x22
    5d30:	89 a3       	std	Y+33, r24	; 0x21
    5d32:	0f c0       	rjmp	.+30     	; 0x5d52 <main+0x544>
    5d34:	80 e9       	ldi	r24, 0x90	; 144
    5d36:	91 e0       	ldi	r25, 0x01	; 1
    5d38:	98 a3       	std	Y+32, r25	; 0x20
    5d3a:	8f 8f       	std	Y+31, r24	; 0x1f
    5d3c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5d3e:	98 a1       	ldd	r25, Y+32	; 0x20
    5d40:	01 97       	sbiw	r24, 0x01	; 1
    5d42:	f1 f7       	brne	.-4      	; 0x5d40 <main+0x532>
    5d44:	98 a3       	std	Y+32, r25	; 0x20
    5d46:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d48:	89 a1       	ldd	r24, Y+33	; 0x21
    5d4a:	9a a1       	ldd	r25, Y+34	; 0x22
    5d4c:	01 97       	sbiw	r24, 0x01	; 1
    5d4e:	9a a3       	std	Y+34, r25	; 0x22
    5d50:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d52:	89 a1       	ldd	r24, Y+33	; 0x21
    5d54:	9a a1       	ldd	r25, Y+34	; 0x22
    5d56:	00 97       	sbiw	r24, 0x00	; 0
    5d58:	69 f7       	brne	.-38     	; 0x5d34 <main+0x526>
    5d5a:	14 c0       	rjmp	.+40     	; 0x5d84 <main+0x576>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d5c:	6b a1       	ldd	r22, Y+35	; 0x23
    5d5e:	7c a1       	ldd	r23, Y+36	; 0x24
    5d60:	8d a1       	ldd	r24, Y+37	; 0x25
    5d62:	9e a1       	ldd	r25, Y+38	; 0x26
    5d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d68:	dc 01       	movw	r26, r24
    5d6a:	cb 01       	movw	r24, r22
    5d6c:	9a a3       	std	Y+34, r25	; 0x22
    5d6e:	89 a3       	std	Y+33, r24	; 0x21
    5d70:	89 a1       	ldd	r24, Y+33	; 0x21
    5d72:	9a a1       	ldd	r25, Y+34	; 0x22
    5d74:	9e 8f       	std	Y+30, r25	; 0x1e
    5d76:	8d 8f       	std	Y+29, r24	; 0x1d
    5d78:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5d7a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5d7c:	01 97       	sbiw	r24, 0x01	; 1
    5d7e:	f1 f7       	brne	.-4      	; 0x5d7c <main+0x56e>
    5d80:	9e 8f       	std	Y+30, r25	; 0x1e
    5d82:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(100);
				HLCD_SendString("Loading...");
    5d84:	8d e6       	ldi	r24, 0x6D	; 109
    5d86:	90 e0       	ldi	r25, 0x00	; 0
    5d88:	0e 94 9b 23 	call	0x4736	; 0x4736 <HLCD_SendString>
    5d8c:	80 e0       	ldi	r24, 0x00	; 0
    5d8e:	90 e0       	ldi	r25, 0x00	; 0
    5d90:	a8 ec       	ldi	r26, 0xC8	; 200
    5d92:	b2 e4       	ldi	r27, 0x42	; 66
    5d94:	89 8f       	std	Y+25, r24	; 0x19
    5d96:	9a 8f       	std	Y+26, r25	; 0x1a
    5d98:	ab 8f       	std	Y+27, r26	; 0x1b
    5d9a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d9c:	69 8d       	ldd	r22, Y+25	; 0x19
    5d9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5da0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5da2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5da4:	20 e0       	ldi	r18, 0x00	; 0
    5da6:	30 e0       	ldi	r19, 0x00	; 0
    5da8:	4a e7       	ldi	r20, 0x7A	; 122
    5daa:	55 e4       	ldi	r21, 0x45	; 69
    5dac:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    5db0:	dc 01       	movw	r26, r24
    5db2:	cb 01       	movw	r24, r22
    5db4:	8d 8b       	std	Y+21, r24	; 0x15
    5db6:	9e 8b       	std	Y+22, r25	; 0x16
    5db8:	af 8b       	std	Y+23, r26	; 0x17
    5dba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5dbc:	6d 89       	ldd	r22, Y+21	; 0x15
    5dbe:	7e 89       	ldd	r23, Y+22	; 0x16
    5dc0:	8f 89       	ldd	r24, Y+23	; 0x17
    5dc2:	98 8d       	ldd	r25, Y+24	; 0x18
    5dc4:	20 e0       	ldi	r18, 0x00	; 0
    5dc6:	30 e0       	ldi	r19, 0x00	; 0
    5dc8:	40 e8       	ldi	r20, 0x80	; 128
    5dca:	5f e3       	ldi	r21, 0x3F	; 63
    5dcc:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    5dd0:	88 23       	and	r24, r24
    5dd2:	2c f4       	brge	.+10     	; 0x5dde <main+0x5d0>
		__ticks = 1;
    5dd4:	81 e0       	ldi	r24, 0x01	; 1
    5dd6:	90 e0       	ldi	r25, 0x00	; 0
    5dd8:	9c 8b       	std	Y+20, r25	; 0x14
    5dda:	8b 8b       	std	Y+19, r24	; 0x13
    5ddc:	3f c0       	rjmp	.+126    	; 0x5e5c <main+0x64e>
	else if (__tmp > 65535)
    5dde:	6d 89       	ldd	r22, Y+21	; 0x15
    5de0:	7e 89       	ldd	r23, Y+22	; 0x16
    5de2:	8f 89       	ldd	r24, Y+23	; 0x17
    5de4:	98 8d       	ldd	r25, Y+24	; 0x18
    5de6:	20 e0       	ldi	r18, 0x00	; 0
    5de8:	3f ef       	ldi	r19, 0xFF	; 255
    5dea:	4f e7       	ldi	r20, 0x7F	; 127
    5dec:	57 e4       	ldi	r21, 0x47	; 71
    5dee:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    5df2:	18 16       	cp	r1, r24
    5df4:	4c f5       	brge	.+82     	; 0x5e48 <main+0x63a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5df6:	69 8d       	ldd	r22, Y+25	; 0x19
    5df8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5dfa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5dfc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5dfe:	20 e0       	ldi	r18, 0x00	; 0
    5e00:	30 e0       	ldi	r19, 0x00	; 0
    5e02:	40 e2       	ldi	r20, 0x20	; 32
    5e04:	51 e4       	ldi	r21, 0x41	; 65
    5e06:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    5e0a:	dc 01       	movw	r26, r24
    5e0c:	cb 01       	movw	r24, r22
    5e0e:	bc 01       	movw	r22, r24
    5e10:	cd 01       	movw	r24, r26
    5e12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e16:	dc 01       	movw	r26, r24
    5e18:	cb 01       	movw	r24, r22
    5e1a:	9c 8b       	std	Y+20, r25	; 0x14
    5e1c:	8b 8b       	std	Y+19, r24	; 0x13
    5e1e:	0f c0       	rjmp	.+30     	; 0x5e3e <main+0x630>
    5e20:	80 e9       	ldi	r24, 0x90	; 144
    5e22:	91 e0       	ldi	r25, 0x01	; 1
    5e24:	9a 8b       	std	Y+18, r25	; 0x12
    5e26:	89 8b       	std	Y+17, r24	; 0x11
    5e28:	89 89       	ldd	r24, Y+17	; 0x11
    5e2a:	9a 89       	ldd	r25, Y+18	; 0x12
    5e2c:	01 97       	sbiw	r24, 0x01	; 1
    5e2e:	f1 f7       	brne	.-4      	; 0x5e2c <main+0x61e>
    5e30:	9a 8b       	std	Y+18, r25	; 0x12
    5e32:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e34:	8b 89       	ldd	r24, Y+19	; 0x13
    5e36:	9c 89       	ldd	r25, Y+20	; 0x14
    5e38:	01 97       	sbiw	r24, 0x01	; 1
    5e3a:	9c 8b       	std	Y+20, r25	; 0x14
    5e3c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e3e:	8b 89       	ldd	r24, Y+19	; 0x13
    5e40:	9c 89       	ldd	r25, Y+20	; 0x14
    5e42:	00 97       	sbiw	r24, 0x00	; 0
    5e44:	69 f7       	brne	.-38     	; 0x5e20 <main+0x612>
    5e46:	14 c0       	rjmp	.+40     	; 0x5e70 <main+0x662>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e48:	6d 89       	ldd	r22, Y+21	; 0x15
    5e4a:	7e 89       	ldd	r23, Y+22	; 0x16
    5e4c:	8f 89       	ldd	r24, Y+23	; 0x17
    5e4e:	98 8d       	ldd	r25, Y+24	; 0x18
    5e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e54:	dc 01       	movw	r26, r24
    5e56:	cb 01       	movw	r24, r22
    5e58:	9c 8b       	std	Y+20, r25	; 0x14
    5e5a:	8b 8b       	std	Y+19, r24	; 0x13
    5e5c:	8b 89       	ldd	r24, Y+19	; 0x13
    5e5e:	9c 89       	ldd	r25, Y+20	; 0x14
    5e60:	98 8b       	std	Y+16, r25	; 0x10
    5e62:	8f 87       	std	Y+15, r24	; 0x0f
    5e64:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e66:	98 89       	ldd	r25, Y+16	; 0x10
    5e68:	01 97       	sbiw	r24, 0x01	; 1
    5e6a:	f1 f7       	brne	.-4      	; 0x5e68 <main+0x65a>
    5e6c:	98 8b       	std	Y+16, r25	; 0x10
    5e6e:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(100);
				HLCD_ClearDisplay();
    5e70:	0e 94 b8 23 	call	0x4770	; 0x4770 <HLCD_ClearDisplay>
				HLCD_SendString("Welcome");
    5e74:	88 e7       	ldi	r24, 0x78	; 120
    5e76:	90 e0       	ldi	r25, 0x00	; 0
    5e78:	0e 94 9b 23 	call	0x4736	; 0x4736 <HLCD_SendString>
				HLCD_gotoXY(1, 9);
    5e7c:	81 e0       	ldi	r24, 0x01	; 1
    5e7e:	69 e0       	ldi	r22, 0x09	; 9
    5e80:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <HLCD_gotoXY>
				HLCD_DisplayCustomeChar(HOUSE);
    5e84:	80 e0       	ldi	r24, 0x00	; 0
    5e86:	0e 94 76 25 	call	0x4aec	; 0x4aec <HLCD_DisplayCustomeChar>
				HLCD_DisplayCustomeChar(SMILE);
    5e8a:	82 e0       	ldi	r24, 0x02	; 2
    5e8c:	0e 94 76 25 	call	0x4aec	; 0x4aec <HLCD_DisplayCustomeChar>
				Sflag = 1;
    5e90:	81 e0       	ldi	r24, 0x01	; 1
    5e92:	8d af       	std	Y+61, r24	; 0x3d
    5e94:	80 e0       	ldi	r24, 0x00	; 0
    5e96:	90 e0       	ldi	r25, 0x00	; 0
    5e98:	aa e7       	ldi	r26, 0x7A	; 122
    5e9a:	b4 e4       	ldi	r27, 0x44	; 68
    5e9c:	8b 87       	std	Y+11, r24	; 0x0b
    5e9e:	9c 87       	std	Y+12, r25	; 0x0c
    5ea0:	ad 87       	std	Y+13, r26	; 0x0d
    5ea2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ea4:	6b 85       	ldd	r22, Y+11	; 0x0b
    5ea6:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ea8:	8d 85       	ldd	r24, Y+13	; 0x0d
    5eaa:	9e 85       	ldd	r25, Y+14	; 0x0e
    5eac:	20 e0       	ldi	r18, 0x00	; 0
    5eae:	30 e0       	ldi	r19, 0x00	; 0
    5eb0:	4a e7       	ldi	r20, 0x7A	; 122
    5eb2:	55 e4       	ldi	r21, 0x45	; 69
    5eb4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    5eb8:	dc 01       	movw	r26, r24
    5eba:	cb 01       	movw	r24, r22
    5ebc:	8f 83       	std	Y+7, r24	; 0x07
    5ebe:	98 87       	std	Y+8, r25	; 0x08
    5ec0:	a9 87       	std	Y+9, r26	; 0x09
    5ec2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5ec4:	6f 81       	ldd	r22, Y+7	; 0x07
    5ec6:	78 85       	ldd	r23, Y+8	; 0x08
    5ec8:	89 85       	ldd	r24, Y+9	; 0x09
    5eca:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ecc:	20 e0       	ldi	r18, 0x00	; 0
    5ece:	30 e0       	ldi	r19, 0x00	; 0
    5ed0:	40 e8       	ldi	r20, 0x80	; 128
    5ed2:	5f e3       	ldi	r21, 0x3F	; 63
    5ed4:	0e 94 01 05 	call	0xa02	; 0xa02 <__ltsf2>
    5ed8:	88 23       	and	r24, r24
    5eda:	2c f4       	brge	.+10     	; 0x5ee6 <main+0x6d8>
		__ticks = 1;
    5edc:	81 e0       	ldi	r24, 0x01	; 1
    5ede:	90 e0       	ldi	r25, 0x00	; 0
    5ee0:	9e 83       	std	Y+6, r25	; 0x06
    5ee2:	8d 83       	std	Y+5, r24	; 0x05
    5ee4:	3f c0       	rjmp	.+126    	; 0x5f64 <main+0x756>
	else if (__tmp > 65535)
    5ee6:	6f 81       	ldd	r22, Y+7	; 0x07
    5ee8:	78 85       	ldd	r23, Y+8	; 0x08
    5eea:	89 85       	ldd	r24, Y+9	; 0x09
    5eec:	9a 85       	ldd	r25, Y+10	; 0x0a
    5eee:	20 e0       	ldi	r18, 0x00	; 0
    5ef0:	3f ef       	ldi	r19, 0xFF	; 255
    5ef2:	4f e7       	ldi	r20, 0x7F	; 127
    5ef4:	57 e4       	ldi	r21, 0x47	; 71
    5ef6:	0e 94 a1 04 	call	0x942	; 0x942 <__gtsf2>
    5efa:	18 16       	cp	r1, r24
    5efc:	4c f5       	brge	.+82     	; 0x5f50 <main+0x742>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5efe:	6b 85       	ldd	r22, Y+11	; 0x0b
    5f00:	7c 85       	ldd	r23, Y+12	; 0x0c
    5f02:	8d 85       	ldd	r24, Y+13	; 0x0d
    5f04:	9e 85       	ldd	r25, Y+14	; 0x0e
    5f06:	20 e0       	ldi	r18, 0x00	; 0
    5f08:	30 e0       	ldi	r19, 0x00	; 0
    5f0a:	40 e2       	ldi	r20, 0x20	; 32
    5f0c:	51 e4       	ldi	r21, 0x41	; 65
    5f0e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    5f12:	dc 01       	movw	r26, r24
    5f14:	cb 01       	movw	r24, r22
    5f16:	bc 01       	movw	r22, r24
    5f18:	cd 01       	movw	r24, r26
    5f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f1e:	dc 01       	movw	r26, r24
    5f20:	cb 01       	movw	r24, r22
    5f22:	9e 83       	std	Y+6, r25	; 0x06
    5f24:	8d 83       	std	Y+5, r24	; 0x05
    5f26:	0f c0       	rjmp	.+30     	; 0x5f46 <main+0x738>
    5f28:	80 e9       	ldi	r24, 0x90	; 144
    5f2a:	91 e0       	ldi	r25, 0x01	; 1
    5f2c:	9c 83       	std	Y+4, r25	; 0x04
    5f2e:	8b 83       	std	Y+3, r24	; 0x03
    5f30:	8b 81       	ldd	r24, Y+3	; 0x03
    5f32:	9c 81       	ldd	r25, Y+4	; 0x04
    5f34:	01 97       	sbiw	r24, 0x01	; 1
    5f36:	f1 f7       	brne	.-4      	; 0x5f34 <main+0x726>
    5f38:	9c 83       	std	Y+4, r25	; 0x04
    5f3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    5f3e:	9e 81       	ldd	r25, Y+6	; 0x06
    5f40:	01 97       	sbiw	r24, 0x01	; 1
    5f42:	9e 83       	std	Y+6, r25	; 0x06
    5f44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f46:	8d 81       	ldd	r24, Y+5	; 0x05
    5f48:	9e 81       	ldd	r25, Y+6	; 0x06
    5f4a:	00 97       	sbiw	r24, 0x00	; 0
    5f4c:	69 f7       	brne	.-38     	; 0x5f28 <main+0x71a>
    5f4e:	14 c0       	rjmp	.+40     	; 0x5f78 <main+0x76a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f50:	6f 81       	ldd	r22, Y+7	; 0x07
    5f52:	78 85       	ldd	r23, Y+8	; 0x08
    5f54:	89 85       	ldd	r24, Y+9	; 0x09
    5f56:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f5c:	dc 01       	movw	r26, r24
    5f5e:	cb 01       	movw	r24, r22
    5f60:	9e 83       	std	Y+6, r25	; 0x06
    5f62:	8d 83       	std	Y+5, r24	; 0x05
    5f64:	8d 81       	ldd	r24, Y+5	; 0x05
    5f66:	9e 81       	ldd	r25, Y+6	; 0x06
    5f68:	9a 83       	std	Y+2, r25	; 0x02
    5f6a:	89 83       	std	Y+1, r24	; 0x01
    5f6c:	89 81       	ldd	r24, Y+1	; 0x01
    5f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    5f70:	01 97       	sbiw	r24, 0x01	; 1
    5f72:	f1 f7       	brne	.-4      	; 0x5f70 <main+0x762>
    5f74:	9a 83       	std	Y+2, r25	; 0x02
    5f76:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1000);
				HLCD_ClearDisplay();
    5f78:	0e 94 b8 23 	call	0x4770	; 0x4770 <HLCD_ClearDisplay>
			}

			HKEYPAD_enGetPressedKey(&key);
    5f7c:	ce 01       	movw	r24, r28
    5f7e:	80 5c       	subi	r24, 0xC0	; 192
    5f80:	9f 4f       	sbci	r25, 0xFF	; 255
    5f82:	0e 94 cc 25 	call	0x4b98	; 0x4b98 <HKEYPAD_enGetPressedKey>
			if (key != HKEYPAD_NO_PRESSED_KEY) {
    5f86:	fe 01       	movw	r30, r28
    5f88:	e0 5c       	subi	r30, 0xC0	; 192
    5f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    5f8c:	80 81       	ld	r24, Z
    5f8e:	8f 3f       	cpi	r24, 0xFF	; 255
    5f90:	09 f4       	brne	.+2      	; 0x5f94 <main+0x786>
    5f92:	e5 c0       	rjmp	.+458    	; 0x615e <main+0x950>
				switch (key) {
    5f94:	fe 01       	movw	r30, r28
    5f96:	e0 5c       	subi	r30, 0xC0	; 192
    5f98:	ff 4f       	sbci	r31, 0xFF	; 255
    5f9a:	80 81       	ld	r24, Z
    5f9c:	e8 2f       	mov	r30, r24
    5f9e:	f0 e0       	ldi	r31, 0x00	; 0
    5fa0:	ac 96       	adiw	r28, 0x2c	; 44
    5fa2:	ff af       	std	Y+63, r31	; 0x3f
    5fa4:	ee af       	std	Y+62, r30	; 0x3e
    5fa6:	ac 97       	sbiw	r28, 0x2c	; 44
    5fa8:	ac 96       	adiw	r28, 0x2c	; 44
    5faa:	2e ad       	ldd	r18, Y+62	; 0x3e
    5fac:	3f ad       	ldd	r19, Y+63	; 0x3f
    5fae:	ac 97       	sbiw	r28, 0x2c	; 44
    5fb0:	23 30       	cpi	r18, 0x03	; 3
    5fb2:	31 05       	cpc	r19, r1
    5fb4:	09 f4       	brne	.+2      	; 0x5fb8 <main+0x7aa>
    5fb6:	b1 c0       	rjmp	.+354    	; 0x611a <main+0x90c>
    5fb8:	ac 96       	adiw	r28, 0x2c	; 44
    5fba:	8e ad       	ldd	r24, Y+62	; 0x3e
    5fbc:	9f ad       	ldd	r25, Y+63	; 0x3f
    5fbe:	ac 97       	sbiw	r28, 0x2c	; 44
    5fc0:	84 30       	cpi	r24, 0x04	; 4
    5fc2:	91 05       	cpc	r25, r1
    5fc4:	8c f4       	brge	.+34     	; 0x5fe8 <main+0x7da>
    5fc6:	ac 96       	adiw	r28, 0x2c	; 44
    5fc8:	ee ad       	ldd	r30, Y+62	; 0x3e
    5fca:	ff ad       	ldd	r31, Y+63	; 0x3f
    5fcc:	ac 97       	sbiw	r28, 0x2c	; 44
    5fce:	e1 30       	cpi	r30, 0x01	; 1
    5fd0:	f1 05       	cpc	r31, r1
    5fd2:	09 f4       	brne	.+2      	; 0x5fd6 <main+0x7c8>
    5fd4:	6c c0       	rjmp	.+216    	; 0x60ae <main+0x8a0>
    5fd6:	ac 96       	adiw	r28, 0x2c	; 44
    5fd8:	2e ad       	ldd	r18, Y+62	; 0x3e
    5fda:	3f ad       	ldd	r19, Y+63	; 0x3f
    5fdc:	ac 97       	sbiw	r28, 0x2c	; 44
    5fde:	22 30       	cpi	r18, 0x02	; 2
    5fe0:	31 05       	cpc	r19, r1
    5fe2:	09 f4       	brne	.+2      	; 0x5fe6 <main+0x7d8>
    5fe4:	7f c0       	rjmp	.+254    	; 0x60e4 <main+0x8d6>
    5fe6:	b4 c0       	rjmp	.+360    	; 0x6150 <main+0x942>
    5fe8:	ac 96       	adiw	r28, 0x2c	; 44
    5fea:	8e ad       	ldd	r24, Y+62	; 0x3e
    5fec:	9f ad       	ldd	r25, Y+63	; 0x3f
    5fee:	ac 97       	sbiw	r28, 0x2c	; 44
    5ff0:	8d 32       	cpi	r24, 0x2D	; 45
    5ff2:	91 05       	cpc	r25, r1
    5ff4:	41 f1       	breq	.+80     	; 0x6046 <main+0x838>
    5ff6:	ac 96       	adiw	r28, 0x2c	; 44
    5ff8:	ee ad       	ldd	r30, Y+62	; 0x3e
    5ffa:	ff ad       	ldd	r31, Y+63	; 0x3f
    5ffc:	ac 97       	sbiw	r28, 0x2c	; 44
    5ffe:	e3 36       	cpi	r30, 0x63	; 99
    6000:	f1 05       	cpc	r31, r1
    6002:	41 f0       	breq	.+16     	; 0x6014 <main+0x806>
    6004:	ac 96       	adiw	r28, 0x2c	; 44
    6006:	2e ad       	ldd	r18, Y+62	; 0x3e
    6008:	3f ad       	ldd	r19, Y+63	; 0x3f
    600a:	ac 97       	sbiw	r28, 0x2c	; 44
    600c:	2b 32       	cpi	r18, 0x2B	; 43
    600e:	31 05       	cpc	r19, r1
    6010:	a1 f1       	breq	.+104    	; 0x607a <main+0x86c>
    6012:	9e c0       	rjmp	.+316    	; 0x6150 <main+0x942>
				case 'c':
					ACflag ^= 1;
    6014:	9e ad       	ldd	r25, Y+62	; 0x3e
    6016:	81 e0       	ldi	r24, 0x01	; 1
    6018:	89 27       	eor	r24, r25
    601a:	8e af       	std	Y+62, r24	; 0x3e
					if (ACflag == 1) {
    601c:	8e ad       	ldd	r24, Y+62	; 0x3e
    601e:	81 30       	cpi	r24, 0x01	; 1
    6020:	49 f4       	brne	.+18     	; 0x6034 <main+0x826>
						HLCD_gotoXY(1,1);
    6022:	81 e0       	ldi	r24, 0x01	; 1
    6024:	61 e0       	ldi	r22, 0x01	; 1
    6026:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <HLCD_gotoXY>
						HLCD_SendString("AC ON ");
    602a:	80 e8       	ldi	r24, 0x80	; 128
    602c:	90 e0       	ldi	r25, 0x00	; 0
    602e:	0e 94 9b 23 	call	0x4736	; 0x4736 <HLCD_SendString>
    6032:	95 c0       	rjmp	.+298    	; 0x615e <main+0x950>
					} else {
						HLCD_gotoXY(1,1);
    6034:	81 e0       	ldi	r24, 0x01	; 1
    6036:	61 e0       	ldi	r22, 0x01	; 1
    6038:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <HLCD_gotoXY>
						HLCD_SendString("AC OFF");
    603c:	87 e8       	ldi	r24, 0x87	; 135
    603e:	90 e0       	ldi	r25, 0x00	; 0
    6040:	0e 94 9b 23 	call	0x4736	; 0x4736 <HLCD_SendString>
    6044:	8c c0       	rjmp	.+280    	; 0x615e <main+0x950>

					}
					break;
				case '-':
					if (ACTemp>=17) {
    6046:	8c ad       	ldd	r24, Y+60	; 0x3c
    6048:	81 31       	cpi	r24, 0x11	; 17
    604a:	0c f4       	brge	.+2      	; 0x604e <main+0x840>
    604c:	88 c0       	rjmp	.+272    	; 0x615e <main+0x950>
						ACTemp--;
    604e:	8c ad       	ldd	r24, Y+60	; 0x3c
    6050:	81 50       	subi	r24, 0x01	; 1
    6052:	8c af       	std	Y+60, r24	; 0x3c
						HLCD_gotoXY(1,14);
    6054:	81 e0       	ldi	r24, 0x01	; 1
    6056:	6e e0       	ldi	r22, 0x0E	; 14
    6058:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <HLCD_gotoXY>
						HLCD_sendIntNum(ACTemp);
    605c:	8c ad       	ldd	r24, Y+60	; 0x3c
    605e:	99 27       	eor	r25, r25
    6060:	87 fd       	sbrc	r24, 7
    6062:	90 95       	com	r25
    6064:	a9 2f       	mov	r26, r25
    6066:	b9 2f       	mov	r27, r25
    6068:	bc 01       	movw	r22, r24
    606a:	cd 01       	movw	r24, r26
    606c:	0e 94 c3 23 	call	0x4786	; 0x4786 <HLCD_sendIntNum>
						HLCD_SendString("C");
    6070:	8e e8       	ldi	r24, 0x8E	; 142
    6072:	90 e0       	ldi	r25, 0x00	; 0
    6074:	0e 94 9b 23 	call	0x4736	; 0x4736 <HLCD_SendString>
    6078:	72 c0       	rjmp	.+228    	; 0x615e <main+0x950>
						//HLCD_SendString("  ");
					}
					break;

				case '+':
					if (ACTemp <= 31) {
    607a:	8c ad       	ldd	r24, Y+60	; 0x3c
    607c:	80 32       	cpi	r24, 0x20	; 32
    607e:	0c f0       	brlt	.+2      	; 0x6082 <main+0x874>
    6080:	6e c0       	rjmp	.+220    	; 0x615e <main+0x950>
						ACTemp++;
    6082:	8c ad       	ldd	r24, Y+60	; 0x3c
    6084:	8f 5f       	subi	r24, 0xFF	; 255
    6086:	8c af       	std	Y+60, r24	; 0x3c
						HLCD_gotoXY(1,14);
    6088:	81 e0       	ldi	r24, 0x01	; 1
    608a:	6e e0       	ldi	r22, 0x0E	; 14
    608c:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <HLCD_gotoXY>
						HLCD_sendIntNum(ACTemp);
    6090:	8c ad       	ldd	r24, Y+60	; 0x3c
    6092:	99 27       	eor	r25, r25
    6094:	87 fd       	sbrc	r24, 7
    6096:	90 95       	com	r25
    6098:	a9 2f       	mov	r26, r25
    609a:	b9 2f       	mov	r27, r25
    609c:	bc 01       	movw	r22, r24
    609e:	cd 01       	movw	r24, r26
    60a0:	0e 94 c3 23 	call	0x4786	; 0x4786 <HLCD_sendIntNum>
						HLCD_SendString("C");
    60a4:	8e e8       	ldi	r24, 0x8E	; 142
    60a6:	90 e0       	ldi	r25, 0x00	; 0
    60a8:	0e 94 9b 23 	call	0x4736	; 0x4736 <HLCD_SendString>
    60ac:	58 c0       	rjmp	.+176    	; 0x615e <main+0x950>
					}
					break;
				case 1:
					HLED_enToggle(HLED_RED_ID);
    60ae:	81 e0       	ldi	r24, 0x01	; 1
    60b0:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <HLED_enToggle>
					lamp1F^=1;
    60b4:	9b ad       	ldd	r25, Y+59	; 0x3b
    60b6:	81 e0       	ldi	r24, 0x01	; 1
    60b8:	89 27       	eor	r24, r25
    60ba:	8b af       	std	Y+59, r24	; 0x3b
					if(lamp1F==1)
    60bc:	8b ad       	ldd	r24, Y+59	; 0x3b
    60be:	81 30       	cpi	r24, 0x01	; 1
    60c0:	41 f4       	brne	.+16     	; 0x60d2 <main+0x8c4>
					{
						HLCD_gotoXY(2,1);
    60c2:	82 e0       	ldi	r24, 0x02	; 2
    60c4:	61 e0       	ldi	r22, 0x01	; 1
    60c6:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <HLCD_gotoXY>
						HLCD_DisplayCustomeChar(LAMP);
    60ca:	84 e0       	ldi	r24, 0x04	; 4
    60cc:	0e 94 76 25 	call	0x4aec	; 0x4aec <HLCD_DisplayCustomeChar>
    60d0:	46 c0       	rjmp	.+140    	; 0x615e <main+0x950>
					}
					else
					{
						HLCD_gotoXY(2,1);
    60d2:	82 e0       	ldi	r24, 0x02	; 2
    60d4:	61 e0       	ldi	r22, 0x01	; 1
    60d6:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <HLCD_gotoXY>
						HLCD_SendString(" ");
    60da:	80 e9       	ldi	r24, 0x90	; 144
    60dc:	90 e0       	ldi	r25, 0x00	; 0
    60de:	0e 94 9b 23 	call	0x4736	; 0x4736 <HLCD_SendString>
    60e2:	3d c0       	rjmp	.+122    	; 0x615e <main+0x950>
					}
					break;
				case 2:
					HLED_enToggle(HLED_BLUE_ID);
    60e4:	82 e0       	ldi	r24, 0x02	; 2
    60e6:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <HLED_enToggle>
					lamp2F^=1;
    60ea:	9a ad       	ldd	r25, Y+58	; 0x3a
    60ec:	81 e0       	ldi	r24, 0x01	; 1
    60ee:	89 27       	eor	r24, r25
    60f0:	8a af       	std	Y+58, r24	; 0x3a
				if(lamp2F==1)
    60f2:	8a ad       	ldd	r24, Y+58	; 0x3a
    60f4:	81 30       	cpi	r24, 0x01	; 1
    60f6:	41 f4       	brne	.+16     	; 0x6108 <main+0x8fa>
				{
					HLCD_gotoXY(2,2);
    60f8:	82 e0       	ldi	r24, 0x02	; 2
    60fa:	62 e0       	ldi	r22, 0x02	; 2
    60fc:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <HLCD_gotoXY>
					HLCD_DisplayCustomeChar(LAMP);
    6100:	84 e0       	ldi	r24, 0x04	; 4
    6102:	0e 94 76 25 	call	0x4aec	; 0x4aec <HLCD_DisplayCustomeChar>
    6106:	2b c0       	rjmp	.+86     	; 0x615e <main+0x950>
				}
				else
				{
						HLCD_gotoXY(2,2);
    6108:	82 e0       	ldi	r24, 0x02	; 2
    610a:	62 e0       	ldi	r22, 0x02	; 2
    610c:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <HLCD_gotoXY>
						HLCD_SendString(" ");
    6110:	80 e9       	ldi	r24, 0x90	; 144
    6112:	90 e0       	ldi	r25, 0x00	; 0
    6114:	0e 94 9b 23 	call	0x4736	; 0x4736 <HLCD_SendString>
    6118:	22 c0       	rjmp	.+68     	; 0x615e <main+0x950>
				}
					break;
				case 3:
					HLED_enToggle(HLED_GRN_ID);
    611a:	83 e0       	ldi	r24, 0x03	; 3
    611c:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <HLED_enToggle>
					lamp3F^=1;
    6120:	99 ad       	ldd	r25, Y+57	; 0x39
    6122:	81 e0       	ldi	r24, 0x01	; 1
    6124:	89 27       	eor	r24, r25
    6126:	89 af       	std	Y+57, r24	; 0x39
					if(lamp3F==1)
    6128:	89 ad       	ldd	r24, Y+57	; 0x39
    612a:	81 30       	cpi	r24, 0x01	; 1
    612c:	41 f4       	brne	.+16     	; 0x613e <main+0x930>
					{
						HLCD_gotoXY(2,3);
    612e:	82 e0       	ldi	r24, 0x02	; 2
    6130:	63 e0       	ldi	r22, 0x03	; 3
    6132:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <HLCD_gotoXY>
						HLCD_DisplayCustomeChar(LAMP);
    6136:	84 e0       	ldi	r24, 0x04	; 4
    6138:	0e 94 76 25 	call	0x4aec	; 0x4aec <HLCD_DisplayCustomeChar>
    613c:	10 c0       	rjmp	.+32     	; 0x615e <main+0x950>
					}
					else
					{
					HLCD_gotoXY(2,3);
    613e:	82 e0       	ldi	r24, 0x02	; 2
    6140:	63 e0       	ldi	r22, 0x03	; 3
    6142:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <HLCD_gotoXY>
					HLCD_SendString(" ");
    6146:	80 e9       	ldi	r24, 0x90	; 144
    6148:	90 e0       	ldi	r25, 0x00	; 0
    614a:	0e 94 9b 23 	call	0x4736	; 0x4736 <HLCD_SendString>
    614e:	07 c0       	rjmp	.+14     	; 0x615e <main+0x950>
					}

					break;
				default:
					HLCD_gotoXY(2, 14);
    6150:	82 e0       	ldi	r24, 0x02	; 2
    6152:	6e e0       	ldi	r22, 0x0E	; 14
    6154:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <HLCD_gotoXY>
					HLCD_DisplayCustomeChar(SAD);
    6158:	83 e0       	ldi	r24, 0x03	; 3
    615a:	0e 94 76 25 	call	0x4aec	; 0x4aec <HLCD_DisplayCustomeChar>
				}
			}	//key if
			else {

			}	//end else
			if (ACflag == 1) {
    615e:	8e ad       	ldd	r24, Y+62	; 0x3e
    6160:	81 30       	cpi	r24, 0x01	; 1
    6162:	21 f4       	brne	.+8      	; 0x616c <main+0x95e>
				//HLCD_ClearDisplay();

				AC_ON(ACTemp);
    6164:	8c ad       	ldd	r24, Y+60	; 0x3c
    6166:	0e 94 a2 2b 	call	0x5744	; 0x5744 <AC_ON>
    616a:	02 c0       	rjmp	.+4      	; 0x6170 <main+0x962>

			}	//AC IF
			else {
				AC_OFF();
    616c:	0e 94 f3 2b 	call	0x57e6	; 0x57e6 <AC_OFF>


			}	//AC else
			HLCD_gotoXY(2,13);
    6170:	82 e0       	ldi	r24, 0x02	; 2
    6172:	6d e0       	ldi	r22, 0x0D	; 13
    6174:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <HLCD_gotoXY>
			HLCD_DisplayCustomeChar(HOUSE);
    6178:	80 e0       	ldi	r24, 0x00	; 0
    617a:	0e 94 76 25 	call	0x4aec	; 0x4aec <HLCD_DisplayCustomeChar>
			HLM35_enTempRead(&Temp);
    617e:	ce 01       	movw	r24, r28
    6180:	cf 96       	adiw	r24, 0x3f	; 63
    6182:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <HLM35_enTempRead>
			HLCD_gotoXY(2,14);
    6186:	82 e0       	ldi	r24, 0x02	; 2
    6188:	6e e0       	ldi	r22, 0x0E	; 14
    618a:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <HLCD_gotoXY>
			HLCD_sendIntNum(Temp);
    618e:	8f ad       	ldd	r24, Y+63	; 0x3f
    6190:	88 2f       	mov	r24, r24
    6192:	90 e0       	ldi	r25, 0x00	; 0
    6194:	a0 e0       	ldi	r26, 0x00	; 0
    6196:	b0 e0       	ldi	r27, 0x00	; 0
    6198:	bc 01       	movw	r22, r24
    619a:	cd 01       	movw	r24, r26
    619c:	0e 94 c3 23 	call	0x4786	; 0x4786 <HLCD_sendIntNum>
			HLCD_SendString("C");
    61a0:	8e e8       	ldi	r24, 0x8E	; 142
    61a2:	90 e0       	ldi	r25, 0x00	; 0
    61a4:	0e 94 9b 23 	call	0x4736	; 0x4736 <HLCD_SendString>
    61a8:	f7 cc       	rjmp	.-1554   	; 0x5b98 <main+0x38a>
		} //end system  if
		else{
			Sflag=0;
    61aa:	1d ae       	std	Y+61, r1	; 0x3d
			AC_OFF();
    61ac:	0e 94 f3 2b 	call	0x57e6	; 0x57e6 <AC_OFF>
			HLED_enSetOFF(HLED_BLUE_ID);
    61b0:	82 e0       	ldi	r24, 0x02	; 2
    61b2:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <HLED_enSetOFF>
			HLED_enSetOFF(HLED_GRN_ID);
    61b6:	83 e0       	ldi	r24, 0x03	; 3
    61b8:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <HLED_enSetOFF>
			HLED_enSetOFF(HLED_RED_ID);
    61bc:	81 e0       	ldi	r24, 0x01	; 1
    61be:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <HLED_enSetOFF>
			HLCD_ClearDisplay();
    61c2:	0e 94 b8 23 	call	0x4770	; 0x4770 <HLCD_ClearDisplay>
			HLCD_SendString("SYSTEM OFF");
    61c6:	82 e9       	ldi	r24, 0x92	; 146
    61c8:	90 e0       	ldi	r25, 0x00	; 0
    61ca:	0e 94 9b 23 	call	0x4736	; 0x4736 <HLCD_SendString>
    61ce:	e4 cc       	rjmp	.-1592   	; 0x5b98 <main+0x38a>

000061d0 <__mulsi3>:
    61d0:	62 9f       	mul	r22, r18
    61d2:	d0 01       	movw	r26, r0
    61d4:	73 9f       	mul	r23, r19
    61d6:	f0 01       	movw	r30, r0
    61d8:	82 9f       	mul	r24, r18
    61da:	e0 0d       	add	r30, r0
    61dc:	f1 1d       	adc	r31, r1
    61de:	64 9f       	mul	r22, r20
    61e0:	e0 0d       	add	r30, r0
    61e2:	f1 1d       	adc	r31, r1
    61e4:	92 9f       	mul	r25, r18
    61e6:	f0 0d       	add	r31, r0
    61e8:	83 9f       	mul	r24, r19
    61ea:	f0 0d       	add	r31, r0
    61ec:	74 9f       	mul	r23, r20
    61ee:	f0 0d       	add	r31, r0
    61f0:	65 9f       	mul	r22, r21
    61f2:	f0 0d       	add	r31, r0
    61f4:	99 27       	eor	r25, r25
    61f6:	72 9f       	mul	r23, r18
    61f8:	b0 0d       	add	r27, r0
    61fa:	e1 1d       	adc	r30, r1
    61fc:	f9 1f       	adc	r31, r25
    61fe:	63 9f       	mul	r22, r19
    6200:	b0 0d       	add	r27, r0
    6202:	e1 1d       	adc	r30, r1
    6204:	f9 1f       	adc	r31, r25
    6206:	bd 01       	movw	r22, r26
    6208:	cf 01       	movw	r24, r30
    620a:	11 24       	eor	r1, r1
    620c:	08 95       	ret

0000620e <__udivmodqi4>:
    620e:	99 1b       	sub	r25, r25
    6210:	79 e0       	ldi	r23, 0x09	; 9
    6212:	04 c0       	rjmp	.+8      	; 0x621c <__udivmodqi4_ep>

00006214 <__udivmodqi4_loop>:
    6214:	99 1f       	adc	r25, r25
    6216:	96 17       	cp	r25, r22
    6218:	08 f0       	brcs	.+2      	; 0x621c <__udivmodqi4_ep>
    621a:	96 1b       	sub	r25, r22

0000621c <__udivmodqi4_ep>:
    621c:	88 1f       	adc	r24, r24
    621e:	7a 95       	dec	r23
    6220:	c9 f7       	brne	.-14     	; 0x6214 <__udivmodqi4_loop>
    6222:	80 95       	com	r24
    6224:	08 95       	ret

00006226 <__divmodhi4>:
    6226:	97 fb       	bst	r25, 7
    6228:	09 2e       	mov	r0, r25
    622a:	07 26       	eor	r0, r23
    622c:	0a d0       	rcall	.+20     	; 0x6242 <__divmodhi4_neg1>
    622e:	77 fd       	sbrc	r23, 7
    6230:	04 d0       	rcall	.+8      	; 0x623a <__divmodhi4_neg2>
    6232:	49 d0       	rcall	.+146    	; 0x62c6 <__udivmodhi4>
    6234:	06 d0       	rcall	.+12     	; 0x6242 <__divmodhi4_neg1>
    6236:	00 20       	and	r0, r0
    6238:	1a f4       	brpl	.+6      	; 0x6240 <__divmodhi4_exit>

0000623a <__divmodhi4_neg2>:
    623a:	70 95       	com	r23
    623c:	61 95       	neg	r22
    623e:	7f 4f       	sbci	r23, 0xFF	; 255

00006240 <__divmodhi4_exit>:
    6240:	08 95       	ret

00006242 <__divmodhi4_neg1>:
    6242:	f6 f7       	brtc	.-4      	; 0x6240 <__divmodhi4_exit>
    6244:	90 95       	com	r25
    6246:	81 95       	neg	r24
    6248:	9f 4f       	sbci	r25, 0xFF	; 255
    624a:	08 95       	ret

0000624c <__udivmodsi4>:
    624c:	a1 e2       	ldi	r26, 0x21	; 33
    624e:	1a 2e       	mov	r1, r26
    6250:	aa 1b       	sub	r26, r26
    6252:	bb 1b       	sub	r27, r27
    6254:	fd 01       	movw	r30, r26
    6256:	0d c0       	rjmp	.+26     	; 0x6272 <__udivmodsi4_ep>

00006258 <__udivmodsi4_loop>:
    6258:	aa 1f       	adc	r26, r26
    625a:	bb 1f       	adc	r27, r27
    625c:	ee 1f       	adc	r30, r30
    625e:	ff 1f       	adc	r31, r31
    6260:	a2 17       	cp	r26, r18
    6262:	b3 07       	cpc	r27, r19
    6264:	e4 07       	cpc	r30, r20
    6266:	f5 07       	cpc	r31, r21
    6268:	20 f0       	brcs	.+8      	; 0x6272 <__udivmodsi4_ep>
    626a:	a2 1b       	sub	r26, r18
    626c:	b3 0b       	sbc	r27, r19
    626e:	e4 0b       	sbc	r30, r20
    6270:	f5 0b       	sbc	r31, r21

00006272 <__udivmodsi4_ep>:
    6272:	66 1f       	adc	r22, r22
    6274:	77 1f       	adc	r23, r23
    6276:	88 1f       	adc	r24, r24
    6278:	99 1f       	adc	r25, r25
    627a:	1a 94       	dec	r1
    627c:	69 f7       	brne	.-38     	; 0x6258 <__udivmodsi4_loop>
    627e:	60 95       	com	r22
    6280:	70 95       	com	r23
    6282:	80 95       	com	r24
    6284:	90 95       	com	r25
    6286:	9b 01       	movw	r18, r22
    6288:	ac 01       	movw	r20, r24
    628a:	bd 01       	movw	r22, r26
    628c:	cf 01       	movw	r24, r30
    628e:	08 95       	ret

00006290 <__divmodsi4>:
    6290:	97 fb       	bst	r25, 7
    6292:	09 2e       	mov	r0, r25
    6294:	05 26       	eor	r0, r21
    6296:	0e d0       	rcall	.+28     	; 0x62b4 <__divmodsi4_neg1>
    6298:	57 fd       	sbrc	r21, 7
    629a:	04 d0       	rcall	.+8      	; 0x62a4 <__divmodsi4_neg2>
    629c:	d7 df       	rcall	.-82     	; 0x624c <__udivmodsi4>
    629e:	0a d0       	rcall	.+20     	; 0x62b4 <__divmodsi4_neg1>
    62a0:	00 1c       	adc	r0, r0
    62a2:	38 f4       	brcc	.+14     	; 0x62b2 <__divmodsi4_exit>

000062a4 <__divmodsi4_neg2>:
    62a4:	50 95       	com	r21
    62a6:	40 95       	com	r20
    62a8:	30 95       	com	r19
    62aa:	21 95       	neg	r18
    62ac:	3f 4f       	sbci	r19, 0xFF	; 255
    62ae:	4f 4f       	sbci	r20, 0xFF	; 255
    62b0:	5f 4f       	sbci	r21, 0xFF	; 255

000062b2 <__divmodsi4_exit>:
    62b2:	08 95       	ret

000062b4 <__divmodsi4_neg1>:
    62b4:	f6 f7       	brtc	.-4      	; 0x62b2 <__divmodsi4_exit>
    62b6:	90 95       	com	r25
    62b8:	80 95       	com	r24
    62ba:	70 95       	com	r23
    62bc:	61 95       	neg	r22
    62be:	7f 4f       	sbci	r23, 0xFF	; 255
    62c0:	8f 4f       	sbci	r24, 0xFF	; 255
    62c2:	9f 4f       	sbci	r25, 0xFF	; 255
    62c4:	08 95       	ret

000062c6 <__udivmodhi4>:
    62c6:	aa 1b       	sub	r26, r26
    62c8:	bb 1b       	sub	r27, r27
    62ca:	51 e1       	ldi	r21, 0x11	; 17
    62cc:	07 c0       	rjmp	.+14     	; 0x62dc <__udivmodhi4_ep>

000062ce <__udivmodhi4_loop>:
    62ce:	aa 1f       	adc	r26, r26
    62d0:	bb 1f       	adc	r27, r27
    62d2:	a6 17       	cp	r26, r22
    62d4:	b7 07       	cpc	r27, r23
    62d6:	10 f0       	brcs	.+4      	; 0x62dc <__udivmodhi4_ep>
    62d8:	a6 1b       	sub	r26, r22
    62da:	b7 0b       	sbc	r27, r23

000062dc <__udivmodhi4_ep>:
    62dc:	88 1f       	adc	r24, r24
    62de:	99 1f       	adc	r25, r25
    62e0:	5a 95       	dec	r21
    62e2:	a9 f7       	brne	.-22     	; 0x62ce <__udivmodhi4_loop>
    62e4:	80 95       	com	r24
    62e6:	90 95       	com	r25
    62e8:	bc 01       	movw	r22, r24
    62ea:	cd 01       	movw	r24, r26
    62ec:	08 95       	ret

000062ee <__prologue_saves__>:
    62ee:	2f 92       	push	r2
    62f0:	3f 92       	push	r3
    62f2:	4f 92       	push	r4
    62f4:	5f 92       	push	r5
    62f6:	6f 92       	push	r6
    62f8:	7f 92       	push	r7
    62fa:	8f 92       	push	r8
    62fc:	9f 92       	push	r9
    62fe:	af 92       	push	r10
    6300:	bf 92       	push	r11
    6302:	cf 92       	push	r12
    6304:	df 92       	push	r13
    6306:	ef 92       	push	r14
    6308:	ff 92       	push	r15
    630a:	0f 93       	push	r16
    630c:	1f 93       	push	r17
    630e:	cf 93       	push	r28
    6310:	df 93       	push	r29
    6312:	cd b7       	in	r28, 0x3d	; 61
    6314:	de b7       	in	r29, 0x3e	; 62
    6316:	ca 1b       	sub	r28, r26
    6318:	db 0b       	sbc	r29, r27
    631a:	0f b6       	in	r0, 0x3f	; 63
    631c:	f8 94       	cli
    631e:	de bf       	out	0x3e, r29	; 62
    6320:	0f be       	out	0x3f, r0	; 63
    6322:	cd bf       	out	0x3d, r28	; 61
    6324:	09 94       	ijmp

00006326 <__epilogue_restores__>:
    6326:	2a 88       	ldd	r2, Y+18	; 0x12
    6328:	39 88       	ldd	r3, Y+17	; 0x11
    632a:	48 88       	ldd	r4, Y+16	; 0x10
    632c:	5f 84       	ldd	r5, Y+15	; 0x0f
    632e:	6e 84       	ldd	r6, Y+14	; 0x0e
    6330:	7d 84       	ldd	r7, Y+13	; 0x0d
    6332:	8c 84       	ldd	r8, Y+12	; 0x0c
    6334:	9b 84       	ldd	r9, Y+11	; 0x0b
    6336:	aa 84       	ldd	r10, Y+10	; 0x0a
    6338:	b9 84       	ldd	r11, Y+9	; 0x09
    633a:	c8 84       	ldd	r12, Y+8	; 0x08
    633c:	df 80       	ldd	r13, Y+7	; 0x07
    633e:	ee 80       	ldd	r14, Y+6	; 0x06
    6340:	fd 80       	ldd	r15, Y+5	; 0x05
    6342:	0c 81       	ldd	r16, Y+4	; 0x04
    6344:	1b 81       	ldd	r17, Y+3	; 0x03
    6346:	aa 81       	ldd	r26, Y+2	; 0x02
    6348:	b9 81       	ldd	r27, Y+1	; 0x01
    634a:	ce 0f       	add	r28, r30
    634c:	d1 1d       	adc	r29, r1
    634e:	0f b6       	in	r0, 0x3f	; 63
    6350:	f8 94       	cli
    6352:	de bf       	out	0x3e, r29	; 62
    6354:	0f be       	out	0x3f, r0	; 63
    6356:	cd bf       	out	0x3d, r28	; 61
    6358:	ed 01       	movw	r28, r26
    635a:	08 95       	ret

0000635c <ceil>:
    635c:	3b d0       	rcall	.+118    	; 0x63d4 <__fp_trunc>
    635e:	80 f0       	brcs	.+32     	; 0x6380 <ceil+0x24>
    6360:	9f 37       	cpi	r25, 0x7F	; 127
    6362:	40 f4       	brcc	.+16     	; 0x6374 <ceil+0x18>
    6364:	91 11       	cpse	r25, r1
    6366:	0e f4       	brtc	.+2      	; 0x636a <ceil+0xe>
    6368:	4d c0       	rjmp	.+154    	; 0x6404 <__fp_szero>
    636a:	60 e0       	ldi	r22, 0x00	; 0
    636c:	70 e0       	ldi	r23, 0x00	; 0
    636e:	80 e8       	ldi	r24, 0x80	; 128
    6370:	9f e3       	ldi	r25, 0x3F	; 63
    6372:	08 95       	ret
    6374:	26 f0       	brts	.+8      	; 0x637e <ceil+0x22>
    6376:	1b 16       	cp	r1, r27
    6378:	61 1d       	adc	r22, r1
    637a:	71 1d       	adc	r23, r1
    637c:	81 1d       	adc	r24, r1
    637e:	01 c0       	rjmp	.+2      	; 0x6382 <__fp_mintl>
    6380:	1b c0       	rjmp	.+54     	; 0x63b8 <__fp_mpack>

00006382 <__fp_mintl>:
    6382:	88 23       	and	r24, r24
    6384:	71 f4       	brne	.+28     	; 0x63a2 <__fp_mintl+0x20>
    6386:	77 23       	and	r23, r23
    6388:	21 f0       	breq	.+8      	; 0x6392 <__fp_mintl+0x10>
    638a:	98 50       	subi	r25, 0x08	; 8
    638c:	87 2b       	or	r24, r23
    638e:	76 2f       	mov	r23, r22
    6390:	07 c0       	rjmp	.+14     	; 0x63a0 <__fp_mintl+0x1e>
    6392:	66 23       	and	r22, r22
    6394:	11 f4       	brne	.+4      	; 0x639a <__fp_mintl+0x18>
    6396:	99 27       	eor	r25, r25
    6398:	0d c0       	rjmp	.+26     	; 0x63b4 <__fp_mintl+0x32>
    639a:	90 51       	subi	r25, 0x10	; 16
    639c:	86 2b       	or	r24, r22
    639e:	70 e0       	ldi	r23, 0x00	; 0
    63a0:	60 e0       	ldi	r22, 0x00	; 0
    63a2:	2a f0       	brmi	.+10     	; 0x63ae <__fp_mintl+0x2c>
    63a4:	9a 95       	dec	r25
    63a6:	66 0f       	add	r22, r22
    63a8:	77 1f       	adc	r23, r23
    63aa:	88 1f       	adc	r24, r24
    63ac:	da f7       	brpl	.-10     	; 0x63a4 <__fp_mintl+0x22>
    63ae:	88 0f       	add	r24, r24
    63b0:	96 95       	lsr	r25
    63b2:	87 95       	ror	r24
    63b4:	97 f9       	bld	r25, 7
    63b6:	08 95       	ret

000063b8 <__fp_mpack>:
    63b8:	9f 3f       	cpi	r25, 0xFF	; 255
    63ba:	31 f0       	breq	.+12     	; 0x63c8 <__fp_mpack_finite+0xc>

000063bc <__fp_mpack_finite>:
    63bc:	91 50       	subi	r25, 0x01	; 1
    63be:	20 f4       	brcc	.+8      	; 0x63c8 <__fp_mpack_finite+0xc>
    63c0:	87 95       	ror	r24
    63c2:	77 95       	ror	r23
    63c4:	67 95       	ror	r22
    63c6:	b7 95       	ror	r27
    63c8:	88 0f       	add	r24, r24
    63ca:	91 1d       	adc	r25, r1
    63cc:	96 95       	lsr	r25
    63ce:	87 95       	ror	r24
    63d0:	97 f9       	bld	r25, 7
    63d2:	08 95       	ret

000063d4 <__fp_trunc>:
    63d4:	25 d0       	rcall	.+74     	; 0x6420 <__fp_splitA>
    63d6:	a0 f0       	brcs	.+40     	; 0x6400 <__fp_trunc+0x2c>
    63d8:	be e7       	ldi	r27, 0x7E	; 126
    63da:	b9 17       	cp	r27, r25
    63dc:	88 f4       	brcc	.+34     	; 0x6400 <__fp_trunc+0x2c>
    63de:	bb 27       	eor	r27, r27
    63e0:	9f 38       	cpi	r25, 0x8F	; 143
    63e2:	60 f4       	brcc	.+24     	; 0x63fc <__fp_trunc+0x28>
    63e4:	16 16       	cp	r1, r22
    63e6:	b1 1d       	adc	r27, r1
    63e8:	67 2f       	mov	r22, r23
    63ea:	78 2f       	mov	r23, r24
    63ec:	88 27       	eor	r24, r24
    63ee:	98 5f       	subi	r25, 0xF8	; 248
    63f0:	f7 cf       	rjmp	.-18     	; 0x63e0 <__fp_trunc+0xc>
    63f2:	86 95       	lsr	r24
    63f4:	77 95       	ror	r23
    63f6:	67 95       	ror	r22
    63f8:	b1 1d       	adc	r27, r1
    63fa:	93 95       	inc	r25
    63fc:	96 39       	cpi	r25, 0x96	; 150
    63fe:	c8 f3       	brcs	.-14     	; 0x63f2 <__fp_trunc+0x1e>
    6400:	08 95       	ret

00006402 <__fp_zero>:
    6402:	e8 94       	clt

00006404 <__fp_szero>:
    6404:	bb 27       	eor	r27, r27
    6406:	66 27       	eor	r22, r22
    6408:	77 27       	eor	r23, r23
    640a:	cb 01       	movw	r24, r22
    640c:	97 f9       	bld	r25, 7
    640e:	08 95       	ret

00006410 <__fp_split3>:
    6410:	57 fd       	sbrc	r21, 7
    6412:	90 58       	subi	r25, 0x80	; 128
    6414:	44 0f       	add	r20, r20
    6416:	55 1f       	adc	r21, r21
    6418:	59 f0       	breq	.+22     	; 0x6430 <__fp_splitA+0x10>
    641a:	5f 3f       	cpi	r21, 0xFF	; 255
    641c:	71 f0       	breq	.+28     	; 0x643a <__fp_splitA+0x1a>
    641e:	47 95       	ror	r20

00006420 <__fp_splitA>:
    6420:	88 0f       	add	r24, r24
    6422:	97 fb       	bst	r25, 7
    6424:	99 1f       	adc	r25, r25
    6426:	61 f0       	breq	.+24     	; 0x6440 <__fp_splitA+0x20>
    6428:	9f 3f       	cpi	r25, 0xFF	; 255
    642a:	79 f0       	breq	.+30     	; 0x644a <__fp_splitA+0x2a>
    642c:	87 95       	ror	r24
    642e:	08 95       	ret
    6430:	12 16       	cp	r1, r18
    6432:	13 06       	cpc	r1, r19
    6434:	14 06       	cpc	r1, r20
    6436:	55 1f       	adc	r21, r21
    6438:	f2 cf       	rjmp	.-28     	; 0x641e <__fp_split3+0xe>
    643a:	46 95       	lsr	r20
    643c:	f1 df       	rcall	.-30     	; 0x6420 <__fp_splitA>
    643e:	08 c0       	rjmp	.+16     	; 0x6450 <__fp_splitA+0x30>
    6440:	16 16       	cp	r1, r22
    6442:	17 06       	cpc	r1, r23
    6444:	18 06       	cpc	r1, r24
    6446:	99 1f       	adc	r25, r25
    6448:	f1 cf       	rjmp	.-30     	; 0x642c <__fp_splitA+0xc>
    644a:	86 95       	lsr	r24
    644c:	71 05       	cpc	r23, r1
    644e:	61 05       	cpc	r22, r1
    6450:	08 94       	sec
    6452:	08 95       	ret

00006454 <_exit>:
    6454:	f8 94       	cli

00006456 <__stop_program>:
    6456:	ff cf       	rjmp	.-2      	; 0x6456 <__stop_program>
